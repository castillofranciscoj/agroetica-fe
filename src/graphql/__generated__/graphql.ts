/* eslint-disable */
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';
import { gql } from '@apollo/client';
import * as Apollo from '@apollo/client';
export type Maybe<T> = T | null;
export type InputMaybe<T> = Maybe<T>;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
export type MakeEmpty<T extends { [key: string]: unknown }, K extends keyof T> = { [_ in K]?: never };
export type Incremental<T> = T | { [P in keyof T]?: P extends ' $fragmentName' | '__typename' ? T[P] : never };
const defaultOptions = {} as const;
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: { input: string; output: string; }
  String: { input: string; output: string; }
  Boolean: { input: boolean; output: boolean; }
  Int: { input: number; output: number; }
  Float: { input: number; output: number; }
  DateTime: { input: any; output: any; }
  /** The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf). */
  JSON: { input: any; output: any; }
  /** The `Upload` scalar type represents a file upload. */
  Upload: { input: any; output: any; }
};

export type Activity = {
  __typename?: 'Activity';
  activity_date?: Maybe<Scalars['DateTime']['output']>;
  activity_type?: Maybe<Scalars['String']['output']>;
  equipment?: Maybe<Equipment>;
  field?: Maybe<Field>;
  gps_track?: Maybe<Scalars['JSON']['output']>;
  id: Scalars['ID']['output'];
  impact?: Maybe<ActivityImpact>;
  notes?: Maybe<Scalars['String']['output']>;
  operator?: Maybe<Operator>;
};

export type ActivityCreateInput = {
  activity_date?: InputMaybe<Scalars['DateTime']['input']>;
  activity_type?: InputMaybe<Scalars['String']['input']>;
  equipment?: InputMaybe<EquipmentRelateToOneForCreateInput>;
  field?: InputMaybe<FieldRelateToOneForCreateInput>;
  gps_track?: InputMaybe<Scalars['JSON']['input']>;
  impact?: InputMaybe<ActivityImpactRelateToOneForCreateInput>;
  notes?: InputMaybe<Scalars['String']['input']>;
  operator?: InputMaybe<OperatorRelateToOneForCreateInput>;
};

export type ActivityImpact = {
  __typename?: 'ActivityImpact';
  acidification_kg_so2eq?: Maybe<Scalars['Float']['output']>;
  activity?: Maybe<Activity>;
  biodiversity_eq?: Maybe<Scalars['Float']['output']>;
  direct_kg_co2e?: Maybe<Scalars['Float']['output']>;
  eutrophication_kg_po4eq?: Maybe<Scalars['Float']['output']>;
  id: Scalars['ID']['output'];
  indirect_kg_co2e?: Maybe<Scalars['Float']['output']>;
  water_m3?: Maybe<Scalars['Float']['output']>;
};

export type ActivityImpactCreateInput = {
  acidification_kg_so2eq?: InputMaybe<Scalars['Float']['input']>;
  activity?: InputMaybe<ActivityRelateToOneForCreateInput>;
  biodiversity_eq?: InputMaybe<Scalars['Float']['input']>;
  direct_kg_co2e?: InputMaybe<Scalars['Float']['input']>;
  eutrophication_kg_po4eq?: InputMaybe<Scalars['Float']['input']>;
  indirect_kg_co2e?: InputMaybe<Scalars['Float']['input']>;
  water_m3?: InputMaybe<Scalars['Float']['input']>;
};

export type ActivityImpactOrderByInput = {
  acidification_kg_so2eq?: InputMaybe<OrderDirection>;
  biodiversity_eq?: InputMaybe<OrderDirection>;
  direct_kg_co2e?: InputMaybe<OrderDirection>;
  eutrophication_kg_po4eq?: InputMaybe<OrderDirection>;
  id?: InputMaybe<OrderDirection>;
  indirect_kg_co2e?: InputMaybe<OrderDirection>;
  water_m3?: InputMaybe<OrderDirection>;
};

export type ActivityImpactRelateToOneForCreateInput = {
  connect?: InputMaybe<ActivityImpactWhereUniqueInput>;
  create?: InputMaybe<ActivityImpactCreateInput>;
};

export type ActivityImpactRelateToOneForUpdateInput = {
  connect?: InputMaybe<ActivityImpactWhereUniqueInput>;
  create?: InputMaybe<ActivityImpactCreateInput>;
  disconnect?: InputMaybe<Scalars['Boolean']['input']>;
};

export type ActivityImpactUpdateArgs = {
  data: ActivityImpactUpdateInput;
  where: ActivityImpactWhereUniqueInput;
};

export type ActivityImpactUpdateInput = {
  acidification_kg_so2eq?: InputMaybe<Scalars['Float']['input']>;
  activity?: InputMaybe<ActivityRelateToOneForUpdateInput>;
  biodiversity_eq?: InputMaybe<Scalars['Float']['input']>;
  direct_kg_co2e?: InputMaybe<Scalars['Float']['input']>;
  eutrophication_kg_po4eq?: InputMaybe<Scalars['Float']['input']>;
  indirect_kg_co2e?: InputMaybe<Scalars['Float']['input']>;
  water_m3?: InputMaybe<Scalars['Float']['input']>;
};

export type ActivityImpactWhereInput = {
  AND?: InputMaybe<Array<ActivityImpactWhereInput>>;
  NOT?: InputMaybe<Array<ActivityImpactWhereInput>>;
  OR?: InputMaybe<Array<ActivityImpactWhereInput>>;
  acidification_kg_so2eq?: InputMaybe<FloatNullableFilter>;
  activity?: InputMaybe<ActivityWhereInput>;
  biodiversity_eq?: InputMaybe<FloatNullableFilter>;
  direct_kg_co2e?: InputMaybe<FloatNullableFilter>;
  eutrophication_kg_po4eq?: InputMaybe<FloatNullableFilter>;
  id?: InputMaybe<IdFilter>;
  indirect_kg_co2e?: InputMaybe<FloatNullableFilter>;
  water_m3?: InputMaybe<FloatNullableFilter>;
};

export type ActivityImpactWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']['input']>;
};

export type ActivityManyRelationFilter = {
  every?: InputMaybe<ActivityWhereInput>;
  none?: InputMaybe<ActivityWhereInput>;
  some?: InputMaybe<ActivityWhereInput>;
};

export type ActivityOrderByInput = {
  activity_date?: InputMaybe<OrderDirection>;
  activity_type?: InputMaybe<OrderDirection>;
  id?: InputMaybe<OrderDirection>;
  notes?: InputMaybe<OrderDirection>;
};

export type ActivityRelateToManyForCreateInput = {
  connect?: InputMaybe<Array<ActivityWhereUniqueInput>>;
  create?: InputMaybe<Array<ActivityCreateInput>>;
};

export type ActivityRelateToManyForUpdateInput = {
  connect?: InputMaybe<Array<ActivityWhereUniqueInput>>;
  create?: InputMaybe<Array<ActivityCreateInput>>;
  disconnect?: InputMaybe<Array<ActivityWhereUniqueInput>>;
  set?: InputMaybe<Array<ActivityWhereUniqueInput>>;
};

export type ActivityRelateToOneForCreateInput = {
  connect?: InputMaybe<ActivityWhereUniqueInput>;
  create?: InputMaybe<ActivityCreateInput>;
};

export type ActivityRelateToOneForUpdateInput = {
  connect?: InputMaybe<ActivityWhereUniqueInput>;
  create?: InputMaybe<ActivityCreateInput>;
  disconnect?: InputMaybe<Scalars['Boolean']['input']>;
};

export type ActivityUpdateArgs = {
  data: ActivityUpdateInput;
  where: ActivityWhereUniqueInput;
};

export type ActivityUpdateInput = {
  activity_date?: InputMaybe<Scalars['DateTime']['input']>;
  activity_type?: InputMaybe<Scalars['String']['input']>;
  equipment?: InputMaybe<EquipmentRelateToOneForUpdateInput>;
  field?: InputMaybe<FieldRelateToOneForUpdateInput>;
  gps_track?: InputMaybe<Scalars['JSON']['input']>;
  impact?: InputMaybe<ActivityImpactRelateToOneForUpdateInput>;
  notes?: InputMaybe<Scalars['String']['input']>;
  operator?: InputMaybe<OperatorRelateToOneForUpdateInput>;
};

export type ActivityWhereInput = {
  AND?: InputMaybe<Array<ActivityWhereInput>>;
  NOT?: InputMaybe<Array<ActivityWhereInput>>;
  OR?: InputMaybe<Array<ActivityWhereInput>>;
  activity_date?: InputMaybe<DateTimeNullableFilter>;
  activity_type?: InputMaybe<StringFilter>;
  equipment?: InputMaybe<EquipmentWhereInput>;
  field?: InputMaybe<FieldWhereInput>;
  id?: InputMaybe<IdFilter>;
  impact?: InputMaybe<ActivityImpactWhereInput>;
  notes?: InputMaybe<StringFilter>;
  operator?: InputMaybe<OperatorWhereInput>;
};

export type ActivityWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']['input']>;
};

export type Alert = {
  __typename?: 'Alert';
  channel?: Maybe<Scalars['String']['output']>;
  createdAt?: Maybe<Scalars['DateTime']['output']>;
  due_date?: Maybe<Scalars['DateTime']['output']>;
  id: Scalars['ID']['output'];
  message?: Maybe<Scalars['String']['output']>;
  organisation?: Maybe<Organisation>;
  requireAcknowledgement?: Maybe<Scalars['Boolean']['output']>;
  rule?: Maybe<RegulatoryRule>;
  status?: Maybe<Scalars['String']['output']>;
  tags?: Maybe<Scalars['JSON']['output']>;
  updatedAt?: Maybe<Scalars['DateTime']['output']>;
  urgency?: Maybe<Scalars['String']['output']>;
  user?: Maybe<User>;
};

export type AlertCreateInput = {
  channel?: InputMaybe<Scalars['String']['input']>;
  createdAt?: InputMaybe<Scalars['DateTime']['input']>;
  due_date?: InputMaybe<Scalars['DateTime']['input']>;
  message?: InputMaybe<Scalars['String']['input']>;
  organisation?: InputMaybe<OrganisationRelateToOneForCreateInput>;
  requireAcknowledgement?: InputMaybe<Scalars['Boolean']['input']>;
  rule?: InputMaybe<RegulatoryRuleRelateToOneForCreateInput>;
  status?: InputMaybe<Scalars['String']['input']>;
  tags?: InputMaybe<Scalars['JSON']['input']>;
  updatedAt?: InputMaybe<Scalars['DateTime']['input']>;
  urgency?: InputMaybe<Scalars['String']['input']>;
  user?: InputMaybe<UserRelateToOneForCreateInput>;
};

export type AlertManyRelationFilter = {
  every?: InputMaybe<AlertWhereInput>;
  none?: InputMaybe<AlertWhereInput>;
  some?: InputMaybe<AlertWhereInput>;
};

export type AlertOrderByInput = {
  channel?: InputMaybe<OrderDirection>;
  createdAt?: InputMaybe<OrderDirection>;
  due_date?: InputMaybe<OrderDirection>;
  id?: InputMaybe<OrderDirection>;
  message?: InputMaybe<OrderDirection>;
  requireAcknowledgement?: InputMaybe<OrderDirection>;
  status?: InputMaybe<OrderDirection>;
  updatedAt?: InputMaybe<OrderDirection>;
  urgency?: InputMaybe<OrderDirection>;
};

export type AlertRelateToManyForCreateInput = {
  connect?: InputMaybe<Array<AlertWhereUniqueInput>>;
  create?: InputMaybe<Array<AlertCreateInput>>;
};

export type AlertRelateToManyForUpdateInput = {
  connect?: InputMaybe<Array<AlertWhereUniqueInput>>;
  create?: InputMaybe<Array<AlertCreateInput>>;
  disconnect?: InputMaybe<Array<AlertWhereUniqueInput>>;
  set?: InputMaybe<Array<AlertWhereUniqueInput>>;
};

export type AlertUpdateArgs = {
  data: AlertUpdateInput;
  where: AlertWhereUniqueInput;
};

export type AlertUpdateInput = {
  channel?: InputMaybe<Scalars['String']['input']>;
  createdAt?: InputMaybe<Scalars['DateTime']['input']>;
  due_date?: InputMaybe<Scalars['DateTime']['input']>;
  message?: InputMaybe<Scalars['String']['input']>;
  organisation?: InputMaybe<OrganisationRelateToOneForUpdateInput>;
  requireAcknowledgement?: InputMaybe<Scalars['Boolean']['input']>;
  rule?: InputMaybe<RegulatoryRuleRelateToOneForUpdateInput>;
  status?: InputMaybe<Scalars['String']['input']>;
  tags?: InputMaybe<Scalars['JSON']['input']>;
  updatedAt?: InputMaybe<Scalars['DateTime']['input']>;
  urgency?: InputMaybe<Scalars['String']['input']>;
  user?: InputMaybe<UserRelateToOneForUpdateInput>;
};

export type AlertWhereInput = {
  AND?: InputMaybe<Array<AlertWhereInput>>;
  NOT?: InputMaybe<Array<AlertWhereInput>>;
  OR?: InputMaybe<Array<AlertWhereInput>>;
  channel?: InputMaybe<StringNullableFilter>;
  createdAt?: InputMaybe<DateTimeNullableFilter>;
  due_date?: InputMaybe<DateTimeNullableFilter>;
  id?: InputMaybe<IdFilter>;
  message?: InputMaybe<StringFilter>;
  organisation?: InputMaybe<OrganisationWhereInput>;
  requireAcknowledgement?: InputMaybe<BooleanFilter>;
  rule?: InputMaybe<RegulatoryRuleWhereInput>;
  status?: InputMaybe<StringNullableFilter>;
  updatedAt?: InputMaybe<DateTimeNullableFilter>;
  urgency?: InputMaybe<StringNullableFilter>;
  user?: InputMaybe<UserWhereInput>;
};

export type AlertWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']['input']>;
};

export type Animal = {
  __typename?: 'Animal';
  box?: Maybe<Box>;
  breed?: Maybe<Breed>;
  dateOfBirth?: Maybe<Scalars['DateTime']['output']>;
  earTag?: Maybe<Scalars['String']['output']>;
  events?: Maybe<Array<AnimalEvent>>;
  eventsCount?: Maybe<Scalars['Int']['output']>;
  field?: Maybe<Field>;
  id: Scalars['ID']['output'];
  lastUpdated?: Maybe<Scalars['DateTime']['output']>;
  nationalId?: Maybe<Scalars['String']['output']>;
  photoUrl?: Maybe<Scalars['String']['output']>;
  productionOrientation?: Maybe<Scalars['String']['output']>;
  sex?: Maybe<Scalars['String']['output']>;
  status?: Maybe<Scalars['String']['output']>;
};


export type AnimalEventsArgs = {
  cursor?: InputMaybe<AnimalEventWhereUniqueInput>;
  orderBy?: Array<AnimalEventOrderByInput>;
  skip?: Scalars['Int']['input'];
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: AnimalEventWhereInput;
};


export type AnimalEventsCountArgs = {
  where?: AnimalEventWhereInput;
};

export type AnimalCreateInput = {
  box?: InputMaybe<BoxRelateToOneForCreateInput>;
  breed?: InputMaybe<BreedRelateToOneForCreateInput>;
  dateOfBirth?: InputMaybe<Scalars['DateTime']['input']>;
  earTag?: InputMaybe<Scalars['String']['input']>;
  events?: InputMaybe<AnimalEventRelateToManyForCreateInput>;
  field?: InputMaybe<FieldRelateToOneForCreateInput>;
  lastUpdated?: InputMaybe<Scalars['DateTime']['input']>;
  nationalId?: InputMaybe<Scalars['String']['input']>;
  photoUrl?: InputMaybe<Scalars['String']['input']>;
  productionOrientation?: InputMaybe<Scalars['String']['input']>;
  sex?: InputMaybe<Scalars['String']['input']>;
  status?: InputMaybe<Scalars['String']['input']>;
};

export type AnimalEvent = {
  __typename?: 'AnimalEvent';
  animal?: Maybe<Animal>;
  eventDate?: Maybe<Scalars['DateTime']['output']>;
  eventType?: Maybe<Scalars['String']['output']>;
  id: Scalars['ID']['output'];
  notes?: Maybe<Scalars['String']['output']>;
  product?: Maybe<Product>;
};

export type AnimalEventCreateInput = {
  animal?: InputMaybe<AnimalRelateToOneForCreateInput>;
  eventDate?: InputMaybe<Scalars['DateTime']['input']>;
  eventType?: InputMaybe<Scalars['String']['input']>;
  notes?: InputMaybe<Scalars['String']['input']>;
  product?: InputMaybe<ProductRelateToOneForCreateInput>;
};

export type AnimalEventManyRelationFilter = {
  every?: InputMaybe<AnimalEventWhereInput>;
  none?: InputMaybe<AnimalEventWhereInput>;
  some?: InputMaybe<AnimalEventWhereInput>;
};

export type AnimalEventOrderByInput = {
  eventDate?: InputMaybe<OrderDirection>;
  eventType?: InputMaybe<OrderDirection>;
  id?: InputMaybe<OrderDirection>;
  notes?: InputMaybe<OrderDirection>;
};

export type AnimalEventRelateToManyForCreateInput = {
  connect?: InputMaybe<Array<AnimalEventWhereUniqueInput>>;
  create?: InputMaybe<Array<AnimalEventCreateInput>>;
};

export type AnimalEventRelateToManyForUpdateInput = {
  connect?: InputMaybe<Array<AnimalEventWhereUniqueInput>>;
  create?: InputMaybe<Array<AnimalEventCreateInput>>;
  disconnect?: InputMaybe<Array<AnimalEventWhereUniqueInput>>;
  set?: InputMaybe<Array<AnimalEventWhereUniqueInput>>;
};

export type AnimalEventUpdateArgs = {
  data: AnimalEventUpdateInput;
  where: AnimalEventWhereUniqueInput;
};

export type AnimalEventUpdateInput = {
  animal?: InputMaybe<AnimalRelateToOneForUpdateInput>;
  eventDate?: InputMaybe<Scalars['DateTime']['input']>;
  eventType?: InputMaybe<Scalars['String']['input']>;
  notes?: InputMaybe<Scalars['String']['input']>;
  product?: InputMaybe<ProductRelateToOneForUpdateInput>;
};

export type AnimalEventWhereInput = {
  AND?: InputMaybe<Array<AnimalEventWhereInput>>;
  NOT?: InputMaybe<Array<AnimalEventWhereInput>>;
  OR?: InputMaybe<Array<AnimalEventWhereInput>>;
  animal?: InputMaybe<AnimalWhereInput>;
  eventDate?: InputMaybe<DateTimeNullableFilter>;
  eventType?: InputMaybe<StringNullableFilter>;
  id?: InputMaybe<IdFilter>;
  notes?: InputMaybe<StringFilter>;
  product?: InputMaybe<ProductWhereInput>;
};

export type AnimalEventWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']['input']>;
};

export type AnimalManyRelationFilter = {
  every?: InputMaybe<AnimalWhereInput>;
  none?: InputMaybe<AnimalWhereInput>;
  some?: InputMaybe<AnimalWhereInput>;
};

export type AnimalOrderByInput = {
  dateOfBirth?: InputMaybe<OrderDirection>;
  earTag?: InputMaybe<OrderDirection>;
  id?: InputMaybe<OrderDirection>;
  lastUpdated?: InputMaybe<OrderDirection>;
  nationalId?: InputMaybe<OrderDirection>;
  photoUrl?: InputMaybe<OrderDirection>;
  productionOrientation?: InputMaybe<OrderDirection>;
  sex?: InputMaybe<OrderDirection>;
  status?: InputMaybe<OrderDirection>;
};

export type AnimalRelateToManyForCreateInput = {
  connect?: InputMaybe<Array<AnimalWhereUniqueInput>>;
  create?: InputMaybe<Array<AnimalCreateInput>>;
};

export type AnimalRelateToManyForUpdateInput = {
  connect?: InputMaybe<Array<AnimalWhereUniqueInput>>;
  create?: InputMaybe<Array<AnimalCreateInput>>;
  disconnect?: InputMaybe<Array<AnimalWhereUniqueInput>>;
  set?: InputMaybe<Array<AnimalWhereUniqueInput>>;
};

export type AnimalRelateToOneForCreateInput = {
  connect?: InputMaybe<AnimalWhereUniqueInput>;
  create?: InputMaybe<AnimalCreateInput>;
};

export type AnimalRelateToOneForUpdateInput = {
  connect?: InputMaybe<AnimalWhereUniqueInput>;
  create?: InputMaybe<AnimalCreateInput>;
  disconnect?: InputMaybe<Scalars['Boolean']['input']>;
};

export type AnimalUpdateArgs = {
  data: AnimalUpdateInput;
  where: AnimalWhereUniqueInput;
};

export type AnimalUpdateInput = {
  box?: InputMaybe<BoxRelateToOneForUpdateInput>;
  breed?: InputMaybe<BreedRelateToOneForUpdateInput>;
  dateOfBirth?: InputMaybe<Scalars['DateTime']['input']>;
  earTag?: InputMaybe<Scalars['String']['input']>;
  events?: InputMaybe<AnimalEventRelateToManyForUpdateInput>;
  field?: InputMaybe<FieldRelateToOneForUpdateInput>;
  lastUpdated?: InputMaybe<Scalars['DateTime']['input']>;
  nationalId?: InputMaybe<Scalars['String']['input']>;
  photoUrl?: InputMaybe<Scalars['String']['input']>;
  productionOrientation?: InputMaybe<Scalars['String']['input']>;
  sex?: InputMaybe<Scalars['String']['input']>;
  status?: InputMaybe<Scalars['String']['input']>;
};

export type AnimalWhereInput = {
  AND?: InputMaybe<Array<AnimalWhereInput>>;
  NOT?: InputMaybe<Array<AnimalWhereInput>>;
  OR?: InputMaybe<Array<AnimalWhereInput>>;
  box?: InputMaybe<BoxWhereInput>;
  breed?: InputMaybe<BreedWhereInput>;
  dateOfBirth?: InputMaybe<DateTimeNullableFilter>;
  earTag?: InputMaybe<StringFilter>;
  events?: InputMaybe<AnimalEventManyRelationFilter>;
  field?: InputMaybe<FieldWhereInput>;
  id?: InputMaybe<IdFilter>;
  lastUpdated?: InputMaybe<DateTimeNullableFilter>;
  nationalId?: InputMaybe<StringFilter>;
  photoUrl?: InputMaybe<StringFilter>;
  productionOrientation?: InputMaybe<StringNullableFilter>;
  sex?: InputMaybe<StringNullableFilter>;
  status?: InputMaybe<StringNullableFilter>;
};

export type AnimalWhereUniqueInput = {
  earTag?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['ID']['input']>;
};

export type Application = {
  __typename?: 'Application';
  appliedAt?: Maybe<Scalars['DateTime']['output']>;
  candidate?: Maybe<JobCandidate>;
  id: Scalars['ID']['output'];
  interviews?: Maybe<Array<Interview>>;
  interviewsCount?: Maybe<Scalars['Int']['output']>;
  job?: Maybe<JobOpening>;
  params?: Maybe<Scalars['JSON']['output']>;
  status?: Maybe<ApplicationStatus>;
  updatedAt?: Maybe<Scalars['DateTime']['output']>;
};


export type ApplicationInterviewsArgs = {
  cursor?: InputMaybe<InterviewWhereUniqueInput>;
  orderBy?: Array<InterviewOrderByInput>;
  skip?: Scalars['Int']['input'];
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InterviewWhereInput;
};


export type ApplicationInterviewsCountArgs = {
  where?: InterviewWhereInput;
};

export type ApplicationCreateInput = {
  appliedAt?: InputMaybe<Scalars['DateTime']['input']>;
  candidate?: InputMaybe<JobCandidateRelateToOneForCreateInput>;
  interviews?: InputMaybe<InterviewRelateToManyForCreateInput>;
  job?: InputMaybe<JobOpeningRelateToOneForCreateInput>;
  params?: InputMaybe<Scalars['JSON']['input']>;
  status?: InputMaybe<ApplicationStatusRelateToOneForCreateInput>;
  updatedAt?: InputMaybe<Scalars['DateTime']['input']>;
};

export type ApplicationManyRelationFilter = {
  every?: InputMaybe<ApplicationWhereInput>;
  none?: InputMaybe<ApplicationWhereInput>;
  some?: InputMaybe<ApplicationWhereInput>;
};

export type ApplicationOrderByInput = {
  appliedAt?: InputMaybe<OrderDirection>;
  id?: InputMaybe<OrderDirection>;
  updatedAt?: InputMaybe<OrderDirection>;
};

export type ApplicationRelateToManyForCreateInput = {
  connect?: InputMaybe<Array<ApplicationWhereUniqueInput>>;
  create?: InputMaybe<Array<ApplicationCreateInput>>;
};

export type ApplicationRelateToManyForUpdateInput = {
  connect?: InputMaybe<Array<ApplicationWhereUniqueInput>>;
  create?: InputMaybe<Array<ApplicationCreateInput>>;
  disconnect?: InputMaybe<Array<ApplicationWhereUniqueInput>>;
  set?: InputMaybe<Array<ApplicationWhereUniqueInput>>;
};

export type ApplicationRelateToOneForCreateInput = {
  connect?: InputMaybe<ApplicationWhereUniqueInput>;
  create?: InputMaybe<ApplicationCreateInput>;
};

export type ApplicationRelateToOneForUpdateInput = {
  connect?: InputMaybe<ApplicationWhereUniqueInput>;
  create?: InputMaybe<ApplicationCreateInput>;
  disconnect?: InputMaybe<Scalars['Boolean']['input']>;
};

export type ApplicationStatus = {
  __typename?: 'ApplicationStatus';
  applications?: Maybe<Array<Application>>;
  applicationsCount?: Maybe<Scalars['Int']['output']>;
  id: Scalars['ID']['output'];
  key?: Maybe<Scalars['String']['output']>;
  labelKey?: Maybe<Scalars['String']['output']>;
  order?: Maybe<Scalars['Int']['output']>;
};


export type ApplicationStatusApplicationsArgs = {
  cursor?: InputMaybe<ApplicationWhereUniqueInput>;
  orderBy?: Array<ApplicationOrderByInput>;
  skip?: Scalars['Int']['input'];
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: ApplicationWhereInput;
};


export type ApplicationStatusApplicationsCountArgs = {
  where?: ApplicationWhereInput;
};

export type ApplicationStatusCreateInput = {
  applications?: InputMaybe<ApplicationRelateToManyForCreateInput>;
  key?: InputMaybe<Scalars['String']['input']>;
  labelKey?: InputMaybe<Scalars['String']['input']>;
  order?: InputMaybe<Scalars['Int']['input']>;
};

export type ApplicationStatusOrderByInput = {
  id?: InputMaybe<OrderDirection>;
  key?: InputMaybe<OrderDirection>;
  labelKey?: InputMaybe<OrderDirection>;
  order?: InputMaybe<OrderDirection>;
};

export type ApplicationStatusRelateToOneForCreateInput = {
  connect?: InputMaybe<ApplicationStatusWhereUniqueInput>;
  create?: InputMaybe<ApplicationStatusCreateInput>;
};

export type ApplicationStatusRelateToOneForUpdateInput = {
  connect?: InputMaybe<ApplicationStatusWhereUniqueInput>;
  create?: InputMaybe<ApplicationStatusCreateInput>;
  disconnect?: InputMaybe<Scalars['Boolean']['input']>;
};

export type ApplicationStatusUpdateArgs = {
  data: ApplicationStatusUpdateInput;
  where: ApplicationStatusWhereUniqueInput;
};

export type ApplicationStatusUpdateInput = {
  applications?: InputMaybe<ApplicationRelateToManyForUpdateInput>;
  key?: InputMaybe<Scalars['String']['input']>;
  labelKey?: InputMaybe<Scalars['String']['input']>;
  order?: InputMaybe<Scalars['Int']['input']>;
};

export type ApplicationStatusWhereInput = {
  AND?: InputMaybe<Array<ApplicationStatusWhereInput>>;
  NOT?: InputMaybe<Array<ApplicationStatusWhereInput>>;
  OR?: InputMaybe<Array<ApplicationStatusWhereInput>>;
  applications?: InputMaybe<ApplicationManyRelationFilter>;
  id?: InputMaybe<IdFilter>;
  key?: InputMaybe<StringFilter>;
  labelKey?: InputMaybe<StringFilter>;
  order?: InputMaybe<IntFilter>;
};

export type ApplicationStatusWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']['input']>;
  key?: InputMaybe<Scalars['String']['input']>;
};

export type ApplicationUpdateArgs = {
  data: ApplicationUpdateInput;
  where: ApplicationWhereUniqueInput;
};

export type ApplicationUpdateInput = {
  appliedAt?: InputMaybe<Scalars['DateTime']['input']>;
  candidate?: InputMaybe<JobCandidateRelateToOneForUpdateInput>;
  interviews?: InputMaybe<InterviewRelateToManyForUpdateInput>;
  job?: InputMaybe<JobOpeningRelateToOneForUpdateInput>;
  params?: InputMaybe<Scalars['JSON']['input']>;
  status?: InputMaybe<ApplicationStatusRelateToOneForUpdateInput>;
  updatedAt?: InputMaybe<Scalars['DateTime']['input']>;
};

export type ApplicationWhereInput = {
  AND?: InputMaybe<Array<ApplicationWhereInput>>;
  NOT?: InputMaybe<Array<ApplicationWhereInput>>;
  OR?: InputMaybe<Array<ApplicationWhereInput>>;
  appliedAt?: InputMaybe<DateTimeNullableFilter>;
  candidate?: InputMaybe<JobCandidateWhereInput>;
  id?: InputMaybe<IdFilter>;
  interviews?: InputMaybe<InterviewManyRelationFilter>;
  job?: InputMaybe<JobOpeningWhereInput>;
  status?: InputMaybe<ApplicationStatusWhereInput>;
  updatedAt?: InputMaybe<DateTimeNullableFilter>;
};

export type ApplicationWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']['input']>;
};

export type AuthenticatedItem = User;

export type Author = {
  __typename?: 'Author';
  avatar?: Maybe<ImageFieldOutput>;
  bio?: Maybe<Scalars['String']['output']>;
  createdAt?: Maybe<Scalars['DateTime']['output']>;
  email?: Maybe<Scalars['String']['output']>;
  id: Scalars['ID']['output'];
  name?: Maybe<Scalars['String']['output']>;
  posts?: Maybe<Array<Post>>;
  postsCount?: Maybe<Scalars['Int']['output']>;
};


export type AuthorPostsArgs = {
  cursor?: InputMaybe<PostWhereUniqueInput>;
  orderBy?: Array<PostOrderByInput>;
  skip?: Scalars['Int']['input'];
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: PostWhereInput;
};


export type AuthorPostsCountArgs = {
  where?: PostWhereInput;
};

export type AuthorCreateInput = {
  avatar?: InputMaybe<ImageFieldInput>;
  bio?: InputMaybe<Scalars['String']['input']>;
  createdAt?: InputMaybe<Scalars['DateTime']['input']>;
  email?: InputMaybe<Scalars['String']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
  posts?: InputMaybe<PostRelateToManyForCreateInput>;
};

export type AuthorOrderByInput = {
  bio?: InputMaybe<OrderDirection>;
  createdAt?: InputMaybe<OrderDirection>;
  email?: InputMaybe<OrderDirection>;
  id?: InputMaybe<OrderDirection>;
  name?: InputMaybe<OrderDirection>;
};

export type AuthorRelateToOneForCreateInput = {
  connect?: InputMaybe<AuthorWhereUniqueInput>;
  create?: InputMaybe<AuthorCreateInput>;
};

export type AuthorRelateToOneForUpdateInput = {
  connect?: InputMaybe<AuthorWhereUniqueInput>;
  create?: InputMaybe<AuthorCreateInput>;
  disconnect?: InputMaybe<Scalars['Boolean']['input']>;
};

export type AuthorUpdateArgs = {
  data: AuthorUpdateInput;
  where: AuthorWhereUniqueInput;
};

export type AuthorUpdateInput = {
  avatar?: InputMaybe<ImageFieldInput>;
  bio?: InputMaybe<Scalars['String']['input']>;
  createdAt?: InputMaybe<Scalars['DateTime']['input']>;
  email?: InputMaybe<Scalars['String']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
  posts?: InputMaybe<PostRelateToManyForUpdateInput>;
};

export type AuthorWhereInput = {
  AND?: InputMaybe<Array<AuthorWhereInput>>;
  NOT?: InputMaybe<Array<AuthorWhereInput>>;
  OR?: InputMaybe<Array<AuthorWhereInput>>;
  bio?: InputMaybe<StringFilter>;
  createdAt?: InputMaybe<DateTimeNullableFilter>;
  email?: InputMaybe<StringFilter>;
  id?: InputMaybe<IdFilter>;
  name?: InputMaybe<StringFilter>;
  posts?: InputMaybe<PostManyRelationFilter>;
};

export type AuthorWhereUniqueInput = {
  email?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['ID']['input']>;
};

export type Barn = {
  __typename?: 'Barn';
  activities?: Maybe<Array<BarnActivity>>;
  activitiesCount?: Maybe<Scalars['Int']['output']>;
  aslCode?: Maybe<Scalars['String']['output']>;
  boxes?: Maybe<Array<Box>>;
  boxesCount?: Maybe<Scalars['Int']['output']>;
  farm?: Maybe<Farm>;
  feedSilos?: Maybe<Array<FeedSilo>>;
  feedSilosCount?: Maybe<Scalars['Int']['output']>;
  geometry?: Maybe<Scalars['JSON']['output']>;
  id: Scalars['ID']['output'];
  milkingEvents?: Maybe<Array<MilkingEvent>>;
  milkingEventsCount?: Maybe<Scalars['Int']['output']>;
  name?: Maybe<Scalars['String']['output']>;
  productionOrientation?: Maybe<Scalars['String']['output']>;
  welfareScore?: Maybe<Scalars['Float']['output']>;
};


export type BarnActivitiesArgs = {
  cursor?: InputMaybe<BarnActivityWhereUniqueInput>;
  orderBy?: Array<BarnActivityOrderByInput>;
  skip?: Scalars['Int']['input'];
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: BarnActivityWhereInput;
};


export type BarnActivitiesCountArgs = {
  where?: BarnActivityWhereInput;
};


export type BarnBoxesArgs = {
  cursor?: InputMaybe<BoxWhereUniqueInput>;
  orderBy?: Array<BoxOrderByInput>;
  skip?: Scalars['Int']['input'];
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: BoxWhereInput;
};


export type BarnBoxesCountArgs = {
  where?: BoxWhereInput;
};


export type BarnFeedSilosArgs = {
  cursor?: InputMaybe<FeedSiloWhereUniqueInput>;
  orderBy?: Array<FeedSiloOrderByInput>;
  skip?: Scalars['Int']['input'];
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: FeedSiloWhereInput;
};


export type BarnFeedSilosCountArgs = {
  where?: FeedSiloWhereInput;
};


export type BarnMilkingEventsArgs = {
  cursor?: InputMaybe<MilkingEventWhereUniqueInput>;
  orderBy?: Array<MilkingEventOrderByInput>;
  skip?: Scalars['Int']['input'];
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: MilkingEventWhereInput;
};


export type BarnMilkingEventsCountArgs = {
  where?: MilkingEventWhereInput;
};

export type BarnActivity = {
  __typename?: 'BarnActivity';
  activityType?: Maybe<Scalars['String']['output']>;
  barn?: Maybe<Barn>;
  box?: Maybe<Box>;
  date?: Maybe<Scalars['DateTime']['output']>;
  duration_h?: Maybe<Scalars['Float']['output']>;
  id: Scalars['ID']['output'];
  operator?: Maybe<Operator>;
};

export type BarnActivityCreateInput = {
  activityType?: InputMaybe<Scalars['String']['input']>;
  barn?: InputMaybe<BarnRelateToOneForCreateInput>;
  box?: InputMaybe<BoxRelateToOneForCreateInput>;
  date?: InputMaybe<Scalars['DateTime']['input']>;
  duration_h?: InputMaybe<Scalars['Float']['input']>;
  operator?: InputMaybe<OperatorRelateToOneForCreateInput>;
};

export type BarnActivityManyRelationFilter = {
  every?: InputMaybe<BarnActivityWhereInput>;
  none?: InputMaybe<BarnActivityWhereInput>;
  some?: InputMaybe<BarnActivityWhereInput>;
};

export type BarnActivityOrderByInput = {
  activityType?: InputMaybe<OrderDirection>;
  date?: InputMaybe<OrderDirection>;
  duration_h?: InputMaybe<OrderDirection>;
  id?: InputMaybe<OrderDirection>;
};

export type BarnActivityRelateToManyForCreateInput = {
  connect?: InputMaybe<Array<BarnActivityWhereUniqueInput>>;
  create?: InputMaybe<Array<BarnActivityCreateInput>>;
};

export type BarnActivityRelateToManyForUpdateInput = {
  connect?: InputMaybe<Array<BarnActivityWhereUniqueInput>>;
  create?: InputMaybe<Array<BarnActivityCreateInput>>;
  disconnect?: InputMaybe<Array<BarnActivityWhereUniqueInput>>;
  set?: InputMaybe<Array<BarnActivityWhereUniqueInput>>;
};

export type BarnActivityUpdateArgs = {
  data: BarnActivityUpdateInput;
  where: BarnActivityWhereUniqueInput;
};

export type BarnActivityUpdateInput = {
  activityType?: InputMaybe<Scalars['String']['input']>;
  barn?: InputMaybe<BarnRelateToOneForUpdateInput>;
  box?: InputMaybe<BoxRelateToOneForUpdateInput>;
  date?: InputMaybe<Scalars['DateTime']['input']>;
  duration_h?: InputMaybe<Scalars['Float']['input']>;
  operator?: InputMaybe<OperatorRelateToOneForUpdateInput>;
};

export type BarnActivityWhereInput = {
  AND?: InputMaybe<Array<BarnActivityWhereInput>>;
  NOT?: InputMaybe<Array<BarnActivityWhereInput>>;
  OR?: InputMaybe<Array<BarnActivityWhereInput>>;
  activityType?: InputMaybe<StringFilter>;
  barn?: InputMaybe<BarnWhereInput>;
  box?: InputMaybe<BoxWhereInput>;
  date?: InputMaybe<DateTimeNullableFilter>;
  duration_h?: InputMaybe<FloatNullableFilter>;
  id?: InputMaybe<IdFilter>;
  operator?: InputMaybe<OperatorWhereInput>;
};

export type BarnActivityWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']['input']>;
};

export type BarnCreateInput = {
  activities?: InputMaybe<BarnActivityRelateToManyForCreateInput>;
  aslCode?: InputMaybe<Scalars['String']['input']>;
  boxes?: InputMaybe<BoxRelateToManyForCreateInput>;
  farm?: InputMaybe<FarmRelateToOneForCreateInput>;
  feedSilos?: InputMaybe<FeedSiloRelateToManyForCreateInput>;
  geometry?: InputMaybe<Scalars['JSON']['input']>;
  milkingEvents?: InputMaybe<MilkingEventRelateToManyForCreateInput>;
  name?: InputMaybe<Scalars['String']['input']>;
  productionOrientation?: InputMaybe<Scalars['String']['input']>;
  welfareScore?: InputMaybe<Scalars['Float']['input']>;
};

export type BarnManyRelationFilter = {
  every?: InputMaybe<BarnWhereInput>;
  none?: InputMaybe<BarnWhereInput>;
  some?: InputMaybe<BarnWhereInput>;
};

export type BarnOrderByInput = {
  aslCode?: InputMaybe<OrderDirection>;
  id?: InputMaybe<OrderDirection>;
  name?: InputMaybe<OrderDirection>;
  productionOrientation?: InputMaybe<OrderDirection>;
  welfareScore?: InputMaybe<OrderDirection>;
};

export type BarnRelateToManyForCreateInput = {
  connect?: InputMaybe<Array<BarnWhereUniqueInput>>;
  create?: InputMaybe<Array<BarnCreateInput>>;
};

export type BarnRelateToManyForUpdateInput = {
  connect?: InputMaybe<Array<BarnWhereUniqueInput>>;
  create?: InputMaybe<Array<BarnCreateInput>>;
  disconnect?: InputMaybe<Array<BarnWhereUniqueInput>>;
  set?: InputMaybe<Array<BarnWhereUniqueInput>>;
};

export type BarnRelateToOneForCreateInput = {
  connect?: InputMaybe<BarnWhereUniqueInput>;
  create?: InputMaybe<BarnCreateInput>;
};

export type BarnRelateToOneForUpdateInput = {
  connect?: InputMaybe<BarnWhereUniqueInput>;
  create?: InputMaybe<BarnCreateInput>;
  disconnect?: InputMaybe<Scalars['Boolean']['input']>;
};

export type BarnUpdateArgs = {
  data: BarnUpdateInput;
  where: BarnWhereUniqueInput;
};

export type BarnUpdateInput = {
  activities?: InputMaybe<BarnActivityRelateToManyForUpdateInput>;
  aslCode?: InputMaybe<Scalars['String']['input']>;
  boxes?: InputMaybe<BoxRelateToManyForUpdateInput>;
  farm?: InputMaybe<FarmRelateToOneForUpdateInput>;
  feedSilos?: InputMaybe<FeedSiloRelateToManyForUpdateInput>;
  geometry?: InputMaybe<Scalars['JSON']['input']>;
  milkingEvents?: InputMaybe<MilkingEventRelateToManyForUpdateInput>;
  name?: InputMaybe<Scalars['String']['input']>;
  productionOrientation?: InputMaybe<Scalars['String']['input']>;
  welfareScore?: InputMaybe<Scalars['Float']['input']>;
};

export type BarnWhereInput = {
  AND?: InputMaybe<Array<BarnWhereInput>>;
  NOT?: InputMaybe<Array<BarnWhereInput>>;
  OR?: InputMaybe<Array<BarnWhereInput>>;
  activities?: InputMaybe<BarnActivityManyRelationFilter>;
  aslCode?: InputMaybe<StringFilter>;
  boxes?: InputMaybe<BoxManyRelationFilter>;
  farm?: InputMaybe<FarmWhereInput>;
  feedSilos?: InputMaybe<FeedSiloManyRelationFilter>;
  id?: InputMaybe<IdFilter>;
  milkingEvents?: InputMaybe<MilkingEventManyRelationFilter>;
  name?: InputMaybe<StringFilter>;
  productionOrientation?: InputMaybe<StringNullableFilter>;
  welfareScore?: InputMaybe<FloatNullableFilter>;
};

export type BarnWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']['input']>;
};

export type BooleanFilter = {
  equals?: InputMaybe<Scalars['Boolean']['input']>;
  not?: InputMaybe<BooleanFilter>;
};

export type Box = {
  __typename?: 'Box';
  animals?: Maybe<Array<Animal>>;
  animalsCount?: Maybe<Scalars['Int']['output']>;
  barn?: Maybe<Barn>;
  beddingType?: Maybe<Scalars['String']['output']>;
  capacity_head?: Maybe<Scalars['Int']['output']>;
  floorArea_m2?: Maybe<Scalars['Float']['output']>;
  id: Scalars['ID']['output'];
  name?: Maybe<Scalars['String']['output']>;
  paddockArea_m2?: Maybe<Scalars['Float']['output']>;
  phase?: Maybe<Scalars['String']['output']>;
};


export type BoxAnimalsArgs = {
  cursor?: InputMaybe<AnimalWhereUniqueInput>;
  orderBy?: Array<AnimalOrderByInput>;
  skip?: Scalars['Int']['input'];
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: AnimalWhereInput;
};


export type BoxAnimalsCountArgs = {
  where?: AnimalWhereInput;
};

export type BoxCreateInput = {
  animals?: InputMaybe<AnimalRelateToManyForCreateInput>;
  barn?: InputMaybe<BarnRelateToOneForCreateInput>;
  beddingType?: InputMaybe<Scalars['String']['input']>;
  capacity_head?: InputMaybe<Scalars['Int']['input']>;
  floorArea_m2?: InputMaybe<Scalars['Float']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
  paddockArea_m2?: InputMaybe<Scalars['Float']['input']>;
  phase?: InputMaybe<Scalars['String']['input']>;
};

export type BoxManyRelationFilter = {
  every?: InputMaybe<BoxWhereInput>;
  none?: InputMaybe<BoxWhereInput>;
  some?: InputMaybe<BoxWhereInput>;
};

export type BoxOrderByInput = {
  beddingType?: InputMaybe<OrderDirection>;
  capacity_head?: InputMaybe<OrderDirection>;
  floorArea_m2?: InputMaybe<OrderDirection>;
  id?: InputMaybe<OrderDirection>;
  name?: InputMaybe<OrderDirection>;
  paddockArea_m2?: InputMaybe<OrderDirection>;
  phase?: InputMaybe<OrderDirection>;
};

export type BoxRelateToManyForCreateInput = {
  connect?: InputMaybe<Array<BoxWhereUniqueInput>>;
  create?: InputMaybe<Array<BoxCreateInput>>;
};

export type BoxRelateToManyForUpdateInput = {
  connect?: InputMaybe<Array<BoxWhereUniqueInput>>;
  create?: InputMaybe<Array<BoxCreateInput>>;
  disconnect?: InputMaybe<Array<BoxWhereUniqueInput>>;
  set?: InputMaybe<Array<BoxWhereUniqueInput>>;
};

export type BoxRelateToOneForCreateInput = {
  connect?: InputMaybe<BoxWhereUniqueInput>;
  create?: InputMaybe<BoxCreateInput>;
};

export type BoxRelateToOneForUpdateInput = {
  connect?: InputMaybe<BoxWhereUniqueInput>;
  create?: InputMaybe<BoxCreateInput>;
  disconnect?: InputMaybe<Scalars['Boolean']['input']>;
};

export type BoxUpdateArgs = {
  data: BoxUpdateInput;
  where: BoxWhereUniqueInput;
};

export type BoxUpdateInput = {
  animals?: InputMaybe<AnimalRelateToManyForUpdateInput>;
  barn?: InputMaybe<BarnRelateToOneForUpdateInput>;
  beddingType?: InputMaybe<Scalars['String']['input']>;
  capacity_head?: InputMaybe<Scalars['Int']['input']>;
  floorArea_m2?: InputMaybe<Scalars['Float']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
  paddockArea_m2?: InputMaybe<Scalars['Float']['input']>;
  phase?: InputMaybe<Scalars['String']['input']>;
};

export type BoxWhereInput = {
  AND?: InputMaybe<Array<BoxWhereInput>>;
  NOT?: InputMaybe<Array<BoxWhereInput>>;
  OR?: InputMaybe<Array<BoxWhereInput>>;
  animals?: InputMaybe<AnimalManyRelationFilter>;
  barn?: InputMaybe<BarnWhereInput>;
  beddingType?: InputMaybe<StringFilter>;
  capacity_head?: InputMaybe<IntNullableFilter>;
  floorArea_m2?: InputMaybe<FloatNullableFilter>;
  id?: InputMaybe<IdFilter>;
  name?: InputMaybe<StringFilter>;
  paddockArea_m2?: InputMaybe<FloatNullableFilter>;
  phase?: InputMaybe<StringNullableFilter>;
};

export type BoxWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']['input']>;
};

export type Breed = {
  __typename?: 'Breed';
  animals?: Maybe<Array<Animal>>;
  animalsCount?: Maybe<Scalars['Int']['output']>;
  description?: Maybe<Scalars['String']['output']>;
  id: Scalars['ID']['output'];
  name?: Maybe<Scalars['String']['output']>;
  photoUrl?: Maybe<Scalars['String']['output']>;
};


export type BreedAnimalsArgs = {
  cursor?: InputMaybe<AnimalWhereUniqueInput>;
  orderBy?: Array<AnimalOrderByInput>;
  skip?: Scalars['Int']['input'];
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: AnimalWhereInput;
};


export type BreedAnimalsCountArgs = {
  where?: AnimalWhereInput;
};

export type BreedCreateInput = {
  animals?: InputMaybe<AnimalRelateToManyForCreateInput>;
  description?: InputMaybe<Scalars['String']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
  photoUrl?: InputMaybe<Scalars['String']['input']>;
};

export type BreedOrderByInput = {
  description?: InputMaybe<OrderDirection>;
  id?: InputMaybe<OrderDirection>;
  name?: InputMaybe<OrderDirection>;
  photoUrl?: InputMaybe<OrderDirection>;
};

export type BreedRelateToOneForCreateInput = {
  connect?: InputMaybe<BreedWhereUniqueInput>;
  create?: InputMaybe<BreedCreateInput>;
};

export type BreedRelateToOneForUpdateInput = {
  connect?: InputMaybe<BreedWhereUniqueInput>;
  create?: InputMaybe<BreedCreateInput>;
  disconnect?: InputMaybe<Scalars['Boolean']['input']>;
};

export type BreedUpdateArgs = {
  data: BreedUpdateInput;
  where: BreedWhereUniqueInput;
};

export type BreedUpdateInput = {
  animals?: InputMaybe<AnimalRelateToManyForUpdateInput>;
  description?: InputMaybe<Scalars['String']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
  photoUrl?: InputMaybe<Scalars['String']['input']>;
};

export type BreedWhereInput = {
  AND?: InputMaybe<Array<BreedWhereInput>>;
  NOT?: InputMaybe<Array<BreedWhereInput>>;
  OR?: InputMaybe<Array<BreedWhereInput>>;
  animals?: InputMaybe<AnimalManyRelationFilter>;
  description?: InputMaybe<StringFilter>;
  id?: InputMaybe<IdFilter>;
  name?: InputMaybe<StringFilter>;
  photoUrl?: InputMaybe<StringFilter>;
};

export type BreedWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']['input']>;
};

export type CarbonOffsetFactor = {
  __typename?: 'CarbonOffsetFactor';
  cropType?: Maybe<CropType>;
  id: Scalars['ID']['output'];
  max?: Maybe<Scalars['Float']['output']>;
  mean?: Maybe<Scalars['Float']['output']>;
  min?: Maybe<Scalars['Float']['output']>;
  sustainablePractice?: Maybe<SustainablePractice>;
};

export type CarbonOffsetFactorCreateInput = {
  cropType?: InputMaybe<CropTypeRelateToOneForCreateInput>;
  max?: InputMaybe<Scalars['Float']['input']>;
  mean?: InputMaybe<Scalars['Float']['input']>;
  min?: InputMaybe<Scalars['Float']['input']>;
  sustainablePractice?: InputMaybe<SustainablePracticeRelateToOneForCreateInput>;
};

export type CarbonOffsetFactorManyRelationFilter = {
  every?: InputMaybe<CarbonOffsetFactorWhereInput>;
  none?: InputMaybe<CarbonOffsetFactorWhereInput>;
  some?: InputMaybe<CarbonOffsetFactorWhereInput>;
};

export type CarbonOffsetFactorOrderByInput = {
  id?: InputMaybe<OrderDirection>;
  max?: InputMaybe<OrderDirection>;
  mean?: InputMaybe<OrderDirection>;
  min?: InputMaybe<OrderDirection>;
};

export type CarbonOffsetFactorRelateToManyForCreateInput = {
  connect?: InputMaybe<Array<CarbonOffsetFactorWhereUniqueInput>>;
  create?: InputMaybe<Array<CarbonOffsetFactorCreateInput>>;
};

export type CarbonOffsetFactorRelateToManyForUpdateInput = {
  connect?: InputMaybe<Array<CarbonOffsetFactorWhereUniqueInput>>;
  create?: InputMaybe<Array<CarbonOffsetFactorCreateInput>>;
  disconnect?: InputMaybe<Array<CarbonOffsetFactorWhereUniqueInput>>;
  set?: InputMaybe<Array<CarbonOffsetFactorWhereUniqueInput>>;
};

export type CarbonOffsetFactorUpdateArgs = {
  data: CarbonOffsetFactorUpdateInput;
  where: CarbonOffsetFactorWhereUniqueInput;
};

export type CarbonOffsetFactorUpdateInput = {
  cropType?: InputMaybe<CropTypeRelateToOneForUpdateInput>;
  max?: InputMaybe<Scalars['Float']['input']>;
  mean?: InputMaybe<Scalars['Float']['input']>;
  min?: InputMaybe<Scalars['Float']['input']>;
  sustainablePractice?: InputMaybe<SustainablePracticeRelateToOneForUpdateInput>;
};

export type CarbonOffsetFactorWhereInput = {
  AND?: InputMaybe<Array<CarbonOffsetFactorWhereInput>>;
  NOT?: InputMaybe<Array<CarbonOffsetFactorWhereInput>>;
  OR?: InputMaybe<Array<CarbonOffsetFactorWhereInput>>;
  cropType?: InputMaybe<CropTypeWhereInput>;
  id?: InputMaybe<IdFilter>;
  max?: InputMaybe<FloatNullableFilter>;
  mean?: InputMaybe<FloatNullableFilter>;
  min?: InputMaybe<FloatNullableFilter>;
  sustainablePractice?: InputMaybe<SustainablePracticeWhereInput>;
};

export type CarbonOffsetFactorWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']['input']>;
};

export type Category = {
  __typename?: 'Category';
  id: Scalars['ID']['output'];
  name?: Maybe<Scalars['String']['output']>;
  posts?: Maybe<Array<Post>>;
  postsCount?: Maybe<Scalars['Int']['output']>;
};


export type CategoryPostsArgs = {
  cursor?: InputMaybe<PostWhereUniqueInput>;
  orderBy?: Array<PostOrderByInput>;
  skip?: Scalars['Int']['input'];
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: PostWhereInput;
};


export type CategoryPostsCountArgs = {
  where?: PostWhereInput;
};

export type CategoryCreateInput = {
  name?: InputMaybe<Scalars['String']['input']>;
  posts?: InputMaybe<PostRelateToManyForCreateInput>;
};

export type CategoryKpi = {
  __typename?: 'CategoryKPI';
  id: Scalars['ID']['output'];
  kpis?: Maybe<Array<Kpi>>;
  kpisCount?: Maybe<Scalars['Int']['output']>;
  name?: Maybe<Scalars['String']['output']>;
};


export type CategoryKpiKpisArgs = {
  cursor?: InputMaybe<KpiWhereUniqueInput>;
  orderBy?: Array<KpiOrderByInput>;
  skip?: Scalars['Int']['input'];
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: KpiWhereInput;
};


export type CategoryKpiKpisCountArgs = {
  where?: KpiWhereInput;
};

export type CategoryKpiCreateInput = {
  kpis?: InputMaybe<KpiRelateToManyForCreateInput>;
  name?: InputMaybe<Scalars['String']['input']>;
};

export type CategoryKpiOrderByInput = {
  id?: InputMaybe<OrderDirection>;
  name?: InputMaybe<OrderDirection>;
};

export type CategoryKpiRelateToOneForCreateInput = {
  connect?: InputMaybe<CategoryKpiWhereUniqueInput>;
  create?: InputMaybe<CategoryKpiCreateInput>;
};

export type CategoryKpiRelateToOneForUpdateInput = {
  connect?: InputMaybe<CategoryKpiWhereUniqueInput>;
  create?: InputMaybe<CategoryKpiCreateInput>;
  disconnect?: InputMaybe<Scalars['Boolean']['input']>;
};

export type CategoryKpiUpdateArgs = {
  data: CategoryKpiUpdateInput;
  where: CategoryKpiWhereUniqueInput;
};

export type CategoryKpiUpdateInput = {
  kpis?: InputMaybe<KpiRelateToManyForUpdateInput>;
  name?: InputMaybe<Scalars['String']['input']>;
};

export type CategoryKpiWhereInput = {
  AND?: InputMaybe<Array<CategoryKpiWhereInput>>;
  NOT?: InputMaybe<Array<CategoryKpiWhereInput>>;
  OR?: InputMaybe<Array<CategoryKpiWhereInput>>;
  id?: InputMaybe<IdFilter>;
  kpis?: InputMaybe<KpiManyRelationFilter>;
  name?: InputMaybe<StringFilter>;
};

export type CategoryKpiWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']['input']>;
};

export type CategoryOrderByInput = {
  id?: InputMaybe<OrderDirection>;
  name?: InputMaybe<OrderDirection>;
};

export type CategoryRelateToOneForCreateInput = {
  connect?: InputMaybe<CategoryWhereUniqueInput>;
  create?: InputMaybe<CategoryCreateInput>;
};

export type CategoryRelateToOneForUpdateInput = {
  connect?: InputMaybe<CategoryWhereUniqueInput>;
  create?: InputMaybe<CategoryCreateInput>;
  disconnect?: InputMaybe<Scalars['Boolean']['input']>;
};

export type CategoryUpdateArgs = {
  data: CategoryUpdateInput;
  where: CategoryWhereUniqueInput;
};

export type CategoryUpdateInput = {
  name?: InputMaybe<Scalars['String']['input']>;
  posts?: InputMaybe<PostRelateToManyForUpdateInput>;
};

export type CategoryWhereInput = {
  AND?: InputMaybe<Array<CategoryWhereInput>>;
  NOT?: InputMaybe<Array<CategoryWhereInput>>;
  OR?: InputMaybe<Array<CategoryWhereInput>>;
  id?: InputMaybe<IdFilter>;
  name?: InputMaybe<StringFilter>;
  posts?: InputMaybe<PostManyRelationFilter>;
};

export type CategoryWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']['input']>;
};

export type Chat = {
  __typename?: 'Chat';
  createdAt?: Maybe<Scalars['DateTime']['output']>;
  createdBy?: Maybe<User>;
  id: Scalars['ID']['output'];
  messages?: Maybe<Scalars['JSON']['output']>;
  title?: Maybe<Scalars['String']['output']>;
};

export type ChatCreateInput = {
  createdAt?: InputMaybe<Scalars['DateTime']['input']>;
  createdBy?: InputMaybe<UserRelateToOneForCreateInput>;
  messages?: InputMaybe<Scalars['JSON']['input']>;
  title?: InputMaybe<Scalars['String']['input']>;
};

export type ChatManyRelationFilter = {
  every?: InputMaybe<ChatWhereInput>;
  none?: InputMaybe<ChatWhereInput>;
  some?: InputMaybe<ChatWhereInput>;
};

export type ChatOrderByInput = {
  createdAt?: InputMaybe<OrderDirection>;
  id?: InputMaybe<OrderDirection>;
  title?: InputMaybe<OrderDirection>;
};

export type ChatRelateToManyForCreateInput = {
  connect?: InputMaybe<Array<ChatWhereUniqueInput>>;
  create?: InputMaybe<Array<ChatCreateInput>>;
};

export type ChatRelateToManyForUpdateInput = {
  connect?: InputMaybe<Array<ChatWhereUniqueInput>>;
  create?: InputMaybe<Array<ChatCreateInput>>;
  disconnect?: InputMaybe<Array<ChatWhereUniqueInput>>;
  set?: InputMaybe<Array<ChatWhereUniqueInput>>;
};

export type ChatUpdateArgs = {
  data: ChatUpdateInput;
  where: ChatWhereUniqueInput;
};

export type ChatUpdateInput = {
  createdAt?: InputMaybe<Scalars['DateTime']['input']>;
  createdBy?: InputMaybe<UserRelateToOneForUpdateInput>;
  messages?: InputMaybe<Scalars['JSON']['input']>;
  title?: InputMaybe<Scalars['String']['input']>;
};

export type ChatWhereInput = {
  AND?: InputMaybe<Array<ChatWhereInput>>;
  NOT?: InputMaybe<Array<ChatWhereInput>>;
  OR?: InputMaybe<Array<ChatWhereInput>>;
  createdAt?: InputMaybe<DateTimeNullableFilter>;
  createdBy?: InputMaybe<UserWhereInput>;
  id?: InputMaybe<IdFilter>;
  title?: InputMaybe<StringFilter>;
};

export type ChatWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']['input']>;
};

export type CreateInitialUserInput = {
  email?: InputMaybe<Scalars['String']['input']>;
  isAdmin?: InputMaybe<Scalars['Boolean']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
  password?: InputMaybe<Scalars['String']['input']>;
};

export type Crop = {
  __typename?: 'Crop';
  boundary?: Maybe<Scalars['JSON']['output']>;
  cropAreaHectares?: Maybe<Scalars['Float']['output']>;
  cropType?: Maybe<CropType>;
  field?: Maybe<Field>;
  id: Scalars['ID']['output'];
  photoUrl?: Maybe<Scalars['String']['output']>;
  plantedDate?: Maybe<Scalars['DateTime']['output']>;
};

export type CropCreateInput = {
  boundary?: InputMaybe<Scalars['JSON']['input']>;
  cropAreaHectares?: InputMaybe<Scalars['Float']['input']>;
  cropType?: InputMaybe<CropTypeRelateToOneForCreateInput>;
  field?: InputMaybe<FieldRelateToOneForCreateInput>;
  photoUrl?: InputMaybe<Scalars['String']['input']>;
  plantedDate?: InputMaybe<Scalars['DateTime']['input']>;
};

export type CropManyRelationFilter = {
  every?: InputMaybe<CropWhereInput>;
  none?: InputMaybe<CropWhereInput>;
  some?: InputMaybe<CropWhereInput>;
};

export type CropOrderByInput = {
  cropAreaHectares?: InputMaybe<OrderDirection>;
  id?: InputMaybe<OrderDirection>;
  photoUrl?: InputMaybe<OrderDirection>;
  plantedDate?: InputMaybe<OrderDirection>;
};

export type CropRelateToManyForCreateInput = {
  connect?: InputMaybe<Array<CropWhereUniqueInput>>;
  create?: InputMaybe<Array<CropCreateInput>>;
};

export type CropRelateToManyForUpdateInput = {
  connect?: InputMaybe<Array<CropWhereUniqueInput>>;
  create?: InputMaybe<Array<CropCreateInput>>;
  disconnect?: InputMaybe<Array<CropWhereUniqueInput>>;
  set?: InputMaybe<Array<CropWhereUniqueInput>>;
};

export type CropType = {
  __typename?: 'CropType';
  carbonOffsetFactors?: Maybe<Array<CarbonOffsetFactor>>;
  carbonOffsetFactorsCount?: Maybe<Scalars['Int']['output']>;
  crops?: Maybe<Array<Crop>>;
  cropsCount?: Maybe<Scalars['Int']['output']>;
  id: Scalars['ID']['output'];
  name?: Maybe<Scalars['String']['output']>;
};


export type CropTypeCarbonOffsetFactorsArgs = {
  cursor?: InputMaybe<CarbonOffsetFactorWhereUniqueInput>;
  orderBy?: Array<CarbonOffsetFactorOrderByInput>;
  skip?: Scalars['Int']['input'];
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: CarbonOffsetFactorWhereInput;
};


export type CropTypeCarbonOffsetFactorsCountArgs = {
  where?: CarbonOffsetFactorWhereInput;
};


export type CropTypeCropsArgs = {
  cursor?: InputMaybe<CropWhereUniqueInput>;
  orderBy?: Array<CropOrderByInput>;
  skip?: Scalars['Int']['input'];
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: CropWhereInput;
};


export type CropTypeCropsCountArgs = {
  where?: CropWhereInput;
};

export type CropTypeCreateInput = {
  carbonOffsetFactors?: InputMaybe<CarbonOffsetFactorRelateToManyForCreateInput>;
  crops?: InputMaybe<CropRelateToManyForCreateInput>;
  name?: InputMaybe<Scalars['String']['input']>;
};

export type CropTypeOrderByInput = {
  id?: InputMaybe<OrderDirection>;
  name?: InputMaybe<OrderDirection>;
};

export type CropTypeRelateToOneForCreateInput = {
  connect?: InputMaybe<CropTypeWhereUniqueInput>;
  create?: InputMaybe<CropTypeCreateInput>;
};

export type CropTypeRelateToOneForUpdateInput = {
  connect?: InputMaybe<CropTypeWhereUniqueInput>;
  create?: InputMaybe<CropTypeCreateInput>;
  disconnect?: InputMaybe<Scalars['Boolean']['input']>;
};

export type CropTypeUpdateArgs = {
  data: CropTypeUpdateInput;
  where: CropTypeWhereUniqueInput;
};

export type CropTypeUpdateInput = {
  carbonOffsetFactors?: InputMaybe<CarbonOffsetFactorRelateToManyForUpdateInput>;
  crops?: InputMaybe<CropRelateToManyForUpdateInput>;
  name?: InputMaybe<Scalars['String']['input']>;
};

export type CropTypeWhereInput = {
  AND?: InputMaybe<Array<CropTypeWhereInput>>;
  NOT?: InputMaybe<Array<CropTypeWhereInput>>;
  OR?: InputMaybe<Array<CropTypeWhereInput>>;
  carbonOffsetFactors?: InputMaybe<CarbonOffsetFactorManyRelationFilter>;
  crops?: InputMaybe<CropManyRelationFilter>;
  id?: InputMaybe<IdFilter>;
  name?: InputMaybe<StringFilter>;
};

export type CropTypeWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']['input']>;
};

export type CropUpdateArgs = {
  data: CropUpdateInput;
  where: CropWhereUniqueInput;
};

export type CropUpdateInput = {
  boundary?: InputMaybe<Scalars['JSON']['input']>;
  cropAreaHectares?: InputMaybe<Scalars['Float']['input']>;
  cropType?: InputMaybe<CropTypeRelateToOneForUpdateInput>;
  field?: InputMaybe<FieldRelateToOneForUpdateInput>;
  photoUrl?: InputMaybe<Scalars['String']['input']>;
  plantedDate?: InputMaybe<Scalars['DateTime']['input']>;
};

export type CropWhereInput = {
  AND?: InputMaybe<Array<CropWhereInput>>;
  NOT?: InputMaybe<Array<CropWhereInput>>;
  OR?: InputMaybe<Array<CropWhereInput>>;
  cropAreaHectares?: InputMaybe<FloatNullableFilter>;
  cropType?: InputMaybe<CropTypeWhereInput>;
  field?: InputMaybe<FieldWhereInput>;
  id?: InputMaybe<IdFilter>;
  photoUrl?: InputMaybe<StringFilter>;
  plantedDate?: InputMaybe<DateTimeNullableFilter>;
};

export type CropWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']['input']>;
};

export type DateTimeFilter = {
  equals?: InputMaybe<Scalars['DateTime']['input']>;
  gt?: InputMaybe<Scalars['DateTime']['input']>;
  gte?: InputMaybe<Scalars['DateTime']['input']>;
  in?: InputMaybe<Array<Scalars['DateTime']['input']>>;
  lt?: InputMaybe<Scalars['DateTime']['input']>;
  lte?: InputMaybe<Scalars['DateTime']['input']>;
  not?: InputMaybe<DateTimeFilter>;
  notIn?: InputMaybe<Array<Scalars['DateTime']['input']>>;
};

export type DateTimeNullableFilter = {
  equals?: InputMaybe<Scalars['DateTime']['input']>;
  gt?: InputMaybe<Scalars['DateTime']['input']>;
  gte?: InputMaybe<Scalars['DateTime']['input']>;
  in?: InputMaybe<Array<Scalars['DateTime']['input']>>;
  lt?: InputMaybe<Scalars['DateTime']['input']>;
  lte?: InputMaybe<Scalars['DateTime']['input']>;
  not?: InputMaybe<DateTimeNullableFilter>;
  notIn?: InputMaybe<Array<Scalars['DateTime']['input']>>;
};

export type Document = {
  __typename?: 'Document';
  id: Scalars['ID']['output'];
  title?: Maybe<Scalars['String']['output']>;
  uploadedAt?: Maybe<Scalars['DateTime']['output']>;
  url?: Maybe<Scalars['String']['output']>;
};

export type DocumentCreateInput = {
  title?: InputMaybe<Scalars['String']['input']>;
  uploadedAt?: InputMaybe<Scalars['DateTime']['input']>;
  url?: InputMaybe<Scalars['String']['input']>;
};

export type DocumentOrderByInput = {
  id?: InputMaybe<OrderDirection>;
  title?: InputMaybe<OrderDirection>;
  uploadedAt?: InputMaybe<OrderDirection>;
  url?: InputMaybe<OrderDirection>;
};

export type DocumentUpdateArgs = {
  data: DocumentUpdateInput;
  where: DocumentWhereUniqueInput;
};

export type DocumentUpdateInput = {
  title?: InputMaybe<Scalars['String']['input']>;
  uploadedAt?: InputMaybe<Scalars['DateTime']['input']>;
  url?: InputMaybe<Scalars['String']['input']>;
};

export type DocumentWhereInput = {
  AND?: InputMaybe<Array<DocumentWhereInput>>;
  NOT?: InputMaybe<Array<DocumentWhereInput>>;
  OR?: InputMaybe<Array<DocumentWhereInput>>;
  id?: InputMaybe<IdFilter>;
  title?: InputMaybe<StringFilter>;
  uploadedAt?: InputMaybe<DateTimeNullableFilter>;
  url?: InputMaybe<StringFilter>;
};

export type DocumentWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']['input']>;
};

export type EcoScheme = {
  __typename?: 'EcoScheme';
  id: Scalars['ID']['output'];
  name?: Maybe<Scalars['String']['output']>;
  payment_eur_per_ha?: Maybe<Scalars['Float']['output']>;
  rule_logic_json?: Maybe<Scalars['JSON']['output']>;
};

export type EcoSchemeCreateInput = {
  name?: InputMaybe<Scalars['String']['input']>;
  payment_eur_per_ha?: InputMaybe<Scalars['Float']['input']>;
  rule_logic_json?: InputMaybe<Scalars['JSON']['input']>;
};

export type EcoSchemeOrderByInput = {
  id?: InputMaybe<OrderDirection>;
  name?: InputMaybe<OrderDirection>;
  payment_eur_per_ha?: InputMaybe<OrderDirection>;
};

export type EcoSchemeUpdateArgs = {
  data: EcoSchemeUpdateInput;
  where: EcoSchemeWhereUniqueInput;
};

export type EcoSchemeUpdateInput = {
  name?: InputMaybe<Scalars['String']['input']>;
  payment_eur_per_ha?: InputMaybe<Scalars['Float']['input']>;
  rule_logic_json?: InputMaybe<Scalars['JSON']['input']>;
};

export type EcoSchemeWhereInput = {
  AND?: InputMaybe<Array<EcoSchemeWhereInput>>;
  NOT?: InputMaybe<Array<EcoSchemeWhereInput>>;
  OR?: InputMaybe<Array<EcoSchemeWhereInput>>;
  id?: InputMaybe<IdFilter>;
  name?: InputMaybe<StringFilter>;
  payment_eur_per_ha?: InputMaybe<FloatNullableFilter>;
};

export type EcoSchemeWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']['input']>;
};

export type EmissionScenario = {
  __typename?: 'EmissionScenario';
  description?: Maybe<Scalars['String']['output']>;
  farm?: Maybe<Farm>;
  id: Scalars['ID']['output'];
  name?: Maybe<Scalars['String']['output']>;
  parameters_json?: Maybe<Scalars['JSON']['output']>;
  projected_10yr_carbon_sequestration_t?: Maybe<Scalars['Float']['output']>;
  projected_emission_reduction_kg_co2e?: Maybe<Scalars['Float']['output']>;
};

export type EmissionScenarioCreateInput = {
  description?: InputMaybe<Scalars['String']['input']>;
  farm?: InputMaybe<FarmRelateToOneForCreateInput>;
  name?: InputMaybe<Scalars['String']['input']>;
  parameters_json?: InputMaybe<Scalars['JSON']['input']>;
  projected_10yr_carbon_sequestration_t?: InputMaybe<Scalars['Float']['input']>;
  projected_emission_reduction_kg_co2e?: InputMaybe<Scalars['Float']['input']>;
};

export type EmissionScenarioOrderByInput = {
  description?: InputMaybe<OrderDirection>;
  id?: InputMaybe<OrderDirection>;
  name?: InputMaybe<OrderDirection>;
  projected_10yr_carbon_sequestration_t?: InputMaybe<OrderDirection>;
  projected_emission_reduction_kg_co2e?: InputMaybe<OrderDirection>;
};

export type EmissionScenarioUpdateArgs = {
  data: EmissionScenarioUpdateInput;
  where: EmissionScenarioWhereUniqueInput;
};

export type EmissionScenarioUpdateInput = {
  description?: InputMaybe<Scalars['String']['input']>;
  farm?: InputMaybe<FarmRelateToOneForUpdateInput>;
  name?: InputMaybe<Scalars['String']['input']>;
  parameters_json?: InputMaybe<Scalars['JSON']['input']>;
  projected_10yr_carbon_sequestration_t?: InputMaybe<Scalars['Float']['input']>;
  projected_emission_reduction_kg_co2e?: InputMaybe<Scalars['Float']['input']>;
};

export type EmissionScenarioWhereInput = {
  AND?: InputMaybe<Array<EmissionScenarioWhereInput>>;
  NOT?: InputMaybe<Array<EmissionScenarioWhereInput>>;
  OR?: InputMaybe<Array<EmissionScenarioWhereInput>>;
  description?: InputMaybe<StringFilter>;
  farm?: InputMaybe<FarmWhereInput>;
  id?: InputMaybe<IdFilter>;
  name?: InputMaybe<StringFilter>;
  projected_10yr_carbon_sequestration_t?: InputMaybe<FloatNullableFilter>;
  projected_emission_reduction_kg_co2e?: InputMaybe<FloatNullableFilter>;
};

export type EmissionScenarioWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']['input']>;
};

export type Equipment = {
  __typename?: 'Equipment';
  farm?: Maybe<Farm>;
  id: Scalars['ID']['output'];
  name?: Maybe<Scalars['String']['output']>;
};

export type EquipmentCreateInput = {
  farm?: InputMaybe<FarmRelateToOneForCreateInput>;
  name?: InputMaybe<Scalars['String']['input']>;
};

export type EquipmentOrderByInput = {
  id?: InputMaybe<OrderDirection>;
  name?: InputMaybe<OrderDirection>;
};

export type EquipmentRelateToOneForCreateInput = {
  connect?: InputMaybe<EquipmentWhereUniqueInput>;
  create?: InputMaybe<EquipmentCreateInput>;
};

export type EquipmentRelateToOneForUpdateInput = {
  connect?: InputMaybe<EquipmentWhereUniqueInput>;
  create?: InputMaybe<EquipmentCreateInput>;
  disconnect?: InputMaybe<Scalars['Boolean']['input']>;
};

export type EquipmentUpdateArgs = {
  data: EquipmentUpdateInput;
  where: EquipmentWhereUniqueInput;
};

export type EquipmentUpdateInput = {
  farm?: InputMaybe<FarmRelateToOneForUpdateInput>;
  name?: InputMaybe<Scalars['String']['input']>;
};

export type EquipmentWhereInput = {
  AND?: InputMaybe<Array<EquipmentWhereInput>>;
  NOT?: InputMaybe<Array<EquipmentWhereInput>>;
  OR?: InputMaybe<Array<EquipmentWhereInput>>;
  farm?: InputMaybe<FarmWhereInput>;
  id?: InputMaybe<IdFilter>;
  name?: InputMaybe<StringFilter>;
};

export type EquipmentWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']['input']>;
};

export type Farm = {
  __typename?: 'Farm';
  barns?: Maybe<Array<Barn>>;
  barnsCount?: Maybe<Scalars['Int']['output']>;
  createdAt?: Maybe<Scalars['DateTime']['output']>;
  createdBy?: Maybe<User>;
  fields?: Maybe<Array<Field>>;
  fieldsCount?: Maybe<Scalars['Int']['output']>;
  id: Scalars['ID']['output'];
  isDefault?: Maybe<Scalars['Boolean']['output']>;
  location?: Maybe<Scalars['JSON']['output']>;
  name?: Maybe<Scalars['String']['output']>;
  organisation?: Maybe<Organisation>;
};


export type FarmBarnsArgs = {
  cursor?: InputMaybe<BarnWhereUniqueInput>;
  orderBy?: Array<BarnOrderByInput>;
  skip?: Scalars['Int']['input'];
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: BarnWhereInput;
};


export type FarmBarnsCountArgs = {
  where?: BarnWhereInput;
};


export type FarmFieldsArgs = {
  cursor?: InputMaybe<FieldWhereUniqueInput>;
  orderBy?: Array<FieldOrderByInput>;
  skip?: Scalars['Int']['input'];
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: FieldWhereInput;
};


export type FarmFieldsCountArgs = {
  where?: FieldWhereInput;
};

export type FarmCreateInput = {
  barns?: InputMaybe<BarnRelateToManyForCreateInput>;
  createdAt?: InputMaybe<Scalars['DateTime']['input']>;
  createdBy?: InputMaybe<UserRelateToOneForCreateInput>;
  fields?: InputMaybe<FieldRelateToManyForCreateInput>;
  isDefault?: InputMaybe<Scalars['Boolean']['input']>;
  location?: InputMaybe<Scalars['JSON']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
  organisation?: InputMaybe<OrganisationRelateToOneForCreateInput>;
};

export type FarmManyRelationFilter = {
  every?: InputMaybe<FarmWhereInput>;
  none?: InputMaybe<FarmWhereInput>;
  some?: InputMaybe<FarmWhereInput>;
};

export type FarmOrderByInput = {
  createdAt?: InputMaybe<OrderDirection>;
  id?: InputMaybe<OrderDirection>;
  isDefault?: InputMaybe<OrderDirection>;
  name?: InputMaybe<OrderDirection>;
};

export type FarmRelateToManyForCreateInput = {
  connect?: InputMaybe<Array<FarmWhereUniqueInput>>;
  create?: InputMaybe<Array<FarmCreateInput>>;
};

export type FarmRelateToManyForUpdateInput = {
  connect?: InputMaybe<Array<FarmWhereUniqueInput>>;
  create?: InputMaybe<Array<FarmCreateInput>>;
  disconnect?: InputMaybe<Array<FarmWhereUniqueInput>>;
  set?: InputMaybe<Array<FarmWhereUniqueInput>>;
};

export type FarmRelateToOneForCreateInput = {
  connect?: InputMaybe<FarmWhereUniqueInput>;
  create?: InputMaybe<FarmCreateInput>;
};

export type FarmRelateToOneForUpdateInput = {
  connect?: InputMaybe<FarmWhereUniqueInput>;
  create?: InputMaybe<FarmCreateInput>;
  disconnect?: InputMaybe<Scalars['Boolean']['input']>;
};

export type FarmUpdateArgs = {
  data: FarmUpdateInput;
  where: FarmWhereUniqueInput;
};

export type FarmUpdateInput = {
  barns?: InputMaybe<BarnRelateToManyForUpdateInput>;
  createdAt?: InputMaybe<Scalars['DateTime']['input']>;
  createdBy?: InputMaybe<UserRelateToOneForUpdateInput>;
  fields?: InputMaybe<FieldRelateToManyForUpdateInput>;
  isDefault?: InputMaybe<Scalars['Boolean']['input']>;
  location?: InputMaybe<Scalars['JSON']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
  organisation?: InputMaybe<OrganisationRelateToOneForUpdateInput>;
};

export type FarmWhereInput = {
  AND?: InputMaybe<Array<FarmWhereInput>>;
  NOT?: InputMaybe<Array<FarmWhereInput>>;
  OR?: InputMaybe<Array<FarmWhereInput>>;
  barns?: InputMaybe<BarnManyRelationFilter>;
  createdAt?: InputMaybe<DateTimeNullableFilter>;
  createdBy?: InputMaybe<UserWhereInput>;
  fields?: InputMaybe<FieldManyRelationFilter>;
  id?: InputMaybe<IdFilter>;
  isDefault?: InputMaybe<BooleanFilter>;
  name?: InputMaybe<StringFilter>;
  organisation?: InputMaybe<OrganisationWhereInput>;
};

export type FarmWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']['input']>;
};

export type FeedDispenseEvent = {
  __typename?: 'FeedDispenseEvent';
  box?: Maybe<Box>;
  date?: Maybe<Scalars['DateTime']['output']>;
  id: Scalars['ID']['output'];
  operator?: Maybe<Operator>;
  qty_kg?: Maybe<Scalars['Float']['output']>;
  ration?: Maybe<FeedRationPlan>;
  silo?: Maybe<FeedSilo>;
};

export type FeedDispenseEventCreateInput = {
  box?: InputMaybe<BoxRelateToOneForCreateInput>;
  date?: InputMaybe<Scalars['DateTime']['input']>;
  operator?: InputMaybe<OperatorRelateToOneForCreateInput>;
  qty_kg?: InputMaybe<Scalars['Float']['input']>;
  ration?: InputMaybe<FeedRationPlanRelateToOneForCreateInput>;
  silo?: InputMaybe<FeedSiloRelateToOneForCreateInput>;
};

export type FeedDispenseEventManyRelationFilter = {
  every?: InputMaybe<FeedDispenseEventWhereInput>;
  none?: InputMaybe<FeedDispenseEventWhereInput>;
  some?: InputMaybe<FeedDispenseEventWhereInput>;
};

export type FeedDispenseEventOrderByInput = {
  date?: InputMaybe<OrderDirection>;
  id?: InputMaybe<OrderDirection>;
  qty_kg?: InputMaybe<OrderDirection>;
};

export type FeedDispenseEventRelateToManyForCreateInput = {
  connect?: InputMaybe<Array<FeedDispenseEventWhereUniqueInput>>;
  create?: InputMaybe<Array<FeedDispenseEventCreateInput>>;
};

export type FeedDispenseEventRelateToManyForUpdateInput = {
  connect?: InputMaybe<Array<FeedDispenseEventWhereUniqueInput>>;
  create?: InputMaybe<Array<FeedDispenseEventCreateInput>>;
  disconnect?: InputMaybe<Array<FeedDispenseEventWhereUniqueInput>>;
  set?: InputMaybe<Array<FeedDispenseEventWhereUniqueInput>>;
};

export type FeedDispenseEventUpdateArgs = {
  data: FeedDispenseEventUpdateInput;
  where: FeedDispenseEventWhereUniqueInput;
};

export type FeedDispenseEventUpdateInput = {
  box?: InputMaybe<BoxRelateToOneForUpdateInput>;
  date?: InputMaybe<Scalars['DateTime']['input']>;
  operator?: InputMaybe<OperatorRelateToOneForUpdateInput>;
  qty_kg?: InputMaybe<Scalars['Float']['input']>;
  ration?: InputMaybe<FeedRationPlanRelateToOneForUpdateInput>;
  silo?: InputMaybe<FeedSiloRelateToOneForUpdateInput>;
};

export type FeedDispenseEventWhereInput = {
  AND?: InputMaybe<Array<FeedDispenseEventWhereInput>>;
  NOT?: InputMaybe<Array<FeedDispenseEventWhereInput>>;
  OR?: InputMaybe<Array<FeedDispenseEventWhereInput>>;
  box?: InputMaybe<BoxWhereInput>;
  date?: InputMaybe<DateTimeNullableFilter>;
  id?: InputMaybe<IdFilter>;
  operator?: InputMaybe<OperatorWhereInput>;
  qty_kg?: InputMaybe<FloatNullableFilter>;
  ration?: InputMaybe<FeedRationPlanWhereInput>;
  silo?: InputMaybe<FeedSiloWhereInput>;
};

export type FeedDispenseEventWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']['input']>;
};

export type FeedLot = {
  __typename?: 'FeedLot';
  addedAt?: Maybe<Scalars['DateTime']['output']>;
  batch_no?: Maybe<Scalars['String']['output']>;
  id: Scalars['ID']['output'];
  product?: Maybe<Product>;
  qty_kg?: Maybe<Scalars['Float']['output']>;
  silo?: Maybe<FeedSilo>;
};

export type FeedLotCreateInput = {
  addedAt?: InputMaybe<Scalars['DateTime']['input']>;
  batch_no?: InputMaybe<Scalars['String']['input']>;
  product?: InputMaybe<ProductRelateToOneForCreateInput>;
  qty_kg?: InputMaybe<Scalars['Float']['input']>;
  silo?: InputMaybe<FeedSiloRelateToOneForCreateInput>;
};

export type FeedLotManyRelationFilter = {
  every?: InputMaybe<FeedLotWhereInput>;
  none?: InputMaybe<FeedLotWhereInput>;
  some?: InputMaybe<FeedLotWhereInput>;
};

export type FeedLotOrderByInput = {
  addedAt?: InputMaybe<OrderDirection>;
  batch_no?: InputMaybe<OrderDirection>;
  id?: InputMaybe<OrderDirection>;
  qty_kg?: InputMaybe<OrderDirection>;
};

export type FeedLotRelateToManyForCreateInput = {
  connect?: InputMaybe<Array<FeedLotWhereUniqueInput>>;
  create?: InputMaybe<Array<FeedLotCreateInput>>;
};

export type FeedLotRelateToManyForUpdateInput = {
  connect?: InputMaybe<Array<FeedLotWhereUniqueInput>>;
  create?: InputMaybe<Array<FeedLotCreateInput>>;
  disconnect?: InputMaybe<Array<FeedLotWhereUniqueInput>>;
  set?: InputMaybe<Array<FeedLotWhereUniqueInput>>;
};

export type FeedLotUpdateArgs = {
  data: FeedLotUpdateInput;
  where: FeedLotWhereUniqueInput;
};

export type FeedLotUpdateInput = {
  addedAt?: InputMaybe<Scalars['DateTime']['input']>;
  batch_no?: InputMaybe<Scalars['String']['input']>;
  product?: InputMaybe<ProductRelateToOneForUpdateInput>;
  qty_kg?: InputMaybe<Scalars['Float']['input']>;
  silo?: InputMaybe<FeedSiloRelateToOneForUpdateInput>;
};

export type FeedLotWhereInput = {
  AND?: InputMaybe<Array<FeedLotWhereInput>>;
  NOT?: InputMaybe<Array<FeedLotWhereInput>>;
  OR?: InputMaybe<Array<FeedLotWhereInput>>;
  addedAt?: InputMaybe<DateTimeNullableFilter>;
  batch_no?: InputMaybe<StringFilter>;
  id?: InputMaybe<IdFilter>;
  product?: InputMaybe<ProductWhereInput>;
  qty_kg?: InputMaybe<FloatNullableFilter>;
  silo?: InputMaybe<FeedSiloWhereInput>;
};

export type FeedLotWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']['input']>;
};

export type FeedRationComponent = {
  __typename?: 'FeedRationComponent';
  dry_matter_pct?: Maybe<Scalars['Float']['output']>;
  id: Scalars['ID']['output'];
  product?: Maybe<Product>;
  qty_kg_head_day?: Maybe<Scalars['Float']['output']>;
  ration?: Maybe<FeedRationPlan>;
};

export type FeedRationComponentCreateInput = {
  dry_matter_pct?: InputMaybe<Scalars['Float']['input']>;
  product?: InputMaybe<ProductRelateToOneForCreateInput>;
  qty_kg_head_day?: InputMaybe<Scalars['Float']['input']>;
  ration?: InputMaybe<FeedRationPlanRelateToOneForCreateInput>;
};

export type FeedRationComponentManyRelationFilter = {
  every?: InputMaybe<FeedRationComponentWhereInput>;
  none?: InputMaybe<FeedRationComponentWhereInput>;
  some?: InputMaybe<FeedRationComponentWhereInput>;
};

export type FeedRationComponentOrderByInput = {
  dry_matter_pct?: InputMaybe<OrderDirection>;
  id?: InputMaybe<OrderDirection>;
  qty_kg_head_day?: InputMaybe<OrderDirection>;
};

export type FeedRationComponentRelateToManyForCreateInput = {
  connect?: InputMaybe<Array<FeedRationComponentWhereUniqueInput>>;
  create?: InputMaybe<Array<FeedRationComponentCreateInput>>;
};

export type FeedRationComponentRelateToManyForUpdateInput = {
  connect?: InputMaybe<Array<FeedRationComponentWhereUniqueInput>>;
  create?: InputMaybe<Array<FeedRationComponentCreateInput>>;
  disconnect?: InputMaybe<Array<FeedRationComponentWhereUniqueInput>>;
  set?: InputMaybe<Array<FeedRationComponentWhereUniqueInput>>;
};

export type FeedRationComponentUpdateArgs = {
  data: FeedRationComponentUpdateInput;
  where: FeedRationComponentWhereUniqueInput;
};

export type FeedRationComponentUpdateInput = {
  dry_matter_pct?: InputMaybe<Scalars['Float']['input']>;
  product?: InputMaybe<ProductRelateToOneForUpdateInput>;
  qty_kg_head_day?: InputMaybe<Scalars['Float']['input']>;
  ration?: InputMaybe<FeedRationPlanRelateToOneForUpdateInput>;
};

export type FeedRationComponentWhereInput = {
  AND?: InputMaybe<Array<FeedRationComponentWhereInput>>;
  NOT?: InputMaybe<Array<FeedRationComponentWhereInput>>;
  OR?: InputMaybe<Array<FeedRationComponentWhereInput>>;
  dry_matter_pct?: InputMaybe<FloatNullableFilter>;
  id?: InputMaybe<IdFilter>;
  product?: InputMaybe<ProductWhereInput>;
  qty_kg_head_day?: InputMaybe<FloatNullableFilter>;
  ration?: InputMaybe<FeedRationPlanWhereInput>;
};

export type FeedRationComponentWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']['input']>;
};

export type FeedRationPlan = {
  __typename?: 'FeedRationPlan';
  barn?: Maybe<Barn>;
  components?: Maybe<Array<FeedRationComponent>>;
  componentsCount?: Maybe<Scalars['Int']['output']>;
  dispenses?: Maybe<Array<FeedDispenseEvent>>;
  dispensesCount?: Maybe<Scalars['Int']['output']>;
  endDate?: Maybe<Scalars['DateTime']['output']>;
  id: Scalars['ID']['output'];
  name?: Maybe<Scalars['String']['output']>;
  startDate?: Maybe<Scalars['DateTime']['output']>;
};


export type FeedRationPlanComponentsArgs = {
  cursor?: InputMaybe<FeedRationComponentWhereUniqueInput>;
  orderBy?: Array<FeedRationComponentOrderByInput>;
  skip?: Scalars['Int']['input'];
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: FeedRationComponentWhereInput;
};


export type FeedRationPlanComponentsCountArgs = {
  where?: FeedRationComponentWhereInput;
};


export type FeedRationPlanDispensesArgs = {
  cursor?: InputMaybe<FeedDispenseEventWhereUniqueInput>;
  orderBy?: Array<FeedDispenseEventOrderByInput>;
  skip?: Scalars['Int']['input'];
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: FeedDispenseEventWhereInput;
};


export type FeedRationPlanDispensesCountArgs = {
  where?: FeedDispenseEventWhereInput;
};

export type FeedRationPlanCreateInput = {
  barn?: InputMaybe<BarnRelateToOneForCreateInput>;
  components?: InputMaybe<FeedRationComponentRelateToManyForCreateInput>;
  dispenses?: InputMaybe<FeedDispenseEventRelateToManyForCreateInput>;
  endDate?: InputMaybe<Scalars['DateTime']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
  startDate?: InputMaybe<Scalars['DateTime']['input']>;
};

export type FeedRationPlanOrderByInput = {
  endDate?: InputMaybe<OrderDirection>;
  id?: InputMaybe<OrderDirection>;
  name?: InputMaybe<OrderDirection>;
  startDate?: InputMaybe<OrderDirection>;
};

export type FeedRationPlanRelateToOneForCreateInput = {
  connect?: InputMaybe<FeedRationPlanWhereUniqueInput>;
  create?: InputMaybe<FeedRationPlanCreateInput>;
};

export type FeedRationPlanRelateToOneForUpdateInput = {
  connect?: InputMaybe<FeedRationPlanWhereUniqueInput>;
  create?: InputMaybe<FeedRationPlanCreateInput>;
  disconnect?: InputMaybe<Scalars['Boolean']['input']>;
};

export type FeedRationPlanUpdateArgs = {
  data: FeedRationPlanUpdateInput;
  where: FeedRationPlanWhereUniqueInput;
};

export type FeedRationPlanUpdateInput = {
  barn?: InputMaybe<BarnRelateToOneForUpdateInput>;
  components?: InputMaybe<FeedRationComponentRelateToManyForUpdateInput>;
  dispenses?: InputMaybe<FeedDispenseEventRelateToManyForUpdateInput>;
  endDate?: InputMaybe<Scalars['DateTime']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
  startDate?: InputMaybe<Scalars['DateTime']['input']>;
};

export type FeedRationPlanWhereInput = {
  AND?: InputMaybe<Array<FeedRationPlanWhereInput>>;
  NOT?: InputMaybe<Array<FeedRationPlanWhereInput>>;
  OR?: InputMaybe<Array<FeedRationPlanWhereInput>>;
  barn?: InputMaybe<BarnWhereInput>;
  components?: InputMaybe<FeedRationComponentManyRelationFilter>;
  dispenses?: InputMaybe<FeedDispenseEventManyRelationFilter>;
  endDate?: InputMaybe<DateTimeNullableFilter>;
  id?: InputMaybe<IdFilter>;
  name?: InputMaybe<StringFilter>;
  startDate?: InputMaybe<DateTimeNullableFilter>;
};

export type FeedRationPlanWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']['input']>;
};

export type FeedSilo = {
  __typename?: 'FeedSilo';
  barn?: Maybe<Barn>;
  capacity_kg?: Maybe<Scalars['Float']['output']>;
  current_level_pct?: Maybe<Scalars['Float']['output']>;
  dispenses?: Maybe<Array<FeedDispenseEvent>>;
  dispensesCount?: Maybe<Scalars['Int']['output']>;
  id: Scalars['ID']['output'];
  lots?: Maybe<Array<FeedLot>>;
  lotsCount?: Maybe<Scalars['Int']['output']>;
  name?: Maybe<Scalars['String']['output']>;
  sensorId?: Maybe<Scalars['String']['output']>;
};


export type FeedSiloDispensesArgs = {
  cursor?: InputMaybe<FeedDispenseEventWhereUniqueInput>;
  orderBy?: Array<FeedDispenseEventOrderByInput>;
  skip?: Scalars['Int']['input'];
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: FeedDispenseEventWhereInput;
};


export type FeedSiloDispensesCountArgs = {
  where?: FeedDispenseEventWhereInput;
};


export type FeedSiloLotsArgs = {
  cursor?: InputMaybe<FeedLotWhereUniqueInput>;
  orderBy?: Array<FeedLotOrderByInput>;
  skip?: Scalars['Int']['input'];
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: FeedLotWhereInput;
};


export type FeedSiloLotsCountArgs = {
  where?: FeedLotWhereInput;
};

export type FeedSiloCreateInput = {
  barn?: InputMaybe<BarnRelateToOneForCreateInput>;
  capacity_kg?: InputMaybe<Scalars['Float']['input']>;
  current_level_pct?: InputMaybe<Scalars['Float']['input']>;
  dispenses?: InputMaybe<FeedDispenseEventRelateToManyForCreateInput>;
  lots?: InputMaybe<FeedLotRelateToManyForCreateInput>;
  name?: InputMaybe<Scalars['String']['input']>;
  sensorId?: InputMaybe<Scalars['String']['input']>;
};

export type FeedSiloManyRelationFilter = {
  every?: InputMaybe<FeedSiloWhereInput>;
  none?: InputMaybe<FeedSiloWhereInput>;
  some?: InputMaybe<FeedSiloWhereInput>;
};

export type FeedSiloOrderByInput = {
  capacity_kg?: InputMaybe<OrderDirection>;
  current_level_pct?: InputMaybe<OrderDirection>;
  id?: InputMaybe<OrderDirection>;
  name?: InputMaybe<OrderDirection>;
  sensorId?: InputMaybe<OrderDirection>;
};

export type FeedSiloRelateToManyForCreateInput = {
  connect?: InputMaybe<Array<FeedSiloWhereUniqueInput>>;
  create?: InputMaybe<Array<FeedSiloCreateInput>>;
};

export type FeedSiloRelateToManyForUpdateInput = {
  connect?: InputMaybe<Array<FeedSiloWhereUniqueInput>>;
  create?: InputMaybe<Array<FeedSiloCreateInput>>;
  disconnect?: InputMaybe<Array<FeedSiloWhereUniqueInput>>;
  set?: InputMaybe<Array<FeedSiloWhereUniqueInput>>;
};

export type FeedSiloRelateToOneForCreateInput = {
  connect?: InputMaybe<FeedSiloWhereUniqueInput>;
  create?: InputMaybe<FeedSiloCreateInput>;
};

export type FeedSiloRelateToOneForUpdateInput = {
  connect?: InputMaybe<FeedSiloWhereUniqueInput>;
  create?: InputMaybe<FeedSiloCreateInput>;
  disconnect?: InputMaybe<Scalars['Boolean']['input']>;
};

export type FeedSiloUpdateArgs = {
  data: FeedSiloUpdateInput;
  where: FeedSiloWhereUniqueInput;
};

export type FeedSiloUpdateInput = {
  barn?: InputMaybe<BarnRelateToOneForUpdateInput>;
  capacity_kg?: InputMaybe<Scalars['Float']['input']>;
  current_level_pct?: InputMaybe<Scalars['Float']['input']>;
  dispenses?: InputMaybe<FeedDispenseEventRelateToManyForUpdateInput>;
  lots?: InputMaybe<FeedLotRelateToManyForUpdateInput>;
  name?: InputMaybe<Scalars['String']['input']>;
  sensorId?: InputMaybe<Scalars['String']['input']>;
};

export type FeedSiloWhereInput = {
  AND?: InputMaybe<Array<FeedSiloWhereInput>>;
  NOT?: InputMaybe<Array<FeedSiloWhereInput>>;
  OR?: InputMaybe<Array<FeedSiloWhereInput>>;
  barn?: InputMaybe<BarnWhereInput>;
  capacity_kg?: InputMaybe<FloatNullableFilter>;
  current_level_pct?: InputMaybe<FloatNullableFilter>;
  dispenses?: InputMaybe<FeedDispenseEventManyRelationFilter>;
  id?: InputMaybe<IdFilter>;
  lots?: InputMaybe<FeedLotManyRelationFilter>;
  name?: InputMaybe<StringFilter>;
  sensorId?: InputMaybe<StringFilter>;
};

export type FeedSiloWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']['input']>;
};

export type Field = {
  __typename?: 'Field';
  activities?: Maybe<Array<Activity>>;
  activitiesCount?: Maybe<Scalars['Int']['output']>;
  animals?: Maybe<Array<Animal>>;
  animalsCount?: Maybe<Scalars['Int']['output']>;
  areaHectares?: Maybe<Scalars['Float']['output']>;
  boundary?: Maybe<Scalars['JSON']['output']>;
  createdAt?: Maybe<Scalars['DateTime']['output']>;
  crops?: Maybe<Array<Crop>>;
  cropsCount?: Maybe<Scalars['Int']['output']>;
  farm?: Maybe<Farm>;
  id: Scalars['ID']['output'];
  landCoverStats?: Maybe<Array<LandCoverStatistic>>;
  landCoverStatsCount?: Maybe<Scalars['Int']['output']>;
  location?: Maybe<Scalars['JSON']['output']>;
  name?: Maybe<Scalars['String']['output']>;
  ndvi?: Maybe<Array<NdviAsset>>;
  ndviCount?: Maybe<Scalars['Int']['output']>;
  nppBaselines?: Maybe<Array<NetPrimaryProductivity>>;
  nppBaselinesCount?: Maybe<Scalars['Int']['output']>;
  practiceEvents?: Maybe<Array<SustainablePracticeEvent>>;
  practiceEventsCount?: Maybe<Scalars['Int']['output']>;
  soilMeasurements?: Maybe<Array<SoilMeasurement>>;
  soilMeasurementsCount?: Maybe<Scalars['Int']['output']>;
  soilMoistureObservations?: Maybe<Array<SoilMoistureObservation>>;
  soilMoistureObservationsCount?: Maybe<Scalars['Int']['output']>;
  soilOrganicCarbonStocks?: Maybe<Array<SoilOrganicCarbonStock>>;
  soilOrganicCarbonStocksCount?: Maybe<Scalars['Int']['output']>;
  weatherRecords?: Maybe<Array<WeatherRecord>>;
  weatherRecordsCount?: Maybe<Scalars['Int']['output']>;
};


export type FieldActivitiesArgs = {
  cursor?: InputMaybe<ActivityWhereUniqueInput>;
  orderBy?: Array<ActivityOrderByInput>;
  skip?: Scalars['Int']['input'];
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: ActivityWhereInput;
};


export type FieldActivitiesCountArgs = {
  where?: ActivityWhereInput;
};


export type FieldAnimalsArgs = {
  cursor?: InputMaybe<AnimalWhereUniqueInput>;
  orderBy?: Array<AnimalOrderByInput>;
  skip?: Scalars['Int']['input'];
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: AnimalWhereInput;
};


export type FieldAnimalsCountArgs = {
  where?: AnimalWhereInput;
};


export type FieldCropsArgs = {
  cursor?: InputMaybe<CropWhereUniqueInput>;
  orderBy?: Array<CropOrderByInput>;
  skip?: Scalars['Int']['input'];
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: CropWhereInput;
};


export type FieldCropsCountArgs = {
  where?: CropWhereInput;
};


export type FieldLandCoverStatsArgs = {
  cursor?: InputMaybe<LandCoverStatisticWhereUniqueInput>;
  orderBy?: Array<LandCoverStatisticOrderByInput>;
  skip?: Scalars['Int']['input'];
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: LandCoverStatisticWhereInput;
};


export type FieldLandCoverStatsCountArgs = {
  where?: LandCoverStatisticWhereInput;
};


export type FieldNdviArgs = {
  cursor?: InputMaybe<NdviAssetWhereUniqueInput>;
  orderBy?: Array<NdviAssetOrderByInput>;
  skip?: Scalars['Int']['input'];
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: NdviAssetWhereInput;
};


export type FieldNdviCountArgs = {
  where?: NdviAssetWhereInput;
};


export type FieldNppBaselinesArgs = {
  cursor?: InputMaybe<NetPrimaryProductivityWhereUniqueInput>;
  orderBy?: Array<NetPrimaryProductivityOrderByInput>;
  skip?: Scalars['Int']['input'];
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: NetPrimaryProductivityWhereInput;
};


export type FieldNppBaselinesCountArgs = {
  where?: NetPrimaryProductivityWhereInput;
};


export type FieldPracticeEventsArgs = {
  cursor?: InputMaybe<SustainablePracticeEventWhereUniqueInput>;
  orderBy?: Array<SustainablePracticeEventOrderByInput>;
  skip?: Scalars['Int']['input'];
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: SustainablePracticeEventWhereInput;
};


export type FieldPracticeEventsCountArgs = {
  where?: SustainablePracticeEventWhereInput;
};


export type FieldSoilMeasurementsArgs = {
  cursor?: InputMaybe<SoilMeasurementWhereUniqueInput>;
  orderBy?: Array<SoilMeasurementOrderByInput>;
  skip?: Scalars['Int']['input'];
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: SoilMeasurementWhereInput;
};


export type FieldSoilMeasurementsCountArgs = {
  where?: SoilMeasurementWhereInput;
};


export type FieldSoilMoistureObservationsArgs = {
  cursor?: InputMaybe<SoilMoistureObservationWhereUniqueInput>;
  orderBy?: Array<SoilMoistureObservationOrderByInput>;
  skip?: Scalars['Int']['input'];
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: SoilMoistureObservationWhereInput;
};


export type FieldSoilMoistureObservationsCountArgs = {
  where?: SoilMoistureObservationWhereInput;
};


export type FieldSoilOrganicCarbonStocksArgs = {
  cursor?: InputMaybe<SoilOrganicCarbonStockWhereUniqueInput>;
  orderBy?: Array<SoilOrganicCarbonStockOrderByInput>;
  skip?: Scalars['Int']['input'];
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: SoilOrganicCarbonStockWhereInput;
};


export type FieldSoilOrganicCarbonStocksCountArgs = {
  where?: SoilOrganicCarbonStockWhereInput;
};


export type FieldWeatherRecordsArgs = {
  cursor?: InputMaybe<WeatherRecordWhereUniqueInput>;
  orderBy?: Array<WeatherRecordOrderByInput>;
  skip?: Scalars['Int']['input'];
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: WeatherRecordWhereInput;
};


export type FieldWeatherRecordsCountArgs = {
  where?: WeatherRecordWhereInput;
};

export type FieldCreateInput = {
  activities?: InputMaybe<ActivityRelateToManyForCreateInput>;
  animals?: InputMaybe<AnimalRelateToManyForCreateInput>;
  areaHectares?: InputMaybe<Scalars['Float']['input']>;
  boundary?: InputMaybe<Scalars['JSON']['input']>;
  createdAt?: InputMaybe<Scalars['DateTime']['input']>;
  crops?: InputMaybe<CropRelateToManyForCreateInput>;
  farm?: InputMaybe<FarmRelateToOneForCreateInput>;
  landCoverStats?: InputMaybe<LandCoverStatisticRelateToManyForCreateInput>;
  location?: InputMaybe<Scalars['JSON']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
  ndvi?: InputMaybe<NdviAssetRelateToManyForCreateInput>;
  nppBaselines?: InputMaybe<NetPrimaryProductivityRelateToManyForCreateInput>;
  practiceEvents?: InputMaybe<SustainablePracticeEventRelateToManyForCreateInput>;
  soilMeasurements?: InputMaybe<SoilMeasurementRelateToManyForCreateInput>;
  soilMoistureObservations?: InputMaybe<SoilMoistureObservationRelateToManyForCreateInput>;
  soilOrganicCarbonStocks?: InputMaybe<SoilOrganicCarbonStockRelateToManyForCreateInput>;
  weatherRecords?: InputMaybe<WeatherRecordRelateToManyForCreateInput>;
};

export type FieldImpactSummary = {
  __typename?: 'FieldImpactSummary';
  field?: Maybe<Field>;
  id: Scalars['ID']['output'];
  total_direct_kg_co2e?: Maybe<Scalars['Float']['output']>;
  total_indirect_kg_co2e?: Maybe<Scalars['Float']['output']>;
  total_kg_co2e_per_ha?: Maybe<Scalars['Float']['output']>;
  year?: Maybe<Scalars['Int']['output']>;
};

export type FieldImpactSummaryCreateInput = {
  field?: InputMaybe<FieldRelateToOneForCreateInput>;
  total_direct_kg_co2e?: InputMaybe<Scalars['Float']['input']>;
  total_indirect_kg_co2e?: InputMaybe<Scalars['Float']['input']>;
  total_kg_co2e_per_ha?: InputMaybe<Scalars['Float']['input']>;
  year?: InputMaybe<Scalars['Int']['input']>;
};

export type FieldImpactSummaryOrderByInput = {
  id?: InputMaybe<OrderDirection>;
  total_direct_kg_co2e?: InputMaybe<OrderDirection>;
  total_indirect_kg_co2e?: InputMaybe<OrderDirection>;
  total_kg_co2e_per_ha?: InputMaybe<OrderDirection>;
  year?: InputMaybe<OrderDirection>;
};

export type FieldImpactSummaryUpdateArgs = {
  data: FieldImpactSummaryUpdateInput;
  where: FieldImpactSummaryWhereUniqueInput;
};

export type FieldImpactSummaryUpdateInput = {
  field?: InputMaybe<FieldRelateToOneForUpdateInput>;
  total_direct_kg_co2e?: InputMaybe<Scalars['Float']['input']>;
  total_indirect_kg_co2e?: InputMaybe<Scalars['Float']['input']>;
  total_kg_co2e_per_ha?: InputMaybe<Scalars['Float']['input']>;
  year?: InputMaybe<Scalars['Int']['input']>;
};

export type FieldImpactSummaryWhereInput = {
  AND?: InputMaybe<Array<FieldImpactSummaryWhereInput>>;
  NOT?: InputMaybe<Array<FieldImpactSummaryWhereInput>>;
  OR?: InputMaybe<Array<FieldImpactSummaryWhereInput>>;
  field?: InputMaybe<FieldWhereInput>;
  id?: InputMaybe<IdFilter>;
  total_direct_kg_co2e?: InputMaybe<FloatNullableFilter>;
  total_indirect_kg_co2e?: InputMaybe<FloatNullableFilter>;
  total_kg_co2e_per_ha?: InputMaybe<FloatNullableFilter>;
  year?: InputMaybe<IntNullableFilter>;
};

export type FieldImpactSummaryWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']['input']>;
};

export type FieldManyRelationFilter = {
  every?: InputMaybe<FieldWhereInput>;
  none?: InputMaybe<FieldWhereInput>;
  some?: InputMaybe<FieldWhereInput>;
};

export type FieldOrderByInput = {
  areaHectares?: InputMaybe<OrderDirection>;
  createdAt?: InputMaybe<OrderDirection>;
  id?: InputMaybe<OrderDirection>;
  name?: InputMaybe<OrderDirection>;
};

export type FieldRelateToManyForCreateInput = {
  connect?: InputMaybe<Array<FieldWhereUniqueInput>>;
  create?: InputMaybe<Array<FieldCreateInput>>;
};

export type FieldRelateToManyForUpdateInput = {
  connect?: InputMaybe<Array<FieldWhereUniqueInput>>;
  create?: InputMaybe<Array<FieldCreateInput>>;
  disconnect?: InputMaybe<Array<FieldWhereUniqueInput>>;
  set?: InputMaybe<Array<FieldWhereUniqueInput>>;
};

export type FieldRelateToOneForCreateInput = {
  connect?: InputMaybe<FieldWhereUniqueInput>;
  create?: InputMaybe<FieldCreateInput>;
};

export type FieldRelateToOneForUpdateInput = {
  connect?: InputMaybe<FieldWhereUniqueInput>;
  create?: InputMaybe<FieldCreateInput>;
  disconnect?: InputMaybe<Scalars['Boolean']['input']>;
};

export type FieldUpdateArgs = {
  data: FieldUpdateInput;
  where: FieldWhereUniqueInput;
};

export type FieldUpdateInput = {
  activities?: InputMaybe<ActivityRelateToManyForUpdateInput>;
  animals?: InputMaybe<AnimalRelateToManyForUpdateInput>;
  areaHectares?: InputMaybe<Scalars['Float']['input']>;
  boundary?: InputMaybe<Scalars['JSON']['input']>;
  createdAt?: InputMaybe<Scalars['DateTime']['input']>;
  crops?: InputMaybe<CropRelateToManyForUpdateInput>;
  farm?: InputMaybe<FarmRelateToOneForUpdateInput>;
  landCoverStats?: InputMaybe<LandCoverStatisticRelateToManyForUpdateInput>;
  location?: InputMaybe<Scalars['JSON']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
  ndvi?: InputMaybe<NdviAssetRelateToManyForUpdateInput>;
  nppBaselines?: InputMaybe<NetPrimaryProductivityRelateToManyForUpdateInput>;
  practiceEvents?: InputMaybe<SustainablePracticeEventRelateToManyForUpdateInput>;
  soilMeasurements?: InputMaybe<SoilMeasurementRelateToManyForUpdateInput>;
  soilMoistureObservations?: InputMaybe<SoilMoistureObservationRelateToManyForUpdateInput>;
  soilOrganicCarbonStocks?: InputMaybe<SoilOrganicCarbonStockRelateToManyForUpdateInput>;
  weatherRecords?: InputMaybe<WeatherRecordRelateToManyForUpdateInput>;
};

export type FieldWhereInput = {
  AND?: InputMaybe<Array<FieldWhereInput>>;
  NOT?: InputMaybe<Array<FieldWhereInput>>;
  OR?: InputMaybe<Array<FieldWhereInput>>;
  activities?: InputMaybe<ActivityManyRelationFilter>;
  animals?: InputMaybe<AnimalManyRelationFilter>;
  areaHectares?: InputMaybe<FloatNullableFilter>;
  createdAt?: InputMaybe<DateTimeNullableFilter>;
  crops?: InputMaybe<CropManyRelationFilter>;
  farm?: InputMaybe<FarmWhereInput>;
  id?: InputMaybe<IdFilter>;
  landCoverStats?: InputMaybe<LandCoverStatisticManyRelationFilter>;
  name?: InputMaybe<StringFilter>;
  ndvi?: InputMaybe<NdviAssetManyRelationFilter>;
  nppBaselines?: InputMaybe<NetPrimaryProductivityManyRelationFilter>;
  practiceEvents?: InputMaybe<SustainablePracticeEventManyRelationFilter>;
  soilMeasurements?: InputMaybe<SoilMeasurementManyRelationFilter>;
  soilMoistureObservations?: InputMaybe<SoilMoistureObservationManyRelationFilter>;
  soilOrganicCarbonStocks?: InputMaybe<SoilOrganicCarbonStockManyRelationFilter>;
  weatherRecords?: InputMaybe<WeatherRecordManyRelationFilter>;
};

export type FieldWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']['input']>;
};

export type FloatFilter = {
  equals?: InputMaybe<Scalars['Float']['input']>;
  gt?: InputMaybe<Scalars['Float']['input']>;
  gte?: InputMaybe<Scalars['Float']['input']>;
  in?: InputMaybe<Array<Scalars['Float']['input']>>;
  lt?: InputMaybe<Scalars['Float']['input']>;
  lte?: InputMaybe<Scalars['Float']['input']>;
  not?: InputMaybe<FloatFilter>;
  notIn?: InputMaybe<Array<Scalars['Float']['input']>>;
};

export type FloatNullableFilter = {
  equals?: InputMaybe<Scalars['Float']['input']>;
  gt?: InputMaybe<Scalars['Float']['input']>;
  gte?: InputMaybe<Scalars['Float']['input']>;
  in?: InputMaybe<Array<Scalars['Float']['input']>>;
  lt?: InputMaybe<Scalars['Float']['input']>;
  lte?: InputMaybe<Scalars['Float']['input']>;
  not?: InputMaybe<FloatNullableFilter>;
  notIn?: InputMaybe<Array<Scalars['Float']['input']>>;
};

export type HerdMetric = {
  __typename?: 'HerdMetric';
  barn?: Maybe<Barn>;
  id: Scalars['ID']['output'];
  metric_key?: Maybe<Scalars['String']['output']>;
  period_end?: Maybe<Scalars['DateTime']['output']>;
  period_start?: Maybe<Scalars['DateTime']['output']>;
  value?: Maybe<Scalars['Float']['output']>;
};

export type HerdMetricCreateInput = {
  barn?: InputMaybe<BarnRelateToOneForCreateInput>;
  metric_key?: InputMaybe<Scalars['String']['input']>;
  period_end?: InputMaybe<Scalars['DateTime']['input']>;
  period_start?: InputMaybe<Scalars['DateTime']['input']>;
  value?: InputMaybe<Scalars['Float']['input']>;
};

export type HerdMetricOrderByInput = {
  id?: InputMaybe<OrderDirection>;
  metric_key?: InputMaybe<OrderDirection>;
  period_end?: InputMaybe<OrderDirection>;
  period_start?: InputMaybe<OrderDirection>;
  value?: InputMaybe<OrderDirection>;
};

export type HerdMetricUpdateArgs = {
  data: HerdMetricUpdateInput;
  where: HerdMetricWhereUniqueInput;
};

export type HerdMetricUpdateInput = {
  barn?: InputMaybe<BarnRelateToOneForUpdateInput>;
  metric_key?: InputMaybe<Scalars['String']['input']>;
  period_end?: InputMaybe<Scalars['DateTime']['input']>;
  period_start?: InputMaybe<Scalars['DateTime']['input']>;
  value?: InputMaybe<Scalars['Float']['input']>;
};

export type HerdMetricWhereInput = {
  AND?: InputMaybe<Array<HerdMetricWhereInput>>;
  NOT?: InputMaybe<Array<HerdMetricWhereInput>>;
  OR?: InputMaybe<Array<HerdMetricWhereInput>>;
  barn?: InputMaybe<BarnWhereInput>;
  id?: InputMaybe<IdFilter>;
  metric_key?: InputMaybe<StringFilter>;
  period_end?: InputMaybe<DateTimeNullableFilter>;
  period_start?: InputMaybe<DateTimeNullableFilter>;
  value?: InputMaybe<FloatNullableFilter>;
};

export type HerdMetricWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']['input']>;
};

export type IdFilter = {
  equals?: InputMaybe<Scalars['ID']['input']>;
  gt?: InputMaybe<Scalars['ID']['input']>;
  gte?: InputMaybe<Scalars['ID']['input']>;
  in?: InputMaybe<Array<Scalars['ID']['input']>>;
  lt?: InputMaybe<Scalars['ID']['input']>;
  lte?: InputMaybe<Scalars['ID']['input']>;
  not?: InputMaybe<IdFilter>;
  notIn?: InputMaybe<Array<Scalars['ID']['input']>>;
};

export enum ImageExtension {
  Gif = 'gif',
  Jpg = 'jpg',
  Png = 'png',
  Webp = 'webp'
}

export type ImageFieldInput = {
  upload: Scalars['Upload']['input'];
};

export type ImageFieldOutput = {
  __typename?: 'ImageFieldOutput';
  extension: ImageExtension;
  filesize: Scalars['Int']['output'];
  height: Scalars['Int']['output'];
  id: Scalars['ID']['output'];
  url: Scalars['String']['output'];
  width: Scalars['Int']['output'];
};

export type IntFilter = {
  equals?: InputMaybe<Scalars['Int']['input']>;
  gt?: InputMaybe<Scalars['Int']['input']>;
  gte?: InputMaybe<Scalars['Int']['input']>;
  in?: InputMaybe<Array<Scalars['Int']['input']>>;
  lt?: InputMaybe<Scalars['Int']['input']>;
  lte?: InputMaybe<Scalars['Int']['input']>;
  not?: InputMaybe<IntFilter>;
  notIn?: InputMaybe<Array<Scalars['Int']['input']>>;
};

export type IntNullableFilter = {
  equals?: InputMaybe<Scalars['Int']['input']>;
  gt?: InputMaybe<Scalars['Int']['input']>;
  gte?: InputMaybe<Scalars['Int']['input']>;
  in?: InputMaybe<Array<Scalars['Int']['input']>>;
  lt?: InputMaybe<Scalars['Int']['input']>;
  lte?: InputMaybe<Scalars['Int']['input']>;
  not?: InputMaybe<IntNullableFilter>;
  notIn?: InputMaybe<Array<Scalars['Int']['input']>>;
};

export type Interview = {
  __typename?: 'Interview';
  application?: Maybe<Application>;
  createdAt?: Maybe<Scalars['DateTime']['output']>;
  feedback?: Maybe<Scalars['String']['output']>;
  id: Scalars['ID']['output'];
  interviewer?: Maybe<Scalars['String']['output']>;
  notes?: Maybe<Scalars['String']['output']>;
  scheduledAt?: Maybe<Scalars['DateTime']['output']>;
  stage?: Maybe<InterviewStage>;
};

export type InterviewCreateInput = {
  application?: InputMaybe<ApplicationRelateToOneForCreateInput>;
  createdAt?: InputMaybe<Scalars['DateTime']['input']>;
  feedback?: InputMaybe<Scalars['String']['input']>;
  interviewer?: InputMaybe<Scalars['String']['input']>;
  notes?: InputMaybe<Scalars['String']['input']>;
  scheduledAt?: InputMaybe<Scalars['DateTime']['input']>;
  stage?: InputMaybe<InterviewStageRelateToOneForCreateInput>;
};

export type InterviewManyRelationFilter = {
  every?: InputMaybe<InterviewWhereInput>;
  none?: InputMaybe<InterviewWhereInput>;
  some?: InputMaybe<InterviewWhereInput>;
};

export type InterviewOrderByInput = {
  createdAt?: InputMaybe<OrderDirection>;
  feedback?: InputMaybe<OrderDirection>;
  id?: InputMaybe<OrderDirection>;
  interviewer?: InputMaybe<OrderDirection>;
  notes?: InputMaybe<OrderDirection>;
  scheduledAt?: InputMaybe<OrderDirection>;
};

export type InterviewRelateToManyForCreateInput = {
  connect?: InputMaybe<Array<InterviewWhereUniqueInput>>;
  create?: InputMaybe<Array<InterviewCreateInput>>;
};

export type InterviewRelateToManyForUpdateInput = {
  connect?: InputMaybe<Array<InterviewWhereUniqueInput>>;
  create?: InputMaybe<Array<InterviewCreateInput>>;
  disconnect?: InputMaybe<Array<InterviewWhereUniqueInput>>;
  set?: InputMaybe<Array<InterviewWhereUniqueInput>>;
};

export type InterviewStage = {
  __typename?: 'InterviewStage';
  id: Scalars['ID']['output'];
  interviews?: Maybe<Array<Interview>>;
  interviewsCount?: Maybe<Scalars['Int']['output']>;
  key?: Maybe<Scalars['String']['output']>;
  labelKey?: Maybe<Scalars['String']['output']>;
  order?: Maybe<Scalars['Int']['output']>;
};


export type InterviewStageInterviewsArgs = {
  cursor?: InputMaybe<InterviewWhereUniqueInput>;
  orderBy?: Array<InterviewOrderByInput>;
  skip?: Scalars['Int']['input'];
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InterviewWhereInput;
};


export type InterviewStageInterviewsCountArgs = {
  where?: InterviewWhereInput;
};

export type InterviewStageCreateInput = {
  interviews?: InputMaybe<InterviewRelateToManyForCreateInput>;
  key?: InputMaybe<Scalars['String']['input']>;
  labelKey?: InputMaybe<Scalars['String']['input']>;
  order?: InputMaybe<Scalars['Int']['input']>;
};

export type InterviewStageOrderByInput = {
  id?: InputMaybe<OrderDirection>;
  key?: InputMaybe<OrderDirection>;
  labelKey?: InputMaybe<OrderDirection>;
  order?: InputMaybe<OrderDirection>;
};

export type InterviewStageRelateToOneForCreateInput = {
  connect?: InputMaybe<InterviewStageWhereUniqueInput>;
  create?: InputMaybe<InterviewStageCreateInput>;
};

export type InterviewStageRelateToOneForUpdateInput = {
  connect?: InputMaybe<InterviewStageWhereUniqueInput>;
  create?: InputMaybe<InterviewStageCreateInput>;
  disconnect?: InputMaybe<Scalars['Boolean']['input']>;
};

export type InterviewStageUpdateArgs = {
  data: InterviewStageUpdateInput;
  where: InterviewStageWhereUniqueInput;
};

export type InterviewStageUpdateInput = {
  interviews?: InputMaybe<InterviewRelateToManyForUpdateInput>;
  key?: InputMaybe<Scalars['String']['input']>;
  labelKey?: InputMaybe<Scalars['String']['input']>;
  order?: InputMaybe<Scalars['Int']['input']>;
};

export type InterviewStageWhereInput = {
  AND?: InputMaybe<Array<InterviewStageWhereInput>>;
  NOT?: InputMaybe<Array<InterviewStageWhereInput>>;
  OR?: InputMaybe<Array<InterviewStageWhereInput>>;
  id?: InputMaybe<IdFilter>;
  interviews?: InputMaybe<InterviewManyRelationFilter>;
  key?: InputMaybe<StringFilter>;
  labelKey?: InputMaybe<StringFilter>;
  order?: InputMaybe<IntFilter>;
};

export type InterviewStageWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']['input']>;
  key?: InputMaybe<Scalars['String']['input']>;
};

export type InterviewUpdateArgs = {
  data: InterviewUpdateInput;
  where: InterviewWhereUniqueInput;
};

export type InterviewUpdateInput = {
  application?: InputMaybe<ApplicationRelateToOneForUpdateInput>;
  createdAt?: InputMaybe<Scalars['DateTime']['input']>;
  feedback?: InputMaybe<Scalars['String']['input']>;
  interviewer?: InputMaybe<Scalars['String']['input']>;
  notes?: InputMaybe<Scalars['String']['input']>;
  scheduledAt?: InputMaybe<Scalars['DateTime']['input']>;
  stage?: InputMaybe<InterviewStageRelateToOneForUpdateInput>;
};

export type InterviewWhereInput = {
  AND?: InputMaybe<Array<InterviewWhereInput>>;
  NOT?: InputMaybe<Array<InterviewWhereInput>>;
  OR?: InputMaybe<Array<InterviewWhereInput>>;
  application?: InputMaybe<ApplicationWhereInput>;
  createdAt?: InputMaybe<DateTimeNullableFilter>;
  feedback?: InputMaybe<StringFilter>;
  id?: InputMaybe<IdFilter>;
  interviewer?: InputMaybe<StringFilter>;
  notes?: InputMaybe<StringFilter>;
  scheduledAt?: InputMaybe<DateTimeFilter>;
  stage?: InputMaybe<InterviewStageWhereInput>;
};

export type InterviewWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']['input']>;
};

export type JobCandidate = {
  __typename?: 'JobCandidate';
  address?: Maybe<Scalars['String']['output']>;
  applications?: Maybe<Array<Application>>;
  applicationsCount?: Maybe<Scalars['Int']['output']>;
  appliedAt?: Maybe<Scalars['DateTime']['output']>;
  city?: Maybe<Scalars['String']['output']>;
  country?: Maybe<Scalars['String']['output']>;
  desiredPay?: Maybe<Scalars['Float']['output']>;
  email?: Maybe<Scalars['String']['output']>;
  id: Scalars['ID']['output'];
  lastName?: Maybe<Scalars['String']['output']>;
  linkedin?: Maybe<Scalars['String']['output']>;
  name?: Maybe<Scalars['String']['output']>;
  phone?: Maybe<Scalars['String']['output']>;
  postalCode?: Maybe<Scalars['String']['output']>;
  province?: Maybe<Scalars['String']['output']>;
  resumeUrl?: Maybe<Scalars['String']['output']>;
  website?: Maybe<Scalars['String']['output']>;
};


export type JobCandidateApplicationsArgs = {
  cursor?: InputMaybe<ApplicationWhereUniqueInput>;
  orderBy?: Array<ApplicationOrderByInput>;
  skip?: Scalars['Int']['input'];
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: ApplicationWhereInput;
};


export type JobCandidateApplicationsCountArgs = {
  where?: ApplicationWhereInput;
};

export type JobCandidateCreateInput = {
  address?: InputMaybe<Scalars['String']['input']>;
  applications?: InputMaybe<ApplicationRelateToManyForCreateInput>;
  appliedAt?: InputMaybe<Scalars['DateTime']['input']>;
  city?: InputMaybe<Scalars['String']['input']>;
  country?: InputMaybe<Scalars['String']['input']>;
  desiredPay?: InputMaybe<Scalars['Float']['input']>;
  email?: InputMaybe<Scalars['String']['input']>;
  lastName?: InputMaybe<Scalars['String']['input']>;
  linkedin?: InputMaybe<Scalars['String']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
  phone?: InputMaybe<Scalars['String']['input']>;
  postalCode?: InputMaybe<Scalars['String']['input']>;
  province?: InputMaybe<Scalars['String']['input']>;
  resumeUrl?: InputMaybe<Scalars['String']['input']>;
  website?: InputMaybe<Scalars['String']['input']>;
};

export type JobCandidateOrderByInput = {
  address?: InputMaybe<OrderDirection>;
  appliedAt?: InputMaybe<OrderDirection>;
  city?: InputMaybe<OrderDirection>;
  country?: InputMaybe<OrderDirection>;
  desiredPay?: InputMaybe<OrderDirection>;
  email?: InputMaybe<OrderDirection>;
  id?: InputMaybe<OrderDirection>;
  lastName?: InputMaybe<OrderDirection>;
  linkedin?: InputMaybe<OrderDirection>;
  name?: InputMaybe<OrderDirection>;
  phone?: InputMaybe<OrderDirection>;
  postalCode?: InputMaybe<OrderDirection>;
  province?: InputMaybe<OrderDirection>;
  resumeUrl?: InputMaybe<OrderDirection>;
  website?: InputMaybe<OrderDirection>;
};

export type JobCandidateRelateToOneForCreateInput = {
  connect?: InputMaybe<JobCandidateWhereUniqueInput>;
  create?: InputMaybe<JobCandidateCreateInput>;
};

export type JobCandidateRelateToOneForUpdateInput = {
  connect?: InputMaybe<JobCandidateWhereUniqueInput>;
  create?: InputMaybe<JobCandidateCreateInput>;
  disconnect?: InputMaybe<Scalars['Boolean']['input']>;
};

export type JobCandidateUpdateArgs = {
  data: JobCandidateUpdateInput;
  where: JobCandidateWhereUniqueInput;
};

export type JobCandidateUpdateInput = {
  address?: InputMaybe<Scalars['String']['input']>;
  applications?: InputMaybe<ApplicationRelateToManyForUpdateInput>;
  appliedAt?: InputMaybe<Scalars['DateTime']['input']>;
  city?: InputMaybe<Scalars['String']['input']>;
  country?: InputMaybe<Scalars['String']['input']>;
  desiredPay?: InputMaybe<Scalars['Float']['input']>;
  email?: InputMaybe<Scalars['String']['input']>;
  lastName?: InputMaybe<Scalars['String']['input']>;
  linkedin?: InputMaybe<Scalars['String']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
  phone?: InputMaybe<Scalars['String']['input']>;
  postalCode?: InputMaybe<Scalars['String']['input']>;
  province?: InputMaybe<Scalars['String']['input']>;
  resumeUrl?: InputMaybe<Scalars['String']['input']>;
  website?: InputMaybe<Scalars['String']['input']>;
};

export type JobCandidateWhereInput = {
  AND?: InputMaybe<Array<JobCandidateWhereInput>>;
  NOT?: InputMaybe<Array<JobCandidateWhereInput>>;
  OR?: InputMaybe<Array<JobCandidateWhereInput>>;
  address?: InputMaybe<StringFilter>;
  applications?: InputMaybe<ApplicationManyRelationFilter>;
  appliedAt?: InputMaybe<DateTimeNullableFilter>;
  city?: InputMaybe<StringFilter>;
  country?: InputMaybe<StringFilter>;
  desiredPay?: InputMaybe<FloatNullableFilter>;
  email?: InputMaybe<StringFilter>;
  id?: InputMaybe<IdFilter>;
  lastName?: InputMaybe<StringFilter>;
  linkedin?: InputMaybe<StringFilter>;
  name?: InputMaybe<StringFilter>;
  phone?: InputMaybe<StringFilter>;
  postalCode?: InputMaybe<StringFilter>;
  province?: InputMaybe<StringFilter>;
  resumeUrl?: InputMaybe<StringFilter>;
  website?: InputMaybe<StringFilter>;
};

export type JobCandidateWhereUniqueInput = {
  email?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['ID']['input']>;
};

export type JobOpening = {
  __typename?: 'JobOpening';
  applications?: Maybe<Array<Application>>;
  applicationsCount?: Maybe<Scalars['Int']['output']>;
  department?: Maybe<Scalars['String']['output']>;
  description?: Maybe<Scalars['String']['output']>;
  employmentType?: Maybe<Scalars['String']['output']>;
  id: Scalars['ID']['output'];
  location?: Maybe<Scalars['String']['output']>;
  postedAt?: Maybe<Scalars['DateTime']['output']>;
  seniority?: Maybe<Scalars['String']['output']>;
  title?: Maybe<Scalars['String']['output']>;
};


export type JobOpeningApplicationsArgs = {
  cursor?: InputMaybe<ApplicationWhereUniqueInput>;
  orderBy?: Array<ApplicationOrderByInput>;
  skip?: Scalars['Int']['input'];
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: ApplicationWhereInput;
};


export type JobOpeningApplicationsCountArgs = {
  where?: ApplicationWhereInput;
};

export type JobOpeningCreateInput = {
  applications?: InputMaybe<ApplicationRelateToManyForCreateInput>;
  department?: InputMaybe<Scalars['String']['input']>;
  description?: InputMaybe<Scalars['String']['input']>;
  employmentType?: InputMaybe<Scalars['String']['input']>;
  location?: InputMaybe<Scalars['String']['input']>;
  postedAt?: InputMaybe<Scalars['DateTime']['input']>;
  seniority?: InputMaybe<Scalars['String']['input']>;
  title?: InputMaybe<Scalars['String']['input']>;
};

export type JobOpeningOrderByInput = {
  department?: InputMaybe<OrderDirection>;
  description?: InputMaybe<OrderDirection>;
  employmentType?: InputMaybe<OrderDirection>;
  id?: InputMaybe<OrderDirection>;
  location?: InputMaybe<OrderDirection>;
  postedAt?: InputMaybe<OrderDirection>;
  seniority?: InputMaybe<OrderDirection>;
  title?: InputMaybe<OrderDirection>;
};

export type JobOpeningRelateToOneForCreateInput = {
  connect?: InputMaybe<JobOpeningWhereUniqueInput>;
  create?: InputMaybe<JobOpeningCreateInput>;
};

export type JobOpeningRelateToOneForUpdateInput = {
  connect?: InputMaybe<JobOpeningWhereUniqueInput>;
  create?: InputMaybe<JobOpeningCreateInput>;
  disconnect?: InputMaybe<Scalars['Boolean']['input']>;
};

export type JobOpeningUpdateArgs = {
  data: JobOpeningUpdateInput;
  where: JobOpeningWhereUniqueInput;
};

export type JobOpeningUpdateInput = {
  applications?: InputMaybe<ApplicationRelateToManyForUpdateInput>;
  department?: InputMaybe<Scalars['String']['input']>;
  description?: InputMaybe<Scalars['String']['input']>;
  employmentType?: InputMaybe<Scalars['String']['input']>;
  location?: InputMaybe<Scalars['String']['input']>;
  postedAt?: InputMaybe<Scalars['DateTime']['input']>;
  seniority?: InputMaybe<Scalars['String']['input']>;
  title?: InputMaybe<Scalars['String']['input']>;
};

export type JobOpeningWhereInput = {
  AND?: InputMaybe<Array<JobOpeningWhereInput>>;
  NOT?: InputMaybe<Array<JobOpeningWhereInput>>;
  OR?: InputMaybe<Array<JobOpeningWhereInput>>;
  applications?: InputMaybe<ApplicationManyRelationFilter>;
  department?: InputMaybe<StringFilter>;
  description?: InputMaybe<StringFilter>;
  employmentType?: InputMaybe<StringNullableFilter>;
  id?: InputMaybe<IdFilter>;
  location?: InputMaybe<StringFilter>;
  postedAt?: InputMaybe<DateTimeNullableFilter>;
  seniority?: InputMaybe<StringNullableFilter>;
  title?: InputMaybe<StringFilter>;
};

export type JobOpeningWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']['input']>;
};

export type Kpi = {
  __typename?: 'KPI';
  category?: Maybe<CategoryKpi>;
  createdAt?: Maybe<Scalars['DateTime']['output']>;
  currentValue?: Maybe<Scalars['Float']['output']>;
  dateTarget?: Maybe<Scalars['DateTime']['output']>;
  description?: Maybe<Scalars['String']['output']>;
  id: Scalars['ID']['output'];
  target?: Maybe<Scalars['Float']['output']>;
  title?: Maybe<Scalars['String']['output']>;
  updatedAt?: Maybe<Scalars['DateTime']['output']>;
  visible?: Maybe<Scalars['Boolean']['output']>;
};

export type KpiCreateInput = {
  category?: InputMaybe<CategoryKpiRelateToOneForCreateInput>;
  createdAt?: InputMaybe<Scalars['DateTime']['input']>;
  currentValue?: InputMaybe<Scalars['Float']['input']>;
  dateTarget?: InputMaybe<Scalars['DateTime']['input']>;
  description?: InputMaybe<Scalars['String']['input']>;
  target?: InputMaybe<Scalars['Float']['input']>;
  title?: InputMaybe<Scalars['String']['input']>;
  updatedAt?: InputMaybe<Scalars['DateTime']['input']>;
  visible?: InputMaybe<Scalars['Boolean']['input']>;
};

export type KpiManyRelationFilter = {
  every?: InputMaybe<KpiWhereInput>;
  none?: InputMaybe<KpiWhereInput>;
  some?: InputMaybe<KpiWhereInput>;
};

export type KpiOrderByInput = {
  createdAt?: InputMaybe<OrderDirection>;
  currentValue?: InputMaybe<OrderDirection>;
  dateTarget?: InputMaybe<OrderDirection>;
  description?: InputMaybe<OrderDirection>;
  id?: InputMaybe<OrderDirection>;
  target?: InputMaybe<OrderDirection>;
  title?: InputMaybe<OrderDirection>;
  updatedAt?: InputMaybe<OrderDirection>;
  visible?: InputMaybe<OrderDirection>;
};

export type KpiRelateToManyForCreateInput = {
  connect?: InputMaybe<Array<KpiWhereUniqueInput>>;
  create?: InputMaybe<Array<KpiCreateInput>>;
};

export type KpiRelateToManyForUpdateInput = {
  connect?: InputMaybe<Array<KpiWhereUniqueInput>>;
  create?: InputMaybe<Array<KpiCreateInput>>;
  disconnect?: InputMaybe<Array<KpiWhereUniqueInput>>;
  set?: InputMaybe<Array<KpiWhereUniqueInput>>;
};

export type KpiUpdateArgs = {
  data: KpiUpdateInput;
  where: KpiWhereUniqueInput;
};

export type KpiUpdateInput = {
  category?: InputMaybe<CategoryKpiRelateToOneForUpdateInput>;
  createdAt?: InputMaybe<Scalars['DateTime']['input']>;
  currentValue?: InputMaybe<Scalars['Float']['input']>;
  dateTarget?: InputMaybe<Scalars['DateTime']['input']>;
  description?: InputMaybe<Scalars['String']['input']>;
  target?: InputMaybe<Scalars['Float']['input']>;
  title?: InputMaybe<Scalars['String']['input']>;
  updatedAt?: InputMaybe<Scalars['DateTime']['input']>;
  visible?: InputMaybe<Scalars['Boolean']['input']>;
};

export type KpiWhereInput = {
  AND?: InputMaybe<Array<KpiWhereInput>>;
  NOT?: InputMaybe<Array<KpiWhereInput>>;
  OR?: InputMaybe<Array<KpiWhereInput>>;
  category?: InputMaybe<CategoryKpiWhereInput>;
  createdAt?: InputMaybe<DateTimeNullableFilter>;
  currentValue?: InputMaybe<FloatNullableFilter>;
  dateTarget?: InputMaybe<DateTimeFilter>;
  description?: InputMaybe<StringFilter>;
  id?: InputMaybe<IdFilter>;
  target?: InputMaybe<FloatFilter>;
  title?: InputMaybe<StringFilter>;
  updatedAt?: InputMaybe<DateTimeNullableFilter>;
  visible?: InputMaybe<BooleanFilter>;
};

export type KpiWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']['input']>;
};

export type KeystoneAdminMeta = {
  __typename?: 'KeystoneAdminMeta';
  list?: Maybe<KeystoneAdminUiListMeta>;
  lists: Array<KeystoneAdminUiListMeta>;
};


export type KeystoneAdminMetaListArgs = {
  key: Scalars['String']['input'];
};

export type KeystoneAdminUiFieldGroupMeta = {
  __typename?: 'KeystoneAdminUIFieldGroupMeta';
  description?: Maybe<Scalars['String']['output']>;
  fields: Array<KeystoneAdminUiFieldMeta>;
  label: Scalars['String']['output'];
};

export type KeystoneAdminUiFieldMeta = {
  __typename?: 'KeystoneAdminUIFieldMeta';
  createView: KeystoneAdminUiFieldMetaCreateView;
  customViewsIndex?: Maybe<Scalars['Int']['output']>;
  description?: Maybe<Scalars['String']['output']>;
  fieldMeta?: Maybe<Scalars['JSON']['output']>;
  isFilterable: Scalars['Boolean']['output'];
  isNonNull?: Maybe<Array<KeystoneAdminUiFieldMetaIsNonNull>>;
  isOrderable: Scalars['Boolean']['output'];
  itemView?: Maybe<KeystoneAdminUiFieldMetaItemView>;
  label: Scalars['String']['output'];
  listView: KeystoneAdminUiFieldMetaListView;
  path: Scalars['String']['output'];
  search?: Maybe<QueryMode>;
  viewsIndex: Scalars['Int']['output'];
};


export type KeystoneAdminUiFieldMetaItemViewArgs = {
  id?: InputMaybe<Scalars['ID']['input']>;
};

export type KeystoneAdminUiFieldMetaCreateView = {
  __typename?: 'KeystoneAdminUIFieldMetaCreateView';
  fieldMode: KeystoneAdminUiFieldMetaCreateViewFieldMode;
};

export enum KeystoneAdminUiFieldMetaCreateViewFieldMode {
  Edit = 'edit',
  Hidden = 'hidden'
}

export enum KeystoneAdminUiFieldMetaIsNonNull {
  Create = 'create',
  Read = 'read',
  Update = 'update'
}

export type KeystoneAdminUiFieldMetaItemView = {
  __typename?: 'KeystoneAdminUIFieldMetaItemView';
  fieldMode?: Maybe<KeystoneAdminUiFieldMetaItemViewFieldMode>;
  fieldPosition?: Maybe<KeystoneAdminUiFieldMetaItemViewFieldPosition>;
};

export enum KeystoneAdminUiFieldMetaItemViewFieldMode {
  Edit = 'edit',
  Hidden = 'hidden',
  Read = 'read'
}

export enum KeystoneAdminUiFieldMetaItemViewFieldPosition {
  Form = 'form',
  Sidebar = 'sidebar'
}

export type KeystoneAdminUiFieldMetaListView = {
  __typename?: 'KeystoneAdminUIFieldMetaListView';
  fieldMode: KeystoneAdminUiFieldMetaListViewFieldMode;
};

export enum KeystoneAdminUiFieldMetaListViewFieldMode {
  Hidden = 'hidden',
  Read = 'read'
}

export type KeystoneAdminUiGraphQl = {
  __typename?: 'KeystoneAdminUIGraphQL';
  names: KeystoneAdminUiGraphQlNames;
};

export type KeystoneAdminUiGraphQlNames = {
  __typename?: 'KeystoneAdminUIGraphQLNames';
  createInputName: Scalars['String']['output'];
  createManyMutationName: Scalars['String']['output'];
  createMutationName: Scalars['String']['output'];
  deleteManyMutationName: Scalars['String']['output'];
  deleteMutationName: Scalars['String']['output'];
  itemQueryName: Scalars['String']['output'];
  listOrderName: Scalars['String']['output'];
  listQueryCountName: Scalars['String']['output'];
  listQueryName: Scalars['String']['output'];
  outputTypeName: Scalars['String']['output'];
  relateToManyForCreateInputName: Scalars['String']['output'];
  relateToManyForUpdateInputName: Scalars['String']['output'];
  relateToOneForCreateInputName: Scalars['String']['output'];
  relateToOneForUpdateInputName: Scalars['String']['output'];
  updateInputName: Scalars['String']['output'];
  updateManyInputName: Scalars['String']['output'];
  updateManyMutationName: Scalars['String']['output'];
  updateMutationName: Scalars['String']['output'];
  whereInputName: Scalars['String']['output'];
  whereUniqueInputName: Scalars['String']['output'];
};

export type KeystoneAdminUiListMeta = {
  __typename?: 'KeystoneAdminUIListMeta';
  description?: Maybe<Scalars['String']['output']>;
  fields: Array<KeystoneAdminUiFieldMeta>;
  graphql: KeystoneAdminUiGraphQl;
  groups: Array<KeystoneAdminUiFieldGroupMeta>;
  hideCreate: Scalars['Boolean']['output'];
  hideDelete: Scalars['Boolean']['output'];
  initialColumns: Array<Scalars['String']['output']>;
  initialSearchFields: Array<Scalars['String']['output']>;
  initialSort?: Maybe<KeystoneAdminUiSort>;
  isHidden: Scalars['Boolean']['output'];
  isSingleton: Scalars['Boolean']['output'];
  itemQueryName: Scalars['String']['output'];
  key: Scalars['String']['output'];
  label: Scalars['String']['output'];
  labelField: Scalars['String']['output'];
  listQueryName: Scalars['String']['output'];
  pageSize: Scalars['Int']['output'];
  path: Scalars['String']['output'];
  plural: Scalars['String']['output'];
  singular: Scalars['String']['output'];
};

export type KeystoneAdminUiSort = {
  __typename?: 'KeystoneAdminUISort';
  direction: KeystoneAdminUiSortDirection;
  field: Scalars['String']['output'];
};

export enum KeystoneAdminUiSortDirection {
  Asc = 'ASC',
  Desc = 'DESC'
}

export type KeystoneMeta = {
  __typename?: 'KeystoneMeta';
  adminMeta: KeystoneAdminMeta;
};

export type LandCoverStatistic = {
  __typename?: 'LandCoverStatistic';
  breakdown?: Maybe<Scalars['JSON']['output']>;
  field?: Maybe<Field>;
  id: Scalars['ID']['output'];
  imageUrl?: Maybe<Scalars['String']['output']>;
  recordedAt?: Maybe<Scalars['DateTime']['output']>;
  year?: Maybe<Scalars['Int']['output']>;
};

export type LandCoverStatisticCreateInput = {
  breakdown?: InputMaybe<Scalars['JSON']['input']>;
  field?: InputMaybe<FieldRelateToOneForCreateInput>;
  imageUrl?: InputMaybe<Scalars['String']['input']>;
  recordedAt?: InputMaybe<Scalars['DateTime']['input']>;
  year?: InputMaybe<Scalars['Int']['input']>;
};

export type LandCoverStatisticManyRelationFilter = {
  every?: InputMaybe<LandCoverStatisticWhereInput>;
  none?: InputMaybe<LandCoverStatisticWhereInput>;
  some?: InputMaybe<LandCoverStatisticWhereInput>;
};

export type LandCoverStatisticOrderByInput = {
  id?: InputMaybe<OrderDirection>;
  imageUrl?: InputMaybe<OrderDirection>;
  recordedAt?: InputMaybe<OrderDirection>;
  year?: InputMaybe<OrderDirection>;
};

export type LandCoverStatisticRelateToManyForCreateInput = {
  connect?: InputMaybe<Array<LandCoverStatisticWhereUniqueInput>>;
  create?: InputMaybe<Array<LandCoverStatisticCreateInput>>;
};

export type LandCoverStatisticRelateToManyForUpdateInput = {
  connect?: InputMaybe<Array<LandCoverStatisticWhereUniqueInput>>;
  create?: InputMaybe<Array<LandCoverStatisticCreateInput>>;
  disconnect?: InputMaybe<Array<LandCoverStatisticWhereUniqueInput>>;
  set?: InputMaybe<Array<LandCoverStatisticWhereUniqueInput>>;
};

export type LandCoverStatisticUpdateArgs = {
  data: LandCoverStatisticUpdateInput;
  where: LandCoverStatisticWhereUniqueInput;
};

export type LandCoverStatisticUpdateInput = {
  breakdown?: InputMaybe<Scalars['JSON']['input']>;
  field?: InputMaybe<FieldRelateToOneForUpdateInput>;
  imageUrl?: InputMaybe<Scalars['String']['input']>;
  recordedAt?: InputMaybe<Scalars['DateTime']['input']>;
  year?: InputMaybe<Scalars['Int']['input']>;
};

export type LandCoverStatisticWhereInput = {
  AND?: InputMaybe<Array<LandCoverStatisticWhereInput>>;
  NOT?: InputMaybe<Array<LandCoverStatisticWhereInput>>;
  OR?: InputMaybe<Array<LandCoverStatisticWhereInput>>;
  field?: InputMaybe<FieldWhereInput>;
  id?: InputMaybe<IdFilter>;
  imageUrl?: InputMaybe<StringFilter>;
  recordedAt?: InputMaybe<DateTimeNullableFilter>;
  year?: InputMaybe<IntNullableFilter>;
};

export type LandCoverStatisticWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']['input']>;
};

export type Membership = {
  __typename?: 'Membership';
  id: Scalars['ID']['output'];
  organisation?: Maybe<Organisation>;
  role?: Maybe<Scalars['String']['output']>;
  user?: Maybe<User>;
};

export type MembershipCreateInput = {
  organisation?: InputMaybe<OrganisationRelateToOneForCreateInput>;
  role?: InputMaybe<Scalars['String']['input']>;
  user?: InputMaybe<UserRelateToOneForCreateInput>;
};

export type MembershipManyRelationFilter = {
  every?: InputMaybe<MembershipWhereInput>;
  none?: InputMaybe<MembershipWhereInput>;
  some?: InputMaybe<MembershipWhereInput>;
};

export type MembershipOrderByInput = {
  id?: InputMaybe<OrderDirection>;
  role?: InputMaybe<OrderDirection>;
};

export type MembershipRelateToManyForCreateInput = {
  connect?: InputMaybe<Array<MembershipWhereUniqueInput>>;
  create?: InputMaybe<Array<MembershipCreateInput>>;
};

export type MembershipRelateToManyForUpdateInput = {
  connect?: InputMaybe<Array<MembershipWhereUniqueInput>>;
  create?: InputMaybe<Array<MembershipCreateInput>>;
  disconnect?: InputMaybe<Array<MembershipWhereUniqueInput>>;
  set?: InputMaybe<Array<MembershipWhereUniqueInput>>;
};

export type MembershipUpdateArgs = {
  data: MembershipUpdateInput;
  where: MembershipWhereUniqueInput;
};

export type MembershipUpdateInput = {
  organisation?: InputMaybe<OrganisationRelateToOneForUpdateInput>;
  role?: InputMaybe<Scalars['String']['input']>;
  user?: InputMaybe<UserRelateToOneForUpdateInput>;
};

export type MembershipWhereInput = {
  AND?: InputMaybe<Array<MembershipWhereInput>>;
  NOT?: InputMaybe<Array<MembershipWhereInput>>;
  OR?: InputMaybe<Array<MembershipWhereInput>>;
  id?: InputMaybe<IdFilter>;
  organisation?: InputMaybe<OrganisationWhereInput>;
  role?: InputMaybe<StringNullableFilter>;
  user?: InputMaybe<UserWhereInput>;
};

export type MembershipWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']['input']>;
};

export type MessageClick = {
  __typename?: 'MessageClick';
  clickedAt?: Maybe<Scalars['DateTime']['output']>;
  delivery?: Maybe<MessageDelivery>;
  id: Scalars['ID']['output'];
};

export type MessageClickCreateInput = {
  clickedAt?: InputMaybe<Scalars['DateTime']['input']>;
  delivery?: InputMaybe<MessageDeliveryRelateToOneForCreateInput>;
};

export type MessageClickManyRelationFilter = {
  every?: InputMaybe<MessageClickWhereInput>;
  none?: InputMaybe<MessageClickWhereInput>;
  some?: InputMaybe<MessageClickWhereInput>;
};

export type MessageClickOrderByInput = {
  clickedAt?: InputMaybe<OrderDirection>;
  id?: InputMaybe<OrderDirection>;
};

export type MessageClickRelateToManyForCreateInput = {
  connect?: InputMaybe<Array<MessageClickWhereUniqueInput>>;
  create?: InputMaybe<Array<MessageClickCreateInput>>;
};

export type MessageClickRelateToManyForUpdateInput = {
  connect?: InputMaybe<Array<MessageClickWhereUniqueInput>>;
  create?: InputMaybe<Array<MessageClickCreateInput>>;
  disconnect?: InputMaybe<Array<MessageClickWhereUniqueInput>>;
  set?: InputMaybe<Array<MessageClickWhereUniqueInput>>;
};

export type MessageClickUpdateArgs = {
  data: MessageClickUpdateInput;
  where: MessageClickWhereUniqueInput;
};

export type MessageClickUpdateInput = {
  clickedAt?: InputMaybe<Scalars['DateTime']['input']>;
  delivery?: InputMaybe<MessageDeliveryRelateToOneForUpdateInput>;
};

export type MessageClickWhereInput = {
  AND?: InputMaybe<Array<MessageClickWhereInput>>;
  NOT?: InputMaybe<Array<MessageClickWhereInput>>;
  OR?: InputMaybe<Array<MessageClickWhereInput>>;
  clickedAt?: InputMaybe<DateTimeNullableFilter>;
  delivery?: InputMaybe<MessageDeliveryWhereInput>;
  id?: InputMaybe<IdFilter>;
};

export type MessageClickWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']['input']>;
};

export type MessageDelivery = {
  __typename?: 'MessageDelivery';
  clicks?: Maybe<Array<MessageClick>>;
  clicksCount?: Maybe<Scalars['Int']['output']>;
  createdAt?: Maybe<Scalars['DateTime']['output']>;
  id: Scalars['ID']['output'];
  lastShownAt?: Maybe<Scalars['DateTime']['output']>;
  organisation?: Maybe<Organisation>;
  status?: Maybe<Scalars['String']['output']>;
  template?: Maybe<MessageTemplate>;
  urgency?: Maybe<Scalars['String']['output']>;
  user?: Maybe<User>;
  views?: Maybe<Scalars['Int']['output']>;
};


export type MessageDeliveryClicksArgs = {
  cursor?: InputMaybe<MessageClickWhereUniqueInput>;
  orderBy?: Array<MessageClickOrderByInput>;
  skip?: Scalars['Int']['input'];
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: MessageClickWhereInput;
};


export type MessageDeliveryClicksCountArgs = {
  where?: MessageClickWhereInput;
};

export type MessageDeliveryCreateInput = {
  clicks?: InputMaybe<MessageClickRelateToManyForCreateInput>;
  createdAt?: InputMaybe<Scalars['DateTime']['input']>;
  lastShownAt?: InputMaybe<Scalars['DateTime']['input']>;
  organisation?: InputMaybe<OrganisationRelateToOneForCreateInput>;
  status?: InputMaybe<Scalars['String']['input']>;
  template?: InputMaybe<MessageTemplateRelateToOneForCreateInput>;
  urgency?: InputMaybe<Scalars['String']['input']>;
  user?: InputMaybe<UserRelateToOneForCreateInput>;
  views?: InputMaybe<Scalars['Int']['input']>;
};

export type MessageDeliveryManyRelationFilter = {
  every?: InputMaybe<MessageDeliveryWhereInput>;
  none?: InputMaybe<MessageDeliveryWhereInput>;
  some?: InputMaybe<MessageDeliveryWhereInput>;
};

export type MessageDeliveryOrderByInput = {
  createdAt?: InputMaybe<OrderDirection>;
  id?: InputMaybe<OrderDirection>;
  lastShownAt?: InputMaybe<OrderDirection>;
  status?: InputMaybe<OrderDirection>;
  urgency?: InputMaybe<OrderDirection>;
  views?: InputMaybe<OrderDirection>;
};

export type MessageDeliveryRelateToManyForCreateInput = {
  connect?: InputMaybe<Array<MessageDeliveryWhereUniqueInput>>;
  create?: InputMaybe<Array<MessageDeliveryCreateInput>>;
};

export type MessageDeliveryRelateToManyForUpdateInput = {
  connect?: InputMaybe<Array<MessageDeliveryWhereUniqueInput>>;
  create?: InputMaybe<Array<MessageDeliveryCreateInput>>;
  disconnect?: InputMaybe<Array<MessageDeliveryWhereUniqueInput>>;
  set?: InputMaybe<Array<MessageDeliveryWhereUniqueInput>>;
};

export type MessageDeliveryRelateToOneForCreateInput = {
  connect?: InputMaybe<MessageDeliveryWhereUniqueInput>;
  create?: InputMaybe<MessageDeliveryCreateInput>;
};

export type MessageDeliveryRelateToOneForUpdateInput = {
  connect?: InputMaybe<MessageDeliveryWhereUniqueInput>;
  create?: InputMaybe<MessageDeliveryCreateInput>;
  disconnect?: InputMaybe<Scalars['Boolean']['input']>;
};

export type MessageDeliveryUpdateArgs = {
  data: MessageDeliveryUpdateInput;
  where: MessageDeliveryWhereUniqueInput;
};

export type MessageDeliveryUpdateInput = {
  clicks?: InputMaybe<MessageClickRelateToManyForUpdateInput>;
  createdAt?: InputMaybe<Scalars['DateTime']['input']>;
  lastShownAt?: InputMaybe<Scalars['DateTime']['input']>;
  organisation?: InputMaybe<OrganisationRelateToOneForUpdateInput>;
  status?: InputMaybe<Scalars['String']['input']>;
  template?: InputMaybe<MessageTemplateRelateToOneForUpdateInput>;
  urgency?: InputMaybe<Scalars['String']['input']>;
  user?: InputMaybe<UserRelateToOneForUpdateInput>;
  views?: InputMaybe<Scalars['Int']['input']>;
};

export type MessageDeliveryWhereInput = {
  AND?: InputMaybe<Array<MessageDeliveryWhereInput>>;
  NOT?: InputMaybe<Array<MessageDeliveryWhereInput>>;
  OR?: InputMaybe<Array<MessageDeliveryWhereInput>>;
  clicks?: InputMaybe<MessageClickManyRelationFilter>;
  createdAt?: InputMaybe<DateTimeNullableFilter>;
  id?: InputMaybe<IdFilter>;
  lastShownAt?: InputMaybe<DateTimeNullableFilter>;
  organisation?: InputMaybe<OrganisationWhereInput>;
  status?: InputMaybe<StringNullableFilter>;
  template?: InputMaybe<MessageTemplateWhereInput>;
  urgency?: InputMaybe<StringNullableFilter>;
  user?: InputMaybe<UserWhereInput>;
  views?: InputMaybe<IntNullableFilter>;
};

export type MessageDeliveryWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']['input']>;
};

export type MessageTemplate = {
  __typename?: 'MessageTemplate';
  bodyMarkdown?: Maybe<Scalars['String']['output']>;
  channelMask?: Maybe<Scalars['JSON']['output']>;
  countryScope?: Maybe<Scalars['JSON']['output']>;
  createdAt?: Maybe<Scalars['DateTime']['output']>;
  ctaLabel?: Maybe<Scalars['String']['output']>;
  ctaLink?: Maybe<Scalars['String']['output']>;
  deliveries?: Maybe<Array<MessageDelivery>>;
  deliveriesCount?: Maybe<Scalars['Int']['output']>;
  endAt?: Maybe<Scalars['DateTime']['output']>;
  id: Scalars['ID']['output'];
  langScope?: Maybe<Scalars['JSON']['output']>;
  maxViews?: Maybe<Scalars['Int']['output']>;
  mediaId?: Maybe<Scalars['String']['output']>;
  requireAcknowledgement?: Maybe<Scalars['Boolean']['output']>;
  startAt?: Maybe<Scalars['DateTime']['output']>;
  tags?: Maybe<Scalars['JSON']['output']>;
  targetFarmSizeHaMax?: Maybe<Scalars['Float']['output']>;
  targetFarmSizeHaMin?: Maybe<Scalars['Float']['output']>;
  targetOrganisationIds?: Maybe<Scalars['JSON']['output']>;
  targetPlans?: Maybe<Scalars['JSON']['output']>;
  targetRoles?: Maybe<Scalars['JSON']['output']>;
  title?: Maybe<Scalars['String']['output']>;
  type?: Maybe<Scalars['String']['output']>;
  updatedAt?: Maybe<Scalars['DateTime']['output']>;
  urgency?: Maybe<Scalars['String']['output']>;
};


export type MessageTemplateDeliveriesArgs = {
  cursor?: InputMaybe<MessageDeliveryWhereUniqueInput>;
  orderBy?: Array<MessageDeliveryOrderByInput>;
  skip?: Scalars['Int']['input'];
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: MessageDeliveryWhereInput;
};


export type MessageTemplateDeliveriesCountArgs = {
  where?: MessageDeliveryWhereInput;
};

export type MessageTemplateCreateInput = {
  bodyMarkdown?: InputMaybe<Scalars['String']['input']>;
  channelMask?: InputMaybe<Scalars['JSON']['input']>;
  countryScope?: InputMaybe<Scalars['JSON']['input']>;
  createdAt?: InputMaybe<Scalars['DateTime']['input']>;
  ctaLabel?: InputMaybe<Scalars['String']['input']>;
  ctaLink?: InputMaybe<Scalars['String']['input']>;
  deliveries?: InputMaybe<MessageDeliveryRelateToManyForCreateInput>;
  endAt?: InputMaybe<Scalars['DateTime']['input']>;
  langScope?: InputMaybe<Scalars['JSON']['input']>;
  maxViews?: InputMaybe<Scalars['Int']['input']>;
  mediaId?: InputMaybe<Scalars['String']['input']>;
  requireAcknowledgement?: InputMaybe<Scalars['Boolean']['input']>;
  startAt?: InputMaybe<Scalars['DateTime']['input']>;
  tags?: InputMaybe<Scalars['JSON']['input']>;
  targetFarmSizeHaMax?: InputMaybe<Scalars['Float']['input']>;
  targetFarmSizeHaMin?: InputMaybe<Scalars['Float']['input']>;
  targetOrganisationIds?: InputMaybe<Scalars['JSON']['input']>;
  targetPlans?: InputMaybe<Scalars['JSON']['input']>;
  targetRoles?: InputMaybe<Scalars['JSON']['input']>;
  title?: InputMaybe<Scalars['String']['input']>;
  type?: InputMaybe<Scalars['String']['input']>;
  updatedAt?: InputMaybe<Scalars['DateTime']['input']>;
  urgency?: InputMaybe<Scalars['String']['input']>;
};

export type MessageTemplateOrderByInput = {
  bodyMarkdown?: InputMaybe<OrderDirection>;
  createdAt?: InputMaybe<OrderDirection>;
  ctaLabel?: InputMaybe<OrderDirection>;
  ctaLink?: InputMaybe<OrderDirection>;
  endAt?: InputMaybe<OrderDirection>;
  id?: InputMaybe<OrderDirection>;
  maxViews?: InputMaybe<OrderDirection>;
  mediaId?: InputMaybe<OrderDirection>;
  requireAcknowledgement?: InputMaybe<OrderDirection>;
  startAt?: InputMaybe<OrderDirection>;
  targetFarmSizeHaMax?: InputMaybe<OrderDirection>;
  targetFarmSizeHaMin?: InputMaybe<OrderDirection>;
  title?: InputMaybe<OrderDirection>;
  type?: InputMaybe<OrderDirection>;
  updatedAt?: InputMaybe<OrderDirection>;
  urgency?: InputMaybe<OrderDirection>;
};

export type MessageTemplateRelateToOneForCreateInput = {
  connect?: InputMaybe<MessageTemplateWhereUniqueInput>;
  create?: InputMaybe<MessageTemplateCreateInput>;
};

export type MessageTemplateRelateToOneForUpdateInput = {
  connect?: InputMaybe<MessageTemplateWhereUniqueInput>;
  create?: InputMaybe<MessageTemplateCreateInput>;
  disconnect?: InputMaybe<Scalars['Boolean']['input']>;
};

export type MessageTemplateUpdateArgs = {
  data: MessageTemplateUpdateInput;
  where: MessageTemplateWhereUniqueInput;
};

export type MessageTemplateUpdateInput = {
  bodyMarkdown?: InputMaybe<Scalars['String']['input']>;
  channelMask?: InputMaybe<Scalars['JSON']['input']>;
  countryScope?: InputMaybe<Scalars['JSON']['input']>;
  createdAt?: InputMaybe<Scalars['DateTime']['input']>;
  ctaLabel?: InputMaybe<Scalars['String']['input']>;
  ctaLink?: InputMaybe<Scalars['String']['input']>;
  deliveries?: InputMaybe<MessageDeliveryRelateToManyForUpdateInput>;
  endAt?: InputMaybe<Scalars['DateTime']['input']>;
  langScope?: InputMaybe<Scalars['JSON']['input']>;
  maxViews?: InputMaybe<Scalars['Int']['input']>;
  mediaId?: InputMaybe<Scalars['String']['input']>;
  requireAcknowledgement?: InputMaybe<Scalars['Boolean']['input']>;
  startAt?: InputMaybe<Scalars['DateTime']['input']>;
  tags?: InputMaybe<Scalars['JSON']['input']>;
  targetFarmSizeHaMax?: InputMaybe<Scalars['Float']['input']>;
  targetFarmSizeHaMin?: InputMaybe<Scalars['Float']['input']>;
  targetOrganisationIds?: InputMaybe<Scalars['JSON']['input']>;
  targetPlans?: InputMaybe<Scalars['JSON']['input']>;
  targetRoles?: InputMaybe<Scalars['JSON']['input']>;
  title?: InputMaybe<Scalars['String']['input']>;
  type?: InputMaybe<Scalars['String']['input']>;
  updatedAt?: InputMaybe<Scalars['DateTime']['input']>;
  urgency?: InputMaybe<Scalars['String']['input']>;
};

export type MessageTemplateWhereInput = {
  AND?: InputMaybe<Array<MessageTemplateWhereInput>>;
  NOT?: InputMaybe<Array<MessageTemplateWhereInput>>;
  OR?: InputMaybe<Array<MessageTemplateWhereInput>>;
  bodyMarkdown?: InputMaybe<StringFilter>;
  createdAt?: InputMaybe<DateTimeNullableFilter>;
  ctaLabel?: InputMaybe<StringFilter>;
  ctaLink?: InputMaybe<StringFilter>;
  deliveries?: InputMaybe<MessageDeliveryManyRelationFilter>;
  endAt?: InputMaybe<DateTimeNullableFilter>;
  id?: InputMaybe<IdFilter>;
  maxViews?: InputMaybe<IntNullableFilter>;
  mediaId?: InputMaybe<StringFilter>;
  requireAcknowledgement?: InputMaybe<BooleanFilter>;
  startAt?: InputMaybe<DateTimeNullableFilter>;
  targetFarmSizeHaMax?: InputMaybe<FloatNullableFilter>;
  targetFarmSizeHaMin?: InputMaybe<FloatNullableFilter>;
  title?: InputMaybe<StringFilter>;
  type?: InputMaybe<StringNullableFilter>;
  updatedAt?: InputMaybe<DateTimeNullableFilter>;
  urgency?: InputMaybe<StringNullableFilter>;
};

export type MessageTemplateWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']['input']>;
};

export type MilkAnalysis = {
  __typename?: 'MilkAnalysis';
  conductivity?: Maybe<Scalars['Float']['output']>;
  fat_pct?: Maybe<Scalars['Float']['output']>;
  id: Scalars['ID']['output'];
  lactose_pct?: Maybe<Scalars['Float']['output']>;
  milking?: Maybe<MilkingEvent>;
  protein_pct?: Maybe<Scalars['Float']['output']>;
  scc?: Maybe<Scalars['Int']['output']>;
  urea_mg_dl?: Maybe<Scalars['Float']['output']>;
};

export type MilkAnalysisCreateInput = {
  conductivity?: InputMaybe<Scalars['Float']['input']>;
  fat_pct?: InputMaybe<Scalars['Float']['input']>;
  lactose_pct?: InputMaybe<Scalars['Float']['input']>;
  milking?: InputMaybe<MilkingEventRelateToOneForCreateInput>;
  protein_pct?: InputMaybe<Scalars['Float']['input']>;
  scc?: InputMaybe<Scalars['Int']['input']>;
  urea_mg_dl?: InputMaybe<Scalars['Float']['input']>;
};

export type MilkAnalysisOrderByInput = {
  conductivity?: InputMaybe<OrderDirection>;
  fat_pct?: InputMaybe<OrderDirection>;
  id?: InputMaybe<OrderDirection>;
  lactose_pct?: InputMaybe<OrderDirection>;
  protein_pct?: InputMaybe<OrderDirection>;
  scc?: InputMaybe<OrderDirection>;
  urea_mg_dl?: InputMaybe<OrderDirection>;
};

export type MilkAnalysisRelateToOneForCreateInput = {
  connect?: InputMaybe<MilkAnalysisWhereUniqueInput>;
  create?: InputMaybe<MilkAnalysisCreateInput>;
};

export type MilkAnalysisRelateToOneForUpdateInput = {
  connect?: InputMaybe<MilkAnalysisWhereUniqueInput>;
  create?: InputMaybe<MilkAnalysisCreateInput>;
  disconnect?: InputMaybe<Scalars['Boolean']['input']>;
};

export type MilkAnalysisUpdateArgs = {
  data: MilkAnalysisUpdateInput;
  where: MilkAnalysisWhereUniqueInput;
};

export type MilkAnalysisUpdateInput = {
  conductivity?: InputMaybe<Scalars['Float']['input']>;
  fat_pct?: InputMaybe<Scalars['Float']['input']>;
  lactose_pct?: InputMaybe<Scalars['Float']['input']>;
  milking?: InputMaybe<MilkingEventRelateToOneForUpdateInput>;
  protein_pct?: InputMaybe<Scalars['Float']['input']>;
  scc?: InputMaybe<Scalars['Int']['input']>;
  urea_mg_dl?: InputMaybe<Scalars['Float']['input']>;
};

export type MilkAnalysisWhereInput = {
  AND?: InputMaybe<Array<MilkAnalysisWhereInput>>;
  NOT?: InputMaybe<Array<MilkAnalysisWhereInput>>;
  OR?: InputMaybe<Array<MilkAnalysisWhereInput>>;
  conductivity?: InputMaybe<FloatNullableFilter>;
  fat_pct?: InputMaybe<FloatNullableFilter>;
  id?: InputMaybe<IdFilter>;
  lactose_pct?: InputMaybe<FloatNullableFilter>;
  milking?: InputMaybe<MilkingEventWhereInput>;
  protein_pct?: InputMaybe<FloatNullableFilter>;
  scc?: InputMaybe<IntNullableFilter>;
  urea_mg_dl?: InputMaybe<FloatNullableFilter>;
};

export type MilkAnalysisWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']['input']>;
};

export type MilkingEvent = {
  __typename?: 'MilkingEvent';
  analysis?: Maybe<MilkAnalysis>;
  barn?: Maybe<Barn>;
  box?: Maybe<Box>;
  dateTime?: Maybe<Scalars['DateTime']['output']>;
  id: Scalars['ID']['output'];
  milk_kg?: Maybe<Scalars['Float']['output']>;
  operator?: Maybe<Operator>;
};

export type MilkingEventCreateInput = {
  analysis?: InputMaybe<MilkAnalysisRelateToOneForCreateInput>;
  barn?: InputMaybe<BarnRelateToOneForCreateInput>;
  box?: InputMaybe<BoxRelateToOneForCreateInput>;
  dateTime?: InputMaybe<Scalars['DateTime']['input']>;
  milk_kg?: InputMaybe<Scalars['Float']['input']>;
  operator?: InputMaybe<OperatorRelateToOneForCreateInput>;
};

export type MilkingEventManyRelationFilter = {
  every?: InputMaybe<MilkingEventWhereInput>;
  none?: InputMaybe<MilkingEventWhereInput>;
  some?: InputMaybe<MilkingEventWhereInput>;
};

export type MilkingEventOrderByInput = {
  dateTime?: InputMaybe<OrderDirection>;
  id?: InputMaybe<OrderDirection>;
  milk_kg?: InputMaybe<OrderDirection>;
};

export type MilkingEventRelateToManyForCreateInput = {
  connect?: InputMaybe<Array<MilkingEventWhereUniqueInput>>;
  create?: InputMaybe<Array<MilkingEventCreateInput>>;
};

export type MilkingEventRelateToManyForUpdateInput = {
  connect?: InputMaybe<Array<MilkingEventWhereUniqueInput>>;
  create?: InputMaybe<Array<MilkingEventCreateInput>>;
  disconnect?: InputMaybe<Array<MilkingEventWhereUniqueInput>>;
  set?: InputMaybe<Array<MilkingEventWhereUniqueInput>>;
};

export type MilkingEventRelateToOneForCreateInput = {
  connect?: InputMaybe<MilkingEventWhereUniqueInput>;
  create?: InputMaybe<MilkingEventCreateInput>;
};

export type MilkingEventRelateToOneForUpdateInput = {
  connect?: InputMaybe<MilkingEventWhereUniqueInput>;
  create?: InputMaybe<MilkingEventCreateInput>;
  disconnect?: InputMaybe<Scalars['Boolean']['input']>;
};

export type MilkingEventUpdateArgs = {
  data: MilkingEventUpdateInput;
  where: MilkingEventWhereUniqueInput;
};

export type MilkingEventUpdateInput = {
  analysis?: InputMaybe<MilkAnalysisRelateToOneForUpdateInput>;
  barn?: InputMaybe<BarnRelateToOneForUpdateInput>;
  box?: InputMaybe<BoxRelateToOneForUpdateInput>;
  dateTime?: InputMaybe<Scalars['DateTime']['input']>;
  milk_kg?: InputMaybe<Scalars['Float']['input']>;
  operator?: InputMaybe<OperatorRelateToOneForUpdateInput>;
};

export type MilkingEventWhereInput = {
  AND?: InputMaybe<Array<MilkingEventWhereInput>>;
  NOT?: InputMaybe<Array<MilkingEventWhereInput>>;
  OR?: InputMaybe<Array<MilkingEventWhereInput>>;
  analysis?: InputMaybe<MilkAnalysisWhereInput>;
  barn?: InputMaybe<BarnWhereInput>;
  box?: InputMaybe<BoxWhereInput>;
  dateTime?: InputMaybe<DateTimeNullableFilter>;
  id?: InputMaybe<IdFilter>;
  milk_kg?: InputMaybe<FloatNullableFilter>;
  operator?: InputMaybe<OperatorWhereInput>;
};

export type MilkingEventWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']['input']>;
};

export type Mutation = {
  __typename?: 'Mutation';
  authenticateUserWithPassword?: Maybe<UserAuthenticationWithPasswordResult>;
  createActivities?: Maybe<Array<Maybe<Activity>>>;
  createActivity?: Maybe<Activity>;
  createActivityImpact?: Maybe<ActivityImpact>;
  createActivityImpacts?: Maybe<Array<Maybe<ActivityImpact>>>;
  createAlert?: Maybe<Alert>;
  createAlerts?: Maybe<Array<Maybe<Alert>>>;
  createAnimal?: Maybe<Animal>;
  createAnimalEvent?: Maybe<AnimalEvent>;
  createAnimalEvents?: Maybe<Array<Maybe<AnimalEvent>>>;
  createAnimals?: Maybe<Array<Maybe<Animal>>>;
  createApplication?: Maybe<Application>;
  createApplicationStatus?: Maybe<ApplicationStatus>;
  createApplicationStatuses?: Maybe<Array<Maybe<ApplicationStatus>>>;
  createApplications?: Maybe<Array<Maybe<Application>>>;
  createAuthor?: Maybe<Author>;
  createAuthors?: Maybe<Array<Maybe<Author>>>;
  createBarn?: Maybe<Barn>;
  createBarnActivities?: Maybe<Array<Maybe<BarnActivity>>>;
  createBarnActivity?: Maybe<BarnActivity>;
  createBarns?: Maybe<Array<Maybe<Barn>>>;
  createBox?: Maybe<Box>;
  createBoxes?: Maybe<Array<Maybe<Box>>>;
  createBreed?: Maybe<Breed>;
  createBreeds?: Maybe<Array<Maybe<Breed>>>;
  createCarbonOffsetFactor?: Maybe<CarbonOffsetFactor>;
  createCarbonOffsetFactors?: Maybe<Array<Maybe<CarbonOffsetFactor>>>;
  createCategories?: Maybe<Array<Maybe<Category>>>;
  createCategory?: Maybe<Category>;
  createCategoryKPI?: Maybe<CategoryKpi>;
  createCategoryKPIS?: Maybe<Array<Maybe<CategoryKpi>>>;
  createChat?: Maybe<Chat>;
  createChats?: Maybe<Array<Maybe<Chat>>>;
  createCrop?: Maybe<Crop>;
  createCropType?: Maybe<CropType>;
  createCropTypes?: Maybe<Array<Maybe<CropType>>>;
  createCrops?: Maybe<Array<Maybe<Crop>>>;
  createDocument?: Maybe<Document>;
  createDocuments?: Maybe<Array<Maybe<Document>>>;
  createEcoScheme?: Maybe<EcoScheme>;
  createEcoSchemes?: Maybe<Array<Maybe<EcoScheme>>>;
  createEmissionScenario?: Maybe<EmissionScenario>;
  createEmissionScenarios?: Maybe<Array<Maybe<EmissionScenario>>>;
  createEquipment?: Maybe<Equipment>;
  createEquipmentList?: Maybe<Array<Maybe<Equipment>>>;
  createFarm?: Maybe<Farm>;
  createFarms?: Maybe<Array<Maybe<Farm>>>;
  createFeedDispenseEvent?: Maybe<FeedDispenseEvent>;
  createFeedDispenseEvents?: Maybe<Array<Maybe<FeedDispenseEvent>>>;
  createFeedLot?: Maybe<FeedLot>;
  createFeedLots?: Maybe<Array<Maybe<FeedLot>>>;
  createFeedRationComponent?: Maybe<FeedRationComponent>;
  createFeedRationComponents?: Maybe<Array<Maybe<FeedRationComponent>>>;
  createFeedRationPlan?: Maybe<FeedRationPlan>;
  createFeedRationPlans?: Maybe<Array<Maybe<FeedRationPlan>>>;
  createFeedSilo?: Maybe<FeedSilo>;
  createFeedSilos?: Maybe<Array<Maybe<FeedSilo>>>;
  createField?: Maybe<Field>;
  createFieldImpactSummaries?: Maybe<Array<Maybe<FieldImpactSummary>>>;
  createFieldImpactSummary?: Maybe<FieldImpactSummary>;
  createFields?: Maybe<Array<Maybe<Field>>>;
  createHerdMetric?: Maybe<HerdMetric>;
  createHerdMetrics?: Maybe<Array<Maybe<HerdMetric>>>;
  createInitialUser: UserAuthenticationWithPasswordSuccess;
  createInterview?: Maybe<Interview>;
  createInterviewStage?: Maybe<InterviewStage>;
  createInterviewStages?: Maybe<Array<Maybe<InterviewStage>>>;
  createInterviews?: Maybe<Array<Maybe<Interview>>>;
  createJobCandidate?: Maybe<JobCandidate>;
  createJobCandidates?: Maybe<Array<Maybe<JobCandidate>>>;
  createJobOpening?: Maybe<JobOpening>;
  createJobOpenings?: Maybe<Array<Maybe<JobOpening>>>;
  createKPI?: Maybe<Kpi>;
  createKPIS?: Maybe<Array<Maybe<Kpi>>>;
  createLandCoverStatistic?: Maybe<LandCoverStatistic>;
  createLandCoverStatistics?: Maybe<Array<Maybe<LandCoverStatistic>>>;
  createMembership?: Maybe<Membership>;
  createMemberships?: Maybe<Array<Maybe<Membership>>>;
  createMessageClick?: Maybe<MessageClick>;
  createMessageClicks?: Maybe<Array<Maybe<MessageClick>>>;
  createMessageDeliveries?: Maybe<Array<Maybe<MessageDelivery>>>;
  createMessageDelivery?: Maybe<MessageDelivery>;
  createMessageTemplate?: Maybe<MessageTemplate>;
  createMessageTemplates?: Maybe<Array<Maybe<MessageTemplate>>>;
  createMilkAnalyses?: Maybe<Array<Maybe<MilkAnalysis>>>;
  createMilkAnalysis?: Maybe<MilkAnalysis>;
  createMilkingEvent?: Maybe<MilkingEvent>;
  createMilkingEvents?: Maybe<Array<Maybe<MilkingEvent>>>;
  createNDVIAsset?: Maybe<NdviAsset>;
  createNDVIAssets?: Maybe<Array<Maybe<NdviAsset>>>;
  createNetPrimaryProductivities?: Maybe<Array<Maybe<NetPrimaryProductivity>>>;
  createNetPrimaryProductivity?: Maybe<NetPrimaryProductivity>;
  createNewsletterSegment?: Maybe<NewsletterSegment>;
  createNewsletterSegments?: Maybe<Array<Maybe<NewsletterSegment>>>;
  createNewsletterSubscriber?: Maybe<NewsletterSubscriber>;
  createNewsletterSubscribers?: Maybe<Array<Maybe<NewsletterSubscriber>>>;
  createOperator?: Maybe<Operator>;
  createOperators?: Maybe<Array<Maybe<Operator>>>;
  createOrganisation?: Maybe<Organisation>;
  createOrganisations?: Maybe<Array<Maybe<Organisation>>>;
  createPlan?: Maybe<Plan>;
  createPlanPrice?: Maybe<PlanPrice>;
  createPlanPrices?: Maybe<Array<Maybe<PlanPrice>>>;
  createPlans?: Maybe<Array<Maybe<Plan>>>;
  createPost?: Maybe<Post>;
  createPosts?: Maybe<Array<Maybe<Post>>>;
  createProduct?: Maybe<Product>;
  createProducts?: Maybe<Array<Maybe<Product>>>;
  createReferralCampaign?: Maybe<ReferralCampaign>;
  createReferralCampaigns?: Maybe<Array<Maybe<ReferralCampaign>>>;
  createReferralPartner?: Maybe<ReferralPartner>;
  createReferralPartners?: Maybe<Array<Maybe<ReferralPartner>>>;
  createReferralRedemption?: Maybe<ReferralRedemption>;
  createReferralRedemptions?: Maybe<Array<Maybe<ReferralRedemption>>>;
  createRegulatoryRule?: Maybe<RegulatoryRule>;
  createRegulatoryRules?: Maybe<Array<Maybe<RegulatoryRule>>>;
  createSoilMeasurement?: Maybe<SoilMeasurement>;
  createSoilMeasurements?: Maybe<Array<Maybe<SoilMeasurement>>>;
  createSoilMoistureObservation?: Maybe<SoilMoistureObservation>;
  createSoilMoistureObservations?: Maybe<Array<Maybe<SoilMoistureObservation>>>;
  createSoilOrganicCarbonStock?: Maybe<SoilOrganicCarbonStock>;
  createSoilOrganicCarbonStocks?: Maybe<Array<Maybe<SoilOrganicCarbonStock>>>;
  createSubscription?: Maybe<Subscription>;
  createSubscriptions?: Maybe<Array<Maybe<Subscription>>>;
  createSustainablePractice?: Maybe<SustainablePractice>;
  createSustainablePracticeCategories?: Maybe<Array<Maybe<SustainablePracticeCategory>>>;
  createSustainablePracticeCategory?: Maybe<SustainablePracticeCategory>;
  createSustainablePracticeEvent?: Maybe<SustainablePracticeEvent>;
  createSustainablePracticeEvents?: Maybe<Array<Maybe<SustainablePracticeEvent>>>;
  createSustainablePractices?: Maybe<Array<Maybe<SustainablePractice>>>;
  createTag?: Maybe<Tag>;
  createTags?: Maybe<Array<Maybe<Tag>>>;
  createUser?: Maybe<User>;
  createUsers?: Maybe<Array<Maybe<User>>>;
  createWeatherRecord?: Maybe<WeatherRecord>;
  createWeatherRecords?: Maybe<Array<Maybe<WeatherRecord>>>;
  deleteActivities?: Maybe<Array<Maybe<Activity>>>;
  deleteActivity?: Maybe<Activity>;
  deleteActivityImpact?: Maybe<ActivityImpact>;
  deleteActivityImpacts?: Maybe<Array<Maybe<ActivityImpact>>>;
  deleteAlert?: Maybe<Alert>;
  deleteAlerts?: Maybe<Array<Maybe<Alert>>>;
  deleteAnimal?: Maybe<Animal>;
  deleteAnimalEvent?: Maybe<AnimalEvent>;
  deleteAnimalEvents?: Maybe<Array<Maybe<AnimalEvent>>>;
  deleteAnimals?: Maybe<Array<Maybe<Animal>>>;
  deleteApplication?: Maybe<Application>;
  deleteApplicationStatus?: Maybe<ApplicationStatus>;
  deleteApplicationStatuses?: Maybe<Array<Maybe<ApplicationStatus>>>;
  deleteApplications?: Maybe<Array<Maybe<Application>>>;
  deleteAuthor?: Maybe<Author>;
  deleteAuthors?: Maybe<Array<Maybe<Author>>>;
  deleteBarn?: Maybe<Barn>;
  deleteBarnActivities?: Maybe<Array<Maybe<BarnActivity>>>;
  deleteBarnActivity?: Maybe<BarnActivity>;
  deleteBarns?: Maybe<Array<Maybe<Barn>>>;
  deleteBox?: Maybe<Box>;
  deleteBoxes?: Maybe<Array<Maybe<Box>>>;
  deleteBreed?: Maybe<Breed>;
  deleteBreeds?: Maybe<Array<Maybe<Breed>>>;
  deleteCarbonOffsetFactor?: Maybe<CarbonOffsetFactor>;
  deleteCarbonOffsetFactors?: Maybe<Array<Maybe<CarbonOffsetFactor>>>;
  deleteCategories?: Maybe<Array<Maybe<Category>>>;
  deleteCategory?: Maybe<Category>;
  deleteCategoryKPI?: Maybe<CategoryKpi>;
  deleteCategoryKPIS?: Maybe<Array<Maybe<CategoryKpi>>>;
  deleteChat?: Maybe<Chat>;
  deleteChats?: Maybe<Array<Maybe<Chat>>>;
  deleteCrop?: Maybe<Crop>;
  deleteCropType?: Maybe<CropType>;
  deleteCropTypes?: Maybe<Array<Maybe<CropType>>>;
  deleteCrops?: Maybe<Array<Maybe<Crop>>>;
  deleteDocument?: Maybe<Document>;
  deleteDocuments?: Maybe<Array<Maybe<Document>>>;
  deleteEcoScheme?: Maybe<EcoScheme>;
  deleteEcoSchemes?: Maybe<Array<Maybe<EcoScheme>>>;
  deleteEmissionScenario?: Maybe<EmissionScenario>;
  deleteEmissionScenarios?: Maybe<Array<Maybe<EmissionScenario>>>;
  deleteEquipment?: Maybe<Equipment>;
  deleteEquipmentList?: Maybe<Array<Maybe<Equipment>>>;
  deleteFarm?: Maybe<Farm>;
  deleteFarms?: Maybe<Array<Maybe<Farm>>>;
  deleteFeedDispenseEvent?: Maybe<FeedDispenseEvent>;
  deleteFeedDispenseEvents?: Maybe<Array<Maybe<FeedDispenseEvent>>>;
  deleteFeedLot?: Maybe<FeedLot>;
  deleteFeedLots?: Maybe<Array<Maybe<FeedLot>>>;
  deleteFeedRationComponent?: Maybe<FeedRationComponent>;
  deleteFeedRationComponents?: Maybe<Array<Maybe<FeedRationComponent>>>;
  deleteFeedRationPlan?: Maybe<FeedRationPlan>;
  deleteFeedRationPlans?: Maybe<Array<Maybe<FeedRationPlan>>>;
  deleteFeedSilo?: Maybe<FeedSilo>;
  deleteFeedSilos?: Maybe<Array<Maybe<FeedSilo>>>;
  deleteField?: Maybe<Field>;
  deleteFieldImpactSummaries?: Maybe<Array<Maybe<FieldImpactSummary>>>;
  deleteFieldImpactSummary?: Maybe<FieldImpactSummary>;
  deleteFields?: Maybe<Array<Maybe<Field>>>;
  deleteHerdMetric?: Maybe<HerdMetric>;
  deleteHerdMetrics?: Maybe<Array<Maybe<HerdMetric>>>;
  deleteInterview?: Maybe<Interview>;
  deleteInterviewStage?: Maybe<InterviewStage>;
  deleteInterviewStages?: Maybe<Array<Maybe<InterviewStage>>>;
  deleteInterviews?: Maybe<Array<Maybe<Interview>>>;
  deleteJobCandidate?: Maybe<JobCandidate>;
  deleteJobCandidates?: Maybe<Array<Maybe<JobCandidate>>>;
  deleteJobOpening?: Maybe<JobOpening>;
  deleteJobOpenings?: Maybe<Array<Maybe<JobOpening>>>;
  deleteKPI?: Maybe<Kpi>;
  deleteKPIS?: Maybe<Array<Maybe<Kpi>>>;
  deleteLandCoverStatistic?: Maybe<LandCoverStatistic>;
  deleteLandCoverStatistics?: Maybe<Array<Maybe<LandCoverStatistic>>>;
  deleteMembership?: Maybe<Membership>;
  deleteMemberships?: Maybe<Array<Maybe<Membership>>>;
  deleteMessageClick?: Maybe<MessageClick>;
  deleteMessageClicks?: Maybe<Array<Maybe<MessageClick>>>;
  deleteMessageDeliveries?: Maybe<Array<Maybe<MessageDelivery>>>;
  deleteMessageDelivery?: Maybe<MessageDelivery>;
  deleteMessageTemplate?: Maybe<MessageTemplate>;
  deleteMessageTemplates?: Maybe<Array<Maybe<MessageTemplate>>>;
  deleteMilkAnalyses?: Maybe<Array<Maybe<MilkAnalysis>>>;
  deleteMilkAnalysis?: Maybe<MilkAnalysis>;
  deleteMilkingEvent?: Maybe<MilkingEvent>;
  deleteMilkingEvents?: Maybe<Array<Maybe<MilkingEvent>>>;
  deleteNDVIAsset?: Maybe<NdviAsset>;
  deleteNDVIAssets?: Maybe<Array<Maybe<NdviAsset>>>;
  deleteNetPrimaryProductivities?: Maybe<Array<Maybe<NetPrimaryProductivity>>>;
  deleteNetPrimaryProductivity?: Maybe<NetPrimaryProductivity>;
  deleteNewsletterSegment?: Maybe<NewsletterSegment>;
  deleteNewsletterSegments?: Maybe<Array<Maybe<NewsletterSegment>>>;
  deleteNewsletterSubscriber?: Maybe<NewsletterSubscriber>;
  deleteNewsletterSubscribers?: Maybe<Array<Maybe<NewsletterSubscriber>>>;
  deleteOperator?: Maybe<Operator>;
  deleteOperators?: Maybe<Array<Maybe<Operator>>>;
  deleteOrganisation?: Maybe<Organisation>;
  deleteOrganisations?: Maybe<Array<Maybe<Organisation>>>;
  deletePlan?: Maybe<Plan>;
  deletePlanPrice?: Maybe<PlanPrice>;
  deletePlanPrices?: Maybe<Array<Maybe<PlanPrice>>>;
  deletePlans?: Maybe<Array<Maybe<Plan>>>;
  deletePost?: Maybe<Post>;
  deletePosts?: Maybe<Array<Maybe<Post>>>;
  deleteProduct?: Maybe<Product>;
  deleteProducts?: Maybe<Array<Maybe<Product>>>;
  deleteReferralCampaign?: Maybe<ReferralCampaign>;
  deleteReferralCampaigns?: Maybe<Array<Maybe<ReferralCampaign>>>;
  deleteReferralPartner?: Maybe<ReferralPartner>;
  deleteReferralPartners?: Maybe<Array<Maybe<ReferralPartner>>>;
  deleteReferralRedemption?: Maybe<ReferralRedemption>;
  deleteReferralRedemptions?: Maybe<Array<Maybe<ReferralRedemption>>>;
  deleteRegulatoryRule?: Maybe<RegulatoryRule>;
  deleteRegulatoryRules?: Maybe<Array<Maybe<RegulatoryRule>>>;
  deleteSoilMeasurement?: Maybe<SoilMeasurement>;
  deleteSoilMeasurements?: Maybe<Array<Maybe<SoilMeasurement>>>;
  deleteSoilMoistureObservation?: Maybe<SoilMoistureObservation>;
  deleteSoilMoistureObservations?: Maybe<Array<Maybe<SoilMoistureObservation>>>;
  deleteSoilOrganicCarbonStock?: Maybe<SoilOrganicCarbonStock>;
  deleteSoilOrganicCarbonStocks?: Maybe<Array<Maybe<SoilOrganicCarbonStock>>>;
  deleteSubscription?: Maybe<Subscription>;
  deleteSubscriptions?: Maybe<Array<Maybe<Subscription>>>;
  deleteSustainablePractice?: Maybe<SustainablePractice>;
  deleteSustainablePracticeCategories?: Maybe<Array<Maybe<SustainablePracticeCategory>>>;
  deleteSustainablePracticeCategory?: Maybe<SustainablePracticeCategory>;
  deleteSustainablePracticeEvent?: Maybe<SustainablePracticeEvent>;
  deleteSustainablePracticeEvents?: Maybe<Array<Maybe<SustainablePracticeEvent>>>;
  deleteSustainablePractices?: Maybe<Array<Maybe<SustainablePractice>>>;
  deleteTag?: Maybe<Tag>;
  deleteTags?: Maybe<Array<Maybe<Tag>>>;
  deleteUser?: Maybe<User>;
  deleteUsers?: Maybe<Array<Maybe<User>>>;
  deleteWeatherRecord?: Maybe<WeatherRecord>;
  deleteWeatherRecords?: Maybe<Array<Maybe<WeatherRecord>>>;
  endSession: Scalars['Boolean']['output'];
  updateActivities?: Maybe<Array<Maybe<Activity>>>;
  updateActivity?: Maybe<Activity>;
  updateActivityImpact?: Maybe<ActivityImpact>;
  updateActivityImpacts?: Maybe<Array<Maybe<ActivityImpact>>>;
  updateAlert?: Maybe<Alert>;
  updateAlerts?: Maybe<Array<Maybe<Alert>>>;
  updateAnimal?: Maybe<Animal>;
  updateAnimalEvent?: Maybe<AnimalEvent>;
  updateAnimalEvents?: Maybe<Array<Maybe<AnimalEvent>>>;
  updateAnimals?: Maybe<Array<Maybe<Animal>>>;
  updateApplication?: Maybe<Application>;
  updateApplicationStatus?: Maybe<ApplicationStatus>;
  updateApplicationStatuses?: Maybe<Array<Maybe<ApplicationStatus>>>;
  updateApplications?: Maybe<Array<Maybe<Application>>>;
  updateAuthor?: Maybe<Author>;
  updateAuthors?: Maybe<Array<Maybe<Author>>>;
  updateBarn?: Maybe<Barn>;
  updateBarnActivities?: Maybe<Array<Maybe<BarnActivity>>>;
  updateBarnActivity?: Maybe<BarnActivity>;
  updateBarns?: Maybe<Array<Maybe<Barn>>>;
  updateBox?: Maybe<Box>;
  updateBoxes?: Maybe<Array<Maybe<Box>>>;
  updateBreed?: Maybe<Breed>;
  updateBreeds?: Maybe<Array<Maybe<Breed>>>;
  updateCarbonOffsetFactor?: Maybe<CarbonOffsetFactor>;
  updateCarbonOffsetFactors?: Maybe<Array<Maybe<CarbonOffsetFactor>>>;
  updateCategories?: Maybe<Array<Maybe<Category>>>;
  updateCategory?: Maybe<Category>;
  updateCategoryKPI?: Maybe<CategoryKpi>;
  updateCategoryKPIS?: Maybe<Array<Maybe<CategoryKpi>>>;
  updateChat?: Maybe<Chat>;
  updateChats?: Maybe<Array<Maybe<Chat>>>;
  updateCrop?: Maybe<Crop>;
  updateCropType?: Maybe<CropType>;
  updateCropTypes?: Maybe<Array<Maybe<CropType>>>;
  updateCrops?: Maybe<Array<Maybe<Crop>>>;
  updateDocument?: Maybe<Document>;
  updateDocuments?: Maybe<Array<Maybe<Document>>>;
  updateEcoScheme?: Maybe<EcoScheme>;
  updateEcoSchemes?: Maybe<Array<Maybe<EcoScheme>>>;
  updateEmissionScenario?: Maybe<EmissionScenario>;
  updateEmissionScenarios?: Maybe<Array<Maybe<EmissionScenario>>>;
  updateEquipment?: Maybe<Equipment>;
  updateEquipmentList?: Maybe<Array<Maybe<Equipment>>>;
  updateFarm?: Maybe<Farm>;
  updateFarms?: Maybe<Array<Maybe<Farm>>>;
  updateFeedDispenseEvent?: Maybe<FeedDispenseEvent>;
  updateFeedDispenseEvents?: Maybe<Array<Maybe<FeedDispenseEvent>>>;
  updateFeedLot?: Maybe<FeedLot>;
  updateFeedLots?: Maybe<Array<Maybe<FeedLot>>>;
  updateFeedRationComponent?: Maybe<FeedRationComponent>;
  updateFeedRationComponents?: Maybe<Array<Maybe<FeedRationComponent>>>;
  updateFeedRationPlan?: Maybe<FeedRationPlan>;
  updateFeedRationPlans?: Maybe<Array<Maybe<FeedRationPlan>>>;
  updateFeedSilo?: Maybe<FeedSilo>;
  updateFeedSilos?: Maybe<Array<Maybe<FeedSilo>>>;
  updateField?: Maybe<Field>;
  updateFieldImpactSummaries?: Maybe<Array<Maybe<FieldImpactSummary>>>;
  updateFieldImpactSummary?: Maybe<FieldImpactSummary>;
  updateFields?: Maybe<Array<Maybe<Field>>>;
  updateHerdMetric?: Maybe<HerdMetric>;
  updateHerdMetrics?: Maybe<Array<Maybe<HerdMetric>>>;
  updateInterview?: Maybe<Interview>;
  updateInterviewStage?: Maybe<InterviewStage>;
  updateInterviewStages?: Maybe<Array<Maybe<InterviewStage>>>;
  updateInterviews?: Maybe<Array<Maybe<Interview>>>;
  updateJobCandidate?: Maybe<JobCandidate>;
  updateJobCandidates?: Maybe<Array<Maybe<JobCandidate>>>;
  updateJobOpening?: Maybe<JobOpening>;
  updateJobOpenings?: Maybe<Array<Maybe<JobOpening>>>;
  updateKPI?: Maybe<Kpi>;
  updateKPIS?: Maybe<Array<Maybe<Kpi>>>;
  updateLandCoverStatistic?: Maybe<LandCoverStatistic>;
  updateLandCoverStatistics?: Maybe<Array<Maybe<LandCoverStatistic>>>;
  updateMembership?: Maybe<Membership>;
  updateMemberships?: Maybe<Array<Maybe<Membership>>>;
  updateMessageClick?: Maybe<MessageClick>;
  updateMessageClicks?: Maybe<Array<Maybe<MessageClick>>>;
  updateMessageDeliveries?: Maybe<Array<Maybe<MessageDelivery>>>;
  updateMessageDelivery?: Maybe<MessageDelivery>;
  updateMessageTemplate?: Maybe<MessageTemplate>;
  updateMessageTemplates?: Maybe<Array<Maybe<MessageTemplate>>>;
  updateMilkAnalyses?: Maybe<Array<Maybe<MilkAnalysis>>>;
  updateMilkAnalysis?: Maybe<MilkAnalysis>;
  updateMilkingEvent?: Maybe<MilkingEvent>;
  updateMilkingEvents?: Maybe<Array<Maybe<MilkingEvent>>>;
  updateNDVIAsset?: Maybe<NdviAsset>;
  updateNDVIAssets?: Maybe<Array<Maybe<NdviAsset>>>;
  updateNetPrimaryProductivities?: Maybe<Array<Maybe<NetPrimaryProductivity>>>;
  updateNetPrimaryProductivity?: Maybe<NetPrimaryProductivity>;
  updateNewsletterSegment?: Maybe<NewsletterSegment>;
  updateNewsletterSegments?: Maybe<Array<Maybe<NewsletterSegment>>>;
  updateNewsletterSubscriber?: Maybe<NewsletterSubscriber>;
  updateNewsletterSubscribers?: Maybe<Array<Maybe<NewsletterSubscriber>>>;
  updateOperator?: Maybe<Operator>;
  updateOperators?: Maybe<Array<Maybe<Operator>>>;
  updateOrganisation?: Maybe<Organisation>;
  updateOrganisations?: Maybe<Array<Maybe<Organisation>>>;
  updatePlan?: Maybe<Plan>;
  updatePlanPrice?: Maybe<PlanPrice>;
  updatePlanPrices?: Maybe<Array<Maybe<PlanPrice>>>;
  updatePlans?: Maybe<Array<Maybe<Plan>>>;
  updatePost?: Maybe<Post>;
  updatePosts?: Maybe<Array<Maybe<Post>>>;
  updateProduct?: Maybe<Product>;
  updateProducts?: Maybe<Array<Maybe<Product>>>;
  updateReferralCampaign?: Maybe<ReferralCampaign>;
  updateReferralCampaigns?: Maybe<Array<Maybe<ReferralCampaign>>>;
  updateReferralPartner?: Maybe<ReferralPartner>;
  updateReferralPartners?: Maybe<Array<Maybe<ReferralPartner>>>;
  updateReferralRedemption?: Maybe<ReferralRedemption>;
  updateReferralRedemptions?: Maybe<Array<Maybe<ReferralRedemption>>>;
  updateRegulatoryRule?: Maybe<RegulatoryRule>;
  updateRegulatoryRules?: Maybe<Array<Maybe<RegulatoryRule>>>;
  updateSoilMeasurement?: Maybe<SoilMeasurement>;
  updateSoilMeasurements?: Maybe<Array<Maybe<SoilMeasurement>>>;
  updateSoilMoistureObservation?: Maybe<SoilMoistureObservation>;
  updateSoilMoistureObservations?: Maybe<Array<Maybe<SoilMoistureObservation>>>;
  updateSoilOrganicCarbonStock?: Maybe<SoilOrganicCarbonStock>;
  updateSoilOrganicCarbonStocks?: Maybe<Array<Maybe<SoilOrganicCarbonStock>>>;
  updateSubscription?: Maybe<Subscription>;
  updateSubscriptions?: Maybe<Array<Maybe<Subscription>>>;
  updateSustainablePractice?: Maybe<SustainablePractice>;
  updateSustainablePracticeCategories?: Maybe<Array<Maybe<SustainablePracticeCategory>>>;
  updateSustainablePracticeCategory?: Maybe<SustainablePracticeCategory>;
  updateSustainablePracticeEvent?: Maybe<SustainablePracticeEvent>;
  updateSustainablePracticeEvents?: Maybe<Array<Maybe<SustainablePracticeEvent>>>;
  updateSustainablePractices?: Maybe<Array<Maybe<SustainablePractice>>>;
  updateTag?: Maybe<Tag>;
  updateTags?: Maybe<Array<Maybe<Tag>>>;
  updateUser?: Maybe<User>;
  updateUsers?: Maybe<Array<Maybe<User>>>;
  updateWeatherRecord?: Maybe<WeatherRecord>;
  updateWeatherRecords?: Maybe<Array<Maybe<WeatherRecord>>>;
};


export type MutationAuthenticateUserWithPasswordArgs = {
  email: Scalars['String']['input'];
  password: Scalars['String']['input'];
};


export type MutationCreateActivitiesArgs = {
  data: Array<ActivityCreateInput>;
};


export type MutationCreateActivityArgs = {
  data: ActivityCreateInput;
};


export type MutationCreateActivityImpactArgs = {
  data: ActivityImpactCreateInput;
};


export type MutationCreateActivityImpactsArgs = {
  data: Array<ActivityImpactCreateInput>;
};


export type MutationCreateAlertArgs = {
  data: AlertCreateInput;
};


export type MutationCreateAlertsArgs = {
  data: Array<AlertCreateInput>;
};


export type MutationCreateAnimalArgs = {
  data: AnimalCreateInput;
};


export type MutationCreateAnimalEventArgs = {
  data: AnimalEventCreateInput;
};


export type MutationCreateAnimalEventsArgs = {
  data: Array<AnimalEventCreateInput>;
};


export type MutationCreateAnimalsArgs = {
  data: Array<AnimalCreateInput>;
};


export type MutationCreateApplicationArgs = {
  data: ApplicationCreateInput;
};


export type MutationCreateApplicationStatusArgs = {
  data: ApplicationStatusCreateInput;
};


export type MutationCreateApplicationStatusesArgs = {
  data: Array<ApplicationStatusCreateInput>;
};


export type MutationCreateApplicationsArgs = {
  data: Array<ApplicationCreateInput>;
};


export type MutationCreateAuthorArgs = {
  data: AuthorCreateInput;
};


export type MutationCreateAuthorsArgs = {
  data: Array<AuthorCreateInput>;
};


export type MutationCreateBarnArgs = {
  data: BarnCreateInput;
};


export type MutationCreateBarnActivitiesArgs = {
  data: Array<BarnActivityCreateInput>;
};


export type MutationCreateBarnActivityArgs = {
  data: BarnActivityCreateInput;
};


export type MutationCreateBarnsArgs = {
  data: Array<BarnCreateInput>;
};


export type MutationCreateBoxArgs = {
  data: BoxCreateInput;
};


export type MutationCreateBoxesArgs = {
  data: Array<BoxCreateInput>;
};


export type MutationCreateBreedArgs = {
  data: BreedCreateInput;
};


export type MutationCreateBreedsArgs = {
  data: Array<BreedCreateInput>;
};


export type MutationCreateCarbonOffsetFactorArgs = {
  data: CarbonOffsetFactorCreateInput;
};


export type MutationCreateCarbonOffsetFactorsArgs = {
  data: Array<CarbonOffsetFactorCreateInput>;
};


export type MutationCreateCategoriesArgs = {
  data: Array<CategoryCreateInput>;
};


export type MutationCreateCategoryArgs = {
  data: CategoryCreateInput;
};


export type MutationCreateCategoryKpiArgs = {
  data: CategoryKpiCreateInput;
};


export type MutationCreateCategoryKpisArgs = {
  data: Array<CategoryKpiCreateInput>;
};


export type MutationCreateChatArgs = {
  data: ChatCreateInput;
};


export type MutationCreateChatsArgs = {
  data: Array<ChatCreateInput>;
};


export type MutationCreateCropArgs = {
  data: CropCreateInput;
};


export type MutationCreateCropTypeArgs = {
  data: CropTypeCreateInput;
};


export type MutationCreateCropTypesArgs = {
  data: Array<CropTypeCreateInput>;
};


export type MutationCreateCropsArgs = {
  data: Array<CropCreateInput>;
};


export type MutationCreateDocumentArgs = {
  data: DocumentCreateInput;
};


export type MutationCreateDocumentsArgs = {
  data: Array<DocumentCreateInput>;
};


export type MutationCreateEcoSchemeArgs = {
  data: EcoSchemeCreateInput;
};


export type MutationCreateEcoSchemesArgs = {
  data: Array<EcoSchemeCreateInput>;
};


export type MutationCreateEmissionScenarioArgs = {
  data: EmissionScenarioCreateInput;
};


export type MutationCreateEmissionScenariosArgs = {
  data: Array<EmissionScenarioCreateInput>;
};


export type MutationCreateEquipmentArgs = {
  data: EquipmentCreateInput;
};


export type MutationCreateEquipmentListArgs = {
  data: Array<EquipmentCreateInput>;
};


export type MutationCreateFarmArgs = {
  data: FarmCreateInput;
};


export type MutationCreateFarmsArgs = {
  data: Array<FarmCreateInput>;
};


export type MutationCreateFeedDispenseEventArgs = {
  data: FeedDispenseEventCreateInput;
};


export type MutationCreateFeedDispenseEventsArgs = {
  data: Array<FeedDispenseEventCreateInput>;
};


export type MutationCreateFeedLotArgs = {
  data: FeedLotCreateInput;
};


export type MutationCreateFeedLotsArgs = {
  data: Array<FeedLotCreateInput>;
};


export type MutationCreateFeedRationComponentArgs = {
  data: FeedRationComponentCreateInput;
};


export type MutationCreateFeedRationComponentsArgs = {
  data: Array<FeedRationComponentCreateInput>;
};


export type MutationCreateFeedRationPlanArgs = {
  data: FeedRationPlanCreateInput;
};


export type MutationCreateFeedRationPlansArgs = {
  data: Array<FeedRationPlanCreateInput>;
};


export type MutationCreateFeedSiloArgs = {
  data: FeedSiloCreateInput;
};


export type MutationCreateFeedSilosArgs = {
  data: Array<FeedSiloCreateInput>;
};


export type MutationCreateFieldArgs = {
  data: FieldCreateInput;
};


export type MutationCreateFieldImpactSummariesArgs = {
  data: Array<FieldImpactSummaryCreateInput>;
};


export type MutationCreateFieldImpactSummaryArgs = {
  data: FieldImpactSummaryCreateInput;
};


export type MutationCreateFieldsArgs = {
  data: Array<FieldCreateInput>;
};


export type MutationCreateHerdMetricArgs = {
  data: HerdMetricCreateInput;
};


export type MutationCreateHerdMetricsArgs = {
  data: Array<HerdMetricCreateInput>;
};


export type MutationCreateInitialUserArgs = {
  data: CreateInitialUserInput;
};


export type MutationCreateInterviewArgs = {
  data: InterviewCreateInput;
};


export type MutationCreateInterviewStageArgs = {
  data: InterviewStageCreateInput;
};


export type MutationCreateInterviewStagesArgs = {
  data: Array<InterviewStageCreateInput>;
};


export type MutationCreateInterviewsArgs = {
  data: Array<InterviewCreateInput>;
};


export type MutationCreateJobCandidateArgs = {
  data: JobCandidateCreateInput;
};


export type MutationCreateJobCandidatesArgs = {
  data: Array<JobCandidateCreateInput>;
};


export type MutationCreateJobOpeningArgs = {
  data: JobOpeningCreateInput;
};


export type MutationCreateJobOpeningsArgs = {
  data: Array<JobOpeningCreateInput>;
};


export type MutationCreateKpiArgs = {
  data: KpiCreateInput;
};


export type MutationCreateKpisArgs = {
  data: Array<KpiCreateInput>;
};


export type MutationCreateLandCoverStatisticArgs = {
  data: LandCoverStatisticCreateInput;
};


export type MutationCreateLandCoverStatisticsArgs = {
  data: Array<LandCoverStatisticCreateInput>;
};


export type MutationCreateMembershipArgs = {
  data: MembershipCreateInput;
};


export type MutationCreateMembershipsArgs = {
  data: Array<MembershipCreateInput>;
};


export type MutationCreateMessageClickArgs = {
  data: MessageClickCreateInput;
};


export type MutationCreateMessageClicksArgs = {
  data: Array<MessageClickCreateInput>;
};


export type MutationCreateMessageDeliveriesArgs = {
  data: Array<MessageDeliveryCreateInput>;
};


export type MutationCreateMessageDeliveryArgs = {
  data: MessageDeliveryCreateInput;
};


export type MutationCreateMessageTemplateArgs = {
  data: MessageTemplateCreateInput;
};


export type MutationCreateMessageTemplatesArgs = {
  data: Array<MessageTemplateCreateInput>;
};


export type MutationCreateMilkAnalysesArgs = {
  data: Array<MilkAnalysisCreateInput>;
};


export type MutationCreateMilkAnalysisArgs = {
  data: MilkAnalysisCreateInput;
};


export type MutationCreateMilkingEventArgs = {
  data: MilkingEventCreateInput;
};


export type MutationCreateMilkingEventsArgs = {
  data: Array<MilkingEventCreateInput>;
};


export type MutationCreateNdviAssetArgs = {
  data: NdviAssetCreateInput;
};


export type MutationCreateNdviAssetsArgs = {
  data: Array<NdviAssetCreateInput>;
};


export type MutationCreateNetPrimaryProductivitiesArgs = {
  data: Array<NetPrimaryProductivityCreateInput>;
};


export type MutationCreateNetPrimaryProductivityArgs = {
  data: NetPrimaryProductivityCreateInput;
};


export type MutationCreateNewsletterSegmentArgs = {
  data: NewsletterSegmentCreateInput;
};


export type MutationCreateNewsletterSegmentsArgs = {
  data: Array<NewsletterSegmentCreateInput>;
};


export type MutationCreateNewsletterSubscriberArgs = {
  data: NewsletterSubscriberCreateInput;
};


export type MutationCreateNewsletterSubscribersArgs = {
  data: Array<NewsletterSubscriberCreateInput>;
};


export type MutationCreateOperatorArgs = {
  data: OperatorCreateInput;
};


export type MutationCreateOperatorsArgs = {
  data: Array<OperatorCreateInput>;
};


export type MutationCreateOrganisationArgs = {
  data: OrganisationCreateInput;
};


export type MutationCreateOrganisationsArgs = {
  data: Array<OrganisationCreateInput>;
};


export type MutationCreatePlanArgs = {
  data: PlanCreateInput;
};


export type MutationCreatePlanPriceArgs = {
  data: PlanPriceCreateInput;
};


export type MutationCreatePlanPricesArgs = {
  data: Array<PlanPriceCreateInput>;
};


export type MutationCreatePlansArgs = {
  data: Array<PlanCreateInput>;
};


export type MutationCreatePostArgs = {
  data: PostCreateInput;
};


export type MutationCreatePostsArgs = {
  data: Array<PostCreateInput>;
};


export type MutationCreateProductArgs = {
  data: ProductCreateInput;
};


export type MutationCreateProductsArgs = {
  data: Array<ProductCreateInput>;
};


export type MutationCreateReferralCampaignArgs = {
  data: ReferralCampaignCreateInput;
};


export type MutationCreateReferralCampaignsArgs = {
  data: Array<ReferralCampaignCreateInput>;
};


export type MutationCreateReferralPartnerArgs = {
  data: ReferralPartnerCreateInput;
};


export type MutationCreateReferralPartnersArgs = {
  data: Array<ReferralPartnerCreateInput>;
};


export type MutationCreateReferralRedemptionArgs = {
  data: ReferralRedemptionCreateInput;
};


export type MutationCreateReferralRedemptionsArgs = {
  data: Array<ReferralRedemptionCreateInput>;
};


export type MutationCreateRegulatoryRuleArgs = {
  data: RegulatoryRuleCreateInput;
};


export type MutationCreateRegulatoryRulesArgs = {
  data: Array<RegulatoryRuleCreateInput>;
};


export type MutationCreateSoilMeasurementArgs = {
  data: SoilMeasurementCreateInput;
};


export type MutationCreateSoilMeasurementsArgs = {
  data: Array<SoilMeasurementCreateInput>;
};


export type MutationCreateSoilMoistureObservationArgs = {
  data: SoilMoistureObservationCreateInput;
};


export type MutationCreateSoilMoistureObservationsArgs = {
  data: Array<SoilMoistureObservationCreateInput>;
};


export type MutationCreateSoilOrganicCarbonStockArgs = {
  data: SoilOrganicCarbonStockCreateInput;
};


export type MutationCreateSoilOrganicCarbonStocksArgs = {
  data: Array<SoilOrganicCarbonStockCreateInput>;
};


export type MutationCreateSubscriptionArgs = {
  data: SubscriptionCreateInput;
};


export type MutationCreateSubscriptionsArgs = {
  data: Array<SubscriptionCreateInput>;
};


export type MutationCreateSustainablePracticeArgs = {
  data: SustainablePracticeCreateInput;
};


export type MutationCreateSustainablePracticeCategoriesArgs = {
  data: Array<SustainablePracticeCategoryCreateInput>;
};


export type MutationCreateSustainablePracticeCategoryArgs = {
  data: SustainablePracticeCategoryCreateInput;
};


export type MutationCreateSustainablePracticeEventArgs = {
  data: SustainablePracticeEventCreateInput;
};


export type MutationCreateSustainablePracticeEventsArgs = {
  data: Array<SustainablePracticeEventCreateInput>;
};


export type MutationCreateSustainablePracticesArgs = {
  data: Array<SustainablePracticeCreateInput>;
};


export type MutationCreateTagArgs = {
  data: TagCreateInput;
};


export type MutationCreateTagsArgs = {
  data: Array<TagCreateInput>;
};


export type MutationCreateUserArgs = {
  data: UserCreateInput;
};


export type MutationCreateUsersArgs = {
  data: Array<UserCreateInput>;
};


export type MutationCreateWeatherRecordArgs = {
  data: WeatherRecordCreateInput;
};


export type MutationCreateWeatherRecordsArgs = {
  data: Array<WeatherRecordCreateInput>;
};


export type MutationDeleteActivitiesArgs = {
  where: Array<ActivityWhereUniqueInput>;
};


export type MutationDeleteActivityArgs = {
  where: ActivityWhereUniqueInput;
};


export type MutationDeleteActivityImpactArgs = {
  where: ActivityImpactWhereUniqueInput;
};


export type MutationDeleteActivityImpactsArgs = {
  where: Array<ActivityImpactWhereUniqueInput>;
};


export type MutationDeleteAlertArgs = {
  where: AlertWhereUniqueInput;
};


export type MutationDeleteAlertsArgs = {
  where: Array<AlertWhereUniqueInput>;
};


export type MutationDeleteAnimalArgs = {
  where: AnimalWhereUniqueInput;
};


export type MutationDeleteAnimalEventArgs = {
  where: AnimalEventWhereUniqueInput;
};


export type MutationDeleteAnimalEventsArgs = {
  where: Array<AnimalEventWhereUniqueInput>;
};


export type MutationDeleteAnimalsArgs = {
  where: Array<AnimalWhereUniqueInput>;
};


export type MutationDeleteApplicationArgs = {
  where: ApplicationWhereUniqueInput;
};


export type MutationDeleteApplicationStatusArgs = {
  where: ApplicationStatusWhereUniqueInput;
};


export type MutationDeleteApplicationStatusesArgs = {
  where: Array<ApplicationStatusWhereUniqueInput>;
};


export type MutationDeleteApplicationsArgs = {
  where: Array<ApplicationWhereUniqueInput>;
};


export type MutationDeleteAuthorArgs = {
  where: AuthorWhereUniqueInput;
};


export type MutationDeleteAuthorsArgs = {
  where: Array<AuthorWhereUniqueInput>;
};


export type MutationDeleteBarnArgs = {
  where: BarnWhereUniqueInput;
};


export type MutationDeleteBarnActivitiesArgs = {
  where: Array<BarnActivityWhereUniqueInput>;
};


export type MutationDeleteBarnActivityArgs = {
  where: BarnActivityWhereUniqueInput;
};


export type MutationDeleteBarnsArgs = {
  where: Array<BarnWhereUniqueInput>;
};


export type MutationDeleteBoxArgs = {
  where: BoxWhereUniqueInput;
};


export type MutationDeleteBoxesArgs = {
  where: Array<BoxWhereUniqueInput>;
};


export type MutationDeleteBreedArgs = {
  where: BreedWhereUniqueInput;
};


export type MutationDeleteBreedsArgs = {
  where: Array<BreedWhereUniqueInput>;
};


export type MutationDeleteCarbonOffsetFactorArgs = {
  where: CarbonOffsetFactorWhereUniqueInput;
};


export type MutationDeleteCarbonOffsetFactorsArgs = {
  where: Array<CarbonOffsetFactorWhereUniqueInput>;
};


export type MutationDeleteCategoriesArgs = {
  where: Array<CategoryWhereUniqueInput>;
};


export type MutationDeleteCategoryArgs = {
  where: CategoryWhereUniqueInput;
};


export type MutationDeleteCategoryKpiArgs = {
  where: CategoryKpiWhereUniqueInput;
};


export type MutationDeleteCategoryKpisArgs = {
  where: Array<CategoryKpiWhereUniqueInput>;
};


export type MutationDeleteChatArgs = {
  where: ChatWhereUniqueInput;
};


export type MutationDeleteChatsArgs = {
  where: Array<ChatWhereUniqueInput>;
};


export type MutationDeleteCropArgs = {
  where: CropWhereUniqueInput;
};


export type MutationDeleteCropTypeArgs = {
  where: CropTypeWhereUniqueInput;
};


export type MutationDeleteCropTypesArgs = {
  where: Array<CropTypeWhereUniqueInput>;
};


export type MutationDeleteCropsArgs = {
  where: Array<CropWhereUniqueInput>;
};


export type MutationDeleteDocumentArgs = {
  where: DocumentWhereUniqueInput;
};


export type MutationDeleteDocumentsArgs = {
  where: Array<DocumentWhereUniqueInput>;
};


export type MutationDeleteEcoSchemeArgs = {
  where: EcoSchemeWhereUniqueInput;
};


export type MutationDeleteEcoSchemesArgs = {
  where: Array<EcoSchemeWhereUniqueInput>;
};


export type MutationDeleteEmissionScenarioArgs = {
  where: EmissionScenarioWhereUniqueInput;
};


export type MutationDeleteEmissionScenariosArgs = {
  where: Array<EmissionScenarioWhereUniqueInput>;
};


export type MutationDeleteEquipmentArgs = {
  where: EquipmentWhereUniqueInput;
};


export type MutationDeleteEquipmentListArgs = {
  where: Array<EquipmentWhereUniqueInput>;
};


export type MutationDeleteFarmArgs = {
  where: FarmWhereUniqueInput;
};


export type MutationDeleteFarmsArgs = {
  where: Array<FarmWhereUniqueInput>;
};


export type MutationDeleteFeedDispenseEventArgs = {
  where: FeedDispenseEventWhereUniqueInput;
};


export type MutationDeleteFeedDispenseEventsArgs = {
  where: Array<FeedDispenseEventWhereUniqueInput>;
};


export type MutationDeleteFeedLotArgs = {
  where: FeedLotWhereUniqueInput;
};


export type MutationDeleteFeedLotsArgs = {
  where: Array<FeedLotWhereUniqueInput>;
};


export type MutationDeleteFeedRationComponentArgs = {
  where: FeedRationComponentWhereUniqueInput;
};


export type MutationDeleteFeedRationComponentsArgs = {
  where: Array<FeedRationComponentWhereUniqueInput>;
};


export type MutationDeleteFeedRationPlanArgs = {
  where: FeedRationPlanWhereUniqueInput;
};


export type MutationDeleteFeedRationPlansArgs = {
  where: Array<FeedRationPlanWhereUniqueInput>;
};


export type MutationDeleteFeedSiloArgs = {
  where: FeedSiloWhereUniqueInput;
};


export type MutationDeleteFeedSilosArgs = {
  where: Array<FeedSiloWhereUniqueInput>;
};


export type MutationDeleteFieldArgs = {
  where: FieldWhereUniqueInput;
};


export type MutationDeleteFieldImpactSummariesArgs = {
  where: Array<FieldImpactSummaryWhereUniqueInput>;
};


export type MutationDeleteFieldImpactSummaryArgs = {
  where: FieldImpactSummaryWhereUniqueInput;
};


export type MutationDeleteFieldsArgs = {
  where: Array<FieldWhereUniqueInput>;
};


export type MutationDeleteHerdMetricArgs = {
  where: HerdMetricWhereUniqueInput;
};


export type MutationDeleteHerdMetricsArgs = {
  where: Array<HerdMetricWhereUniqueInput>;
};


export type MutationDeleteInterviewArgs = {
  where: InterviewWhereUniqueInput;
};


export type MutationDeleteInterviewStageArgs = {
  where: InterviewStageWhereUniqueInput;
};


export type MutationDeleteInterviewStagesArgs = {
  where: Array<InterviewStageWhereUniqueInput>;
};


export type MutationDeleteInterviewsArgs = {
  where: Array<InterviewWhereUniqueInput>;
};


export type MutationDeleteJobCandidateArgs = {
  where: JobCandidateWhereUniqueInput;
};


export type MutationDeleteJobCandidatesArgs = {
  where: Array<JobCandidateWhereUniqueInput>;
};


export type MutationDeleteJobOpeningArgs = {
  where: JobOpeningWhereUniqueInput;
};


export type MutationDeleteJobOpeningsArgs = {
  where: Array<JobOpeningWhereUniqueInput>;
};


export type MutationDeleteKpiArgs = {
  where: KpiWhereUniqueInput;
};


export type MutationDeleteKpisArgs = {
  where: Array<KpiWhereUniqueInput>;
};


export type MutationDeleteLandCoverStatisticArgs = {
  where: LandCoverStatisticWhereUniqueInput;
};


export type MutationDeleteLandCoverStatisticsArgs = {
  where: Array<LandCoverStatisticWhereUniqueInput>;
};


export type MutationDeleteMembershipArgs = {
  where: MembershipWhereUniqueInput;
};


export type MutationDeleteMembershipsArgs = {
  where: Array<MembershipWhereUniqueInput>;
};


export type MutationDeleteMessageClickArgs = {
  where: MessageClickWhereUniqueInput;
};


export type MutationDeleteMessageClicksArgs = {
  where: Array<MessageClickWhereUniqueInput>;
};


export type MutationDeleteMessageDeliveriesArgs = {
  where: Array<MessageDeliveryWhereUniqueInput>;
};


export type MutationDeleteMessageDeliveryArgs = {
  where: MessageDeliveryWhereUniqueInput;
};


export type MutationDeleteMessageTemplateArgs = {
  where: MessageTemplateWhereUniqueInput;
};


export type MutationDeleteMessageTemplatesArgs = {
  where: Array<MessageTemplateWhereUniqueInput>;
};


export type MutationDeleteMilkAnalysesArgs = {
  where: Array<MilkAnalysisWhereUniqueInput>;
};


export type MutationDeleteMilkAnalysisArgs = {
  where: MilkAnalysisWhereUniqueInput;
};


export type MutationDeleteMilkingEventArgs = {
  where: MilkingEventWhereUniqueInput;
};


export type MutationDeleteMilkingEventsArgs = {
  where: Array<MilkingEventWhereUniqueInput>;
};


export type MutationDeleteNdviAssetArgs = {
  where: NdviAssetWhereUniqueInput;
};


export type MutationDeleteNdviAssetsArgs = {
  where: Array<NdviAssetWhereUniqueInput>;
};


export type MutationDeleteNetPrimaryProductivitiesArgs = {
  where: Array<NetPrimaryProductivityWhereUniqueInput>;
};


export type MutationDeleteNetPrimaryProductivityArgs = {
  where: NetPrimaryProductivityWhereUniqueInput;
};


export type MutationDeleteNewsletterSegmentArgs = {
  where: NewsletterSegmentWhereUniqueInput;
};


export type MutationDeleteNewsletterSegmentsArgs = {
  where: Array<NewsletterSegmentWhereUniqueInput>;
};


export type MutationDeleteNewsletterSubscriberArgs = {
  where: NewsletterSubscriberWhereUniqueInput;
};


export type MutationDeleteNewsletterSubscribersArgs = {
  where: Array<NewsletterSubscriberWhereUniqueInput>;
};


export type MutationDeleteOperatorArgs = {
  where: OperatorWhereUniqueInput;
};


export type MutationDeleteOperatorsArgs = {
  where: Array<OperatorWhereUniqueInput>;
};


export type MutationDeleteOrganisationArgs = {
  where: OrganisationWhereUniqueInput;
};


export type MutationDeleteOrganisationsArgs = {
  where: Array<OrganisationWhereUniqueInput>;
};


export type MutationDeletePlanArgs = {
  where: PlanWhereUniqueInput;
};


export type MutationDeletePlanPriceArgs = {
  where: PlanPriceWhereUniqueInput;
};


export type MutationDeletePlanPricesArgs = {
  where: Array<PlanPriceWhereUniqueInput>;
};


export type MutationDeletePlansArgs = {
  where: Array<PlanWhereUniqueInput>;
};


export type MutationDeletePostArgs = {
  where: PostWhereUniqueInput;
};


export type MutationDeletePostsArgs = {
  where: Array<PostWhereUniqueInput>;
};


export type MutationDeleteProductArgs = {
  where: ProductWhereUniqueInput;
};


export type MutationDeleteProductsArgs = {
  where: Array<ProductWhereUniqueInput>;
};


export type MutationDeleteReferralCampaignArgs = {
  where: ReferralCampaignWhereUniqueInput;
};


export type MutationDeleteReferralCampaignsArgs = {
  where: Array<ReferralCampaignWhereUniqueInput>;
};


export type MutationDeleteReferralPartnerArgs = {
  where: ReferralPartnerWhereUniqueInput;
};


export type MutationDeleteReferralPartnersArgs = {
  where: Array<ReferralPartnerWhereUniqueInput>;
};


export type MutationDeleteReferralRedemptionArgs = {
  where: ReferralRedemptionWhereUniqueInput;
};


export type MutationDeleteReferralRedemptionsArgs = {
  where: Array<ReferralRedemptionWhereUniqueInput>;
};


export type MutationDeleteRegulatoryRuleArgs = {
  where: RegulatoryRuleWhereUniqueInput;
};


export type MutationDeleteRegulatoryRulesArgs = {
  where: Array<RegulatoryRuleWhereUniqueInput>;
};


export type MutationDeleteSoilMeasurementArgs = {
  where: SoilMeasurementWhereUniqueInput;
};


export type MutationDeleteSoilMeasurementsArgs = {
  where: Array<SoilMeasurementWhereUniqueInput>;
};


export type MutationDeleteSoilMoistureObservationArgs = {
  where: SoilMoistureObservationWhereUniqueInput;
};


export type MutationDeleteSoilMoistureObservationsArgs = {
  where: Array<SoilMoistureObservationWhereUniqueInput>;
};


export type MutationDeleteSoilOrganicCarbonStockArgs = {
  where: SoilOrganicCarbonStockWhereUniqueInput;
};


export type MutationDeleteSoilOrganicCarbonStocksArgs = {
  where: Array<SoilOrganicCarbonStockWhereUniqueInput>;
};


export type MutationDeleteSubscriptionArgs = {
  where: SubscriptionWhereUniqueInput;
};


export type MutationDeleteSubscriptionsArgs = {
  where: Array<SubscriptionWhereUniqueInput>;
};


export type MutationDeleteSustainablePracticeArgs = {
  where: SustainablePracticeWhereUniqueInput;
};


export type MutationDeleteSustainablePracticeCategoriesArgs = {
  where: Array<SustainablePracticeCategoryWhereUniqueInput>;
};


export type MutationDeleteSustainablePracticeCategoryArgs = {
  where: SustainablePracticeCategoryWhereUniqueInput;
};


export type MutationDeleteSustainablePracticeEventArgs = {
  where: SustainablePracticeEventWhereUniqueInput;
};


export type MutationDeleteSustainablePracticeEventsArgs = {
  where: Array<SustainablePracticeEventWhereUniqueInput>;
};


export type MutationDeleteSustainablePracticesArgs = {
  where: Array<SustainablePracticeWhereUniqueInput>;
};


export type MutationDeleteTagArgs = {
  where: TagWhereUniqueInput;
};


export type MutationDeleteTagsArgs = {
  where: Array<TagWhereUniqueInput>;
};


export type MutationDeleteUserArgs = {
  where: UserWhereUniqueInput;
};


export type MutationDeleteUsersArgs = {
  where: Array<UserWhereUniqueInput>;
};


export type MutationDeleteWeatherRecordArgs = {
  where: WeatherRecordWhereUniqueInput;
};


export type MutationDeleteWeatherRecordsArgs = {
  where: Array<WeatherRecordWhereUniqueInput>;
};


export type MutationUpdateActivitiesArgs = {
  data: Array<ActivityUpdateArgs>;
};


export type MutationUpdateActivityArgs = {
  data: ActivityUpdateInput;
  where: ActivityWhereUniqueInput;
};


export type MutationUpdateActivityImpactArgs = {
  data: ActivityImpactUpdateInput;
  where: ActivityImpactWhereUniqueInput;
};


export type MutationUpdateActivityImpactsArgs = {
  data: Array<ActivityImpactUpdateArgs>;
};


export type MutationUpdateAlertArgs = {
  data: AlertUpdateInput;
  where: AlertWhereUniqueInput;
};


export type MutationUpdateAlertsArgs = {
  data: Array<AlertUpdateArgs>;
};


export type MutationUpdateAnimalArgs = {
  data: AnimalUpdateInput;
  where: AnimalWhereUniqueInput;
};


export type MutationUpdateAnimalEventArgs = {
  data: AnimalEventUpdateInput;
  where: AnimalEventWhereUniqueInput;
};


export type MutationUpdateAnimalEventsArgs = {
  data: Array<AnimalEventUpdateArgs>;
};


export type MutationUpdateAnimalsArgs = {
  data: Array<AnimalUpdateArgs>;
};


export type MutationUpdateApplicationArgs = {
  data: ApplicationUpdateInput;
  where: ApplicationWhereUniqueInput;
};


export type MutationUpdateApplicationStatusArgs = {
  data: ApplicationStatusUpdateInput;
  where: ApplicationStatusWhereUniqueInput;
};


export type MutationUpdateApplicationStatusesArgs = {
  data: Array<ApplicationStatusUpdateArgs>;
};


export type MutationUpdateApplicationsArgs = {
  data: Array<ApplicationUpdateArgs>;
};


export type MutationUpdateAuthorArgs = {
  data: AuthorUpdateInput;
  where: AuthorWhereUniqueInput;
};


export type MutationUpdateAuthorsArgs = {
  data: Array<AuthorUpdateArgs>;
};


export type MutationUpdateBarnArgs = {
  data: BarnUpdateInput;
  where: BarnWhereUniqueInput;
};


export type MutationUpdateBarnActivitiesArgs = {
  data: Array<BarnActivityUpdateArgs>;
};


export type MutationUpdateBarnActivityArgs = {
  data: BarnActivityUpdateInput;
  where: BarnActivityWhereUniqueInput;
};


export type MutationUpdateBarnsArgs = {
  data: Array<BarnUpdateArgs>;
};


export type MutationUpdateBoxArgs = {
  data: BoxUpdateInput;
  where: BoxWhereUniqueInput;
};


export type MutationUpdateBoxesArgs = {
  data: Array<BoxUpdateArgs>;
};


export type MutationUpdateBreedArgs = {
  data: BreedUpdateInput;
  where: BreedWhereUniqueInput;
};


export type MutationUpdateBreedsArgs = {
  data: Array<BreedUpdateArgs>;
};


export type MutationUpdateCarbonOffsetFactorArgs = {
  data: CarbonOffsetFactorUpdateInput;
  where: CarbonOffsetFactorWhereUniqueInput;
};


export type MutationUpdateCarbonOffsetFactorsArgs = {
  data: Array<CarbonOffsetFactorUpdateArgs>;
};


export type MutationUpdateCategoriesArgs = {
  data: Array<CategoryUpdateArgs>;
};


export type MutationUpdateCategoryArgs = {
  data: CategoryUpdateInput;
  where: CategoryWhereUniqueInput;
};


export type MutationUpdateCategoryKpiArgs = {
  data: CategoryKpiUpdateInput;
  where: CategoryKpiWhereUniqueInput;
};


export type MutationUpdateCategoryKpisArgs = {
  data: Array<CategoryKpiUpdateArgs>;
};


export type MutationUpdateChatArgs = {
  data: ChatUpdateInput;
  where: ChatWhereUniqueInput;
};


export type MutationUpdateChatsArgs = {
  data: Array<ChatUpdateArgs>;
};


export type MutationUpdateCropArgs = {
  data: CropUpdateInput;
  where: CropWhereUniqueInput;
};


export type MutationUpdateCropTypeArgs = {
  data: CropTypeUpdateInput;
  where: CropTypeWhereUniqueInput;
};


export type MutationUpdateCropTypesArgs = {
  data: Array<CropTypeUpdateArgs>;
};


export type MutationUpdateCropsArgs = {
  data: Array<CropUpdateArgs>;
};


export type MutationUpdateDocumentArgs = {
  data: DocumentUpdateInput;
  where: DocumentWhereUniqueInput;
};


export type MutationUpdateDocumentsArgs = {
  data: Array<DocumentUpdateArgs>;
};


export type MutationUpdateEcoSchemeArgs = {
  data: EcoSchemeUpdateInput;
  where: EcoSchemeWhereUniqueInput;
};


export type MutationUpdateEcoSchemesArgs = {
  data: Array<EcoSchemeUpdateArgs>;
};


export type MutationUpdateEmissionScenarioArgs = {
  data: EmissionScenarioUpdateInput;
  where: EmissionScenarioWhereUniqueInput;
};


export type MutationUpdateEmissionScenariosArgs = {
  data: Array<EmissionScenarioUpdateArgs>;
};


export type MutationUpdateEquipmentArgs = {
  data: EquipmentUpdateInput;
  where: EquipmentWhereUniqueInput;
};


export type MutationUpdateEquipmentListArgs = {
  data: Array<EquipmentUpdateArgs>;
};


export type MutationUpdateFarmArgs = {
  data: FarmUpdateInput;
  where: FarmWhereUniqueInput;
};


export type MutationUpdateFarmsArgs = {
  data: Array<FarmUpdateArgs>;
};


export type MutationUpdateFeedDispenseEventArgs = {
  data: FeedDispenseEventUpdateInput;
  where: FeedDispenseEventWhereUniqueInput;
};


export type MutationUpdateFeedDispenseEventsArgs = {
  data: Array<FeedDispenseEventUpdateArgs>;
};


export type MutationUpdateFeedLotArgs = {
  data: FeedLotUpdateInput;
  where: FeedLotWhereUniqueInput;
};


export type MutationUpdateFeedLotsArgs = {
  data: Array<FeedLotUpdateArgs>;
};


export type MutationUpdateFeedRationComponentArgs = {
  data: FeedRationComponentUpdateInput;
  where: FeedRationComponentWhereUniqueInput;
};


export type MutationUpdateFeedRationComponentsArgs = {
  data: Array<FeedRationComponentUpdateArgs>;
};


export type MutationUpdateFeedRationPlanArgs = {
  data: FeedRationPlanUpdateInput;
  where: FeedRationPlanWhereUniqueInput;
};


export type MutationUpdateFeedRationPlansArgs = {
  data: Array<FeedRationPlanUpdateArgs>;
};


export type MutationUpdateFeedSiloArgs = {
  data: FeedSiloUpdateInput;
  where: FeedSiloWhereUniqueInput;
};


export type MutationUpdateFeedSilosArgs = {
  data: Array<FeedSiloUpdateArgs>;
};


export type MutationUpdateFieldArgs = {
  data: FieldUpdateInput;
  where: FieldWhereUniqueInput;
};


export type MutationUpdateFieldImpactSummariesArgs = {
  data: Array<FieldImpactSummaryUpdateArgs>;
};


export type MutationUpdateFieldImpactSummaryArgs = {
  data: FieldImpactSummaryUpdateInput;
  where: FieldImpactSummaryWhereUniqueInput;
};


export type MutationUpdateFieldsArgs = {
  data: Array<FieldUpdateArgs>;
};


export type MutationUpdateHerdMetricArgs = {
  data: HerdMetricUpdateInput;
  where: HerdMetricWhereUniqueInput;
};


export type MutationUpdateHerdMetricsArgs = {
  data: Array<HerdMetricUpdateArgs>;
};


export type MutationUpdateInterviewArgs = {
  data: InterviewUpdateInput;
  where: InterviewWhereUniqueInput;
};


export type MutationUpdateInterviewStageArgs = {
  data: InterviewStageUpdateInput;
  where: InterviewStageWhereUniqueInput;
};


export type MutationUpdateInterviewStagesArgs = {
  data: Array<InterviewStageUpdateArgs>;
};


export type MutationUpdateInterviewsArgs = {
  data: Array<InterviewUpdateArgs>;
};


export type MutationUpdateJobCandidateArgs = {
  data: JobCandidateUpdateInput;
  where: JobCandidateWhereUniqueInput;
};


export type MutationUpdateJobCandidatesArgs = {
  data: Array<JobCandidateUpdateArgs>;
};


export type MutationUpdateJobOpeningArgs = {
  data: JobOpeningUpdateInput;
  where: JobOpeningWhereUniqueInput;
};


export type MutationUpdateJobOpeningsArgs = {
  data: Array<JobOpeningUpdateArgs>;
};


export type MutationUpdateKpiArgs = {
  data: KpiUpdateInput;
  where: KpiWhereUniqueInput;
};


export type MutationUpdateKpisArgs = {
  data: Array<KpiUpdateArgs>;
};


export type MutationUpdateLandCoverStatisticArgs = {
  data: LandCoverStatisticUpdateInput;
  where: LandCoverStatisticWhereUniqueInput;
};


export type MutationUpdateLandCoverStatisticsArgs = {
  data: Array<LandCoverStatisticUpdateArgs>;
};


export type MutationUpdateMembershipArgs = {
  data: MembershipUpdateInput;
  where: MembershipWhereUniqueInput;
};


export type MutationUpdateMembershipsArgs = {
  data: Array<MembershipUpdateArgs>;
};


export type MutationUpdateMessageClickArgs = {
  data: MessageClickUpdateInput;
  where: MessageClickWhereUniqueInput;
};


export type MutationUpdateMessageClicksArgs = {
  data: Array<MessageClickUpdateArgs>;
};


export type MutationUpdateMessageDeliveriesArgs = {
  data: Array<MessageDeliveryUpdateArgs>;
};


export type MutationUpdateMessageDeliveryArgs = {
  data: MessageDeliveryUpdateInput;
  where: MessageDeliveryWhereUniqueInput;
};


export type MutationUpdateMessageTemplateArgs = {
  data: MessageTemplateUpdateInput;
  where: MessageTemplateWhereUniqueInput;
};


export type MutationUpdateMessageTemplatesArgs = {
  data: Array<MessageTemplateUpdateArgs>;
};


export type MutationUpdateMilkAnalysesArgs = {
  data: Array<MilkAnalysisUpdateArgs>;
};


export type MutationUpdateMilkAnalysisArgs = {
  data: MilkAnalysisUpdateInput;
  where: MilkAnalysisWhereUniqueInput;
};


export type MutationUpdateMilkingEventArgs = {
  data: MilkingEventUpdateInput;
  where: MilkingEventWhereUniqueInput;
};


export type MutationUpdateMilkingEventsArgs = {
  data: Array<MilkingEventUpdateArgs>;
};


export type MutationUpdateNdviAssetArgs = {
  data: NdviAssetUpdateInput;
  where: NdviAssetWhereUniqueInput;
};


export type MutationUpdateNdviAssetsArgs = {
  data: Array<NdviAssetUpdateArgs>;
};


export type MutationUpdateNetPrimaryProductivitiesArgs = {
  data: Array<NetPrimaryProductivityUpdateArgs>;
};


export type MutationUpdateNetPrimaryProductivityArgs = {
  data: NetPrimaryProductivityUpdateInput;
  where: NetPrimaryProductivityWhereUniqueInput;
};


export type MutationUpdateNewsletterSegmentArgs = {
  data: NewsletterSegmentUpdateInput;
  where: NewsletterSegmentWhereUniqueInput;
};


export type MutationUpdateNewsletterSegmentsArgs = {
  data: Array<NewsletterSegmentUpdateArgs>;
};


export type MutationUpdateNewsletterSubscriberArgs = {
  data: NewsletterSubscriberUpdateInput;
  where: NewsletterSubscriberWhereUniqueInput;
};


export type MutationUpdateNewsletterSubscribersArgs = {
  data: Array<NewsletterSubscriberUpdateArgs>;
};


export type MutationUpdateOperatorArgs = {
  data: OperatorUpdateInput;
  where: OperatorWhereUniqueInput;
};


export type MutationUpdateOperatorsArgs = {
  data: Array<OperatorUpdateArgs>;
};


export type MutationUpdateOrganisationArgs = {
  data: OrganisationUpdateInput;
  where: OrganisationWhereUniqueInput;
};


export type MutationUpdateOrganisationsArgs = {
  data: Array<OrganisationUpdateArgs>;
};


export type MutationUpdatePlanArgs = {
  data: PlanUpdateInput;
  where: PlanWhereUniqueInput;
};


export type MutationUpdatePlanPriceArgs = {
  data: PlanPriceUpdateInput;
  where: PlanPriceWhereUniqueInput;
};


export type MutationUpdatePlanPricesArgs = {
  data: Array<PlanPriceUpdateArgs>;
};


export type MutationUpdatePlansArgs = {
  data: Array<PlanUpdateArgs>;
};


export type MutationUpdatePostArgs = {
  data: PostUpdateInput;
  where: PostWhereUniqueInput;
};


export type MutationUpdatePostsArgs = {
  data: Array<PostUpdateArgs>;
};


export type MutationUpdateProductArgs = {
  data: ProductUpdateInput;
  where: ProductWhereUniqueInput;
};


export type MutationUpdateProductsArgs = {
  data: Array<ProductUpdateArgs>;
};


export type MutationUpdateReferralCampaignArgs = {
  data: ReferralCampaignUpdateInput;
  where: ReferralCampaignWhereUniqueInput;
};


export type MutationUpdateReferralCampaignsArgs = {
  data: Array<ReferralCampaignUpdateArgs>;
};


export type MutationUpdateReferralPartnerArgs = {
  data: ReferralPartnerUpdateInput;
  where: ReferralPartnerWhereUniqueInput;
};


export type MutationUpdateReferralPartnersArgs = {
  data: Array<ReferralPartnerUpdateArgs>;
};


export type MutationUpdateReferralRedemptionArgs = {
  data: ReferralRedemptionUpdateInput;
  where: ReferralRedemptionWhereUniqueInput;
};


export type MutationUpdateReferralRedemptionsArgs = {
  data: Array<ReferralRedemptionUpdateArgs>;
};


export type MutationUpdateRegulatoryRuleArgs = {
  data: RegulatoryRuleUpdateInput;
  where: RegulatoryRuleWhereUniqueInput;
};


export type MutationUpdateRegulatoryRulesArgs = {
  data: Array<RegulatoryRuleUpdateArgs>;
};


export type MutationUpdateSoilMeasurementArgs = {
  data: SoilMeasurementUpdateInput;
  where: SoilMeasurementWhereUniqueInput;
};


export type MutationUpdateSoilMeasurementsArgs = {
  data: Array<SoilMeasurementUpdateArgs>;
};


export type MutationUpdateSoilMoistureObservationArgs = {
  data: SoilMoistureObservationUpdateInput;
  where: SoilMoistureObservationWhereUniqueInput;
};


export type MutationUpdateSoilMoistureObservationsArgs = {
  data: Array<SoilMoistureObservationUpdateArgs>;
};


export type MutationUpdateSoilOrganicCarbonStockArgs = {
  data: SoilOrganicCarbonStockUpdateInput;
  where: SoilOrganicCarbonStockWhereUniqueInput;
};


export type MutationUpdateSoilOrganicCarbonStocksArgs = {
  data: Array<SoilOrganicCarbonStockUpdateArgs>;
};


export type MutationUpdateSubscriptionArgs = {
  data: SubscriptionUpdateInput;
  where: SubscriptionWhereUniqueInput;
};


export type MutationUpdateSubscriptionsArgs = {
  data: Array<SubscriptionUpdateArgs>;
};


export type MutationUpdateSustainablePracticeArgs = {
  data: SustainablePracticeUpdateInput;
  where: SustainablePracticeWhereUniqueInput;
};


export type MutationUpdateSustainablePracticeCategoriesArgs = {
  data: Array<SustainablePracticeCategoryUpdateArgs>;
};


export type MutationUpdateSustainablePracticeCategoryArgs = {
  data: SustainablePracticeCategoryUpdateInput;
  where: SustainablePracticeCategoryWhereUniqueInput;
};


export type MutationUpdateSustainablePracticeEventArgs = {
  data: SustainablePracticeEventUpdateInput;
  where: SustainablePracticeEventWhereUniqueInput;
};


export type MutationUpdateSustainablePracticeEventsArgs = {
  data: Array<SustainablePracticeEventUpdateArgs>;
};


export type MutationUpdateSustainablePracticesArgs = {
  data: Array<SustainablePracticeUpdateArgs>;
};


export type MutationUpdateTagArgs = {
  data: TagUpdateInput;
  where: TagWhereUniqueInput;
};


export type MutationUpdateTagsArgs = {
  data: Array<TagUpdateArgs>;
};


export type MutationUpdateUserArgs = {
  data: UserUpdateInput;
  where: UserWhereUniqueInput;
};


export type MutationUpdateUsersArgs = {
  data: Array<UserUpdateArgs>;
};


export type MutationUpdateWeatherRecordArgs = {
  data: WeatherRecordUpdateInput;
  where: WeatherRecordWhereUniqueInput;
};


export type MutationUpdateWeatherRecordsArgs = {
  data: Array<WeatherRecordUpdateArgs>;
};

export type NdviAsset = {
  __typename?: 'NDVIAsset';
  captureDate?: Maybe<Scalars['DateTime']['output']>;
  cloudCover?: Maybe<Scalars['Float']['output']>;
  field?: Maybe<Field>;
  id: Scalars['ID']['output'];
  provider?: Maybe<Scalars['String']['output']>;
  s3Key?: Maybe<Scalars['String']['output']>;
  tileJsonUrl?: Maybe<Scalars['String']['output']>;
};

export type NdviAssetCreateInput = {
  captureDate?: InputMaybe<Scalars['DateTime']['input']>;
  cloudCover?: InputMaybe<Scalars['Float']['input']>;
  field?: InputMaybe<FieldRelateToOneForCreateInput>;
  provider?: InputMaybe<Scalars['String']['input']>;
  s3Key?: InputMaybe<Scalars['String']['input']>;
  tileJsonUrl?: InputMaybe<Scalars['String']['input']>;
};

export type NdviAssetManyRelationFilter = {
  every?: InputMaybe<NdviAssetWhereInput>;
  none?: InputMaybe<NdviAssetWhereInput>;
  some?: InputMaybe<NdviAssetWhereInput>;
};

export type NdviAssetOrderByInput = {
  captureDate?: InputMaybe<OrderDirection>;
  cloudCover?: InputMaybe<OrderDirection>;
  id?: InputMaybe<OrderDirection>;
  provider?: InputMaybe<OrderDirection>;
  s3Key?: InputMaybe<OrderDirection>;
  tileJsonUrl?: InputMaybe<OrderDirection>;
};

export type NdviAssetRelateToManyForCreateInput = {
  connect?: InputMaybe<Array<NdviAssetWhereUniqueInput>>;
  create?: InputMaybe<Array<NdviAssetCreateInput>>;
};

export type NdviAssetRelateToManyForUpdateInput = {
  connect?: InputMaybe<Array<NdviAssetWhereUniqueInput>>;
  create?: InputMaybe<Array<NdviAssetCreateInput>>;
  disconnect?: InputMaybe<Array<NdviAssetWhereUniqueInput>>;
  set?: InputMaybe<Array<NdviAssetWhereUniqueInput>>;
};

export type NdviAssetUpdateArgs = {
  data: NdviAssetUpdateInput;
  where: NdviAssetWhereUniqueInput;
};

export type NdviAssetUpdateInput = {
  captureDate?: InputMaybe<Scalars['DateTime']['input']>;
  cloudCover?: InputMaybe<Scalars['Float']['input']>;
  field?: InputMaybe<FieldRelateToOneForUpdateInput>;
  provider?: InputMaybe<Scalars['String']['input']>;
  s3Key?: InputMaybe<Scalars['String']['input']>;
  tileJsonUrl?: InputMaybe<Scalars['String']['input']>;
};

export type NdviAssetWhereInput = {
  AND?: InputMaybe<Array<NdviAssetWhereInput>>;
  NOT?: InputMaybe<Array<NdviAssetWhereInput>>;
  OR?: InputMaybe<Array<NdviAssetWhereInput>>;
  captureDate?: InputMaybe<DateTimeNullableFilter>;
  cloudCover?: InputMaybe<FloatNullableFilter>;
  field?: InputMaybe<FieldWhereInput>;
  id?: InputMaybe<IdFilter>;
  provider?: InputMaybe<StringNullableFilter>;
  s3Key?: InputMaybe<StringFilter>;
  tileJsonUrl?: InputMaybe<StringFilter>;
};

export type NdviAssetWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']['input']>;
};

export type NestedStringFilter = {
  contains?: InputMaybe<Scalars['String']['input']>;
  endsWith?: InputMaybe<Scalars['String']['input']>;
  equals?: InputMaybe<Scalars['String']['input']>;
  gt?: InputMaybe<Scalars['String']['input']>;
  gte?: InputMaybe<Scalars['String']['input']>;
  in?: InputMaybe<Array<Scalars['String']['input']>>;
  lt?: InputMaybe<Scalars['String']['input']>;
  lte?: InputMaybe<Scalars['String']['input']>;
  not?: InputMaybe<NestedStringFilter>;
  notIn?: InputMaybe<Array<Scalars['String']['input']>>;
  startsWith?: InputMaybe<Scalars['String']['input']>;
};

export type NetPrimaryProductivity = {
  __typename?: 'NetPrimaryProductivity';
  co2e?: Maybe<Scalars['Float']['output']>;
  field?: Maybe<Field>;
  id: Scalars['ID']['output'];
  imageUrl?: Maybe<Scalars['String']['output']>;
  meanNPP?: Maybe<Scalars['Float']['output']>;
  recordedAt?: Maybe<Scalars['DateTime']['output']>;
  totalNPP?: Maybe<Scalars['Float']['output']>;
  year?: Maybe<Scalars['Int']['output']>;
};

export type NetPrimaryProductivityCreateInput = {
  co2e?: InputMaybe<Scalars['Float']['input']>;
  field?: InputMaybe<FieldRelateToOneForCreateInput>;
  imageUrl?: InputMaybe<Scalars['String']['input']>;
  meanNPP?: InputMaybe<Scalars['Float']['input']>;
  recordedAt?: InputMaybe<Scalars['DateTime']['input']>;
  totalNPP?: InputMaybe<Scalars['Float']['input']>;
  year?: InputMaybe<Scalars['Int']['input']>;
};

export type NetPrimaryProductivityManyRelationFilter = {
  every?: InputMaybe<NetPrimaryProductivityWhereInput>;
  none?: InputMaybe<NetPrimaryProductivityWhereInput>;
  some?: InputMaybe<NetPrimaryProductivityWhereInput>;
};

export type NetPrimaryProductivityOrderByInput = {
  co2e?: InputMaybe<OrderDirection>;
  id?: InputMaybe<OrderDirection>;
  imageUrl?: InputMaybe<OrderDirection>;
  meanNPP?: InputMaybe<OrderDirection>;
  recordedAt?: InputMaybe<OrderDirection>;
  totalNPP?: InputMaybe<OrderDirection>;
  year?: InputMaybe<OrderDirection>;
};

export type NetPrimaryProductivityRelateToManyForCreateInput = {
  connect?: InputMaybe<Array<NetPrimaryProductivityWhereUniqueInput>>;
  create?: InputMaybe<Array<NetPrimaryProductivityCreateInput>>;
};

export type NetPrimaryProductivityRelateToManyForUpdateInput = {
  connect?: InputMaybe<Array<NetPrimaryProductivityWhereUniqueInput>>;
  create?: InputMaybe<Array<NetPrimaryProductivityCreateInput>>;
  disconnect?: InputMaybe<Array<NetPrimaryProductivityWhereUniqueInput>>;
  set?: InputMaybe<Array<NetPrimaryProductivityWhereUniqueInput>>;
};

export type NetPrimaryProductivityUpdateArgs = {
  data: NetPrimaryProductivityUpdateInput;
  where: NetPrimaryProductivityWhereUniqueInput;
};

export type NetPrimaryProductivityUpdateInput = {
  co2e?: InputMaybe<Scalars['Float']['input']>;
  field?: InputMaybe<FieldRelateToOneForUpdateInput>;
  imageUrl?: InputMaybe<Scalars['String']['input']>;
  meanNPP?: InputMaybe<Scalars['Float']['input']>;
  recordedAt?: InputMaybe<Scalars['DateTime']['input']>;
  totalNPP?: InputMaybe<Scalars['Float']['input']>;
  year?: InputMaybe<Scalars['Int']['input']>;
};

export type NetPrimaryProductivityWhereInput = {
  AND?: InputMaybe<Array<NetPrimaryProductivityWhereInput>>;
  NOT?: InputMaybe<Array<NetPrimaryProductivityWhereInput>>;
  OR?: InputMaybe<Array<NetPrimaryProductivityWhereInput>>;
  co2e?: InputMaybe<FloatNullableFilter>;
  field?: InputMaybe<FieldWhereInput>;
  id?: InputMaybe<IdFilter>;
  imageUrl?: InputMaybe<StringFilter>;
  meanNPP?: InputMaybe<FloatNullableFilter>;
  recordedAt?: InputMaybe<DateTimeNullableFilter>;
  totalNPP?: InputMaybe<FloatNullableFilter>;
  year?: InputMaybe<IntNullableFilter>;
};

export type NetPrimaryProductivityWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']['input']>;
};

export type NewsletterSegment = {
  __typename?: 'NewsletterSegment';
  description?: Maybe<Scalars['String']['output']>;
  id: Scalars['ID']['output'];
  name?: Maybe<Scalars['String']['output']>;
  newsletterSubscribers?: Maybe<Array<NewsletterSubscriber>>;
  newsletterSubscribersCount?: Maybe<Scalars['Int']['output']>;
};


export type NewsletterSegmentNewsletterSubscribersArgs = {
  cursor?: InputMaybe<NewsletterSubscriberWhereUniqueInput>;
  orderBy?: Array<NewsletterSubscriberOrderByInput>;
  skip?: Scalars['Int']['input'];
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: NewsletterSubscriberWhereInput;
};


export type NewsletterSegmentNewsletterSubscribersCountArgs = {
  where?: NewsletterSubscriberWhereInput;
};

export type NewsletterSegmentCreateInput = {
  description?: InputMaybe<Scalars['String']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
  newsletterSubscribers?: InputMaybe<NewsletterSubscriberRelateToManyForCreateInput>;
};

export type NewsletterSegmentManyRelationFilter = {
  every?: InputMaybe<NewsletterSegmentWhereInput>;
  none?: InputMaybe<NewsletterSegmentWhereInput>;
  some?: InputMaybe<NewsletterSegmentWhereInput>;
};

export type NewsletterSegmentOrderByInput = {
  description?: InputMaybe<OrderDirection>;
  id?: InputMaybe<OrderDirection>;
  name?: InputMaybe<OrderDirection>;
};

export type NewsletterSegmentRelateToManyForCreateInput = {
  connect?: InputMaybe<Array<NewsletterSegmentWhereUniqueInput>>;
  create?: InputMaybe<Array<NewsletterSegmentCreateInput>>;
};

export type NewsletterSegmentRelateToManyForUpdateInput = {
  connect?: InputMaybe<Array<NewsletterSegmentWhereUniqueInput>>;
  create?: InputMaybe<Array<NewsletterSegmentCreateInput>>;
  disconnect?: InputMaybe<Array<NewsletterSegmentWhereUniqueInput>>;
  set?: InputMaybe<Array<NewsletterSegmentWhereUniqueInput>>;
};

export type NewsletterSegmentUpdateArgs = {
  data: NewsletterSegmentUpdateInput;
  where: NewsletterSegmentWhereUniqueInput;
};

export type NewsletterSegmentUpdateInput = {
  description?: InputMaybe<Scalars['String']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
  newsletterSubscribers?: InputMaybe<NewsletterSubscriberRelateToManyForUpdateInput>;
};

export type NewsletterSegmentWhereInput = {
  AND?: InputMaybe<Array<NewsletterSegmentWhereInput>>;
  NOT?: InputMaybe<Array<NewsletterSegmentWhereInput>>;
  OR?: InputMaybe<Array<NewsletterSegmentWhereInput>>;
  description?: InputMaybe<StringFilter>;
  id?: InputMaybe<IdFilter>;
  name?: InputMaybe<StringFilter>;
  newsletterSubscribers?: InputMaybe<NewsletterSubscriberManyRelationFilter>;
};

export type NewsletterSegmentWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']['input']>;
};

export type NewsletterSubscriber = {
  __typename?: 'NewsletterSubscriber';
  email?: Maybe<Scalars['String']['output']>;
  id: Scalars['ID']['output'];
  isActive?: Maybe<Scalars['Boolean']['output']>;
  name?: Maybe<Scalars['String']['output']>;
  segments?: Maybe<Array<NewsletterSegment>>;
  segmentsCount?: Maybe<Scalars['Int']['output']>;
  subscribedAt?: Maybe<Scalars['DateTime']['output']>;
  unsubscribedAt?: Maybe<Scalars['DateTime']['output']>;
};


export type NewsletterSubscriberSegmentsArgs = {
  cursor?: InputMaybe<NewsletterSegmentWhereUniqueInput>;
  orderBy?: Array<NewsletterSegmentOrderByInput>;
  skip?: Scalars['Int']['input'];
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: NewsletterSegmentWhereInput;
};


export type NewsletterSubscriberSegmentsCountArgs = {
  where?: NewsletterSegmentWhereInput;
};

export type NewsletterSubscriberCreateInput = {
  email?: InputMaybe<Scalars['String']['input']>;
  isActive?: InputMaybe<Scalars['Boolean']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
  segments?: InputMaybe<NewsletterSegmentRelateToManyForCreateInput>;
  subscribedAt?: InputMaybe<Scalars['DateTime']['input']>;
  unsubscribedAt?: InputMaybe<Scalars['DateTime']['input']>;
};

export type NewsletterSubscriberManyRelationFilter = {
  every?: InputMaybe<NewsletterSubscriberWhereInput>;
  none?: InputMaybe<NewsletterSubscriberWhereInput>;
  some?: InputMaybe<NewsletterSubscriberWhereInput>;
};

export type NewsletterSubscriberOrderByInput = {
  email?: InputMaybe<OrderDirection>;
  id?: InputMaybe<OrderDirection>;
  isActive?: InputMaybe<OrderDirection>;
  name?: InputMaybe<OrderDirection>;
  subscribedAt?: InputMaybe<OrderDirection>;
  unsubscribedAt?: InputMaybe<OrderDirection>;
};

export type NewsletterSubscriberRelateToManyForCreateInput = {
  connect?: InputMaybe<Array<NewsletterSubscriberWhereUniqueInput>>;
  create?: InputMaybe<Array<NewsletterSubscriberCreateInput>>;
};

export type NewsletterSubscriberRelateToManyForUpdateInput = {
  connect?: InputMaybe<Array<NewsletterSubscriberWhereUniqueInput>>;
  create?: InputMaybe<Array<NewsletterSubscriberCreateInput>>;
  disconnect?: InputMaybe<Array<NewsletterSubscriberWhereUniqueInput>>;
  set?: InputMaybe<Array<NewsletterSubscriberWhereUniqueInput>>;
};

export type NewsletterSubscriberUpdateArgs = {
  data: NewsletterSubscriberUpdateInput;
  where: NewsletterSubscriberWhereUniqueInput;
};

export type NewsletterSubscriberUpdateInput = {
  email?: InputMaybe<Scalars['String']['input']>;
  isActive?: InputMaybe<Scalars['Boolean']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
  segments?: InputMaybe<NewsletterSegmentRelateToManyForUpdateInput>;
  subscribedAt?: InputMaybe<Scalars['DateTime']['input']>;
  unsubscribedAt?: InputMaybe<Scalars['DateTime']['input']>;
};

export type NewsletterSubscriberWhereInput = {
  AND?: InputMaybe<Array<NewsletterSubscriberWhereInput>>;
  NOT?: InputMaybe<Array<NewsletterSubscriberWhereInput>>;
  OR?: InputMaybe<Array<NewsletterSubscriberWhereInput>>;
  email?: InputMaybe<StringFilter>;
  id?: InputMaybe<IdFilter>;
  isActive?: InputMaybe<BooleanFilter>;
  name?: InputMaybe<StringFilter>;
  segments?: InputMaybe<NewsletterSegmentManyRelationFilter>;
  subscribedAt?: InputMaybe<DateTimeNullableFilter>;
  unsubscribedAt?: InputMaybe<DateTimeNullableFilter>;
};

export type NewsletterSubscriberWhereUniqueInput = {
  email?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['ID']['input']>;
};

export type Operator = {
  __typename?: 'Operator';
  barnActivities?: Maybe<Array<BarnActivity>>;
  barnActivitiesCount?: Maybe<Scalars['Int']['output']>;
  certificates?: Maybe<Scalars['String']['output']>;
  createdAt?: Maybe<Scalars['DateTime']['output']>;
  email?: Maybe<Scalars['String']['output']>;
  farm?: Maybe<Farm>;
  feedDispenses?: Maybe<Array<FeedDispenseEvent>>;
  feedDispensesCount?: Maybe<Scalars['Int']['output']>;
  id: Scalars['ID']['output'];
  milkingEvents?: Maybe<Array<MilkingEvent>>;
  milkingEventsCount?: Maybe<Scalars['Int']['output']>;
  name?: Maybe<Scalars['String']['output']>;
  phone?: Maybe<Scalars['String']['output']>;
  qualification?: Maybe<Scalars['String']['output']>;
};


export type OperatorBarnActivitiesArgs = {
  cursor?: InputMaybe<BarnActivityWhereUniqueInput>;
  orderBy?: Array<BarnActivityOrderByInput>;
  skip?: Scalars['Int']['input'];
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: BarnActivityWhereInput;
};


export type OperatorBarnActivitiesCountArgs = {
  where?: BarnActivityWhereInput;
};


export type OperatorFeedDispensesArgs = {
  cursor?: InputMaybe<FeedDispenseEventWhereUniqueInput>;
  orderBy?: Array<FeedDispenseEventOrderByInput>;
  skip?: Scalars['Int']['input'];
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: FeedDispenseEventWhereInput;
};


export type OperatorFeedDispensesCountArgs = {
  where?: FeedDispenseEventWhereInput;
};


export type OperatorMilkingEventsArgs = {
  cursor?: InputMaybe<MilkingEventWhereUniqueInput>;
  orderBy?: Array<MilkingEventOrderByInput>;
  skip?: Scalars['Int']['input'];
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: MilkingEventWhereInput;
};


export type OperatorMilkingEventsCountArgs = {
  where?: MilkingEventWhereInput;
};

export type OperatorCreateInput = {
  barnActivities?: InputMaybe<BarnActivityRelateToManyForCreateInput>;
  certificates?: InputMaybe<Scalars['String']['input']>;
  createdAt?: InputMaybe<Scalars['DateTime']['input']>;
  email?: InputMaybe<Scalars['String']['input']>;
  farm?: InputMaybe<FarmRelateToOneForCreateInput>;
  feedDispenses?: InputMaybe<FeedDispenseEventRelateToManyForCreateInput>;
  milkingEvents?: InputMaybe<MilkingEventRelateToManyForCreateInput>;
  name?: InputMaybe<Scalars['String']['input']>;
  phone?: InputMaybe<Scalars['String']['input']>;
  qualification?: InputMaybe<Scalars['String']['input']>;
};

export type OperatorOrderByInput = {
  certificates?: InputMaybe<OrderDirection>;
  createdAt?: InputMaybe<OrderDirection>;
  email?: InputMaybe<OrderDirection>;
  id?: InputMaybe<OrderDirection>;
  name?: InputMaybe<OrderDirection>;
  phone?: InputMaybe<OrderDirection>;
  qualification?: InputMaybe<OrderDirection>;
};

export type OperatorRelateToOneForCreateInput = {
  connect?: InputMaybe<OperatorWhereUniqueInput>;
  create?: InputMaybe<OperatorCreateInput>;
};

export type OperatorRelateToOneForUpdateInput = {
  connect?: InputMaybe<OperatorWhereUniqueInput>;
  create?: InputMaybe<OperatorCreateInput>;
  disconnect?: InputMaybe<Scalars['Boolean']['input']>;
};

export type OperatorUpdateArgs = {
  data: OperatorUpdateInput;
  where: OperatorWhereUniqueInput;
};

export type OperatorUpdateInput = {
  barnActivities?: InputMaybe<BarnActivityRelateToManyForUpdateInput>;
  certificates?: InputMaybe<Scalars['String']['input']>;
  createdAt?: InputMaybe<Scalars['DateTime']['input']>;
  email?: InputMaybe<Scalars['String']['input']>;
  farm?: InputMaybe<FarmRelateToOneForUpdateInput>;
  feedDispenses?: InputMaybe<FeedDispenseEventRelateToManyForUpdateInput>;
  milkingEvents?: InputMaybe<MilkingEventRelateToManyForUpdateInput>;
  name?: InputMaybe<Scalars['String']['input']>;
  phone?: InputMaybe<Scalars['String']['input']>;
  qualification?: InputMaybe<Scalars['String']['input']>;
};

export type OperatorWhereInput = {
  AND?: InputMaybe<Array<OperatorWhereInput>>;
  NOT?: InputMaybe<Array<OperatorWhereInput>>;
  OR?: InputMaybe<Array<OperatorWhereInput>>;
  barnActivities?: InputMaybe<BarnActivityManyRelationFilter>;
  certificates?: InputMaybe<StringFilter>;
  createdAt?: InputMaybe<DateTimeNullableFilter>;
  email?: InputMaybe<StringFilter>;
  farm?: InputMaybe<FarmWhereInput>;
  feedDispenses?: InputMaybe<FeedDispenseEventManyRelationFilter>;
  id?: InputMaybe<IdFilter>;
  milkingEvents?: InputMaybe<MilkingEventManyRelationFilter>;
  name?: InputMaybe<StringFilter>;
  phone?: InputMaybe<StringFilter>;
  qualification?: InputMaybe<StringFilter>;
};

export type OperatorWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']['input']>;
};

export enum OrderDirection {
  Asc = 'asc',
  Desc = 'desc'
}

export type Organisation = {
  __typename?: 'Organisation';
  address?: Maybe<Scalars['String']['output']>;
  alerts?: Maybe<Array<Alert>>;
  alertsCount?: Maybe<Scalars['Int']['output']>;
  farms?: Maybe<Array<Farm>>;
  farmsCount?: Maybe<Scalars['Int']['output']>;
  id: Scalars['ID']['output'];
  name?: Maybe<Scalars['String']['output']>;
  pacCUAA?: Maybe<Scalars['String']['output']>;
  sianFascicoloId?: Maybe<Scalars['String']['output']>;
  stripeCustomerId?: Maybe<Scalars['String']['output']>;
  subscriptions?: Maybe<Array<Subscription>>;
  subscriptionsCount?: Maybe<Scalars['Int']['output']>;
  users?: Maybe<Array<User>>;
  usersCount?: Maybe<Scalars['Int']['output']>;
  vatCf?: Maybe<Scalars['String']['output']>;
};


export type OrganisationAlertsArgs = {
  cursor?: InputMaybe<AlertWhereUniqueInput>;
  orderBy?: Array<AlertOrderByInput>;
  skip?: Scalars['Int']['input'];
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: AlertWhereInput;
};


export type OrganisationAlertsCountArgs = {
  where?: AlertWhereInput;
};


export type OrganisationFarmsArgs = {
  cursor?: InputMaybe<FarmWhereUniqueInput>;
  orderBy?: Array<FarmOrderByInput>;
  skip?: Scalars['Int']['input'];
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: FarmWhereInput;
};


export type OrganisationFarmsCountArgs = {
  where?: FarmWhereInput;
};


export type OrganisationSubscriptionsArgs = {
  cursor?: InputMaybe<SubscriptionWhereUniqueInput>;
  orderBy?: Array<SubscriptionOrderByInput>;
  skip?: Scalars['Int']['input'];
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: SubscriptionWhereInput;
};


export type OrganisationSubscriptionsCountArgs = {
  where?: SubscriptionWhereInput;
};


export type OrganisationUsersArgs = {
  cursor?: InputMaybe<UserWhereUniqueInput>;
  orderBy?: Array<UserOrderByInput>;
  skip?: Scalars['Int']['input'];
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: UserWhereInput;
};


export type OrganisationUsersCountArgs = {
  where?: UserWhereInput;
};

export type OrganisationCreateInput = {
  address?: InputMaybe<Scalars['String']['input']>;
  alerts?: InputMaybe<AlertRelateToManyForCreateInput>;
  farms?: InputMaybe<FarmRelateToManyForCreateInput>;
  name?: InputMaybe<Scalars['String']['input']>;
  pacCUAA?: InputMaybe<Scalars['String']['input']>;
  sianFascicoloId?: InputMaybe<Scalars['String']['input']>;
  stripeCustomerId?: InputMaybe<Scalars['String']['input']>;
  subscriptions?: InputMaybe<SubscriptionRelateToManyForCreateInput>;
  users?: InputMaybe<UserRelateToManyForCreateInput>;
  vatCf?: InputMaybe<Scalars['String']['input']>;
};

export type OrganisationOrderByInput = {
  address?: InputMaybe<OrderDirection>;
  id?: InputMaybe<OrderDirection>;
  name?: InputMaybe<OrderDirection>;
  pacCUAA?: InputMaybe<OrderDirection>;
  sianFascicoloId?: InputMaybe<OrderDirection>;
  stripeCustomerId?: InputMaybe<OrderDirection>;
  vatCf?: InputMaybe<OrderDirection>;
};

export type OrganisationRelateToOneForCreateInput = {
  connect?: InputMaybe<OrganisationWhereUniqueInput>;
  create?: InputMaybe<OrganisationCreateInput>;
};

export type OrganisationRelateToOneForUpdateInput = {
  connect?: InputMaybe<OrganisationWhereUniqueInput>;
  create?: InputMaybe<OrganisationCreateInput>;
  disconnect?: InputMaybe<Scalars['Boolean']['input']>;
};

export type OrganisationUpdateArgs = {
  data: OrganisationUpdateInput;
  where: OrganisationWhereUniqueInput;
};

export type OrganisationUpdateInput = {
  address?: InputMaybe<Scalars['String']['input']>;
  alerts?: InputMaybe<AlertRelateToManyForUpdateInput>;
  farms?: InputMaybe<FarmRelateToManyForUpdateInput>;
  name?: InputMaybe<Scalars['String']['input']>;
  pacCUAA?: InputMaybe<Scalars['String']['input']>;
  sianFascicoloId?: InputMaybe<Scalars['String']['input']>;
  stripeCustomerId?: InputMaybe<Scalars['String']['input']>;
  subscriptions?: InputMaybe<SubscriptionRelateToManyForUpdateInput>;
  users?: InputMaybe<UserRelateToManyForUpdateInput>;
  vatCf?: InputMaybe<Scalars['String']['input']>;
};

export type OrganisationWhereInput = {
  AND?: InputMaybe<Array<OrganisationWhereInput>>;
  NOT?: InputMaybe<Array<OrganisationWhereInput>>;
  OR?: InputMaybe<Array<OrganisationWhereInput>>;
  address?: InputMaybe<StringFilter>;
  alerts?: InputMaybe<AlertManyRelationFilter>;
  farms?: InputMaybe<FarmManyRelationFilter>;
  id?: InputMaybe<IdFilter>;
  name?: InputMaybe<StringFilter>;
  pacCUAA?: InputMaybe<StringFilter>;
  sianFascicoloId?: InputMaybe<StringFilter>;
  stripeCustomerId?: InputMaybe<StringFilter>;
  subscriptions?: InputMaybe<SubscriptionManyRelationFilter>;
  users?: InputMaybe<UserManyRelationFilter>;
  vatCf?: InputMaybe<StringFilter>;
};

export type OrganisationWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']['input']>;
  stripeCustomerId?: InputMaybe<Scalars['String']['input']>;
};

export type PasswordFilter = {
  isSet: Scalars['Boolean']['input'];
};

export type PasswordState = {
  __typename?: 'PasswordState';
  isSet: Scalars['Boolean']['output'];
};

export type Plan = {
  __typename?: 'Plan';
  activePrice?: Maybe<PlanPrice>;
  features?: Maybe<Scalars['JSON']['output']>;
  id: Scalars['ID']['output'];
  key?: Maybe<Scalars['String']['output']>;
  label?: Maybe<Scalars['String']['output']>;
  prices?: Maybe<Array<PlanPrice>>;
  pricesCount?: Maybe<Scalars['Int']['output']>;
  subscriptions?: Maybe<Array<Subscription>>;
  subscriptionsCount?: Maybe<Scalars['Int']['output']>;
};


export type PlanPricesArgs = {
  cursor?: InputMaybe<PlanPriceWhereUniqueInput>;
  orderBy?: Array<PlanPriceOrderByInput>;
  skip?: Scalars['Int']['input'];
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: PlanPriceWhereInput;
};


export type PlanPricesCountArgs = {
  where?: PlanPriceWhereInput;
};


export type PlanSubscriptionsArgs = {
  cursor?: InputMaybe<SubscriptionWhereUniqueInput>;
  orderBy?: Array<SubscriptionOrderByInput>;
  skip?: Scalars['Int']['input'];
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: SubscriptionWhereInput;
};


export type PlanSubscriptionsCountArgs = {
  where?: SubscriptionWhereInput;
};

export type PlanCreateInput = {
  activePrice?: InputMaybe<PlanPriceRelateToOneForCreateInput>;
  features?: InputMaybe<Scalars['JSON']['input']>;
  key?: InputMaybe<Scalars['String']['input']>;
  label?: InputMaybe<Scalars['String']['input']>;
  prices?: InputMaybe<PlanPriceRelateToManyForCreateInput>;
  subscriptions?: InputMaybe<SubscriptionRelateToManyForCreateInput>;
};

export type PlanOrderByInput = {
  id?: InputMaybe<OrderDirection>;
  key?: InputMaybe<OrderDirection>;
  label?: InputMaybe<OrderDirection>;
};

export type PlanPrice = {
  __typename?: 'PlanPrice';
  amount?: Maybe<Scalars['Int']['output']>;
  currency?: Maybe<Scalars['String']['output']>;
  id: Scalars['ID']['output'];
  isActiveFor?: Maybe<Plan>;
  plan?: Maybe<Plan>;
  stripePriceId?: Maybe<Scalars['String']['output']>;
  validFrom?: Maybe<Scalars['DateTime']['output']>;
  validUntil?: Maybe<Scalars['DateTime']['output']>;
};

export type PlanPriceCreateInput = {
  amount?: InputMaybe<Scalars['Int']['input']>;
  currency?: InputMaybe<Scalars['String']['input']>;
  isActiveFor?: InputMaybe<PlanRelateToOneForCreateInput>;
  plan?: InputMaybe<PlanRelateToOneForCreateInput>;
  stripePriceId?: InputMaybe<Scalars['String']['input']>;
  validFrom?: InputMaybe<Scalars['DateTime']['input']>;
  validUntil?: InputMaybe<Scalars['DateTime']['input']>;
};

export type PlanPriceManyRelationFilter = {
  every?: InputMaybe<PlanPriceWhereInput>;
  none?: InputMaybe<PlanPriceWhereInput>;
  some?: InputMaybe<PlanPriceWhereInput>;
};

export type PlanPriceOrderByInput = {
  amount?: InputMaybe<OrderDirection>;
  currency?: InputMaybe<OrderDirection>;
  id?: InputMaybe<OrderDirection>;
  stripePriceId?: InputMaybe<OrderDirection>;
  validFrom?: InputMaybe<OrderDirection>;
  validUntil?: InputMaybe<OrderDirection>;
};

export type PlanPriceRelateToManyForCreateInput = {
  connect?: InputMaybe<Array<PlanPriceWhereUniqueInput>>;
  create?: InputMaybe<Array<PlanPriceCreateInput>>;
};

export type PlanPriceRelateToManyForUpdateInput = {
  connect?: InputMaybe<Array<PlanPriceWhereUniqueInput>>;
  create?: InputMaybe<Array<PlanPriceCreateInput>>;
  disconnect?: InputMaybe<Array<PlanPriceWhereUniqueInput>>;
  set?: InputMaybe<Array<PlanPriceWhereUniqueInput>>;
};

export type PlanPriceRelateToOneForCreateInput = {
  connect?: InputMaybe<PlanPriceWhereUniqueInput>;
  create?: InputMaybe<PlanPriceCreateInput>;
};

export type PlanPriceRelateToOneForUpdateInput = {
  connect?: InputMaybe<PlanPriceWhereUniqueInput>;
  create?: InputMaybe<PlanPriceCreateInput>;
  disconnect?: InputMaybe<Scalars['Boolean']['input']>;
};

export type PlanPriceUpdateArgs = {
  data: PlanPriceUpdateInput;
  where: PlanPriceWhereUniqueInput;
};

export type PlanPriceUpdateInput = {
  amount?: InputMaybe<Scalars['Int']['input']>;
  currency?: InputMaybe<Scalars['String']['input']>;
  isActiveFor?: InputMaybe<PlanRelateToOneForUpdateInput>;
  plan?: InputMaybe<PlanRelateToOneForUpdateInput>;
  stripePriceId?: InputMaybe<Scalars['String']['input']>;
  validFrom?: InputMaybe<Scalars['DateTime']['input']>;
  validUntil?: InputMaybe<Scalars['DateTime']['input']>;
};

export type PlanPriceWhereInput = {
  AND?: InputMaybe<Array<PlanPriceWhereInput>>;
  NOT?: InputMaybe<Array<PlanPriceWhereInput>>;
  OR?: InputMaybe<Array<PlanPriceWhereInput>>;
  amount?: InputMaybe<IntFilter>;
  currency?: InputMaybe<StringNullableFilter>;
  id?: InputMaybe<IdFilter>;
  isActiveFor?: InputMaybe<PlanWhereInput>;
  plan?: InputMaybe<PlanWhereInput>;
  stripePriceId?: InputMaybe<StringFilter>;
  validFrom?: InputMaybe<DateTimeFilter>;
  validUntil?: InputMaybe<DateTimeNullableFilter>;
};

export type PlanPriceWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']['input']>;
  stripePriceId?: InputMaybe<Scalars['String']['input']>;
};

export type PlanRelateToOneForCreateInput = {
  connect?: InputMaybe<PlanWhereUniqueInput>;
  create?: InputMaybe<PlanCreateInput>;
};

export type PlanRelateToOneForUpdateInput = {
  connect?: InputMaybe<PlanWhereUniqueInput>;
  create?: InputMaybe<PlanCreateInput>;
  disconnect?: InputMaybe<Scalars['Boolean']['input']>;
};

export type PlanUpdateArgs = {
  data: PlanUpdateInput;
  where: PlanWhereUniqueInput;
};

export type PlanUpdateInput = {
  activePrice?: InputMaybe<PlanPriceRelateToOneForUpdateInput>;
  features?: InputMaybe<Scalars['JSON']['input']>;
  key?: InputMaybe<Scalars['String']['input']>;
  label?: InputMaybe<Scalars['String']['input']>;
  prices?: InputMaybe<PlanPriceRelateToManyForUpdateInput>;
  subscriptions?: InputMaybe<SubscriptionRelateToManyForUpdateInput>;
};

export type PlanWhereInput = {
  AND?: InputMaybe<Array<PlanWhereInput>>;
  NOT?: InputMaybe<Array<PlanWhereInput>>;
  OR?: InputMaybe<Array<PlanWhereInput>>;
  activePrice?: InputMaybe<PlanPriceWhereInput>;
  id?: InputMaybe<IdFilter>;
  key?: InputMaybe<StringFilter>;
  label?: InputMaybe<StringFilter>;
  prices?: InputMaybe<PlanPriceManyRelationFilter>;
  subscriptions?: InputMaybe<SubscriptionManyRelationFilter>;
};

export type PlanWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']['input']>;
  key?: InputMaybe<Scalars['String']['input']>;
};

export type Post = {
  __typename?: 'Post';
  author?: Maybe<Author>;
  category?: Maybe<Category>;
  content?: Maybe<Scalars['String']['output']>;
  coverImage?: Maybe<ImageFieldOutput>;
  excerpt?: Maybe<Scalars['String']['output']>;
  featured?: Maybe<Scalars['Boolean']['output']>;
  id: Scalars['ID']['output'];
  publishedAt?: Maybe<Scalars['DateTime']['output']>;
  slug?: Maybe<Scalars['String']['output']>;
  status?: Maybe<Scalars['String']['output']>;
  tags?: Maybe<Array<Tag>>;
  tagsCount?: Maybe<Scalars['Int']['output']>;
  title?: Maybe<Scalars['String']['output']>;
  updatedAt?: Maybe<Scalars['DateTime']['output']>;
  viewCount?: Maybe<Scalars['Int']['output']>;
};


export type PostTagsArgs = {
  cursor?: InputMaybe<TagWhereUniqueInput>;
  orderBy?: Array<TagOrderByInput>;
  skip?: Scalars['Int']['input'];
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: TagWhereInput;
};


export type PostTagsCountArgs = {
  where?: TagWhereInput;
};

export type PostCreateInput = {
  author?: InputMaybe<AuthorRelateToOneForCreateInput>;
  category?: InputMaybe<CategoryRelateToOneForCreateInput>;
  content?: InputMaybe<Scalars['String']['input']>;
  coverImage?: InputMaybe<ImageFieldInput>;
  excerpt?: InputMaybe<Scalars['String']['input']>;
  featured?: InputMaybe<Scalars['Boolean']['input']>;
  publishedAt?: InputMaybe<Scalars['DateTime']['input']>;
  slug?: InputMaybe<Scalars['String']['input']>;
  status?: InputMaybe<Scalars['String']['input']>;
  tags?: InputMaybe<TagRelateToManyForCreateInput>;
  title?: InputMaybe<Scalars['String']['input']>;
  updatedAt?: InputMaybe<Scalars['DateTime']['input']>;
  viewCount?: InputMaybe<Scalars['Int']['input']>;
};

export type PostManyRelationFilter = {
  every?: InputMaybe<PostWhereInput>;
  none?: InputMaybe<PostWhereInput>;
  some?: InputMaybe<PostWhereInput>;
};

export type PostOrderByInput = {
  content?: InputMaybe<OrderDirection>;
  excerpt?: InputMaybe<OrderDirection>;
  featured?: InputMaybe<OrderDirection>;
  id?: InputMaybe<OrderDirection>;
  publishedAt?: InputMaybe<OrderDirection>;
  slug?: InputMaybe<OrderDirection>;
  status?: InputMaybe<OrderDirection>;
  title?: InputMaybe<OrderDirection>;
  updatedAt?: InputMaybe<OrderDirection>;
  viewCount?: InputMaybe<OrderDirection>;
};

export type PostRelateToManyForCreateInput = {
  connect?: InputMaybe<Array<PostWhereUniqueInput>>;
  create?: InputMaybe<Array<PostCreateInput>>;
};

export type PostRelateToManyForUpdateInput = {
  connect?: InputMaybe<Array<PostWhereUniqueInput>>;
  create?: InputMaybe<Array<PostCreateInput>>;
  disconnect?: InputMaybe<Array<PostWhereUniqueInput>>;
  set?: InputMaybe<Array<PostWhereUniqueInput>>;
};

export type PostUpdateArgs = {
  data: PostUpdateInput;
  where: PostWhereUniqueInput;
};

export type PostUpdateInput = {
  author?: InputMaybe<AuthorRelateToOneForUpdateInput>;
  category?: InputMaybe<CategoryRelateToOneForUpdateInput>;
  content?: InputMaybe<Scalars['String']['input']>;
  coverImage?: InputMaybe<ImageFieldInput>;
  excerpt?: InputMaybe<Scalars['String']['input']>;
  featured?: InputMaybe<Scalars['Boolean']['input']>;
  publishedAt?: InputMaybe<Scalars['DateTime']['input']>;
  slug?: InputMaybe<Scalars['String']['input']>;
  status?: InputMaybe<Scalars['String']['input']>;
  tags?: InputMaybe<TagRelateToManyForUpdateInput>;
  title?: InputMaybe<Scalars['String']['input']>;
  updatedAt?: InputMaybe<Scalars['DateTime']['input']>;
  viewCount?: InputMaybe<Scalars['Int']['input']>;
};

export type PostWhereInput = {
  AND?: InputMaybe<Array<PostWhereInput>>;
  NOT?: InputMaybe<Array<PostWhereInput>>;
  OR?: InputMaybe<Array<PostWhereInput>>;
  author?: InputMaybe<AuthorWhereInput>;
  category?: InputMaybe<CategoryWhereInput>;
  content?: InputMaybe<StringFilter>;
  excerpt?: InputMaybe<StringFilter>;
  featured?: InputMaybe<BooleanFilter>;
  id?: InputMaybe<IdFilter>;
  publishedAt?: InputMaybe<DateTimeNullableFilter>;
  slug?: InputMaybe<StringFilter>;
  status?: InputMaybe<StringNullableFilter>;
  tags?: InputMaybe<TagManyRelationFilter>;
  title?: InputMaybe<StringFilter>;
  updatedAt?: InputMaybe<DateTimeNullableFilter>;
  viewCount?: InputMaybe<IntNullableFilter>;
};

export type PostWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']['input']>;
  slug?: InputMaybe<Scalars['String']['input']>;
};

export type Product = {
  __typename?: 'Product';
  K_pct?: Maybe<Scalars['Float']['output']>;
  N_pct?: Maybe<Scalars['Float']['output']>;
  PFnPE?: Maybe<Scalars['String']['output']>;
  PFnPO?: Maybe<Scalars['String']['output']>;
  P_pct?: Maybe<Scalars['Float']['output']>;
  attivita?: Maybe<Scalars['String']['output']>;
  cap_sede_amministrativa?: Maybe<Scalars['String']['output']>;
  cap_sede_legale?: Maybe<Scalars['String']['output']>;
  codice_formulazione?: Maybe<Scalars['String']['output']>;
  composition_json?: Maybe<Scalars['JSON']['output']>;
  comune_sede_amministrativa?: Maybe<Scalars['String']['output']>;
  comune_sede_legale?: Maybe<Scalars['String']['output']>;
  contenuto_per_100g_di_prodotto?: Maybe<Scalars['String']['output']>;
  country?: Maybe<Scalars['String']['output']>;
  data_decorrenza_revoca?: Maybe<Scalars['DateTime']['output']>;
  data_decreto_revoca?: Maybe<Scalars['DateTime']['output']>;
  data_registrazione?: Maybe<Scalars['DateTime']['output']>;
  data_scadenza_autorizzazione?: Maybe<Scalars['DateTime']['output']>;
  descrizione_formulazione?: Maybe<Scalars['String']['output']>;
  hazard_class?: Maybe<Scalars['String']['output']>;
  id: Scalars['ID']['output'];
  importazione_parallela?: Maybe<Scalars['String']['output']>;
  indicazioni_di_pericolo?: Maybe<Scalars['String']['output']>;
  indirizzo_sede_amministrativa?: Maybe<Scalars['String']['output']>;
  indirizzo_sede_legale?: Maybe<Scalars['String']['output']>;
  motivo_della_revoca?: Maybe<Scalars['String']['output']>;
  name?: Maybe<Scalars['String']['output']>;
  product_type?: Maybe<Scalars['String']['output']>;
  provincia_sede_amministrativa?: Maybe<Scalars['String']['output']>;
  provincia_sede_legale?: Maybe<Scalars['String']['output']>;
  ragione_sociale?: Maybe<Scalars['String']['output']>;
  registration_no?: Maybe<Scalars['String']['output']>;
  sostanze_attive?: Maybe<Scalars['String']['output']>;
  stato_amministrativo?: Maybe<Scalars['String']['output']>;
  stockLots?: Maybe<Array<FeedLot>>;
  stockLotsCount?: Maybe<Scalars['Int']['output']>;
};


export type ProductStockLotsArgs = {
  cursor?: InputMaybe<FeedLotWhereUniqueInput>;
  orderBy?: Array<FeedLotOrderByInput>;
  skip?: Scalars['Int']['input'];
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: FeedLotWhereInput;
};


export type ProductStockLotsCountArgs = {
  where?: FeedLotWhereInput;
};

export type ProductCreateInput = {
  K_pct?: InputMaybe<Scalars['Float']['input']>;
  N_pct?: InputMaybe<Scalars['Float']['input']>;
  PFnPE?: InputMaybe<Scalars['String']['input']>;
  PFnPO?: InputMaybe<Scalars['String']['input']>;
  P_pct?: InputMaybe<Scalars['Float']['input']>;
  attivita?: InputMaybe<Scalars['String']['input']>;
  cap_sede_amministrativa?: InputMaybe<Scalars['String']['input']>;
  cap_sede_legale?: InputMaybe<Scalars['String']['input']>;
  codice_formulazione?: InputMaybe<Scalars['String']['input']>;
  composition_json?: InputMaybe<Scalars['JSON']['input']>;
  comune_sede_amministrativa?: InputMaybe<Scalars['String']['input']>;
  comune_sede_legale?: InputMaybe<Scalars['String']['input']>;
  contenuto_per_100g_di_prodotto?: InputMaybe<Scalars['String']['input']>;
  country?: InputMaybe<Scalars['String']['input']>;
  data_decorrenza_revoca?: InputMaybe<Scalars['DateTime']['input']>;
  data_decreto_revoca?: InputMaybe<Scalars['DateTime']['input']>;
  data_registrazione?: InputMaybe<Scalars['DateTime']['input']>;
  data_scadenza_autorizzazione?: InputMaybe<Scalars['DateTime']['input']>;
  descrizione_formulazione?: InputMaybe<Scalars['String']['input']>;
  hazard_class?: InputMaybe<Scalars['String']['input']>;
  importazione_parallela?: InputMaybe<Scalars['String']['input']>;
  indicazioni_di_pericolo?: InputMaybe<Scalars['String']['input']>;
  indirizzo_sede_amministrativa?: InputMaybe<Scalars['String']['input']>;
  indirizzo_sede_legale?: InputMaybe<Scalars['String']['input']>;
  motivo_della_revoca?: InputMaybe<Scalars['String']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
  product_type?: InputMaybe<Scalars['String']['input']>;
  provincia_sede_amministrativa?: InputMaybe<Scalars['String']['input']>;
  provincia_sede_legale?: InputMaybe<Scalars['String']['input']>;
  ragione_sociale?: InputMaybe<Scalars['String']['input']>;
  registration_no?: InputMaybe<Scalars['String']['input']>;
  sostanze_attive?: InputMaybe<Scalars['String']['input']>;
  stato_amministrativo?: InputMaybe<Scalars['String']['input']>;
  stockLots?: InputMaybe<FeedLotRelateToManyForCreateInput>;
};

export type ProductOrderByInput = {
  K_pct?: InputMaybe<OrderDirection>;
  N_pct?: InputMaybe<OrderDirection>;
  PFnPE?: InputMaybe<OrderDirection>;
  PFnPO?: InputMaybe<OrderDirection>;
  P_pct?: InputMaybe<OrderDirection>;
  attivita?: InputMaybe<OrderDirection>;
  cap_sede_amministrativa?: InputMaybe<OrderDirection>;
  cap_sede_legale?: InputMaybe<OrderDirection>;
  codice_formulazione?: InputMaybe<OrderDirection>;
  comune_sede_amministrativa?: InputMaybe<OrderDirection>;
  comune_sede_legale?: InputMaybe<OrderDirection>;
  contenuto_per_100g_di_prodotto?: InputMaybe<OrderDirection>;
  country?: InputMaybe<OrderDirection>;
  data_decorrenza_revoca?: InputMaybe<OrderDirection>;
  data_decreto_revoca?: InputMaybe<OrderDirection>;
  data_registrazione?: InputMaybe<OrderDirection>;
  data_scadenza_autorizzazione?: InputMaybe<OrderDirection>;
  descrizione_formulazione?: InputMaybe<OrderDirection>;
  hazard_class?: InputMaybe<OrderDirection>;
  id?: InputMaybe<OrderDirection>;
  importazione_parallela?: InputMaybe<OrderDirection>;
  indicazioni_di_pericolo?: InputMaybe<OrderDirection>;
  indirizzo_sede_amministrativa?: InputMaybe<OrderDirection>;
  indirizzo_sede_legale?: InputMaybe<OrderDirection>;
  motivo_della_revoca?: InputMaybe<OrderDirection>;
  name?: InputMaybe<OrderDirection>;
  product_type?: InputMaybe<OrderDirection>;
  provincia_sede_amministrativa?: InputMaybe<OrderDirection>;
  provincia_sede_legale?: InputMaybe<OrderDirection>;
  ragione_sociale?: InputMaybe<OrderDirection>;
  registration_no?: InputMaybe<OrderDirection>;
  sostanze_attive?: InputMaybe<OrderDirection>;
  stato_amministrativo?: InputMaybe<OrderDirection>;
};

export type ProductRelateToOneForCreateInput = {
  connect?: InputMaybe<ProductWhereUniqueInput>;
  create?: InputMaybe<ProductCreateInput>;
};

export type ProductRelateToOneForUpdateInput = {
  connect?: InputMaybe<ProductWhereUniqueInput>;
  create?: InputMaybe<ProductCreateInput>;
  disconnect?: InputMaybe<Scalars['Boolean']['input']>;
};

export type ProductUpdateArgs = {
  data: ProductUpdateInput;
  where: ProductWhereUniqueInput;
};

export type ProductUpdateInput = {
  K_pct?: InputMaybe<Scalars['Float']['input']>;
  N_pct?: InputMaybe<Scalars['Float']['input']>;
  PFnPE?: InputMaybe<Scalars['String']['input']>;
  PFnPO?: InputMaybe<Scalars['String']['input']>;
  P_pct?: InputMaybe<Scalars['Float']['input']>;
  attivita?: InputMaybe<Scalars['String']['input']>;
  cap_sede_amministrativa?: InputMaybe<Scalars['String']['input']>;
  cap_sede_legale?: InputMaybe<Scalars['String']['input']>;
  codice_formulazione?: InputMaybe<Scalars['String']['input']>;
  composition_json?: InputMaybe<Scalars['JSON']['input']>;
  comune_sede_amministrativa?: InputMaybe<Scalars['String']['input']>;
  comune_sede_legale?: InputMaybe<Scalars['String']['input']>;
  contenuto_per_100g_di_prodotto?: InputMaybe<Scalars['String']['input']>;
  country?: InputMaybe<Scalars['String']['input']>;
  data_decorrenza_revoca?: InputMaybe<Scalars['DateTime']['input']>;
  data_decreto_revoca?: InputMaybe<Scalars['DateTime']['input']>;
  data_registrazione?: InputMaybe<Scalars['DateTime']['input']>;
  data_scadenza_autorizzazione?: InputMaybe<Scalars['DateTime']['input']>;
  descrizione_formulazione?: InputMaybe<Scalars['String']['input']>;
  hazard_class?: InputMaybe<Scalars['String']['input']>;
  importazione_parallela?: InputMaybe<Scalars['String']['input']>;
  indicazioni_di_pericolo?: InputMaybe<Scalars['String']['input']>;
  indirizzo_sede_amministrativa?: InputMaybe<Scalars['String']['input']>;
  indirizzo_sede_legale?: InputMaybe<Scalars['String']['input']>;
  motivo_della_revoca?: InputMaybe<Scalars['String']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
  product_type?: InputMaybe<Scalars['String']['input']>;
  provincia_sede_amministrativa?: InputMaybe<Scalars['String']['input']>;
  provincia_sede_legale?: InputMaybe<Scalars['String']['input']>;
  ragione_sociale?: InputMaybe<Scalars['String']['input']>;
  registration_no?: InputMaybe<Scalars['String']['input']>;
  sostanze_attive?: InputMaybe<Scalars['String']['input']>;
  stato_amministrativo?: InputMaybe<Scalars['String']['input']>;
  stockLots?: InputMaybe<FeedLotRelateToManyForUpdateInput>;
};

export type ProductWhereInput = {
  AND?: InputMaybe<Array<ProductWhereInput>>;
  K_pct?: InputMaybe<FloatNullableFilter>;
  NOT?: InputMaybe<Array<ProductWhereInput>>;
  N_pct?: InputMaybe<FloatNullableFilter>;
  OR?: InputMaybe<Array<ProductWhereInput>>;
  PFnPE?: InputMaybe<StringFilter>;
  PFnPO?: InputMaybe<StringFilter>;
  P_pct?: InputMaybe<FloatNullableFilter>;
  attivita?: InputMaybe<StringFilter>;
  cap_sede_amministrativa?: InputMaybe<StringFilter>;
  cap_sede_legale?: InputMaybe<StringFilter>;
  codice_formulazione?: InputMaybe<StringFilter>;
  comune_sede_amministrativa?: InputMaybe<StringFilter>;
  comune_sede_legale?: InputMaybe<StringFilter>;
  contenuto_per_100g_di_prodotto?: InputMaybe<StringFilter>;
  country?: InputMaybe<StringFilter>;
  data_decorrenza_revoca?: InputMaybe<DateTimeNullableFilter>;
  data_decreto_revoca?: InputMaybe<DateTimeNullableFilter>;
  data_registrazione?: InputMaybe<DateTimeNullableFilter>;
  data_scadenza_autorizzazione?: InputMaybe<DateTimeNullableFilter>;
  descrizione_formulazione?: InputMaybe<StringFilter>;
  hazard_class?: InputMaybe<StringFilter>;
  id?: InputMaybe<IdFilter>;
  importazione_parallela?: InputMaybe<StringFilter>;
  indicazioni_di_pericolo?: InputMaybe<StringFilter>;
  indirizzo_sede_amministrativa?: InputMaybe<StringFilter>;
  indirizzo_sede_legale?: InputMaybe<StringFilter>;
  motivo_della_revoca?: InputMaybe<StringFilter>;
  name?: InputMaybe<StringFilter>;
  product_type?: InputMaybe<StringNullableFilter>;
  provincia_sede_amministrativa?: InputMaybe<StringFilter>;
  provincia_sede_legale?: InputMaybe<StringFilter>;
  ragione_sociale?: InputMaybe<StringFilter>;
  registration_no?: InputMaybe<StringFilter>;
  sostanze_attive?: InputMaybe<StringFilter>;
  stato_amministrativo?: InputMaybe<StringFilter>;
  stockLots?: InputMaybe<FeedLotManyRelationFilter>;
};

export type ProductWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']['input']>;
};

export type Query = {
  __typename?: 'Query';
  activities?: Maybe<Array<Activity>>;
  activitiesCount?: Maybe<Scalars['Int']['output']>;
  activity?: Maybe<Activity>;
  activityImpact?: Maybe<ActivityImpact>;
  activityImpacts?: Maybe<Array<ActivityImpact>>;
  activityImpactsCount?: Maybe<Scalars['Int']['output']>;
  alert?: Maybe<Alert>;
  alerts?: Maybe<Array<Alert>>;
  alertsCount?: Maybe<Scalars['Int']['output']>;
  animal?: Maybe<Animal>;
  animalEvent?: Maybe<AnimalEvent>;
  animalEvents?: Maybe<Array<AnimalEvent>>;
  animalEventsCount?: Maybe<Scalars['Int']['output']>;
  animals?: Maybe<Array<Animal>>;
  animalsCount?: Maybe<Scalars['Int']['output']>;
  application?: Maybe<Application>;
  applicationStatus?: Maybe<ApplicationStatus>;
  applicationStatuses?: Maybe<Array<ApplicationStatus>>;
  applicationStatusesCount?: Maybe<Scalars['Int']['output']>;
  applications?: Maybe<Array<Application>>;
  applicationsCount?: Maybe<Scalars['Int']['output']>;
  authenticatedItem?: Maybe<AuthenticatedItem>;
  author?: Maybe<Author>;
  authors?: Maybe<Array<Author>>;
  authorsCount?: Maybe<Scalars['Int']['output']>;
  barn?: Maybe<Barn>;
  barnActivities?: Maybe<Array<BarnActivity>>;
  barnActivitiesCount?: Maybe<Scalars['Int']['output']>;
  barnActivity?: Maybe<BarnActivity>;
  barns?: Maybe<Array<Barn>>;
  barnsCount?: Maybe<Scalars['Int']['output']>;
  box?: Maybe<Box>;
  boxes?: Maybe<Array<Box>>;
  boxesCount?: Maybe<Scalars['Int']['output']>;
  breed?: Maybe<Breed>;
  breeds?: Maybe<Array<Breed>>;
  breedsCount?: Maybe<Scalars['Int']['output']>;
  carbonOffsetFactor?: Maybe<CarbonOffsetFactor>;
  carbonOffsetFactors?: Maybe<Array<CarbonOffsetFactor>>;
  carbonOffsetFactorsCount?: Maybe<Scalars['Int']['output']>;
  categories?: Maybe<Array<Category>>;
  categoriesCount?: Maybe<Scalars['Int']['output']>;
  category?: Maybe<Category>;
  categoryKPI?: Maybe<CategoryKpi>;
  categoryKPIS?: Maybe<Array<CategoryKpi>>;
  categoryKPISCount?: Maybe<Scalars['Int']['output']>;
  chat?: Maybe<Chat>;
  chats?: Maybe<Array<Chat>>;
  chatsCount?: Maybe<Scalars['Int']['output']>;
  crop?: Maybe<Crop>;
  cropType?: Maybe<CropType>;
  cropTypes?: Maybe<Array<CropType>>;
  cropTypesCount?: Maybe<Scalars['Int']['output']>;
  crops?: Maybe<Array<Crop>>;
  cropsCount?: Maybe<Scalars['Int']['output']>;
  document?: Maybe<Document>;
  documents?: Maybe<Array<Document>>;
  documentsCount?: Maybe<Scalars['Int']['output']>;
  ecoScheme?: Maybe<EcoScheme>;
  ecoSchemes?: Maybe<Array<EcoScheme>>;
  ecoSchemesCount?: Maybe<Scalars['Int']['output']>;
  emissionScenario?: Maybe<EmissionScenario>;
  emissionScenarios?: Maybe<Array<EmissionScenario>>;
  emissionScenariosCount?: Maybe<Scalars['Int']['output']>;
  equipment?: Maybe<Equipment>;
  equipmentList?: Maybe<Array<Equipment>>;
  equipmentListCount?: Maybe<Scalars['Int']['output']>;
  farm?: Maybe<Farm>;
  farms?: Maybe<Array<Farm>>;
  farmsCount?: Maybe<Scalars['Int']['output']>;
  feedDispenseEvent?: Maybe<FeedDispenseEvent>;
  feedDispenseEvents?: Maybe<Array<FeedDispenseEvent>>;
  feedDispenseEventsCount?: Maybe<Scalars['Int']['output']>;
  feedLot?: Maybe<FeedLot>;
  feedLots?: Maybe<Array<FeedLot>>;
  feedLotsCount?: Maybe<Scalars['Int']['output']>;
  feedRationComponent?: Maybe<FeedRationComponent>;
  feedRationComponents?: Maybe<Array<FeedRationComponent>>;
  feedRationComponentsCount?: Maybe<Scalars['Int']['output']>;
  feedRationPlan?: Maybe<FeedRationPlan>;
  feedRationPlans?: Maybe<Array<FeedRationPlan>>;
  feedRationPlansCount?: Maybe<Scalars['Int']['output']>;
  feedSilo?: Maybe<FeedSilo>;
  feedSilos?: Maybe<Array<FeedSilo>>;
  feedSilosCount?: Maybe<Scalars['Int']['output']>;
  field?: Maybe<Field>;
  fieldImpactSummaries?: Maybe<Array<FieldImpactSummary>>;
  fieldImpactSummariesCount?: Maybe<Scalars['Int']['output']>;
  fieldImpactSummary?: Maybe<FieldImpactSummary>;
  fields?: Maybe<Array<Field>>;
  fieldsCount?: Maybe<Scalars['Int']['output']>;
  herdMetric?: Maybe<HerdMetric>;
  herdMetrics?: Maybe<Array<HerdMetric>>;
  herdMetricsCount?: Maybe<Scalars['Int']['output']>;
  interview?: Maybe<Interview>;
  interviewStage?: Maybe<InterviewStage>;
  interviewStages?: Maybe<Array<InterviewStage>>;
  interviewStagesCount?: Maybe<Scalars['Int']['output']>;
  interviews?: Maybe<Array<Interview>>;
  interviewsCount?: Maybe<Scalars['Int']['output']>;
  jobCandidate?: Maybe<JobCandidate>;
  jobCandidates?: Maybe<Array<JobCandidate>>;
  jobCandidatesCount?: Maybe<Scalars['Int']['output']>;
  jobOpening?: Maybe<JobOpening>;
  jobOpenings?: Maybe<Array<JobOpening>>;
  jobOpeningsCount?: Maybe<Scalars['Int']['output']>;
  kPI?: Maybe<Kpi>;
  kPIS?: Maybe<Array<Kpi>>;
  kPISCount?: Maybe<Scalars['Int']['output']>;
  keystone: KeystoneMeta;
  landCoverStatistic?: Maybe<LandCoverStatistic>;
  landCoverStatistics?: Maybe<Array<LandCoverStatistic>>;
  landCoverStatisticsCount?: Maybe<Scalars['Int']['output']>;
  membership?: Maybe<Membership>;
  memberships?: Maybe<Array<Membership>>;
  membershipsCount?: Maybe<Scalars['Int']['output']>;
  messageClick?: Maybe<MessageClick>;
  messageClicks?: Maybe<Array<MessageClick>>;
  messageClicksCount?: Maybe<Scalars['Int']['output']>;
  messageDeliveries?: Maybe<Array<MessageDelivery>>;
  messageDeliveriesCount?: Maybe<Scalars['Int']['output']>;
  messageDelivery?: Maybe<MessageDelivery>;
  messageTemplate?: Maybe<MessageTemplate>;
  messageTemplates?: Maybe<Array<MessageTemplate>>;
  messageTemplatesCount?: Maybe<Scalars['Int']['output']>;
  milkAnalyses?: Maybe<Array<MilkAnalysis>>;
  milkAnalysesCount?: Maybe<Scalars['Int']['output']>;
  milkAnalysis?: Maybe<MilkAnalysis>;
  milkingEvent?: Maybe<MilkingEvent>;
  milkingEvents?: Maybe<Array<MilkingEvent>>;
  milkingEventsCount?: Maybe<Scalars['Int']['output']>;
  nDVIAsset?: Maybe<NdviAsset>;
  nDVIAssets?: Maybe<Array<NdviAsset>>;
  nDVIAssetsCount?: Maybe<Scalars['Int']['output']>;
  netPrimaryProductivities?: Maybe<Array<NetPrimaryProductivity>>;
  netPrimaryProductivitiesCount?: Maybe<Scalars['Int']['output']>;
  netPrimaryProductivity?: Maybe<NetPrimaryProductivity>;
  newsletterSegment?: Maybe<NewsletterSegment>;
  newsletterSegments?: Maybe<Array<NewsletterSegment>>;
  newsletterSegmentsCount?: Maybe<Scalars['Int']['output']>;
  newsletterSubscriber?: Maybe<NewsletterSubscriber>;
  newsletterSubscribers?: Maybe<Array<NewsletterSubscriber>>;
  newsletterSubscribersCount?: Maybe<Scalars['Int']['output']>;
  operator?: Maybe<Operator>;
  operators?: Maybe<Array<Operator>>;
  operatorsCount?: Maybe<Scalars['Int']['output']>;
  organisation?: Maybe<Organisation>;
  organisations?: Maybe<Array<Organisation>>;
  organisationsCount?: Maybe<Scalars['Int']['output']>;
  plan?: Maybe<Plan>;
  planPrice?: Maybe<PlanPrice>;
  planPrices?: Maybe<Array<PlanPrice>>;
  planPricesCount?: Maybe<Scalars['Int']['output']>;
  plans?: Maybe<Array<Plan>>;
  plansCount?: Maybe<Scalars['Int']['output']>;
  post?: Maybe<Post>;
  posts?: Maybe<Array<Post>>;
  postsCount?: Maybe<Scalars['Int']['output']>;
  product?: Maybe<Product>;
  products?: Maybe<Array<Product>>;
  productsCount?: Maybe<Scalars['Int']['output']>;
  referralCampaign?: Maybe<ReferralCampaign>;
  referralCampaigns?: Maybe<Array<ReferralCampaign>>;
  referralCampaignsCount?: Maybe<Scalars['Int']['output']>;
  referralPartner?: Maybe<ReferralPartner>;
  referralPartners?: Maybe<Array<ReferralPartner>>;
  referralPartnersCount?: Maybe<Scalars['Int']['output']>;
  referralRedemption?: Maybe<ReferralRedemption>;
  referralRedemptions?: Maybe<Array<ReferralRedemption>>;
  referralRedemptionsCount?: Maybe<Scalars['Int']['output']>;
  regulatoryRule?: Maybe<RegulatoryRule>;
  regulatoryRules?: Maybe<Array<RegulatoryRule>>;
  regulatoryRulesCount?: Maybe<Scalars['Int']['output']>;
  soilMeasurement?: Maybe<SoilMeasurement>;
  soilMeasurements?: Maybe<Array<SoilMeasurement>>;
  soilMeasurementsCount?: Maybe<Scalars['Int']['output']>;
  soilMoistureObservation?: Maybe<SoilMoistureObservation>;
  soilMoistureObservations?: Maybe<Array<SoilMoistureObservation>>;
  soilMoistureObservationsCount?: Maybe<Scalars['Int']['output']>;
  soilOrganicCarbonStock?: Maybe<SoilOrganicCarbonStock>;
  soilOrganicCarbonStocks?: Maybe<Array<SoilOrganicCarbonStock>>;
  soilOrganicCarbonStocksCount?: Maybe<Scalars['Int']['output']>;
  subscription?: Maybe<Subscription>;
  subscriptions?: Maybe<Array<Subscription>>;
  subscriptionsCount?: Maybe<Scalars['Int']['output']>;
  sustainablePractice?: Maybe<SustainablePractice>;
  sustainablePracticeCategories?: Maybe<Array<SustainablePracticeCategory>>;
  sustainablePracticeCategoriesCount?: Maybe<Scalars['Int']['output']>;
  sustainablePracticeCategory?: Maybe<SustainablePracticeCategory>;
  sustainablePracticeEvent?: Maybe<SustainablePracticeEvent>;
  sustainablePracticeEvents?: Maybe<Array<SustainablePracticeEvent>>;
  sustainablePracticeEventsCount?: Maybe<Scalars['Int']['output']>;
  sustainablePractices?: Maybe<Array<SustainablePractice>>;
  sustainablePracticesCount?: Maybe<Scalars['Int']['output']>;
  tag?: Maybe<Tag>;
  tags?: Maybe<Array<Tag>>;
  tagsCount?: Maybe<Scalars['Int']['output']>;
  user?: Maybe<User>;
  users?: Maybe<Array<User>>;
  usersCount?: Maybe<Scalars['Int']['output']>;
  weatherRecord?: Maybe<WeatherRecord>;
  weatherRecords?: Maybe<Array<WeatherRecord>>;
  weatherRecordsCount?: Maybe<Scalars['Int']['output']>;
};


export type QueryActivitiesArgs = {
  cursor?: InputMaybe<ActivityWhereUniqueInput>;
  orderBy?: Array<ActivityOrderByInput>;
  skip?: Scalars['Int']['input'];
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: ActivityWhereInput;
};


export type QueryActivitiesCountArgs = {
  where?: ActivityWhereInput;
};


export type QueryActivityArgs = {
  where: ActivityWhereUniqueInput;
};


export type QueryActivityImpactArgs = {
  where: ActivityImpactWhereUniqueInput;
};


export type QueryActivityImpactsArgs = {
  cursor?: InputMaybe<ActivityImpactWhereUniqueInput>;
  orderBy?: Array<ActivityImpactOrderByInput>;
  skip?: Scalars['Int']['input'];
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: ActivityImpactWhereInput;
};


export type QueryActivityImpactsCountArgs = {
  where?: ActivityImpactWhereInput;
};


export type QueryAlertArgs = {
  where: AlertWhereUniqueInput;
};


export type QueryAlertsArgs = {
  cursor?: InputMaybe<AlertWhereUniqueInput>;
  orderBy?: Array<AlertOrderByInput>;
  skip?: Scalars['Int']['input'];
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: AlertWhereInput;
};


export type QueryAlertsCountArgs = {
  where?: AlertWhereInput;
};


export type QueryAnimalArgs = {
  where: AnimalWhereUniqueInput;
};


export type QueryAnimalEventArgs = {
  where: AnimalEventWhereUniqueInput;
};


export type QueryAnimalEventsArgs = {
  cursor?: InputMaybe<AnimalEventWhereUniqueInput>;
  orderBy?: Array<AnimalEventOrderByInput>;
  skip?: Scalars['Int']['input'];
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: AnimalEventWhereInput;
};


export type QueryAnimalEventsCountArgs = {
  where?: AnimalEventWhereInput;
};


export type QueryAnimalsArgs = {
  cursor?: InputMaybe<AnimalWhereUniqueInput>;
  orderBy?: Array<AnimalOrderByInput>;
  skip?: Scalars['Int']['input'];
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: AnimalWhereInput;
};


export type QueryAnimalsCountArgs = {
  where?: AnimalWhereInput;
};


export type QueryApplicationArgs = {
  where: ApplicationWhereUniqueInput;
};


export type QueryApplicationStatusArgs = {
  where: ApplicationStatusWhereUniqueInput;
};


export type QueryApplicationStatusesArgs = {
  cursor?: InputMaybe<ApplicationStatusWhereUniqueInput>;
  orderBy?: Array<ApplicationStatusOrderByInput>;
  skip?: Scalars['Int']['input'];
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: ApplicationStatusWhereInput;
};


export type QueryApplicationStatusesCountArgs = {
  where?: ApplicationStatusWhereInput;
};


export type QueryApplicationsArgs = {
  cursor?: InputMaybe<ApplicationWhereUniqueInput>;
  orderBy?: Array<ApplicationOrderByInput>;
  skip?: Scalars['Int']['input'];
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: ApplicationWhereInput;
};


export type QueryApplicationsCountArgs = {
  where?: ApplicationWhereInput;
};


export type QueryAuthorArgs = {
  where: AuthorWhereUniqueInput;
};


export type QueryAuthorsArgs = {
  cursor?: InputMaybe<AuthorWhereUniqueInput>;
  orderBy?: Array<AuthorOrderByInput>;
  skip?: Scalars['Int']['input'];
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: AuthorWhereInput;
};


export type QueryAuthorsCountArgs = {
  where?: AuthorWhereInput;
};


export type QueryBarnArgs = {
  where: BarnWhereUniqueInput;
};


export type QueryBarnActivitiesArgs = {
  cursor?: InputMaybe<BarnActivityWhereUniqueInput>;
  orderBy?: Array<BarnActivityOrderByInput>;
  skip?: Scalars['Int']['input'];
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: BarnActivityWhereInput;
};


export type QueryBarnActivitiesCountArgs = {
  where?: BarnActivityWhereInput;
};


export type QueryBarnActivityArgs = {
  where: BarnActivityWhereUniqueInput;
};


export type QueryBarnsArgs = {
  cursor?: InputMaybe<BarnWhereUniqueInput>;
  orderBy?: Array<BarnOrderByInput>;
  skip?: Scalars['Int']['input'];
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: BarnWhereInput;
};


export type QueryBarnsCountArgs = {
  where?: BarnWhereInput;
};


export type QueryBoxArgs = {
  where: BoxWhereUniqueInput;
};


export type QueryBoxesArgs = {
  cursor?: InputMaybe<BoxWhereUniqueInput>;
  orderBy?: Array<BoxOrderByInput>;
  skip?: Scalars['Int']['input'];
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: BoxWhereInput;
};


export type QueryBoxesCountArgs = {
  where?: BoxWhereInput;
};


export type QueryBreedArgs = {
  where: BreedWhereUniqueInput;
};


export type QueryBreedsArgs = {
  cursor?: InputMaybe<BreedWhereUniqueInput>;
  orderBy?: Array<BreedOrderByInput>;
  skip?: Scalars['Int']['input'];
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: BreedWhereInput;
};


export type QueryBreedsCountArgs = {
  where?: BreedWhereInput;
};


export type QueryCarbonOffsetFactorArgs = {
  where: CarbonOffsetFactorWhereUniqueInput;
};


export type QueryCarbonOffsetFactorsArgs = {
  cursor?: InputMaybe<CarbonOffsetFactorWhereUniqueInput>;
  orderBy?: Array<CarbonOffsetFactorOrderByInput>;
  skip?: Scalars['Int']['input'];
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: CarbonOffsetFactorWhereInput;
};


export type QueryCarbonOffsetFactorsCountArgs = {
  where?: CarbonOffsetFactorWhereInput;
};


export type QueryCategoriesArgs = {
  cursor?: InputMaybe<CategoryWhereUniqueInput>;
  orderBy?: Array<CategoryOrderByInput>;
  skip?: Scalars['Int']['input'];
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: CategoryWhereInput;
};


export type QueryCategoriesCountArgs = {
  where?: CategoryWhereInput;
};


export type QueryCategoryArgs = {
  where: CategoryWhereUniqueInput;
};


export type QueryCategoryKpiArgs = {
  where: CategoryKpiWhereUniqueInput;
};


export type QueryCategoryKpisArgs = {
  cursor?: InputMaybe<CategoryKpiWhereUniqueInput>;
  orderBy?: Array<CategoryKpiOrderByInput>;
  skip?: Scalars['Int']['input'];
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: CategoryKpiWhereInput;
};


export type QueryCategoryKpisCountArgs = {
  where?: CategoryKpiWhereInput;
};


export type QueryChatArgs = {
  where: ChatWhereUniqueInput;
};


export type QueryChatsArgs = {
  cursor?: InputMaybe<ChatWhereUniqueInput>;
  orderBy?: Array<ChatOrderByInput>;
  skip?: Scalars['Int']['input'];
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: ChatWhereInput;
};


export type QueryChatsCountArgs = {
  where?: ChatWhereInput;
};


export type QueryCropArgs = {
  where: CropWhereUniqueInput;
};


export type QueryCropTypeArgs = {
  where: CropTypeWhereUniqueInput;
};


export type QueryCropTypesArgs = {
  cursor?: InputMaybe<CropTypeWhereUniqueInput>;
  orderBy?: Array<CropTypeOrderByInput>;
  skip?: Scalars['Int']['input'];
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: CropTypeWhereInput;
};


export type QueryCropTypesCountArgs = {
  where?: CropTypeWhereInput;
};


export type QueryCropsArgs = {
  cursor?: InputMaybe<CropWhereUniqueInput>;
  orderBy?: Array<CropOrderByInput>;
  skip?: Scalars['Int']['input'];
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: CropWhereInput;
};


export type QueryCropsCountArgs = {
  where?: CropWhereInput;
};


export type QueryDocumentArgs = {
  where: DocumentWhereUniqueInput;
};


export type QueryDocumentsArgs = {
  cursor?: InputMaybe<DocumentWhereUniqueInput>;
  orderBy?: Array<DocumentOrderByInput>;
  skip?: Scalars['Int']['input'];
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: DocumentWhereInput;
};


export type QueryDocumentsCountArgs = {
  where?: DocumentWhereInput;
};


export type QueryEcoSchemeArgs = {
  where: EcoSchemeWhereUniqueInput;
};


export type QueryEcoSchemesArgs = {
  cursor?: InputMaybe<EcoSchemeWhereUniqueInput>;
  orderBy?: Array<EcoSchemeOrderByInput>;
  skip?: Scalars['Int']['input'];
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: EcoSchemeWhereInput;
};


export type QueryEcoSchemesCountArgs = {
  where?: EcoSchemeWhereInput;
};


export type QueryEmissionScenarioArgs = {
  where: EmissionScenarioWhereUniqueInput;
};


export type QueryEmissionScenariosArgs = {
  cursor?: InputMaybe<EmissionScenarioWhereUniqueInput>;
  orderBy?: Array<EmissionScenarioOrderByInput>;
  skip?: Scalars['Int']['input'];
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: EmissionScenarioWhereInput;
};


export type QueryEmissionScenariosCountArgs = {
  where?: EmissionScenarioWhereInput;
};


export type QueryEquipmentArgs = {
  where: EquipmentWhereUniqueInput;
};


export type QueryEquipmentListArgs = {
  cursor?: InputMaybe<EquipmentWhereUniqueInput>;
  orderBy?: Array<EquipmentOrderByInput>;
  skip?: Scalars['Int']['input'];
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: EquipmentWhereInput;
};


export type QueryEquipmentListCountArgs = {
  where?: EquipmentWhereInput;
};


export type QueryFarmArgs = {
  where: FarmWhereUniqueInput;
};


export type QueryFarmsArgs = {
  cursor?: InputMaybe<FarmWhereUniqueInput>;
  orderBy?: Array<FarmOrderByInput>;
  skip?: Scalars['Int']['input'];
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: FarmWhereInput;
};


export type QueryFarmsCountArgs = {
  where?: FarmWhereInput;
};


export type QueryFeedDispenseEventArgs = {
  where: FeedDispenseEventWhereUniqueInput;
};


export type QueryFeedDispenseEventsArgs = {
  cursor?: InputMaybe<FeedDispenseEventWhereUniqueInput>;
  orderBy?: Array<FeedDispenseEventOrderByInput>;
  skip?: Scalars['Int']['input'];
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: FeedDispenseEventWhereInput;
};


export type QueryFeedDispenseEventsCountArgs = {
  where?: FeedDispenseEventWhereInput;
};


export type QueryFeedLotArgs = {
  where: FeedLotWhereUniqueInput;
};


export type QueryFeedLotsArgs = {
  cursor?: InputMaybe<FeedLotWhereUniqueInput>;
  orderBy?: Array<FeedLotOrderByInput>;
  skip?: Scalars['Int']['input'];
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: FeedLotWhereInput;
};


export type QueryFeedLotsCountArgs = {
  where?: FeedLotWhereInput;
};


export type QueryFeedRationComponentArgs = {
  where: FeedRationComponentWhereUniqueInput;
};


export type QueryFeedRationComponentsArgs = {
  cursor?: InputMaybe<FeedRationComponentWhereUniqueInput>;
  orderBy?: Array<FeedRationComponentOrderByInput>;
  skip?: Scalars['Int']['input'];
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: FeedRationComponentWhereInput;
};


export type QueryFeedRationComponentsCountArgs = {
  where?: FeedRationComponentWhereInput;
};


export type QueryFeedRationPlanArgs = {
  where: FeedRationPlanWhereUniqueInput;
};


export type QueryFeedRationPlansArgs = {
  cursor?: InputMaybe<FeedRationPlanWhereUniqueInput>;
  orderBy?: Array<FeedRationPlanOrderByInput>;
  skip?: Scalars['Int']['input'];
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: FeedRationPlanWhereInput;
};


export type QueryFeedRationPlansCountArgs = {
  where?: FeedRationPlanWhereInput;
};


export type QueryFeedSiloArgs = {
  where: FeedSiloWhereUniqueInput;
};


export type QueryFeedSilosArgs = {
  cursor?: InputMaybe<FeedSiloWhereUniqueInput>;
  orderBy?: Array<FeedSiloOrderByInput>;
  skip?: Scalars['Int']['input'];
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: FeedSiloWhereInput;
};


export type QueryFeedSilosCountArgs = {
  where?: FeedSiloWhereInput;
};


export type QueryFieldArgs = {
  where: FieldWhereUniqueInput;
};


export type QueryFieldImpactSummariesArgs = {
  cursor?: InputMaybe<FieldImpactSummaryWhereUniqueInput>;
  orderBy?: Array<FieldImpactSummaryOrderByInput>;
  skip?: Scalars['Int']['input'];
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: FieldImpactSummaryWhereInput;
};


export type QueryFieldImpactSummariesCountArgs = {
  where?: FieldImpactSummaryWhereInput;
};


export type QueryFieldImpactSummaryArgs = {
  where: FieldImpactSummaryWhereUniqueInput;
};


export type QueryFieldsArgs = {
  cursor?: InputMaybe<FieldWhereUniqueInput>;
  orderBy?: Array<FieldOrderByInput>;
  skip?: Scalars['Int']['input'];
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: FieldWhereInput;
};


export type QueryFieldsCountArgs = {
  where?: FieldWhereInput;
};


export type QueryHerdMetricArgs = {
  where: HerdMetricWhereUniqueInput;
};


export type QueryHerdMetricsArgs = {
  cursor?: InputMaybe<HerdMetricWhereUniqueInput>;
  orderBy?: Array<HerdMetricOrderByInput>;
  skip?: Scalars['Int']['input'];
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: HerdMetricWhereInput;
};


export type QueryHerdMetricsCountArgs = {
  where?: HerdMetricWhereInput;
};


export type QueryInterviewArgs = {
  where: InterviewWhereUniqueInput;
};


export type QueryInterviewStageArgs = {
  where: InterviewStageWhereUniqueInput;
};


export type QueryInterviewStagesArgs = {
  cursor?: InputMaybe<InterviewStageWhereUniqueInput>;
  orderBy?: Array<InterviewStageOrderByInput>;
  skip?: Scalars['Int']['input'];
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InterviewStageWhereInput;
};


export type QueryInterviewStagesCountArgs = {
  where?: InterviewStageWhereInput;
};


export type QueryInterviewsArgs = {
  cursor?: InputMaybe<InterviewWhereUniqueInput>;
  orderBy?: Array<InterviewOrderByInput>;
  skip?: Scalars['Int']['input'];
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InterviewWhereInput;
};


export type QueryInterviewsCountArgs = {
  where?: InterviewWhereInput;
};


export type QueryJobCandidateArgs = {
  where: JobCandidateWhereUniqueInput;
};


export type QueryJobCandidatesArgs = {
  cursor?: InputMaybe<JobCandidateWhereUniqueInput>;
  orderBy?: Array<JobCandidateOrderByInput>;
  skip?: Scalars['Int']['input'];
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: JobCandidateWhereInput;
};


export type QueryJobCandidatesCountArgs = {
  where?: JobCandidateWhereInput;
};


export type QueryJobOpeningArgs = {
  where: JobOpeningWhereUniqueInput;
};


export type QueryJobOpeningsArgs = {
  cursor?: InputMaybe<JobOpeningWhereUniqueInput>;
  orderBy?: Array<JobOpeningOrderByInput>;
  skip?: Scalars['Int']['input'];
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: JobOpeningWhereInput;
};


export type QueryJobOpeningsCountArgs = {
  where?: JobOpeningWhereInput;
};


export type QueryKPiArgs = {
  where: KpiWhereUniqueInput;
};


export type QueryKPisArgs = {
  cursor?: InputMaybe<KpiWhereUniqueInput>;
  orderBy?: Array<KpiOrderByInput>;
  skip?: Scalars['Int']['input'];
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: KpiWhereInput;
};


export type QueryKPisCountArgs = {
  where?: KpiWhereInput;
};


export type QueryLandCoverStatisticArgs = {
  where: LandCoverStatisticWhereUniqueInput;
};


export type QueryLandCoverStatisticsArgs = {
  cursor?: InputMaybe<LandCoverStatisticWhereUniqueInput>;
  orderBy?: Array<LandCoverStatisticOrderByInput>;
  skip?: Scalars['Int']['input'];
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: LandCoverStatisticWhereInput;
};


export type QueryLandCoverStatisticsCountArgs = {
  where?: LandCoverStatisticWhereInput;
};


export type QueryMembershipArgs = {
  where: MembershipWhereUniqueInput;
};


export type QueryMembershipsArgs = {
  cursor?: InputMaybe<MembershipWhereUniqueInput>;
  orderBy?: Array<MembershipOrderByInput>;
  skip?: Scalars['Int']['input'];
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: MembershipWhereInput;
};


export type QueryMembershipsCountArgs = {
  where?: MembershipWhereInput;
};


export type QueryMessageClickArgs = {
  where: MessageClickWhereUniqueInput;
};


export type QueryMessageClicksArgs = {
  cursor?: InputMaybe<MessageClickWhereUniqueInput>;
  orderBy?: Array<MessageClickOrderByInput>;
  skip?: Scalars['Int']['input'];
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: MessageClickWhereInput;
};


export type QueryMessageClicksCountArgs = {
  where?: MessageClickWhereInput;
};


export type QueryMessageDeliveriesArgs = {
  cursor?: InputMaybe<MessageDeliveryWhereUniqueInput>;
  orderBy?: Array<MessageDeliveryOrderByInput>;
  skip?: Scalars['Int']['input'];
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: MessageDeliveryWhereInput;
};


export type QueryMessageDeliveriesCountArgs = {
  where?: MessageDeliveryWhereInput;
};


export type QueryMessageDeliveryArgs = {
  where: MessageDeliveryWhereUniqueInput;
};


export type QueryMessageTemplateArgs = {
  where: MessageTemplateWhereUniqueInput;
};


export type QueryMessageTemplatesArgs = {
  cursor?: InputMaybe<MessageTemplateWhereUniqueInput>;
  orderBy?: Array<MessageTemplateOrderByInput>;
  skip?: Scalars['Int']['input'];
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: MessageTemplateWhereInput;
};


export type QueryMessageTemplatesCountArgs = {
  where?: MessageTemplateWhereInput;
};


export type QueryMilkAnalysesArgs = {
  cursor?: InputMaybe<MilkAnalysisWhereUniqueInput>;
  orderBy?: Array<MilkAnalysisOrderByInput>;
  skip?: Scalars['Int']['input'];
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: MilkAnalysisWhereInput;
};


export type QueryMilkAnalysesCountArgs = {
  where?: MilkAnalysisWhereInput;
};


export type QueryMilkAnalysisArgs = {
  where: MilkAnalysisWhereUniqueInput;
};


export type QueryMilkingEventArgs = {
  where: MilkingEventWhereUniqueInput;
};


export type QueryMilkingEventsArgs = {
  cursor?: InputMaybe<MilkingEventWhereUniqueInput>;
  orderBy?: Array<MilkingEventOrderByInput>;
  skip?: Scalars['Int']['input'];
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: MilkingEventWhereInput;
};


export type QueryMilkingEventsCountArgs = {
  where?: MilkingEventWhereInput;
};


export type QueryNDviAssetArgs = {
  where: NdviAssetWhereUniqueInput;
};


export type QueryNDviAssetsArgs = {
  cursor?: InputMaybe<NdviAssetWhereUniqueInput>;
  orderBy?: Array<NdviAssetOrderByInput>;
  skip?: Scalars['Int']['input'];
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: NdviAssetWhereInput;
};


export type QueryNDviAssetsCountArgs = {
  where?: NdviAssetWhereInput;
};


export type QueryNetPrimaryProductivitiesArgs = {
  cursor?: InputMaybe<NetPrimaryProductivityWhereUniqueInput>;
  orderBy?: Array<NetPrimaryProductivityOrderByInput>;
  skip?: Scalars['Int']['input'];
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: NetPrimaryProductivityWhereInput;
};


export type QueryNetPrimaryProductivitiesCountArgs = {
  where?: NetPrimaryProductivityWhereInput;
};


export type QueryNetPrimaryProductivityArgs = {
  where: NetPrimaryProductivityWhereUniqueInput;
};


export type QueryNewsletterSegmentArgs = {
  where: NewsletterSegmentWhereUniqueInput;
};


export type QueryNewsletterSegmentsArgs = {
  cursor?: InputMaybe<NewsletterSegmentWhereUniqueInput>;
  orderBy?: Array<NewsletterSegmentOrderByInput>;
  skip?: Scalars['Int']['input'];
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: NewsletterSegmentWhereInput;
};


export type QueryNewsletterSegmentsCountArgs = {
  where?: NewsletterSegmentWhereInput;
};


export type QueryNewsletterSubscriberArgs = {
  where: NewsletterSubscriberWhereUniqueInput;
};


export type QueryNewsletterSubscribersArgs = {
  cursor?: InputMaybe<NewsletterSubscriberWhereUniqueInput>;
  orderBy?: Array<NewsletterSubscriberOrderByInput>;
  skip?: Scalars['Int']['input'];
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: NewsletterSubscriberWhereInput;
};


export type QueryNewsletterSubscribersCountArgs = {
  where?: NewsletterSubscriberWhereInput;
};


export type QueryOperatorArgs = {
  where: OperatorWhereUniqueInput;
};


export type QueryOperatorsArgs = {
  cursor?: InputMaybe<OperatorWhereUniqueInput>;
  orderBy?: Array<OperatorOrderByInput>;
  skip?: Scalars['Int']['input'];
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: OperatorWhereInput;
};


export type QueryOperatorsCountArgs = {
  where?: OperatorWhereInput;
};


export type QueryOrganisationArgs = {
  where: OrganisationWhereUniqueInput;
};


export type QueryOrganisationsArgs = {
  cursor?: InputMaybe<OrganisationWhereUniqueInput>;
  orderBy?: Array<OrganisationOrderByInput>;
  skip?: Scalars['Int']['input'];
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: OrganisationWhereInput;
};


export type QueryOrganisationsCountArgs = {
  where?: OrganisationWhereInput;
};


export type QueryPlanArgs = {
  where: PlanWhereUniqueInput;
};


export type QueryPlanPriceArgs = {
  where: PlanPriceWhereUniqueInput;
};


export type QueryPlanPricesArgs = {
  cursor?: InputMaybe<PlanPriceWhereUniqueInput>;
  orderBy?: Array<PlanPriceOrderByInput>;
  skip?: Scalars['Int']['input'];
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: PlanPriceWhereInput;
};


export type QueryPlanPricesCountArgs = {
  where?: PlanPriceWhereInput;
};


export type QueryPlansArgs = {
  cursor?: InputMaybe<PlanWhereUniqueInput>;
  orderBy?: Array<PlanOrderByInput>;
  skip?: Scalars['Int']['input'];
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: PlanWhereInput;
};


export type QueryPlansCountArgs = {
  where?: PlanWhereInput;
};


export type QueryPostArgs = {
  where: PostWhereUniqueInput;
};


export type QueryPostsArgs = {
  cursor?: InputMaybe<PostWhereUniqueInput>;
  orderBy?: Array<PostOrderByInput>;
  skip?: Scalars['Int']['input'];
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: PostWhereInput;
};


export type QueryPostsCountArgs = {
  where?: PostWhereInput;
};


export type QueryProductArgs = {
  where: ProductWhereUniqueInput;
};


export type QueryProductsArgs = {
  cursor?: InputMaybe<ProductWhereUniqueInput>;
  orderBy?: Array<ProductOrderByInput>;
  skip?: Scalars['Int']['input'];
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: ProductWhereInput;
};


export type QueryProductsCountArgs = {
  where?: ProductWhereInput;
};


export type QueryReferralCampaignArgs = {
  where: ReferralCampaignWhereUniqueInput;
};


export type QueryReferralCampaignsArgs = {
  cursor?: InputMaybe<ReferralCampaignWhereUniqueInput>;
  orderBy?: Array<ReferralCampaignOrderByInput>;
  skip?: Scalars['Int']['input'];
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: ReferralCampaignWhereInput;
};


export type QueryReferralCampaignsCountArgs = {
  where?: ReferralCampaignWhereInput;
};


export type QueryReferralPartnerArgs = {
  where: ReferralPartnerWhereUniqueInput;
};


export type QueryReferralPartnersArgs = {
  cursor?: InputMaybe<ReferralPartnerWhereUniqueInput>;
  orderBy?: Array<ReferralPartnerOrderByInput>;
  skip?: Scalars['Int']['input'];
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: ReferralPartnerWhereInput;
};


export type QueryReferralPartnersCountArgs = {
  where?: ReferralPartnerWhereInput;
};


export type QueryReferralRedemptionArgs = {
  where: ReferralRedemptionWhereUniqueInput;
};


export type QueryReferralRedemptionsArgs = {
  cursor?: InputMaybe<ReferralRedemptionWhereUniqueInput>;
  orderBy?: Array<ReferralRedemptionOrderByInput>;
  skip?: Scalars['Int']['input'];
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: ReferralRedemptionWhereInput;
};


export type QueryReferralRedemptionsCountArgs = {
  where?: ReferralRedemptionWhereInput;
};


export type QueryRegulatoryRuleArgs = {
  where: RegulatoryRuleWhereUniqueInput;
};


export type QueryRegulatoryRulesArgs = {
  cursor?: InputMaybe<RegulatoryRuleWhereUniqueInput>;
  orderBy?: Array<RegulatoryRuleOrderByInput>;
  skip?: Scalars['Int']['input'];
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: RegulatoryRuleWhereInput;
};


export type QueryRegulatoryRulesCountArgs = {
  where?: RegulatoryRuleWhereInput;
};


export type QuerySoilMeasurementArgs = {
  where: SoilMeasurementWhereUniqueInput;
};


export type QuerySoilMeasurementsArgs = {
  cursor?: InputMaybe<SoilMeasurementWhereUniqueInput>;
  orderBy?: Array<SoilMeasurementOrderByInput>;
  skip?: Scalars['Int']['input'];
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: SoilMeasurementWhereInput;
};


export type QuerySoilMeasurementsCountArgs = {
  where?: SoilMeasurementWhereInput;
};


export type QuerySoilMoistureObservationArgs = {
  where: SoilMoistureObservationWhereUniqueInput;
};


export type QuerySoilMoistureObservationsArgs = {
  cursor?: InputMaybe<SoilMoistureObservationWhereUniqueInput>;
  orderBy?: Array<SoilMoistureObservationOrderByInput>;
  skip?: Scalars['Int']['input'];
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: SoilMoistureObservationWhereInput;
};


export type QuerySoilMoistureObservationsCountArgs = {
  where?: SoilMoistureObservationWhereInput;
};


export type QuerySoilOrganicCarbonStockArgs = {
  where: SoilOrganicCarbonStockWhereUniqueInput;
};


export type QuerySoilOrganicCarbonStocksArgs = {
  cursor?: InputMaybe<SoilOrganicCarbonStockWhereUniqueInput>;
  orderBy?: Array<SoilOrganicCarbonStockOrderByInput>;
  skip?: Scalars['Int']['input'];
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: SoilOrganicCarbonStockWhereInput;
};


export type QuerySoilOrganicCarbonStocksCountArgs = {
  where?: SoilOrganicCarbonStockWhereInput;
};


export type QuerySubscriptionArgs = {
  where: SubscriptionWhereUniqueInput;
};


export type QuerySubscriptionsArgs = {
  cursor?: InputMaybe<SubscriptionWhereUniqueInput>;
  orderBy?: Array<SubscriptionOrderByInput>;
  skip?: Scalars['Int']['input'];
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: SubscriptionWhereInput;
};


export type QuerySubscriptionsCountArgs = {
  where?: SubscriptionWhereInput;
};


export type QuerySustainablePracticeArgs = {
  where: SustainablePracticeWhereUniqueInput;
};


export type QuerySustainablePracticeCategoriesArgs = {
  cursor?: InputMaybe<SustainablePracticeCategoryWhereUniqueInput>;
  orderBy?: Array<SustainablePracticeCategoryOrderByInput>;
  skip?: Scalars['Int']['input'];
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: SustainablePracticeCategoryWhereInput;
};


export type QuerySustainablePracticeCategoriesCountArgs = {
  where?: SustainablePracticeCategoryWhereInput;
};


export type QuerySustainablePracticeCategoryArgs = {
  where: SustainablePracticeCategoryWhereUniqueInput;
};


export type QuerySustainablePracticeEventArgs = {
  where: SustainablePracticeEventWhereUniqueInput;
};


export type QuerySustainablePracticeEventsArgs = {
  cursor?: InputMaybe<SustainablePracticeEventWhereUniqueInput>;
  orderBy?: Array<SustainablePracticeEventOrderByInput>;
  skip?: Scalars['Int']['input'];
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: SustainablePracticeEventWhereInput;
};


export type QuerySustainablePracticeEventsCountArgs = {
  where?: SustainablePracticeEventWhereInput;
};


export type QuerySustainablePracticesArgs = {
  cursor?: InputMaybe<SustainablePracticeWhereUniqueInput>;
  orderBy?: Array<SustainablePracticeOrderByInput>;
  skip?: Scalars['Int']['input'];
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: SustainablePracticeWhereInput;
};


export type QuerySustainablePracticesCountArgs = {
  where?: SustainablePracticeWhereInput;
};


export type QueryTagArgs = {
  where: TagWhereUniqueInput;
};


export type QueryTagsArgs = {
  cursor?: InputMaybe<TagWhereUniqueInput>;
  orderBy?: Array<TagOrderByInput>;
  skip?: Scalars['Int']['input'];
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: TagWhereInput;
};


export type QueryTagsCountArgs = {
  where?: TagWhereInput;
};


export type QueryUserArgs = {
  where: UserWhereUniqueInput;
};


export type QueryUsersArgs = {
  cursor?: InputMaybe<UserWhereUniqueInput>;
  orderBy?: Array<UserOrderByInput>;
  skip?: Scalars['Int']['input'];
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: UserWhereInput;
};


export type QueryUsersCountArgs = {
  where?: UserWhereInput;
};


export type QueryWeatherRecordArgs = {
  where: WeatherRecordWhereUniqueInput;
};


export type QueryWeatherRecordsArgs = {
  cursor?: InputMaybe<WeatherRecordWhereUniqueInput>;
  orderBy?: Array<WeatherRecordOrderByInput>;
  skip?: Scalars['Int']['input'];
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: WeatherRecordWhereInput;
};


export type QueryWeatherRecordsCountArgs = {
  where?: WeatherRecordWhereInput;
};

export enum QueryMode {
  Default = 'default',
  Insensitive = 'insensitive'
}

export type ReferralCampaign = {
  __typename?: 'ReferralCampaign';
  code?: Maybe<Scalars['String']['output']>;
  createdAt?: Maybe<Scalars['DateTime']['output']>;
  discount_pct?: Maybe<Scalars['Float']['output']>;
  endDate?: Maybe<Scalars['DateTime']['output']>;
  id: Scalars['ID']['output'];
  note?: Maybe<Scalars['String']['output']>;
  partner?: Maybe<ReferralPartner>;
  redemptions?: Maybe<Array<ReferralRedemption>>;
  redemptionsCount?: Maybe<Scalars['Int']['output']>;
  startDate?: Maybe<Scalars['DateTime']['output']>;
};


export type ReferralCampaignRedemptionsArgs = {
  cursor?: InputMaybe<ReferralRedemptionWhereUniqueInput>;
  orderBy?: Array<ReferralRedemptionOrderByInput>;
  skip?: Scalars['Int']['input'];
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: ReferralRedemptionWhereInput;
};


export type ReferralCampaignRedemptionsCountArgs = {
  where?: ReferralRedemptionWhereInput;
};

export type ReferralCampaignCreateInput = {
  code?: InputMaybe<Scalars['String']['input']>;
  createdAt?: InputMaybe<Scalars['DateTime']['input']>;
  discount_pct?: InputMaybe<Scalars['Float']['input']>;
  endDate?: InputMaybe<Scalars['DateTime']['input']>;
  note?: InputMaybe<Scalars['String']['input']>;
  partner?: InputMaybe<ReferralPartnerRelateToOneForCreateInput>;
  redemptions?: InputMaybe<ReferralRedemptionRelateToManyForCreateInput>;
  startDate?: InputMaybe<Scalars['DateTime']['input']>;
};

export type ReferralCampaignManyRelationFilter = {
  every?: InputMaybe<ReferralCampaignWhereInput>;
  none?: InputMaybe<ReferralCampaignWhereInput>;
  some?: InputMaybe<ReferralCampaignWhereInput>;
};

export type ReferralCampaignOrderByInput = {
  code?: InputMaybe<OrderDirection>;
  createdAt?: InputMaybe<OrderDirection>;
  discount_pct?: InputMaybe<OrderDirection>;
  endDate?: InputMaybe<OrderDirection>;
  id?: InputMaybe<OrderDirection>;
  note?: InputMaybe<OrderDirection>;
  startDate?: InputMaybe<OrderDirection>;
};

export type ReferralCampaignRelateToManyForCreateInput = {
  connect?: InputMaybe<Array<ReferralCampaignWhereUniqueInput>>;
  create?: InputMaybe<Array<ReferralCampaignCreateInput>>;
};

export type ReferralCampaignRelateToManyForUpdateInput = {
  connect?: InputMaybe<Array<ReferralCampaignWhereUniqueInput>>;
  create?: InputMaybe<Array<ReferralCampaignCreateInput>>;
  disconnect?: InputMaybe<Array<ReferralCampaignWhereUniqueInput>>;
  set?: InputMaybe<Array<ReferralCampaignWhereUniqueInput>>;
};

export type ReferralCampaignRelateToOneForCreateInput = {
  connect?: InputMaybe<ReferralCampaignWhereUniqueInput>;
  create?: InputMaybe<ReferralCampaignCreateInput>;
};

export type ReferralCampaignRelateToOneForUpdateInput = {
  connect?: InputMaybe<ReferralCampaignWhereUniqueInput>;
  create?: InputMaybe<ReferralCampaignCreateInput>;
  disconnect?: InputMaybe<Scalars['Boolean']['input']>;
};

export type ReferralCampaignUpdateArgs = {
  data: ReferralCampaignUpdateInput;
  where: ReferralCampaignWhereUniqueInput;
};

export type ReferralCampaignUpdateInput = {
  code?: InputMaybe<Scalars['String']['input']>;
  createdAt?: InputMaybe<Scalars['DateTime']['input']>;
  discount_pct?: InputMaybe<Scalars['Float']['input']>;
  endDate?: InputMaybe<Scalars['DateTime']['input']>;
  note?: InputMaybe<Scalars['String']['input']>;
  partner?: InputMaybe<ReferralPartnerRelateToOneForUpdateInput>;
  redemptions?: InputMaybe<ReferralRedemptionRelateToManyForUpdateInput>;
  startDate?: InputMaybe<Scalars['DateTime']['input']>;
};

export type ReferralCampaignWhereInput = {
  AND?: InputMaybe<Array<ReferralCampaignWhereInput>>;
  NOT?: InputMaybe<Array<ReferralCampaignWhereInput>>;
  OR?: InputMaybe<Array<ReferralCampaignWhereInput>>;
  code?: InputMaybe<StringFilter>;
  createdAt?: InputMaybe<DateTimeNullableFilter>;
  discount_pct?: InputMaybe<FloatNullableFilter>;
  endDate?: InputMaybe<DateTimeNullableFilter>;
  id?: InputMaybe<IdFilter>;
  note?: InputMaybe<StringFilter>;
  partner?: InputMaybe<ReferralPartnerWhereInput>;
  redemptions?: InputMaybe<ReferralRedemptionManyRelationFilter>;
  startDate?: InputMaybe<DateTimeNullableFilter>;
};

export type ReferralCampaignWhereUniqueInput = {
  code?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['ID']['input']>;
};

export type ReferralPartner = {
  __typename?: 'ReferralPartner';
  campaigns?: Maybe<Array<ReferralCampaign>>;
  campaignsCount?: Maybe<Scalars['Int']['output']>;
  commission_pct?: Maybe<Scalars['Float']['output']>;
  contactEmail?: Maybe<Scalars['String']['output']>;
  createdAt?: Maybe<Scalars['DateTime']['output']>;
  id: Scalars['ID']['output'];
  name?: Maybe<Scalars['String']['output']>;
  ownerUser?: Maybe<User>;
  type?: Maybe<Scalars['String']['output']>;
};


export type ReferralPartnerCampaignsArgs = {
  cursor?: InputMaybe<ReferralCampaignWhereUniqueInput>;
  orderBy?: Array<ReferralCampaignOrderByInput>;
  skip?: Scalars['Int']['input'];
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: ReferralCampaignWhereInput;
};


export type ReferralPartnerCampaignsCountArgs = {
  where?: ReferralCampaignWhereInput;
};

export type ReferralPartnerCreateInput = {
  campaigns?: InputMaybe<ReferralCampaignRelateToManyForCreateInput>;
  commission_pct?: InputMaybe<Scalars['Float']['input']>;
  contactEmail?: InputMaybe<Scalars['String']['input']>;
  createdAt?: InputMaybe<Scalars['DateTime']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
  ownerUser?: InputMaybe<UserRelateToOneForCreateInput>;
  type?: InputMaybe<Scalars['String']['input']>;
};

export type ReferralPartnerOrderByInput = {
  commission_pct?: InputMaybe<OrderDirection>;
  contactEmail?: InputMaybe<OrderDirection>;
  createdAt?: InputMaybe<OrderDirection>;
  id?: InputMaybe<OrderDirection>;
  name?: InputMaybe<OrderDirection>;
  type?: InputMaybe<OrderDirection>;
};

export type ReferralPartnerRelateToOneForCreateInput = {
  connect?: InputMaybe<ReferralPartnerWhereUniqueInput>;
  create?: InputMaybe<ReferralPartnerCreateInput>;
};

export type ReferralPartnerRelateToOneForUpdateInput = {
  connect?: InputMaybe<ReferralPartnerWhereUniqueInput>;
  create?: InputMaybe<ReferralPartnerCreateInput>;
  disconnect?: InputMaybe<Scalars['Boolean']['input']>;
};

export type ReferralPartnerUpdateArgs = {
  data: ReferralPartnerUpdateInput;
  where: ReferralPartnerWhereUniqueInput;
};

export type ReferralPartnerUpdateInput = {
  campaigns?: InputMaybe<ReferralCampaignRelateToManyForUpdateInput>;
  commission_pct?: InputMaybe<Scalars['Float']['input']>;
  contactEmail?: InputMaybe<Scalars['String']['input']>;
  createdAt?: InputMaybe<Scalars['DateTime']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
  ownerUser?: InputMaybe<UserRelateToOneForUpdateInput>;
  type?: InputMaybe<Scalars['String']['input']>;
};

export type ReferralPartnerWhereInput = {
  AND?: InputMaybe<Array<ReferralPartnerWhereInput>>;
  NOT?: InputMaybe<Array<ReferralPartnerWhereInput>>;
  OR?: InputMaybe<Array<ReferralPartnerWhereInput>>;
  campaigns?: InputMaybe<ReferralCampaignManyRelationFilter>;
  commission_pct?: InputMaybe<FloatNullableFilter>;
  contactEmail?: InputMaybe<StringFilter>;
  createdAt?: InputMaybe<DateTimeNullableFilter>;
  id?: InputMaybe<IdFilter>;
  name?: InputMaybe<StringFilter>;
  ownerUser?: InputMaybe<UserWhereInput>;
  type?: InputMaybe<StringFilter>;
};

export type ReferralPartnerWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']['input']>;
};

export type ReferralRedemption = {
  __typename?: 'ReferralRedemption';
  campaign?: Maybe<ReferralCampaign>;
  discountValue?: Maybe<Scalars['Float']['output']>;
  farmerUser?: Maybe<User>;
  id: Scalars['ID']['output'];
  signupDate?: Maybe<Scalars['DateTime']['output']>;
  subscription?: Maybe<Subscription>;
};

export type ReferralRedemptionCreateInput = {
  campaign?: InputMaybe<ReferralCampaignRelateToOneForCreateInput>;
  discountValue?: InputMaybe<Scalars['Float']['input']>;
  farmerUser?: InputMaybe<UserRelateToOneForCreateInput>;
  signupDate?: InputMaybe<Scalars['DateTime']['input']>;
  subscription?: InputMaybe<SubscriptionRelateToOneForCreateInput>;
};

export type ReferralRedemptionManyRelationFilter = {
  every?: InputMaybe<ReferralRedemptionWhereInput>;
  none?: InputMaybe<ReferralRedemptionWhereInput>;
  some?: InputMaybe<ReferralRedemptionWhereInput>;
};

export type ReferralRedemptionOrderByInput = {
  discountValue?: InputMaybe<OrderDirection>;
  id?: InputMaybe<OrderDirection>;
  signupDate?: InputMaybe<OrderDirection>;
};

export type ReferralRedemptionRelateToManyForCreateInput = {
  connect?: InputMaybe<Array<ReferralRedemptionWhereUniqueInput>>;
  create?: InputMaybe<Array<ReferralRedemptionCreateInput>>;
};

export type ReferralRedemptionRelateToManyForUpdateInput = {
  connect?: InputMaybe<Array<ReferralRedemptionWhereUniqueInput>>;
  create?: InputMaybe<Array<ReferralRedemptionCreateInput>>;
  disconnect?: InputMaybe<Array<ReferralRedemptionWhereUniqueInput>>;
  set?: InputMaybe<Array<ReferralRedemptionWhereUniqueInput>>;
};

export type ReferralRedemptionUpdateArgs = {
  data: ReferralRedemptionUpdateInput;
  where: ReferralRedemptionWhereUniqueInput;
};

export type ReferralRedemptionUpdateInput = {
  campaign?: InputMaybe<ReferralCampaignRelateToOneForUpdateInput>;
  discountValue?: InputMaybe<Scalars['Float']['input']>;
  farmerUser?: InputMaybe<UserRelateToOneForUpdateInput>;
  signupDate?: InputMaybe<Scalars['DateTime']['input']>;
  subscription?: InputMaybe<SubscriptionRelateToOneForUpdateInput>;
};

export type ReferralRedemptionWhereInput = {
  AND?: InputMaybe<Array<ReferralRedemptionWhereInput>>;
  NOT?: InputMaybe<Array<ReferralRedemptionWhereInput>>;
  OR?: InputMaybe<Array<ReferralRedemptionWhereInput>>;
  campaign?: InputMaybe<ReferralCampaignWhereInput>;
  discountValue?: InputMaybe<FloatNullableFilter>;
  farmerUser?: InputMaybe<UserWhereInput>;
  id?: InputMaybe<IdFilter>;
  signupDate?: InputMaybe<DateTimeNullableFilter>;
  subscription?: InputMaybe<SubscriptionWhereInput>;
};

export type ReferralRedemptionWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']['input']>;
};

export type RegulatoryRule = {
  __typename?: 'RegulatoryRule';
  alerts?: Maybe<Array<Alert>>;
  alertsCount?: Maybe<Scalars['Int']['output']>;
  code?: Maybe<Scalars['String']['output']>;
  description?: Maybe<Scalars['String']['output']>;
  effective_from?: Maybe<Scalars['DateTime']['output']>;
  effective_to?: Maybe<Scalars['DateTime']['output']>;
  id: Scalars['ID']['output'];
  jurisdiction?: Maybe<Scalars['String']['output']>;
};


export type RegulatoryRuleAlertsArgs = {
  cursor?: InputMaybe<AlertWhereUniqueInput>;
  orderBy?: Array<AlertOrderByInput>;
  skip?: Scalars['Int']['input'];
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: AlertWhereInput;
};


export type RegulatoryRuleAlertsCountArgs = {
  where?: AlertWhereInput;
};

export type RegulatoryRuleCreateInput = {
  alerts?: InputMaybe<AlertRelateToManyForCreateInput>;
  code?: InputMaybe<Scalars['String']['input']>;
  description?: InputMaybe<Scalars['String']['input']>;
  effective_from?: InputMaybe<Scalars['DateTime']['input']>;
  effective_to?: InputMaybe<Scalars['DateTime']['input']>;
  jurisdiction?: InputMaybe<Scalars['String']['input']>;
};

export type RegulatoryRuleOrderByInput = {
  code?: InputMaybe<OrderDirection>;
  description?: InputMaybe<OrderDirection>;
  effective_from?: InputMaybe<OrderDirection>;
  effective_to?: InputMaybe<OrderDirection>;
  id?: InputMaybe<OrderDirection>;
  jurisdiction?: InputMaybe<OrderDirection>;
};

export type RegulatoryRuleRelateToOneForCreateInput = {
  connect?: InputMaybe<RegulatoryRuleWhereUniqueInput>;
  create?: InputMaybe<RegulatoryRuleCreateInput>;
};

export type RegulatoryRuleRelateToOneForUpdateInput = {
  connect?: InputMaybe<RegulatoryRuleWhereUniqueInput>;
  create?: InputMaybe<RegulatoryRuleCreateInput>;
  disconnect?: InputMaybe<Scalars['Boolean']['input']>;
};

export type RegulatoryRuleUpdateArgs = {
  data: RegulatoryRuleUpdateInput;
  where: RegulatoryRuleWhereUniqueInput;
};

export type RegulatoryRuleUpdateInput = {
  alerts?: InputMaybe<AlertRelateToManyForUpdateInput>;
  code?: InputMaybe<Scalars['String']['input']>;
  description?: InputMaybe<Scalars['String']['input']>;
  effective_from?: InputMaybe<Scalars['DateTime']['input']>;
  effective_to?: InputMaybe<Scalars['DateTime']['input']>;
  jurisdiction?: InputMaybe<Scalars['String']['input']>;
};

export type RegulatoryRuleWhereInput = {
  AND?: InputMaybe<Array<RegulatoryRuleWhereInput>>;
  NOT?: InputMaybe<Array<RegulatoryRuleWhereInput>>;
  OR?: InputMaybe<Array<RegulatoryRuleWhereInput>>;
  alerts?: InputMaybe<AlertManyRelationFilter>;
  code?: InputMaybe<StringFilter>;
  description?: InputMaybe<StringFilter>;
  effective_from?: InputMaybe<DateTimeNullableFilter>;
  effective_to?: InputMaybe<DateTimeNullableFilter>;
  id?: InputMaybe<IdFilter>;
  jurisdiction?: InputMaybe<StringFilter>;
};

export type RegulatoryRuleWhereUniqueInput = {
  code?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['ID']['input']>;
};

export type SoilMeasurement = {
  __typename?: 'SoilMeasurement';
  depthOneLevelSOC?: Maybe<Scalars['Float']['output']>;
  depthThreeLevelSOC?: Maybe<Scalars['Float']['output']>;
  depthTwoLevelSOC?: Maybe<Scalars['Float']['output']>;
  field?: Maybe<Field>;
  id: Scalars['ID']['output'];
  measurementDate?: Maybe<Scalars['DateTime']['output']>;
  moisture?: Maybe<Scalars['Float']['output']>;
  nitrogen?: Maybe<Scalars['Float']['output']>;
  organicMatter?: Maybe<Scalars['Float']['output']>;
  ph?: Maybe<Scalars['Float']['output']>;
  sensorId?: Maybe<Scalars['String']['output']>;
  temperature?: Maybe<Scalars['Float']['output']>;
};

export type SoilMeasurementCreateInput = {
  depthOneLevelSOC?: InputMaybe<Scalars['Float']['input']>;
  depthThreeLevelSOC?: InputMaybe<Scalars['Float']['input']>;
  depthTwoLevelSOC?: InputMaybe<Scalars['Float']['input']>;
  field?: InputMaybe<FieldRelateToOneForCreateInput>;
  measurementDate?: InputMaybe<Scalars['DateTime']['input']>;
  moisture?: InputMaybe<Scalars['Float']['input']>;
  nitrogen?: InputMaybe<Scalars['Float']['input']>;
  organicMatter?: InputMaybe<Scalars['Float']['input']>;
  ph?: InputMaybe<Scalars['Float']['input']>;
  sensorId?: InputMaybe<Scalars['String']['input']>;
  temperature?: InputMaybe<Scalars['Float']['input']>;
};

export type SoilMeasurementManyRelationFilter = {
  every?: InputMaybe<SoilMeasurementWhereInput>;
  none?: InputMaybe<SoilMeasurementWhereInput>;
  some?: InputMaybe<SoilMeasurementWhereInput>;
};

export type SoilMeasurementOrderByInput = {
  depthOneLevelSOC?: InputMaybe<OrderDirection>;
  depthThreeLevelSOC?: InputMaybe<OrderDirection>;
  depthTwoLevelSOC?: InputMaybe<OrderDirection>;
  id?: InputMaybe<OrderDirection>;
  measurementDate?: InputMaybe<OrderDirection>;
  moisture?: InputMaybe<OrderDirection>;
  nitrogen?: InputMaybe<OrderDirection>;
  organicMatter?: InputMaybe<OrderDirection>;
  ph?: InputMaybe<OrderDirection>;
  sensorId?: InputMaybe<OrderDirection>;
  temperature?: InputMaybe<OrderDirection>;
};

export type SoilMeasurementRelateToManyForCreateInput = {
  connect?: InputMaybe<Array<SoilMeasurementWhereUniqueInput>>;
  create?: InputMaybe<Array<SoilMeasurementCreateInput>>;
};

export type SoilMeasurementRelateToManyForUpdateInput = {
  connect?: InputMaybe<Array<SoilMeasurementWhereUniqueInput>>;
  create?: InputMaybe<Array<SoilMeasurementCreateInput>>;
  disconnect?: InputMaybe<Array<SoilMeasurementWhereUniqueInput>>;
  set?: InputMaybe<Array<SoilMeasurementWhereUniqueInput>>;
};

export type SoilMeasurementUpdateArgs = {
  data: SoilMeasurementUpdateInput;
  where: SoilMeasurementWhereUniqueInput;
};

export type SoilMeasurementUpdateInput = {
  depthOneLevelSOC?: InputMaybe<Scalars['Float']['input']>;
  depthThreeLevelSOC?: InputMaybe<Scalars['Float']['input']>;
  depthTwoLevelSOC?: InputMaybe<Scalars['Float']['input']>;
  field?: InputMaybe<FieldRelateToOneForUpdateInput>;
  measurementDate?: InputMaybe<Scalars['DateTime']['input']>;
  moisture?: InputMaybe<Scalars['Float']['input']>;
  nitrogen?: InputMaybe<Scalars['Float']['input']>;
  organicMatter?: InputMaybe<Scalars['Float']['input']>;
  ph?: InputMaybe<Scalars['Float']['input']>;
  sensorId?: InputMaybe<Scalars['String']['input']>;
  temperature?: InputMaybe<Scalars['Float']['input']>;
};

export type SoilMeasurementWhereInput = {
  AND?: InputMaybe<Array<SoilMeasurementWhereInput>>;
  NOT?: InputMaybe<Array<SoilMeasurementWhereInput>>;
  OR?: InputMaybe<Array<SoilMeasurementWhereInput>>;
  depthOneLevelSOC?: InputMaybe<FloatNullableFilter>;
  depthThreeLevelSOC?: InputMaybe<FloatNullableFilter>;
  depthTwoLevelSOC?: InputMaybe<FloatNullableFilter>;
  field?: InputMaybe<FieldWhereInput>;
  id?: InputMaybe<IdFilter>;
  measurementDate?: InputMaybe<DateTimeNullableFilter>;
  moisture?: InputMaybe<FloatNullableFilter>;
  nitrogen?: InputMaybe<FloatNullableFilter>;
  organicMatter?: InputMaybe<FloatNullableFilter>;
  ph?: InputMaybe<FloatNullableFilter>;
  sensorId?: InputMaybe<StringFilter>;
  temperature?: InputMaybe<FloatNullableFilter>;
};

export type SoilMeasurementWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']['input']>;
};

export type SoilMoistureObservation = {
  __typename?: 'SoilMoistureObservation';
  date?: Maybe<Scalars['DateTime']['output']>;
  field?: Maybe<Field>;
  id: Scalars['ID']['output'];
  imageUrl?: Maybe<Scalars['String']['output']>;
  meanMoisture?: Maybe<Scalars['Float']['output']>;
  recordedAt?: Maybe<Scalars['DateTime']['output']>;
};

export type SoilMoistureObservationCreateInput = {
  date?: InputMaybe<Scalars['DateTime']['input']>;
  field?: InputMaybe<FieldRelateToOneForCreateInput>;
  imageUrl?: InputMaybe<Scalars['String']['input']>;
  meanMoisture?: InputMaybe<Scalars['Float']['input']>;
  recordedAt?: InputMaybe<Scalars['DateTime']['input']>;
};

export type SoilMoistureObservationManyRelationFilter = {
  every?: InputMaybe<SoilMoistureObservationWhereInput>;
  none?: InputMaybe<SoilMoistureObservationWhereInput>;
  some?: InputMaybe<SoilMoistureObservationWhereInput>;
};

export type SoilMoistureObservationOrderByInput = {
  date?: InputMaybe<OrderDirection>;
  id?: InputMaybe<OrderDirection>;
  imageUrl?: InputMaybe<OrderDirection>;
  meanMoisture?: InputMaybe<OrderDirection>;
  recordedAt?: InputMaybe<OrderDirection>;
};

export type SoilMoistureObservationRelateToManyForCreateInput = {
  connect?: InputMaybe<Array<SoilMoistureObservationWhereUniqueInput>>;
  create?: InputMaybe<Array<SoilMoistureObservationCreateInput>>;
};

export type SoilMoistureObservationRelateToManyForUpdateInput = {
  connect?: InputMaybe<Array<SoilMoistureObservationWhereUniqueInput>>;
  create?: InputMaybe<Array<SoilMoistureObservationCreateInput>>;
  disconnect?: InputMaybe<Array<SoilMoistureObservationWhereUniqueInput>>;
  set?: InputMaybe<Array<SoilMoistureObservationWhereUniqueInput>>;
};

export type SoilMoistureObservationUpdateArgs = {
  data: SoilMoistureObservationUpdateInput;
  where: SoilMoistureObservationWhereUniqueInput;
};

export type SoilMoistureObservationUpdateInput = {
  date?: InputMaybe<Scalars['DateTime']['input']>;
  field?: InputMaybe<FieldRelateToOneForUpdateInput>;
  imageUrl?: InputMaybe<Scalars['String']['input']>;
  meanMoisture?: InputMaybe<Scalars['Float']['input']>;
  recordedAt?: InputMaybe<Scalars['DateTime']['input']>;
};

export type SoilMoistureObservationWhereInput = {
  AND?: InputMaybe<Array<SoilMoistureObservationWhereInput>>;
  NOT?: InputMaybe<Array<SoilMoistureObservationWhereInput>>;
  OR?: InputMaybe<Array<SoilMoistureObservationWhereInput>>;
  date?: InputMaybe<DateTimeNullableFilter>;
  field?: InputMaybe<FieldWhereInput>;
  id?: InputMaybe<IdFilter>;
  imageUrl?: InputMaybe<StringFilter>;
  meanMoisture?: InputMaybe<FloatNullableFilter>;
  recordedAt?: InputMaybe<DateTimeNullableFilter>;
};

export type SoilMoistureObservationWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']['input']>;
};

export type SoilOrganicCarbonStock = {
  __typename?: 'SoilOrganicCarbonStock';
  field?: Maybe<Field>;
  id: Scalars['ID']['output'];
  imageUrl?: Maybe<Scalars['String']['output']>;
  meanSOC?: Maybe<Scalars['Float']['output']>;
  recordedAt?: Maybe<Scalars['DateTime']['output']>;
  totalSOC?: Maybe<Scalars['Float']['output']>;
  year?: Maybe<Scalars['Int']['output']>;
};

export type SoilOrganicCarbonStockCreateInput = {
  field?: InputMaybe<FieldRelateToOneForCreateInput>;
  imageUrl?: InputMaybe<Scalars['String']['input']>;
  meanSOC?: InputMaybe<Scalars['Float']['input']>;
  recordedAt?: InputMaybe<Scalars['DateTime']['input']>;
  totalSOC?: InputMaybe<Scalars['Float']['input']>;
  year?: InputMaybe<Scalars['Int']['input']>;
};

export type SoilOrganicCarbonStockManyRelationFilter = {
  every?: InputMaybe<SoilOrganicCarbonStockWhereInput>;
  none?: InputMaybe<SoilOrganicCarbonStockWhereInput>;
  some?: InputMaybe<SoilOrganicCarbonStockWhereInput>;
};

export type SoilOrganicCarbonStockOrderByInput = {
  id?: InputMaybe<OrderDirection>;
  imageUrl?: InputMaybe<OrderDirection>;
  meanSOC?: InputMaybe<OrderDirection>;
  recordedAt?: InputMaybe<OrderDirection>;
  totalSOC?: InputMaybe<OrderDirection>;
  year?: InputMaybe<OrderDirection>;
};

export type SoilOrganicCarbonStockRelateToManyForCreateInput = {
  connect?: InputMaybe<Array<SoilOrganicCarbonStockWhereUniqueInput>>;
  create?: InputMaybe<Array<SoilOrganicCarbonStockCreateInput>>;
};

export type SoilOrganicCarbonStockRelateToManyForUpdateInput = {
  connect?: InputMaybe<Array<SoilOrganicCarbonStockWhereUniqueInput>>;
  create?: InputMaybe<Array<SoilOrganicCarbonStockCreateInput>>;
  disconnect?: InputMaybe<Array<SoilOrganicCarbonStockWhereUniqueInput>>;
  set?: InputMaybe<Array<SoilOrganicCarbonStockWhereUniqueInput>>;
};

export type SoilOrganicCarbonStockUpdateArgs = {
  data: SoilOrganicCarbonStockUpdateInput;
  where: SoilOrganicCarbonStockWhereUniqueInput;
};

export type SoilOrganicCarbonStockUpdateInput = {
  field?: InputMaybe<FieldRelateToOneForUpdateInput>;
  imageUrl?: InputMaybe<Scalars['String']['input']>;
  meanSOC?: InputMaybe<Scalars['Float']['input']>;
  recordedAt?: InputMaybe<Scalars['DateTime']['input']>;
  totalSOC?: InputMaybe<Scalars['Float']['input']>;
  year?: InputMaybe<Scalars['Int']['input']>;
};

export type SoilOrganicCarbonStockWhereInput = {
  AND?: InputMaybe<Array<SoilOrganicCarbonStockWhereInput>>;
  NOT?: InputMaybe<Array<SoilOrganicCarbonStockWhereInput>>;
  OR?: InputMaybe<Array<SoilOrganicCarbonStockWhereInput>>;
  field?: InputMaybe<FieldWhereInput>;
  id?: InputMaybe<IdFilter>;
  imageUrl?: InputMaybe<StringFilter>;
  meanSOC?: InputMaybe<FloatNullableFilter>;
  recordedAt?: InputMaybe<DateTimeNullableFilter>;
  totalSOC?: InputMaybe<FloatNullableFilter>;
  year?: InputMaybe<IntNullableFilter>;
};

export type SoilOrganicCarbonStockWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']['input']>;
};

export type StringFilter = {
  contains?: InputMaybe<Scalars['String']['input']>;
  endsWith?: InputMaybe<Scalars['String']['input']>;
  equals?: InputMaybe<Scalars['String']['input']>;
  gt?: InputMaybe<Scalars['String']['input']>;
  gte?: InputMaybe<Scalars['String']['input']>;
  in?: InputMaybe<Array<Scalars['String']['input']>>;
  lt?: InputMaybe<Scalars['String']['input']>;
  lte?: InputMaybe<Scalars['String']['input']>;
  mode?: InputMaybe<QueryMode>;
  not?: InputMaybe<NestedStringFilter>;
  notIn?: InputMaybe<Array<Scalars['String']['input']>>;
  startsWith?: InputMaybe<Scalars['String']['input']>;
};

export type StringNullableFilter = {
  contains?: InputMaybe<Scalars['String']['input']>;
  endsWith?: InputMaybe<Scalars['String']['input']>;
  equals?: InputMaybe<Scalars['String']['input']>;
  gt?: InputMaybe<Scalars['String']['input']>;
  gte?: InputMaybe<Scalars['String']['input']>;
  in?: InputMaybe<Array<Scalars['String']['input']>>;
  lt?: InputMaybe<Scalars['String']['input']>;
  lte?: InputMaybe<Scalars['String']['input']>;
  mode?: InputMaybe<QueryMode>;
  not?: InputMaybe<StringNullableFilter>;
  notIn?: InputMaybe<Array<Scalars['String']['input']>>;
  startsWith?: InputMaybe<Scalars['String']['input']>;
};

export type Subscription = {
  __typename?: 'Subscription';
  currentPeriodEnd?: Maybe<Scalars['DateTime']['output']>;
  endDate?: Maybe<Scalars['DateTime']['output']>;
  id: Scalars['ID']['output'];
  organisation?: Maybe<Organisation>;
  plan?: Maybe<Plan>;
  price?: Maybe<PlanPrice>;
  referralRedemptions?: Maybe<Array<ReferralRedemption>>;
  referralRedemptionsCount?: Maybe<Scalars['Int']['output']>;
  seats?: Maybe<Scalars['Int']['output']>;
  startDate?: Maybe<Scalars['DateTime']['output']>;
  status?: Maybe<Scalars['String']['output']>;
  stripeSubscriptionId?: Maybe<Scalars['String']['output']>;
};


export type SubscriptionReferralRedemptionsArgs = {
  cursor?: InputMaybe<ReferralRedemptionWhereUniqueInput>;
  orderBy?: Array<ReferralRedemptionOrderByInput>;
  skip?: Scalars['Int']['input'];
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: ReferralRedemptionWhereInput;
};


export type SubscriptionReferralRedemptionsCountArgs = {
  where?: ReferralRedemptionWhereInput;
};

export type SubscriptionCreateInput = {
  currentPeriodEnd?: InputMaybe<Scalars['DateTime']['input']>;
  endDate?: InputMaybe<Scalars['DateTime']['input']>;
  organisation?: InputMaybe<OrganisationRelateToOneForCreateInput>;
  plan?: InputMaybe<PlanRelateToOneForCreateInput>;
  price?: InputMaybe<PlanPriceRelateToOneForCreateInput>;
  referralRedemptions?: InputMaybe<ReferralRedemptionRelateToManyForCreateInput>;
  seats?: InputMaybe<Scalars['Int']['input']>;
  startDate?: InputMaybe<Scalars['DateTime']['input']>;
  status?: InputMaybe<Scalars['String']['input']>;
  stripeSubscriptionId?: InputMaybe<Scalars['String']['input']>;
};

export type SubscriptionManyRelationFilter = {
  every?: InputMaybe<SubscriptionWhereInput>;
  none?: InputMaybe<SubscriptionWhereInput>;
  some?: InputMaybe<SubscriptionWhereInput>;
};

export type SubscriptionOrderByInput = {
  currentPeriodEnd?: InputMaybe<OrderDirection>;
  endDate?: InputMaybe<OrderDirection>;
  id?: InputMaybe<OrderDirection>;
  seats?: InputMaybe<OrderDirection>;
  startDate?: InputMaybe<OrderDirection>;
  status?: InputMaybe<OrderDirection>;
  stripeSubscriptionId?: InputMaybe<OrderDirection>;
};

export type SubscriptionRelateToManyForCreateInput = {
  connect?: InputMaybe<Array<SubscriptionWhereUniqueInput>>;
  create?: InputMaybe<Array<SubscriptionCreateInput>>;
};

export type SubscriptionRelateToManyForUpdateInput = {
  connect?: InputMaybe<Array<SubscriptionWhereUniqueInput>>;
  create?: InputMaybe<Array<SubscriptionCreateInput>>;
  disconnect?: InputMaybe<Array<SubscriptionWhereUniqueInput>>;
  set?: InputMaybe<Array<SubscriptionWhereUniqueInput>>;
};

export type SubscriptionRelateToOneForCreateInput = {
  connect?: InputMaybe<SubscriptionWhereUniqueInput>;
  create?: InputMaybe<SubscriptionCreateInput>;
};

export type SubscriptionRelateToOneForUpdateInput = {
  connect?: InputMaybe<SubscriptionWhereUniqueInput>;
  create?: InputMaybe<SubscriptionCreateInput>;
  disconnect?: InputMaybe<Scalars['Boolean']['input']>;
};

export type SubscriptionUpdateArgs = {
  data: SubscriptionUpdateInput;
  where: SubscriptionWhereUniqueInput;
};

export type SubscriptionUpdateInput = {
  currentPeriodEnd?: InputMaybe<Scalars['DateTime']['input']>;
  endDate?: InputMaybe<Scalars['DateTime']['input']>;
  organisation?: InputMaybe<OrganisationRelateToOneForUpdateInput>;
  plan?: InputMaybe<PlanRelateToOneForUpdateInput>;
  price?: InputMaybe<PlanPriceRelateToOneForUpdateInput>;
  referralRedemptions?: InputMaybe<ReferralRedemptionRelateToManyForUpdateInput>;
  seats?: InputMaybe<Scalars['Int']['input']>;
  startDate?: InputMaybe<Scalars['DateTime']['input']>;
  status?: InputMaybe<Scalars['String']['input']>;
  stripeSubscriptionId?: InputMaybe<Scalars['String']['input']>;
};

export type SubscriptionWhereInput = {
  AND?: InputMaybe<Array<SubscriptionWhereInput>>;
  NOT?: InputMaybe<Array<SubscriptionWhereInput>>;
  OR?: InputMaybe<Array<SubscriptionWhereInput>>;
  currentPeriodEnd?: InputMaybe<DateTimeNullableFilter>;
  endDate?: InputMaybe<DateTimeNullableFilter>;
  id?: InputMaybe<IdFilter>;
  organisation?: InputMaybe<OrganisationWhereInput>;
  plan?: InputMaybe<PlanWhereInput>;
  price?: InputMaybe<PlanPriceWhereInput>;
  referralRedemptions?: InputMaybe<ReferralRedemptionManyRelationFilter>;
  seats?: InputMaybe<IntNullableFilter>;
  startDate?: InputMaybe<DateTimeNullableFilter>;
  status?: InputMaybe<StringNullableFilter>;
  stripeSubscriptionId?: InputMaybe<StringFilter>;
};

export type SubscriptionWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']['input']>;
  stripeSubscriptionId?: InputMaybe<Scalars['String']['input']>;
};

export type SustainablePractice = {
  __typename?: 'SustainablePractice';
  carbonOffsetFactors?: Maybe<Array<CarbonOffsetFactor>>;
  carbonOffsetFactorsCount?: Maybe<Scalars['Int']['output']>;
  category?: Maybe<SustainablePracticeCategory>;
  createdAt?: Maybe<Scalars['DateTime']['output']>;
  description?: Maybe<Scalars['String']['output']>;
  events?: Maybe<Array<SustainablePracticeEvent>>;
  eventsCount?: Maybe<Scalars['Int']['output']>;
  id: Scalars['ID']['output'];
  name?: Maybe<Scalars['String']['output']>;
};


export type SustainablePracticeCarbonOffsetFactorsArgs = {
  cursor?: InputMaybe<CarbonOffsetFactorWhereUniqueInput>;
  orderBy?: Array<CarbonOffsetFactorOrderByInput>;
  skip?: Scalars['Int']['input'];
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: CarbonOffsetFactorWhereInput;
};


export type SustainablePracticeCarbonOffsetFactorsCountArgs = {
  where?: CarbonOffsetFactorWhereInput;
};


export type SustainablePracticeEventsArgs = {
  cursor?: InputMaybe<SustainablePracticeEventWhereUniqueInput>;
  orderBy?: Array<SustainablePracticeEventOrderByInput>;
  skip?: Scalars['Int']['input'];
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: SustainablePracticeEventWhereInput;
};


export type SustainablePracticeEventsCountArgs = {
  where?: SustainablePracticeEventWhereInput;
};

export type SustainablePracticeCategory = {
  __typename?: 'SustainablePracticeCategory';
  description?: Maybe<Scalars['String']['output']>;
  id: Scalars['ID']['output'];
  name?: Maybe<Scalars['String']['output']>;
  practices?: Maybe<Array<SustainablePractice>>;
  practicesCount?: Maybe<Scalars['Int']['output']>;
};


export type SustainablePracticeCategoryPracticesArgs = {
  cursor?: InputMaybe<SustainablePracticeWhereUniqueInput>;
  orderBy?: Array<SustainablePracticeOrderByInput>;
  skip?: Scalars['Int']['input'];
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: SustainablePracticeWhereInput;
};


export type SustainablePracticeCategoryPracticesCountArgs = {
  where?: SustainablePracticeWhereInput;
};

export type SustainablePracticeCategoryCreateInput = {
  description?: InputMaybe<Scalars['String']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
  practices?: InputMaybe<SustainablePracticeRelateToManyForCreateInput>;
};

export type SustainablePracticeCategoryOrderByInput = {
  description?: InputMaybe<OrderDirection>;
  id?: InputMaybe<OrderDirection>;
  name?: InputMaybe<OrderDirection>;
};

export type SustainablePracticeCategoryRelateToOneForCreateInput = {
  connect?: InputMaybe<SustainablePracticeCategoryWhereUniqueInput>;
  create?: InputMaybe<SustainablePracticeCategoryCreateInput>;
};

export type SustainablePracticeCategoryRelateToOneForUpdateInput = {
  connect?: InputMaybe<SustainablePracticeCategoryWhereUniqueInput>;
  create?: InputMaybe<SustainablePracticeCategoryCreateInput>;
  disconnect?: InputMaybe<Scalars['Boolean']['input']>;
};

export type SustainablePracticeCategoryUpdateArgs = {
  data: SustainablePracticeCategoryUpdateInput;
  where: SustainablePracticeCategoryWhereUniqueInput;
};

export type SustainablePracticeCategoryUpdateInput = {
  description?: InputMaybe<Scalars['String']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
  practices?: InputMaybe<SustainablePracticeRelateToManyForUpdateInput>;
};

export type SustainablePracticeCategoryWhereInput = {
  AND?: InputMaybe<Array<SustainablePracticeCategoryWhereInput>>;
  NOT?: InputMaybe<Array<SustainablePracticeCategoryWhereInput>>;
  OR?: InputMaybe<Array<SustainablePracticeCategoryWhereInput>>;
  description?: InputMaybe<StringFilter>;
  id?: InputMaybe<IdFilter>;
  name?: InputMaybe<StringFilter>;
  practices?: InputMaybe<SustainablePracticeManyRelationFilter>;
};

export type SustainablePracticeCategoryWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']['input']>;
};

export type SustainablePracticeCreateInput = {
  carbonOffsetFactors?: InputMaybe<CarbonOffsetFactorRelateToManyForCreateInput>;
  category?: InputMaybe<SustainablePracticeCategoryRelateToOneForCreateInput>;
  createdAt?: InputMaybe<Scalars['DateTime']['input']>;
  description?: InputMaybe<Scalars['String']['input']>;
  events?: InputMaybe<SustainablePracticeEventRelateToManyForCreateInput>;
  name?: InputMaybe<Scalars['String']['input']>;
};

export type SustainablePracticeEvent = {
  __typename?: 'SustainablePracticeEvent';
  appliedDate?: Maybe<Scalars['DateTime']['output']>;
  createdAt?: Maybe<Scalars['DateTime']['output']>;
  field?: Maybe<Field>;
  id: Scalars['ID']['output'];
  parameters?: Maybe<Scalars['JSON']['output']>;
  practice?: Maybe<SustainablePractice>;
  targetImpact?: Maybe<Scalars['Float']['output']>;
};

export type SustainablePracticeEventCreateInput = {
  appliedDate?: InputMaybe<Scalars['DateTime']['input']>;
  createdAt?: InputMaybe<Scalars['DateTime']['input']>;
  field?: InputMaybe<FieldRelateToOneForCreateInput>;
  parameters?: InputMaybe<Scalars['JSON']['input']>;
  practice?: InputMaybe<SustainablePracticeRelateToOneForCreateInput>;
  targetImpact?: InputMaybe<Scalars['Float']['input']>;
};

export type SustainablePracticeEventManyRelationFilter = {
  every?: InputMaybe<SustainablePracticeEventWhereInput>;
  none?: InputMaybe<SustainablePracticeEventWhereInput>;
  some?: InputMaybe<SustainablePracticeEventWhereInput>;
};

export type SustainablePracticeEventOrderByInput = {
  appliedDate?: InputMaybe<OrderDirection>;
  createdAt?: InputMaybe<OrderDirection>;
  id?: InputMaybe<OrderDirection>;
  targetImpact?: InputMaybe<OrderDirection>;
};

export type SustainablePracticeEventRelateToManyForCreateInput = {
  connect?: InputMaybe<Array<SustainablePracticeEventWhereUniqueInput>>;
  create?: InputMaybe<Array<SustainablePracticeEventCreateInput>>;
};

export type SustainablePracticeEventRelateToManyForUpdateInput = {
  connect?: InputMaybe<Array<SustainablePracticeEventWhereUniqueInput>>;
  create?: InputMaybe<Array<SustainablePracticeEventCreateInput>>;
  disconnect?: InputMaybe<Array<SustainablePracticeEventWhereUniqueInput>>;
  set?: InputMaybe<Array<SustainablePracticeEventWhereUniqueInput>>;
};

export type SustainablePracticeEventUpdateArgs = {
  data: SustainablePracticeEventUpdateInput;
  where: SustainablePracticeEventWhereUniqueInput;
};

export type SustainablePracticeEventUpdateInput = {
  appliedDate?: InputMaybe<Scalars['DateTime']['input']>;
  createdAt?: InputMaybe<Scalars['DateTime']['input']>;
  field?: InputMaybe<FieldRelateToOneForUpdateInput>;
  parameters?: InputMaybe<Scalars['JSON']['input']>;
  practice?: InputMaybe<SustainablePracticeRelateToOneForUpdateInput>;
  targetImpact?: InputMaybe<Scalars['Float']['input']>;
};

export type SustainablePracticeEventWhereInput = {
  AND?: InputMaybe<Array<SustainablePracticeEventWhereInput>>;
  NOT?: InputMaybe<Array<SustainablePracticeEventWhereInput>>;
  OR?: InputMaybe<Array<SustainablePracticeEventWhereInput>>;
  appliedDate?: InputMaybe<DateTimeNullableFilter>;
  createdAt?: InputMaybe<DateTimeNullableFilter>;
  field?: InputMaybe<FieldWhereInput>;
  id?: InputMaybe<IdFilter>;
  practice?: InputMaybe<SustainablePracticeWhereInput>;
  targetImpact?: InputMaybe<FloatNullableFilter>;
};

export type SustainablePracticeEventWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']['input']>;
};

export type SustainablePracticeManyRelationFilter = {
  every?: InputMaybe<SustainablePracticeWhereInput>;
  none?: InputMaybe<SustainablePracticeWhereInput>;
  some?: InputMaybe<SustainablePracticeWhereInput>;
};

export type SustainablePracticeOrderByInput = {
  createdAt?: InputMaybe<OrderDirection>;
  description?: InputMaybe<OrderDirection>;
  id?: InputMaybe<OrderDirection>;
  name?: InputMaybe<OrderDirection>;
};

export type SustainablePracticeRelateToManyForCreateInput = {
  connect?: InputMaybe<Array<SustainablePracticeWhereUniqueInput>>;
  create?: InputMaybe<Array<SustainablePracticeCreateInput>>;
};

export type SustainablePracticeRelateToManyForUpdateInput = {
  connect?: InputMaybe<Array<SustainablePracticeWhereUniqueInput>>;
  create?: InputMaybe<Array<SustainablePracticeCreateInput>>;
  disconnect?: InputMaybe<Array<SustainablePracticeWhereUniqueInput>>;
  set?: InputMaybe<Array<SustainablePracticeWhereUniqueInput>>;
};

export type SustainablePracticeRelateToOneForCreateInput = {
  connect?: InputMaybe<SustainablePracticeWhereUniqueInput>;
  create?: InputMaybe<SustainablePracticeCreateInput>;
};

export type SustainablePracticeRelateToOneForUpdateInput = {
  connect?: InputMaybe<SustainablePracticeWhereUniqueInput>;
  create?: InputMaybe<SustainablePracticeCreateInput>;
  disconnect?: InputMaybe<Scalars['Boolean']['input']>;
};

export type SustainablePracticeUpdateArgs = {
  data: SustainablePracticeUpdateInput;
  where: SustainablePracticeWhereUniqueInput;
};

export type SustainablePracticeUpdateInput = {
  carbonOffsetFactors?: InputMaybe<CarbonOffsetFactorRelateToManyForUpdateInput>;
  category?: InputMaybe<SustainablePracticeCategoryRelateToOneForUpdateInput>;
  createdAt?: InputMaybe<Scalars['DateTime']['input']>;
  description?: InputMaybe<Scalars['String']['input']>;
  events?: InputMaybe<SustainablePracticeEventRelateToManyForUpdateInput>;
  name?: InputMaybe<Scalars['String']['input']>;
};

export type SustainablePracticeWhereInput = {
  AND?: InputMaybe<Array<SustainablePracticeWhereInput>>;
  NOT?: InputMaybe<Array<SustainablePracticeWhereInput>>;
  OR?: InputMaybe<Array<SustainablePracticeWhereInput>>;
  carbonOffsetFactors?: InputMaybe<CarbonOffsetFactorManyRelationFilter>;
  category?: InputMaybe<SustainablePracticeCategoryWhereInput>;
  createdAt?: InputMaybe<DateTimeNullableFilter>;
  description?: InputMaybe<StringFilter>;
  events?: InputMaybe<SustainablePracticeEventManyRelationFilter>;
  id?: InputMaybe<IdFilter>;
  name?: InputMaybe<StringFilter>;
};

export type SustainablePracticeWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']['input']>;
};

export type Tag = {
  __typename?: 'Tag';
  id: Scalars['ID']['output'];
  name?: Maybe<Scalars['String']['output']>;
  posts?: Maybe<Array<Post>>;
  postsCount?: Maybe<Scalars['Int']['output']>;
  slug?: Maybe<Scalars['String']['output']>;
};


export type TagPostsArgs = {
  cursor?: InputMaybe<PostWhereUniqueInput>;
  orderBy?: Array<PostOrderByInput>;
  skip?: Scalars['Int']['input'];
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: PostWhereInput;
};


export type TagPostsCountArgs = {
  where?: PostWhereInput;
};

export type TagCreateInput = {
  name?: InputMaybe<Scalars['String']['input']>;
  posts?: InputMaybe<PostRelateToManyForCreateInput>;
  slug?: InputMaybe<Scalars['String']['input']>;
};

export type TagManyRelationFilter = {
  every?: InputMaybe<TagWhereInput>;
  none?: InputMaybe<TagWhereInput>;
  some?: InputMaybe<TagWhereInput>;
};

export type TagOrderByInput = {
  id?: InputMaybe<OrderDirection>;
  name?: InputMaybe<OrderDirection>;
  slug?: InputMaybe<OrderDirection>;
};

export type TagRelateToManyForCreateInput = {
  connect?: InputMaybe<Array<TagWhereUniqueInput>>;
  create?: InputMaybe<Array<TagCreateInput>>;
};

export type TagRelateToManyForUpdateInput = {
  connect?: InputMaybe<Array<TagWhereUniqueInput>>;
  create?: InputMaybe<Array<TagCreateInput>>;
  disconnect?: InputMaybe<Array<TagWhereUniqueInput>>;
  set?: InputMaybe<Array<TagWhereUniqueInput>>;
};

export type TagUpdateArgs = {
  data: TagUpdateInput;
  where: TagWhereUniqueInput;
};

export type TagUpdateInput = {
  name?: InputMaybe<Scalars['String']['input']>;
  posts?: InputMaybe<PostRelateToManyForUpdateInput>;
  slug?: InputMaybe<Scalars['String']['input']>;
};

export type TagWhereInput = {
  AND?: InputMaybe<Array<TagWhereInput>>;
  NOT?: InputMaybe<Array<TagWhereInput>>;
  OR?: InputMaybe<Array<TagWhereInput>>;
  id?: InputMaybe<IdFilter>;
  name?: InputMaybe<StringFilter>;
  posts?: InputMaybe<PostManyRelationFilter>;
  slug?: InputMaybe<StringFilter>;
};

export type TagWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']['input']>;
  slug?: InputMaybe<Scalars['String']['input']>;
};

export type User = {
  __typename?: 'User';
  chats?: Maybe<Array<Chat>>;
  chatsCount?: Maybe<Scalars['Int']['output']>;
  createdAt?: Maybe<Scalars['DateTime']['output']>;
  email?: Maybe<Scalars['String']['output']>;
  farms?: Maybe<Array<Farm>>;
  farmsCount?: Maybe<Scalars['Int']['output']>;
  id: Scalars['ID']['output'];
  isAdmin?: Maybe<Scalars['Boolean']['output']>;
  isReferralPartner?: Maybe<Scalars['Boolean']['output']>;
  memberships?: Maybe<Array<Membership>>;
  membershipsCount?: Maybe<Scalars['Int']['output']>;
  name?: Maybe<Scalars['String']['output']>;
  organisation?: Maybe<Organisation>;
  password?: Maybe<PasswordState>;
  redemptions?: Maybe<Array<ReferralRedemption>>;
  redemptionsCount?: Maybe<Scalars['Int']['output']>;
  referralPartner?: Maybe<ReferralPartner>;
};


export type UserChatsArgs = {
  cursor?: InputMaybe<ChatWhereUniqueInput>;
  orderBy?: Array<ChatOrderByInput>;
  skip?: Scalars['Int']['input'];
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: ChatWhereInput;
};


export type UserChatsCountArgs = {
  where?: ChatWhereInput;
};


export type UserFarmsArgs = {
  cursor?: InputMaybe<FarmWhereUniqueInput>;
  orderBy?: Array<FarmOrderByInput>;
  skip?: Scalars['Int']['input'];
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: FarmWhereInput;
};


export type UserFarmsCountArgs = {
  where?: FarmWhereInput;
};


export type UserMembershipsArgs = {
  cursor?: InputMaybe<MembershipWhereUniqueInput>;
  orderBy?: Array<MembershipOrderByInput>;
  skip?: Scalars['Int']['input'];
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: MembershipWhereInput;
};


export type UserMembershipsCountArgs = {
  where?: MembershipWhereInput;
};


export type UserRedemptionsArgs = {
  cursor?: InputMaybe<ReferralRedemptionWhereUniqueInput>;
  orderBy?: Array<ReferralRedemptionOrderByInput>;
  skip?: Scalars['Int']['input'];
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: ReferralRedemptionWhereInput;
};


export type UserRedemptionsCountArgs = {
  where?: ReferralRedemptionWhereInput;
};

export type UserAuthenticationWithPasswordFailure = {
  __typename?: 'UserAuthenticationWithPasswordFailure';
  message: Scalars['String']['output'];
};

export type UserAuthenticationWithPasswordResult = UserAuthenticationWithPasswordFailure | UserAuthenticationWithPasswordSuccess;

export type UserAuthenticationWithPasswordSuccess = {
  __typename?: 'UserAuthenticationWithPasswordSuccess';
  item: User;
  sessionToken: Scalars['String']['output'];
};

export type UserCreateInput = {
  chats?: InputMaybe<ChatRelateToManyForCreateInput>;
  createdAt?: InputMaybe<Scalars['DateTime']['input']>;
  email?: InputMaybe<Scalars['String']['input']>;
  farms?: InputMaybe<FarmRelateToManyForCreateInput>;
  isAdmin?: InputMaybe<Scalars['Boolean']['input']>;
  isReferralPartner?: InputMaybe<Scalars['Boolean']['input']>;
  memberships?: InputMaybe<MembershipRelateToManyForCreateInput>;
  name?: InputMaybe<Scalars['String']['input']>;
  organisation?: InputMaybe<OrganisationRelateToOneForCreateInput>;
  password?: InputMaybe<Scalars['String']['input']>;
  redemptions?: InputMaybe<ReferralRedemptionRelateToManyForCreateInput>;
  referralPartner?: InputMaybe<ReferralPartnerRelateToOneForCreateInput>;
};

export type UserManyRelationFilter = {
  every?: InputMaybe<UserWhereInput>;
  none?: InputMaybe<UserWhereInput>;
  some?: InputMaybe<UserWhereInput>;
};

export type UserOrderByInput = {
  createdAt?: InputMaybe<OrderDirection>;
  email?: InputMaybe<OrderDirection>;
  id?: InputMaybe<OrderDirection>;
  isAdmin?: InputMaybe<OrderDirection>;
  isReferralPartner?: InputMaybe<OrderDirection>;
  name?: InputMaybe<OrderDirection>;
};

export type UserRelateToManyForCreateInput = {
  connect?: InputMaybe<Array<UserWhereUniqueInput>>;
  create?: InputMaybe<Array<UserCreateInput>>;
};

export type UserRelateToManyForUpdateInput = {
  connect?: InputMaybe<Array<UserWhereUniqueInput>>;
  create?: InputMaybe<Array<UserCreateInput>>;
  disconnect?: InputMaybe<Array<UserWhereUniqueInput>>;
  set?: InputMaybe<Array<UserWhereUniqueInput>>;
};

export type UserRelateToOneForCreateInput = {
  connect?: InputMaybe<UserWhereUniqueInput>;
  create?: InputMaybe<UserCreateInput>;
};

export type UserRelateToOneForUpdateInput = {
  connect?: InputMaybe<UserWhereUniqueInput>;
  create?: InputMaybe<UserCreateInput>;
  disconnect?: InputMaybe<Scalars['Boolean']['input']>;
};

export type UserUpdateArgs = {
  data: UserUpdateInput;
  where: UserWhereUniqueInput;
};

export type UserUpdateInput = {
  chats?: InputMaybe<ChatRelateToManyForUpdateInput>;
  createdAt?: InputMaybe<Scalars['DateTime']['input']>;
  email?: InputMaybe<Scalars['String']['input']>;
  farms?: InputMaybe<FarmRelateToManyForUpdateInput>;
  isAdmin?: InputMaybe<Scalars['Boolean']['input']>;
  isReferralPartner?: InputMaybe<Scalars['Boolean']['input']>;
  memberships?: InputMaybe<MembershipRelateToManyForUpdateInput>;
  name?: InputMaybe<Scalars['String']['input']>;
  organisation?: InputMaybe<OrganisationRelateToOneForUpdateInput>;
  password?: InputMaybe<Scalars['String']['input']>;
  redemptions?: InputMaybe<ReferralRedemptionRelateToManyForUpdateInput>;
  referralPartner?: InputMaybe<ReferralPartnerRelateToOneForUpdateInput>;
};

export type UserWhereInput = {
  AND?: InputMaybe<Array<UserWhereInput>>;
  NOT?: InputMaybe<Array<UserWhereInput>>;
  OR?: InputMaybe<Array<UserWhereInput>>;
  chats?: InputMaybe<ChatManyRelationFilter>;
  createdAt?: InputMaybe<DateTimeNullableFilter>;
  email?: InputMaybe<StringFilter>;
  farms?: InputMaybe<FarmManyRelationFilter>;
  id?: InputMaybe<IdFilter>;
  isAdmin?: InputMaybe<BooleanFilter>;
  isReferralPartner?: InputMaybe<BooleanFilter>;
  memberships?: InputMaybe<MembershipManyRelationFilter>;
  name?: InputMaybe<StringFilter>;
  organisation?: InputMaybe<OrganisationWhereInput>;
  password?: InputMaybe<PasswordFilter>;
  redemptions?: InputMaybe<ReferralRedemptionManyRelationFilter>;
  referralPartner?: InputMaybe<ReferralPartnerWhereInput>;
};

export type UserWhereUniqueInput = {
  email?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['ID']['input']>;
};

export type WeatherRecord = {
  __typename?: 'WeatherRecord';
  date?: Maybe<Scalars['DateTime']['output']>;
  field?: Maybe<Field>;
  humidity?: Maybe<Scalars['Float']['output']>;
  id: Scalars['ID']['output'];
  precipitationMm?: Maybe<Scalars['Float']['output']>;
  temperature?: Maybe<Scalars['Float']['output']>;
};

export type WeatherRecordCreateInput = {
  date?: InputMaybe<Scalars['DateTime']['input']>;
  field?: InputMaybe<FieldRelateToOneForCreateInput>;
  humidity?: InputMaybe<Scalars['Float']['input']>;
  precipitationMm?: InputMaybe<Scalars['Float']['input']>;
  temperature?: InputMaybe<Scalars['Float']['input']>;
};

export type WeatherRecordManyRelationFilter = {
  every?: InputMaybe<WeatherRecordWhereInput>;
  none?: InputMaybe<WeatherRecordWhereInput>;
  some?: InputMaybe<WeatherRecordWhereInput>;
};

export type WeatherRecordOrderByInput = {
  date?: InputMaybe<OrderDirection>;
  humidity?: InputMaybe<OrderDirection>;
  id?: InputMaybe<OrderDirection>;
  precipitationMm?: InputMaybe<OrderDirection>;
  temperature?: InputMaybe<OrderDirection>;
};

export type WeatherRecordRelateToManyForCreateInput = {
  connect?: InputMaybe<Array<WeatherRecordWhereUniqueInput>>;
  create?: InputMaybe<Array<WeatherRecordCreateInput>>;
};

export type WeatherRecordRelateToManyForUpdateInput = {
  connect?: InputMaybe<Array<WeatherRecordWhereUniqueInput>>;
  create?: InputMaybe<Array<WeatherRecordCreateInput>>;
  disconnect?: InputMaybe<Array<WeatherRecordWhereUniqueInput>>;
  set?: InputMaybe<Array<WeatherRecordWhereUniqueInput>>;
};

export type WeatherRecordUpdateArgs = {
  data: WeatherRecordUpdateInput;
  where: WeatherRecordWhereUniqueInput;
};

export type WeatherRecordUpdateInput = {
  date?: InputMaybe<Scalars['DateTime']['input']>;
  field?: InputMaybe<FieldRelateToOneForUpdateInput>;
  humidity?: InputMaybe<Scalars['Float']['input']>;
  precipitationMm?: InputMaybe<Scalars['Float']['input']>;
  temperature?: InputMaybe<Scalars['Float']['input']>;
};

export type WeatherRecordWhereInput = {
  AND?: InputMaybe<Array<WeatherRecordWhereInput>>;
  NOT?: InputMaybe<Array<WeatherRecordWhereInput>>;
  OR?: InputMaybe<Array<WeatherRecordWhereInput>>;
  date?: InputMaybe<DateTimeFilter>;
  field?: InputMaybe<FieldWhereInput>;
  humidity?: InputMaybe<FloatNullableFilter>;
  id?: InputMaybe<IdFilter>;
  precipitationMm?: InputMaybe<FloatNullableFilter>;
  temperature?: InputMaybe<FloatNullableFilter>;
};

export type WeatherRecordWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']['input']>;
};

export type GetProductsQueryVariables = Exact<{
  where?: InputMaybe<ProductWhereInput>;
  orderBy?: InputMaybe<Array<ProductOrderByInput> | ProductOrderByInput>;
  take?: InputMaybe<Scalars['Int']['input']>;
  skip?: InputMaybe<Scalars['Int']['input']>;
}>;


export type GetProductsQuery = { __typename?: 'Query', productsCount?: number | null, products?: Array<{ __typename?: 'Product', id: string, name?: string | null, registration_no?: string | null, product_type?: string | null, hazard_class?: string | null, country?: string | null, stato_amministrativo?: string | null }> | null };

export type GetCategoryKpiQueryVariables = Exact<{
  id: Scalars['ID']['input'];
}>;


export type GetCategoryKpiQuery = { __typename?: 'Query', categoryKPI?: { __typename?: 'CategoryKPI', id: string, name?: string | null, kpis?: Array<{ __typename?: 'KPI', id: string, title?: string | null, currentValue?: number | null, target?: number | null, description?: string | null }> | null } | null };

export type GetVisibleKpIsQueryVariables = Exact<{ [key: string]: never; }>;


export type GetVisibleKpIsQuery = { __typename?: 'Query', kPIS?: Array<{ __typename?: 'KPI', id: string, title?: string | null, currentValue?: number | null, target?: number | null, category?: { __typename?: 'CategoryKPI', id: string, name?: string | null } | null }> | null };

export type UpsertUserMutationVariables = Exact<{
  email: Scalars['String']['input'];
  name: Scalars['String']['input'];
}>;


export type UpsertUserMutation = { __typename?: 'Mutation', createUser?: { __typename?: 'User', id: string } | null };

export type AuthenticateMutationVariables = Exact<{
  email: Scalars['String']['input'];
  password: Scalars['String']['input'];
}>;


export type AuthenticateMutation = { __typename?: 'Mutation', authenticateUserWithPassword?: { __typename?: 'UserAuthenticationWithPasswordFailure', message: string } | { __typename?: 'UserAuthenticationWithPasswordSuccess', sessionToken: string, item: { __typename?: 'User', id: string, name?: string | null, email?: string | null, isAdmin?: boolean | null } } | null };

export type FindUserQueryVariables = Exact<{
  email: Scalars['String']['input'];
}>;


export type FindUserQuery = { __typename?: 'Query', users?: Array<{ __typename?: 'User', id: string, name?: string | null, email?: string | null, isAdmin?: boolean | null }> | null };

export type CreateUserMutationVariables = Exact<{
  email: Scalars['String']['input'];
  name: Scalars['String']['input'];
}>;


export type CreateUserMutation = { __typename?: 'Mutation', createUser?: { __typename?: 'User', id: string, name?: string | null, email?: string | null, isAdmin?: boolean | null } | null };

export type CreateFarmMutationVariables = Exact<{
  name: Scalars['String']['input'];
  createdById: Scalars['ID']['input'];
  location: Scalars['JSON']['input'];
}>;


export type CreateFarmMutation = { __typename?: 'Mutation', createFarm?: { __typename?: 'Farm', id: string, name?: string | null, location?: any | null } | null };

export type GetFarmsQueryVariables = Exact<{ [key: string]: never; }>;


export type GetFarmsQuery = { __typename?: 'Query', farms?: Array<{ __typename?: 'Farm', id: string, name?: string | null, location?: any | null, isDefault?: boolean | null, fields?: Array<{ __typename?: 'Field', id: string, name?: string | null, areaHectares?: number | null }> | null }> | null };

export type GetFarmQueryVariables = Exact<{
  id: Scalars['ID']['input'];
}>;


export type GetFarmQuery = { __typename?: 'Query', farm?: { __typename?: 'Farm', id: string, name?: string | null, location?: any | null, isDefault?: boolean | null, fields?: Array<{ __typename?: 'Field', id: string, name?: string | null, areaHectares?: number | null }> | null } | null };

export type UpdateFarmMutationVariables = Exact<{
  id: Scalars['ID']['input'];
  name: Scalars['String']['input'];
  location: Scalars['JSON']['input'];
}>;


export type UpdateFarmMutation = { __typename?: 'Mutation', updateFarm?: { __typename?: 'Farm', id: string, name?: string | null, location?: any | null } | null };

export type DeleteFarmMutationVariables = Exact<{
  id: Scalars['ID']['input'];
}>;


export type DeleteFarmMutation = { __typename?: 'Mutation', deleteFarm?: { __typename?: 'Farm', id: string } | null };

export type GetFieldsQueryVariables = Exact<{
  farmId: Scalars['ID']['input'];
}>;


export type GetFieldsQuery = { __typename?: 'Query', fields?: Array<{ __typename?: 'Field', id: string, name?: string | null, areaHectares?: number | null, location?: any | null, boundary?: any | null }> | null };

export type GetUserFieldsQueryVariables = Exact<{
  userId: Scalars['ID']['input'];
}>;


export type GetUserFieldsQuery = { __typename?: 'Query', fields?: Array<{ __typename?: 'Field', id: string, name?: string | null, areaHectares?: number | null, location?: any | null, boundary?: any | null, farm?: { __typename?: 'Farm', id: string, name?: string | null } | null }> | null };

export type GetUserFieldsFilteredQueryVariables = Exact<{
  userId: Scalars['ID']['input'];
  farmId?: InputMaybe<Scalars['ID']['input']>;
}>;


export type GetUserFieldsFilteredQuery = { __typename?: 'Query', fields?: Array<{ __typename?: 'Field', id: string, name?: string | null, areaHectares?: number | null, boundary?: any | null, farm?: { __typename?: 'Farm', id: string, name?: string | null } | null }> | null };

export type GetAllFieldsQueryVariables = Exact<{ [key: string]: never; }>;


export type GetAllFieldsQuery = { __typename?: 'Query', fields?: Array<{ __typename?: 'Field', id: string, name?: string | null }> | null };

export type GetFieldQueryVariables = Exact<{
  id: Scalars['ID']['input'];
}>;


export type GetFieldQuery = { __typename?: 'Query', field?: { __typename?: 'Field', id: string, name?: string | null, areaHectares?: number | null, location?: any | null, boundary?: any | null, farm?: { __typename?: 'Farm', id: string, name?: string | null } | null } | null };

export type GetFieldAreaQueryVariables = Exact<{
  id: Scalars['ID']['input'];
}>;


export type GetFieldAreaQuery = { __typename?: 'Query', field?: { __typename?: 'Field', id: string, areaHectares?: number | null } | null };

export type CreateFieldMutationVariables = Exact<{
  farmId: Scalars['ID']['input'];
  name: Scalars['String']['input'];
  areaHectares: Scalars['Float']['input'];
  location: Scalars['JSON']['input'];
  boundary?: InputMaybe<Scalars['JSON']['input']>;
}>;


export type CreateFieldMutation = { __typename?: 'Mutation', createField?: { __typename?: 'Field', id: string, name?: string | null, areaHectares?: number | null, location?: any | null, boundary?: any | null } | null };

export type UpdateFieldMutationVariables = Exact<{
  id: Scalars['ID']['input'];
  farmId: Scalars['ID']['input'];
  name: Scalars['String']['input'];
  areaHectares: Scalars['Float']['input'];
  location: Scalars['JSON']['input'];
  boundary?: InputMaybe<Scalars['JSON']['input']>;
}>;


export type UpdateFieldMutation = { __typename?: 'Mutation', updateField?: { __typename?: 'Field', id: string, name?: string | null, areaHectares?: number | null, location?: any | null, boundary?: any | null, farm?: { __typename?: 'Farm', id: string, name?: string | null } | null } | null };

export type DeleteFieldMutationVariables = Exact<{
  id: Scalars['ID']['input'];
}>;


export type DeleteFieldMutation = { __typename?: 'Mutation', deleteField?: { __typename?: 'Field', id: string } | null };

export type GetCropTypesQueryVariables = Exact<{ [key: string]: never; }>;


export type GetCropTypesQuery = { __typename?: 'Query', cropTypes?: Array<{ __typename?: 'CropType', id: string, name?: string | null }> | null };

export type GetCropsQueryVariables = Exact<{
  fieldId: Scalars['ID']['input'];
}>;


export type GetCropsQuery = { __typename?: 'Query', crops?: Array<{ __typename?: 'Crop', id: string, cropAreaHectares?: number | null, boundary?: any | null, cropType?: { __typename?: 'CropType', id: string, name?: string | null } | null }> | null };

export type GetCropQueryVariables = Exact<{
  id: Scalars['ID']['input'];
}>;


export type GetCropQuery = { __typename?: 'Query', crop?: { __typename?: 'Crop', id: string, cropAreaHectares?: number | null, boundary?: any | null, cropType?: { __typename?: 'CropType', id: string, name?: string | null } | null } | null };

export type CreateCropMutationVariables = Exact<{
  landId: Scalars['ID']['input'];
  cropTypeId: Scalars['ID']['input'];
  cropAreaHectares: Scalars['Float']['input'];
  boundary?: InputMaybe<Scalars['JSON']['input']>;
}>;


export type CreateCropMutation = { __typename?: 'Mutation', createCrop?: { __typename?: 'Crop', id: string, cropAreaHectares?: number | null, boundary?: any | null, cropType?: { __typename?: 'CropType', id: string, name?: string | null } | null } | null };

export type UpdateCropMutationVariables = Exact<{
  id: Scalars['ID']['input'];
  cropTypeId: Scalars['ID']['input'];
  cropAreaHectares: Scalars['Float']['input'];
  boundary?: InputMaybe<Scalars['JSON']['input']>;
}>;


export type UpdateCropMutation = { __typename?: 'Mutation', updateCrop?: { __typename?: 'Crop', id: string, cropAreaHectares?: number | null, boundary?: any | null, cropType?: { __typename?: 'CropType', id: string, name?: string | null } | null } | null };

export type DeleteCropMutationVariables = Exact<{
  id: Scalars['ID']['input'];
}>;


export type DeleteCropMutation = { __typename?: 'Mutation', deleteCrop?: { __typename?: 'Crop', id: string } | null };

export type GetDashboardQueryVariables = Exact<{
  where?: InputMaybe<FarmWhereInput>;
}>;


export type GetDashboardQuery = { __typename?: 'Query', farms?: Array<{ __typename?: 'Farm', id: string, name?: string | null, fields?: Array<{ __typename?: 'Field', areaHectares?: number | null, crops?: Array<{ __typename?: 'Crop', cropAreaHectares?: number | null, cropType?: { __typename?: 'CropType', name?: string | null } | null }> | null }> | null }> | null };

export type WeatherRecordsQueryVariables = Exact<{
  fieldId: Scalars['ID']['input'];
  start: Scalars['DateTime']['input'];
  end: Scalars['DateTime']['input'];
}>;


export type WeatherRecordsQuery = { __typename?: 'Query', weatherRecords?: Array<{ __typename?: 'WeatherRecord', id: string, date?: any | null, temperature?: number | null, humidity?: number | null, precipitationMm?: number | null }> | null };

export type CreateWeatherRecordsMutationVariables = Exact<{
  data: Array<WeatherRecordCreateInput> | WeatherRecordCreateInput;
}>;


export type CreateWeatherRecordsMutation = { __typename?: 'Mutation', createWeatherRecords?: Array<{ __typename?: 'WeatherRecord', id: string } | null> | null };

export type GetSoilMeasurementsQueryVariables = Exact<{
  fieldIds: Array<Scalars['ID']['input']> | Scalars['ID']['input'];
  dateFrom?: InputMaybe<Scalars['DateTime']['input']>;
  dateTo?: InputMaybe<Scalars['DateTime']['input']>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
}>;


export type GetSoilMeasurementsQuery = { __typename?: 'Query', soilMeasurements?: Array<{ __typename?: 'SoilMeasurement', id: string, measurementDate?: any | null, sensorId?: string | null, ph?: number | null, organicMatter?: number | null, nitrogen?: number | null, moisture?: number | null, temperature?: number | null, field?: { __typename?: 'Field', id: string, name?: string | null } | null }> | null };

export type GetNppBaselinesQueryVariables = Exact<{
  fieldId: Scalars['ID']['input'];
  yearGte?: InputMaybe<Scalars['Int']['input']>;
  yearLte?: InputMaybe<Scalars['Int']['input']>;
  skip: Scalars['Int']['input'];
  take: Scalars['Int']['input'];
}>;


export type GetNppBaselinesQuery = { __typename?: 'Query', netPrimaryProductivities?: Array<{ __typename?: 'NetPrimaryProductivity', id: string, year?: number | null, meanNPP?: number | null, totalNPP?: number | null, co2e?: number | null, recordedAt?: any | null }> | null };

export type GetLandCoverStatsQueryVariables = Exact<{
  fieldId: Scalars['ID']['input'];
  yearGte?: InputMaybe<Scalars['Int']['input']>;
  yearLte?: InputMaybe<Scalars['Int']['input']>;
  skip: Scalars['Int']['input'];
  take: Scalars['Int']['input'];
}>;


export type GetLandCoverStatsQuery = { __typename?: 'Query', landCoverStatistics?: Array<{ __typename?: 'LandCoverStatistic', id: string, year?: number | null, breakdown?: any | null, imageUrl?: string | null, recordedAt?: any | null }> | null };

export type GetSoilCarbonStocksQueryVariables = Exact<{
  fieldId: Scalars['ID']['input'];
  yearGte?: InputMaybe<Scalars['Int']['input']>;
  yearLte?: InputMaybe<Scalars['Int']['input']>;
  skip: Scalars['Int']['input'];
  take: Scalars['Int']['input'];
}>;


export type GetSoilCarbonStocksQuery = { __typename?: 'Query', soilOrganicCarbonStocks?: Array<{ __typename?: 'SoilOrganicCarbonStock', id: string, year?: number | null, meanSOC?: number | null, totalSOC?: number | null, imageUrl?: string | null, recordedAt?: any | null }> | null };

export type GetSoilMoistureQueryVariables = Exact<{
  fieldId: Scalars['ID']['input'];
  dateFrom?: InputMaybe<Scalars['DateTime']['input']>;
  dateTo?: InputMaybe<Scalars['DateTime']['input']>;
  skip: Scalars['Int']['input'];
  take: Scalars['Int']['input'];
}>;


export type GetSoilMoistureQuery = { __typename?: 'Query', soilMoistureObservations?: Array<{ __typename?: 'SoilMoistureObservation', id: string, date?: any | null, meanMoisture?: number | null, imageUrl?: string | null, recordedAt?: any | null }> | null };

export type GetLandPracticesQueryVariables = Exact<{
  fieldId: Scalars['ID']['input'];
}>;


export type GetLandPracticesQuery = { __typename?: 'Query', sustainablePractices?: Array<{ __typename?: 'SustainablePractice', id: string, name?: string | null, description?: string | null, category?: { __typename?: 'SustainablePracticeCategory', name?: string | null } | null }> | null };

export type GetPracticeEventsQueryVariables = Exact<{
  fieldId: Scalars['ID']['input'];
}>;


export type GetPracticeEventsQuery = { __typename?: 'Query', sustainablePracticeEvents?: Array<{ __typename?: 'SustainablePracticeEvent', appliedDate?: any | null, parameters?: any | null, practice?: { __typename?: 'SustainablePractice', id: string, name?: string | null } | null }> | null };

export type GetSustainablePracticesQueryVariables = Exact<{ [key: string]: never; }>;


export type GetSustainablePracticesQuery = { __typename?: 'Query', sustainablePractices?: Array<{ __typename?: 'SustainablePractice', id: string, name?: string | null, description?: string | null }> | null };

export type CreateSustainablePracticeEventMutationVariables = Exact<{
  practiceId: Scalars['ID']['input'];
  fieldId: Scalars['ID']['input'];
  parameters?: InputMaybe<Scalars['JSON']['input']>;
  targetImpact?: InputMaybe<Scalars['Float']['input']>;
  appliedDate: Scalars['DateTime']['input'];
}>;


export type CreateSustainablePracticeEventMutation = { __typename?: 'Mutation', createSustainablePracticeEvent?: { __typename?: 'SustainablePracticeEvent', id: string, parameters?: any | null, appliedDate?: any | null, field?: { __typename?: 'Field', id: string, name?: string | null } | null, practice?: { __typename?: 'SustainablePractice', id: string, name?: string | null } | null } | null };

export type GetPracticeEventsForPracticeQueryVariables = Exact<{
  fieldId: Scalars['ID']['input'];
  practiceId: Scalars['ID']['input'];
  dateFrom?: InputMaybe<Scalars['DateTime']['input']>;
  dateTo?: InputMaybe<Scalars['DateTime']['input']>;
}>;


export type GetPracticeEventsForPracticeQuery = { __typename?: 'Query', sustainablePracticeEvents?: Array<{ __typename?: 'SustainablePracticeEvent', id: string, parameters?: any | null, targetImpact?: number | null, appliedDate?: any | null, createdAt?: any | null }> | null };

export type GetOffsetsForPracticesQueryVariables = Exact<{
  practiceIds: Array<Scalars['ID']['input']> | Scalars['ID']['input'];
}>;


export type GetOffsetsForPracticesQuery = { __typename?: 'Query', carbonOffsetFactors?: Array<{ __typename?: 'CarbonOffsetFactor', id: string, min?: number | null, max?: number | null, cropType?: { __typename?: 'CropType', id: string, name?: string | null } | null, sustainablePractice?: { __typename?: 'SustainablePractice', id: string } | null }> | null };

export type GetPostsQueryVariables = Exact<{ [key: string]: never; }>;


export type GetPostsQuery = { __typename?: 'Query', posts?: Array<{ __typename?: 'Post', id: string, title?: string | null, slug?: string | null, excerpt?: string | null, publishedAt?: any | null, coverImage?: { __typename?: 'ImageFieldOutput', url: string } | null, author?: { __typename?: 'Author', name?: string | null, avatar?: { __typename?: 'ImageFieldOutput', url: string } | null } | null }> | null };

export type GetPostBySlugQueryVariables = Exact<{
  slug: Scalars['String']['input'];
}>;


export type GetPostBySlugQuery = { __typename?: 'Query', posts?: Array<{ __typename?: 'Post', id: string, title?: string | null, content?: string | null, publishedAt?: any | null, coverImage?: { __typename?: 'ImageFieldOutput', url: string } | null, author?: { __typename?: 'Author', name?: string | null, avatar?: { __typename?: 'ImageFieldOutput', url: string } | null } | null, tags?: Array<{ __typename?: 'Tag', name?: string | null, slug?: string | null }> | null, category?: { __typename?: 'Category', name?: string | null } | null }> | null };

export type CreateSubscriberMutationVariables = Exact<{
  email: Scalars['String']['input'];
}>;


export type CreateSubscriberMutation = { __typename?: 'Mutation', createNewsletterSubscriber?: { __typename?: 'NewsletterSubscriber', id: string, email?: string | null, subscribedAt?: any | null } | null };

export type SubscriberByEmailQueryVariables = Exact<{
  email: Scalars['String']['input'];
}>;


export type SubscriberByEmailQuery = { __typename?: 'Query', newsletterSubscribers?: Array<{ __typename?: 'NewsletterSubscriber', id: string, email?: string | null, isActive?: boolean | null }> | null };

export type UpdateSubscriberMutationVariables = Exact<{
  id: Scalars['ID']['input'];
  isActive: Scalars['Boolean']['input'];
}>;


export type UpdateSubscriberMutation = { __typename?: 'Mutation', updateNewsletterSubscriber?: { __typename?: 'NewsletterSubscriber', id: string, isActive?: boolean | null } | null };

export type GetJobOpeningsQueryVariables = Exact<{ [key: string]: never; }>;


export type GetJobOpeningsQuery = { __typename?: 'Query', jobOpenings?: Array<{ __typename?: 'JobOpening', id: string, title?: string | null, department?: string | null, location?: string | null, employmentType?: string | null, seniority?: string | null }> | null };

export type GetJobOpeningQueryVariables = Exact<{
  where: JobOpeningWhereUniqueInput;
}>;


export type GetJobOpeningQuery = { __typename?: 'Query', jobOpening?: { __typename?: 'JobOpening', id: string, title?: string | null, department?: string | null, location?: string | null, employmentType?: string | null, seniority?: string | null, description?: string | null } | null };

export type ApplyJobMutationVariables = Exact<{
  data: JobCandidateCreateInput;
}>;


export type ApplyJobMutation = { __typename?: 'Mutation', createJobCandidate?: { __typename?: 'JobCandidate', id: string } | null };

export type GetReferralPartnersQueryVariables = Exact<{ [key: string]: never; }>;


export type GetReferralPartnersQuery = { __typename?: 'Query', referralPartners?: Array<{ __typename?: 'ReferralPartner', id: string, name?: string | null, type?: string | null, commission_pct?: number | null, contactEmail?: string | null, ownerUser?: { __typename?: 'User', id: string } | null }> | null };

export type CreateReferralPartnerMutationVariables = Exact<{
  name: Scalars['String']['input'];
  type: Scalars['String']['input'];
  contactEmail: Scalars['String']['input'];
  commissionPct: Scalars['Float']['input'];
}>;


export type CreateReferralPartnerMutation = { __typename?: 'Mutation', createReferralPartner?: { __typename?: 'ReferralPartner', id: string, name?: string | null } | null };

export type CreateReferralPartnerForUserMutationVariables = Exact<{
  name: Scalars['String']['input'];
  type: Scalars['String']['input'];
  contactEmail: Scalars['String']['input'];
  commissionPct: Scalars['Float']['input'];
  ownerUserId: Scalars['ID']['input'];
}>;


export type CreateReferralPartnerForUserMutation = { __typename?: 'Mutation', createReferralPartner?: { __typename?: 'ReferralPartner', id: string } | null };

export type SearchUsersQueryVariables = Exact<{
  query: Scalars['String']['input'];
}>;


export type SearchUsersQuery = { __typename?: 'Query', users?: Array<{ __typename?: 'User', id: string, name?: string | null, email?: string | null }> | null };

export type GetPartnerMembershipsQueryVariables = Exact<{ [key: string]: never; }>;


export type GetPartnerMembershipsQuery = { __typename?: 'Query', memberships?: Array<{ __typename?: 'Membership', id: string, user?: { __typename?: 'User', id: string, name?: string | null, email?: string | null } | null }> | null };

export type AddPartnerMembershipMutationVariables = Exact<{
  userId: Scalars['ID']['input'];
}>;


export type AddPartnerMembershipMutation = { __typename?: 'Mutation', createMembership?: { __typename?: 'Membership', id: string } | null };

export type RemovePartnerMembershipMutationVariables = Exact<{
  id: Scalars['ID']['input'];
}>;


export type RemovePartnerMembershipMutation = { __typename?: 'Mutation', deleteMembership?: { __typename?: 'Membership', id: string } | null };

export type GetReferralCampaignsQueryVariables = Exact<{ [key: string]: never; }>;


export type GetReferralCampaignsQuery = { __typename?: 'Query', referralCampaigns?: Array<{ __typename?: 'ReferralCampaign', id: string, code?: string | null, discount_pct?: number | null, startDate?: any | null, endDate?: any | null, partner?: { __typename?: 'ReferralPartner', id: string, name?: string | null } | null }> | null };

export type CreateReferralCampaignMutationVariables = Exact<{
  partnerId: Scalars['ID']['input'];
  code: Scalars['String']['input'];
  discountPct: Scalars['Float']['input'];
  startDate?: InputMaybe<Scalars['DateTime']['input']>;
  endDate?: InputMaybe<Scalars['DateTime']['input']>;
}>;


export type CreateReferralCampaignMutation = { __typename?: 'Mutation', createReferralCampaign?: { __typename?: 'ReferralCampaign', id: string, code?: string | null } | null };

export type FindActiveReferralCampaignQueryVariables = Exact<{
  code: Scalars['String']['input'];
  now: Scalars['DateTime']['input'];
}>;


export type FindActiveReferralCampaignQuery = { __typename?: 'Query', referralCampaigns?: Array<{ __typename?: 'ReferralCampaign', id: string, discount_pct?: number | null }> | null };

export type UpdateReferralPartnerMutationVariables = Exact<{
  id: Scalars['ID']['input'];
  commissionPct: Scalars['Float']['input'];
}>;


export type UpdateReferralPartnerMutation = { __typename?: 'Mutation', updateReferralPartner?: { __typename?: 'ReferralPartner', id: string, commission_pct?: number | null } | null };

export type CreateReferralRedemptionMutationVariables = Exact<{
  campaignId: Scalars['ID']['input'];
  userId: Scalars['ID']['input'];
  signup: Scalars['DateTime']['input'];
  discountValue: Scalars['Float']['input'];
}>;


export type CreateReferralRedemptionMutation = { __typename?: 'Mutation', createReferralRedemption?: { __typename?: 'ReferralRedemption', id: string } | null };

export type DeleteReferralCampaignMutationVariables = Exact<{
  id: Scalars['ID']['input'];
}>;


export type DeleteReferralCampaignMutation = { __typename?: 'Mutation', deleteReferralCampaign?: { __typename?: 'ReferralCampaign', id: string } | null };

export type CheckPartnerMembershipQueryVariables = Exact<{
  userId: Scalars['ID']['input'];
}>;


export type CheckPartnerMembershipQuery = { __typename?: 'Query', memberships?: Array<{ __typename?: 'Membership', id: string }> | null };

export type GetPartnerDashboardQueryVariables = Exact<{
  userId: Scalars['ID']['input'];
}>;


export type GetPartnerDashboardQuery = { __typename?: 'Query', referralPartners?: Array<{ __typename?: 'ReferralPartner', id: string, name?: string | null, commission_pct?: number | null, campaigns?: Array<{ __typename?: 'ReferralCampaign', id: string, code?: string | null, discount_pct?: number | null, startDate?: any | null, endDate?: any | null, redemptions?: Array<{ __typename?: 'ReferralRedemption', id: string, discountValue?: number | null, signupDate?: any | null, farmerUser?: { __typename?: 'User', id: string, name?: string | null } | null, subscription?: { __typename?: 'Subscription', id: string, status?: string | null } | null }> | null }> | null }> | null };

export type GetMessageTemplatesQueryVariables = Exact<{ [key: string]: never; }>;


export type GetMessageTemplatesQuery = { __typename?: 'Query', messageTemplates?: Array<{ __typename?: 'MessageTemplate', id: string, title?: string | null, bodyMarkdown?: string | null, type?: string | null, urgency?: string | null, mediaId?: string | null, ctaLabel?: string | null, channelMask?: any | null, createdAt?: any | null }> | null };

export type CreateMessageTemplateMutationVariables = Exact<{
  title: Scalars['String']['input'];
  bodyMarkdown?: InputMaybe<Scalars['String']['input']>;
  type: Scalars['String']['input'];
  urgency: Scalars['String']['input'];
  mediaId?: InputMaybe<Scalars['String']['input']>;
  ctaLabel?: InputMaybe<Scalars['String']['input']>;
  ctaLink?: InputMaybe<Scalars['String']['input']>;
  channelMask?: InputMaybe<Scalars['JSON']['input']>;
  requireAcknowledgement?: InputMaybe<Scalars['Boolean']['input']>;
  maxViews?: InputMaybe<Scalars['Int']['input']>;
  startAt?: InputMaybe<Scalars['DateTime']['input']>;
  endAt?: InputMaybe<Scalars['DateTime']['input']>;
}>;


export type CreateMessageTemplateMutation = { __typename?: 'Mutation', createMessageTemplate?: { __typename?: 'MessageTemplate', id: string } | null };

export type DeleteMessageTemplateMutationVariables = Exact<{
  id: Scalars['ID']['input'];
}>;


export type DeleteMessageTemplateMutation = { __typename?: 'Mutation', deleteMessageTemplate?: { __typename?: 'MessageTemplate', id: string } | null };

export type GetMessageDeliveriesQueryVariables = Exact<{
  where?: InputMaybe<MessageDeliveryWhereInput>;
  take: Scalars['Int']['input'];
  skip: Scalars['Int']['input'];
}>;


export type GetMessageDeliveriesQuery = { __typename?: 'Query', messageDeliveries?: Array<{ __typename?: 'MessageDelivery', id: string, status?: string | null, urgency?: string | null, views?: number | null, lastShownAt?: any | null, createdAt?: any | null, user?: { __typename?: 'User', email?: string | null } | null, template?: { __typename?: 'MessageTemplate', title?: string | null, type?: string | null } | null, clicks?: Array<{ __typename?: 'MessageClick', id: string }> | null }> | null };

export type GetMessageStatsQueryVariables = Exact<{ [key: string]: never; }>;


export type GetMessageStatsQuery = { __typename?: 'Query', sent?: number | null, read?: number | null, dismissed?: number | null };

export type GetMessageDetailQueryVariables = Exact<{
  id: Scalars['ID']['input'];
}>;


export type GetMessageDetailQuery = { __typename?: 'Query', messageDelivery?: { __typename?: 'MessageDelivery', id: string, status?: string | null, createdAt?: any | null, template?: { __typename?: 'MessageTemplate', title?: string | null, bodyMarkdown?: string | null, mediaId?: string | null, ctaLabel?: string | null, ctaLink?: string | null } | null } | null };

export type GetUnreadCountQueryVariables = Exact<{ [key: string]: never; }>;


export type GetUnreadCountQuery = { __typename?: 'Query', deliveriesUnread?: number | null, alertsUnread?: number | null };

export type GetInboxQueryVariables = Exact<{ [key: string]: never; }>;


export type GetInboxQuery = { __typename?: 'Query', alerts?: Array<{ __typename?: 'Alert', id: string, message?: string | null, createdAt?: any | null }> | null, messageDeliveries?: Array<{ __typename?: 'MessageDelivery', id: string, createdAt?: any | null, template?: { __typename?: 'MessageTemplate', title?: string | null } | null }> | null };

export type MarkDeliveryReadModalMutationVariables = Exact<{
  id: Scalars['ID']['input'];
}>;


export type MarkDeliveryReadModalMutation = { __typename?: 'Mutation', updateMessageDelivery?: { __typename?: 'MessageDelivery', id: string } | null };

export type MarkDeliveryRemindMutationVariables = Exact<{
  id: Scalars['ID']['input'];
  ts: Scalars['DateTime']['input'];
}>;


export type MarkDeliveryRemindMutation = { __typename?: 'Mutation', updateMessageDelivery?: { __typename?: 'MessageDelivery', id: string } | null };

export type MarkAlertReadMutationVariables = Exact<{
  id: Scalars['ID']['input'];
}>;


export type MarkAlertReadMutation = { __typename?: 'Mutation', updateAlert?: { __typename?: 'Alert', id: string } | null };

export type UpdateMessageDeliveryMutationVariables = Exact<{
  id: Scalars['ID']['input'];
  data: MessageDeliveryUpdateInput;
}>;


export type UpdateMessageDeliveryMutation = { __typename?: 'Mutation', updateMessageDelivery?: { __typename?: 'MessageDelivery', id: string } | null };

export type CreateMessageDeliveryMutationVariables = Exact<{
  templateId: Scalars['ID']['input'];
  userId: Scalars['ID']['input'];
}>;


export type CreateMessageDeliveryMutation = { __typename?: 'Mutation', createMessageDelivery?: { __typename?: 'MessageDelivery', id: string } | null };

export type GetReceivedMessagesQueryVariables = Exact<{
  where: MessageDeliveryWhereInput;
  take: Scalars['Int']['input'];
  skip: Scalars['Int']['input'];
  search?: InputMaybe<Scalars['String']['input']>;
}>;


export type GetReceivedMessagesQuery = { __typename?: 'Query', messageDeliveriesCount?: number | null, messageDeliveries?: Array<{ __typename?: 'MessageDelivery', id: string, status?: string | null, views?: number | null, lastShownAt?: any | null, createdAt?: any | null, template?: { __typename?: 'MessageTemplate', id: string, title?: string | null, mediaId?: string | null } | null }> | null };

export type GetSentMessagesQueryVariables = Exact<{
  where: MessageTemplateWhereInput;
  take: Scalars['Int']['input'];
  skip: Scalars['Int']['input'];
  search?: InputMaybe<Scalars['String']['input']>;
}>;


export type GetSentMessagesQuery = { __typename?: 'Query', messageTemplatesCount?: number | null, messageTemplates?: Array<{ __typename?: 'MessageTemplate', id: string, title?: string | null, type?: string | null, urgency?: string | null, createdAt?: any | null }> | null };

export type GetAlertsQueryVariables = Exact<{
  where: AlertWhereInput;
  take: Scalars['Int']['input'];
  skip: Scalars['Int']['input'];
  search?: InputMaybe<Scalars['String']['input']>;
}>;


export type GetAlertsQuery = { __typename?: 'Query', alertsCount?: number | null, alerts?: Array<{ __typename?: 'Alert', id: string, message?: string | null, urgency?: string | null, status?: string | null, createdAt?: any | null }> | null };

export type GetAlertDetailQueryVariables = Exact<{
  id: Scalars['ID']['input'];
}>;


export type GetAlertDetailQuery = { __typename?: 'Query', alert?: { __typename?: 'Alert', id: string, message?: string | null, urgency?: string | null, status?: string | null, due_date?: any | null, createdAt?: any | null } | null };

export type GetUsersByRoleQueryVariables = Exact<{
  role: Scalars['String']['input'];
}>;


export type GetUsersByRoleQuery = { __typename?: 'Query', memberships?: Array<{ __typename?: 'Membership', user?: { __typename?: 'User', id: string, email?: string | null, name?: string | null } | null }> | null };

export type OrgByUserQueryVariables = Exact<{
  userId: Scalars['ID']['input'];
}>;


export type OrgByUserQuery = { __typename?: 'Query', user?: { __typename?: 'User', memberships?: Array<{ __typename?: 'Membership', organisation?: { __typename?: 'Organisation', id: string, name?: string | null, stripeCustomerId?: string | null } | null }> | null } | null };

export type SetOrgCustMutationVariables = Exact<{
  orgId: Scalars['ID']['input'];
  custId: Scalars['String']['input'];
}>;


export type SetOrgCustMutation = { __typename?: 'Mutation', updateOrganisation?: { __typename?: 'Organisation', id: string } | null };

export type CreateSubscriptionMutationVariables = Exact<{
  data: SubscriptionCreateInput;
}>;


export type CreateSubscriptionMutation = { __typename?: 'Mutation', createSubscription?: { __typename?: 'Subscription', id: string } | null };

export type UpdateSubMutationVariables = Exact<{
  orgId: Scalars['ID']['input'];
  stripeSubId: Scalars['String']['input'];
  stripePriceId: Scalars['String']['input'];
  status: Scalars['String']['input'];
  start: Scalars['DateTime']['input'];
  end: Scalars['DateTime']['input'];
}>;


export type UpdateSubMutation = { __typename?: 'Mutation', updateSubscription?: { __typename?: 'Subscription', id: string, status?: string | null } | null };

export type GetPlansQueryVariables = Exact<{ [key: string]: never; }>;


export type GetPlansQuery = { __typename?: 'Query', plans?: Array<{ __typename?: 'Plan', id: string, key?: string | null, label?: string | null, features?: any | null, activePrice?: { __typename?: 'PlanPrice', id: string, amount?: number | null, currency?: string | null } | null }> | null };

export type FindActivePriceQueryVariables = Exact<{
  key: Scalars['String']['input'];
}>;


export type FindActivePriceQuery = { __typename?: 'Query', plan?: { __typename?: 'Plan', id: string, activePrice?: { __typename?: 'PlanPrice', id: string, stripePriceId?: string | null } | null } | null };


export const GetProductsDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"GetProducts"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"where"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"ProductWhereInput"}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"orderBy"}},"type":{"kind":"ListType","type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ProductOrderByInput"}}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"take"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"Int"}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"skip"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"Int"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"products"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"where"},"value":{"kind":"Variable","name":{"kind":"Name","value":"where"}}},{"kind":"Argument","name":{"kind":"Name","value":"orderBy"},"value":{"kind":"Variable","name":{"kind":"Name","value":"orderBy"}}},{"kind":"Argument","name":{"kind":"Name","value":"take"},"value":{"kind":"Variable","name":{"kind":"Name","value":"take"}}},{"kind":"Argument","name":{"kind":"Name","value":"skip"},"value":{"kind":"Variable","name":{"kind":"Name","value":"skip"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"registration_no"}},{"kind":"Field","name":{"kind":"Name","value":"product_type"}},{"kind":"Field","name":{"kind":"Name","value":"hazard_class"}},{"kind":"Field","name":{"kind":"Name","value":"country"}},{"kind":"Field","name":{"kind":"Name","value":"stato_amministrativo"}}]}},{"kind":"Field","name":{"kind":"Name","value":"productsCount"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"where"},"value":{"kind":"Variable","name":{"kind":"Name","value":"where"}}}]}]}}]} as unknown as DocumentNode<GetProductsQuery, GetProductsQueryVariables>;
export const GetCategoryKpiDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"GetCategoryKPI"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"id"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"categoryKPI"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"where"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"id"}}}]}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"kpis"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"where"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"visible"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"equals"},"value":{"kind":"BooleanValue","value":true}}]}}]}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"title"}},{"kind":"Field","name":{"kind":"Name","value":"currentValue"}},{"kind":"Field","name":{"kind":"Name","value":"target"}},{"kind":"Field","name":{"kind":"Name","value":"description"}}]}}]}}]}}]} as unknown as DocumentNode<GetCategoryKpiQuery, GetCategoryKpiQueryVariables>;
export const GetVisibleKpIsDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"GetVisibleKPIs"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"kPIS"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"where"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"visible"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"equals"},"value":{"kind":"BooleanValue","value":true}}]}}]}},{"kind":"Argument","name":{"kind":"Name","value":"orderBy"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"createdAt"},"value":{"kind":"EnumValue","value":"desc"}}]}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"title"}},{"kind":"Field","name":{"kind":"Name","value":"currentValue"}},{"kind":"Field","name":{"kind":"Name","value":"target"}},{"kind":"Field","name":{"kind":"Name","value":"category"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}}]}}]}}]}}]} as unknown as DocumentNode<GetVisibleKpIsQuery, GetVisibleKpIsQueryVariables>;
export const UpsertUserDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"UpsertUser"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"email"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"name"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"createUser"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"data"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"email"},"value":{"kind":"Variable","name":{"kind":"Name","value":"email"}}},{"kind":"ObjectField","name":{"kind":"Name","value":"name"},"value":{"kind":"Variable","name":{"kind":"Name","value":"name"}}}]}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}}]}}]}}]} as unknown as DocumentNode<UpsertUserMutation, UpsertUserMutationVariables>;
export const AuthenticateDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"Authenticate"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"email"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"password"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"authenticateUserWithPassword"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"email"},"value":{"kind":"Variable","name":{"kind":"Name","value":"email"}}},{"kind":"Argument","name":{"kind":"Name","value":"password"},"value":{"kind":"Variable","name":{"kind":"Name","value":"password"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"InlineFragment","typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"UserAuthenticationWithPasswordSuccess"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"sessionToken"}},{"kind":"Field","name":{"kind":"Name","value":"item"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"email"}},{"kind":"Field","name":{"kind":"Name","value":"isAdmin"}}]}}]}},{"kind":"InlineFragment","typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"UserAuthenticationWithPasswordFailure"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"message"}}]}}]}}]}}]} as unknown as DocumentNode<AuthenticateMutation, AuthenticateMutationVariables>;
export const FindUserDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"FindUser"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"email"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"users"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"where"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"email"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"equals"},"value":{"kind":"Variable","name":{"kind":"Name","value":"email"}}}]}}]}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"email"}},{"kind":"Field","name":{"kind":"Name","value":"isAdmin"}}]}}]}}]} as unknown as DocumentNode<FindUserQuery, FindUserQueryVariables>;
export const CreateUserDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"CreateUser"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"email"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"name"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"createUser"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"data"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"email"},"value":{"kind":"Variable","name":{"kind":"Name","value":"email"}}},{"kind":"ObjectField","name":{"kind":"Name","value":"name"},"value":{"kind":"Variable","name":{"kind":"Name","value":"name"}}}]}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"email"}},{"kind":"Field","name":{"kind":"Name","value":"isAdmin"}}]}}]}}]} as unknown as DocumentNode<CreateUserMutation, CreateUserMutationVariables>;
export const CreateFarmDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"CreateFarm"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"name"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"createdById"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"location"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"JSON"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"createFarm"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"data"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"name"},"value":{"kind":"Variable","name":{"kind":"Name","value":"name"}}},{"kind":"ObjectField","name":{"kind":"Name","value":"createdBy"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"connect"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"createdById"}}}]}}]}},{"kind":"ObjectField","name":{"kind":"Name","value":"location"},"value":{"kind":"Variable","name":{"kind":"Name","value":"location"}}}]}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"location"}}]}}]}}]} as unknown as DocumentNode<CreateFarmMutation, CreateFarmMutationVariables>;
export const GetFarmsDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"GetFarms"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"farms"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"location"}},{"kind":"Field","name":{"kind":"Name","value":"isDefault"}},{"kind":"Field","name":{"kind":"Name","value":"fields"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"areaHectares"}}]}}]}}]}}]} as unknown as DocumentNode<GetFarmsQuery, GetFarmsQueryVariables>;
export const GetFarmDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"GetFarm"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"id"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"farm"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"where"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"id"}}}]}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"location"}},{"kind":"Field","name":{"kind":"Name","value":"isDefault"}},{"kind":"Field","name":{"kind":"Name","value":"fields"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"areaHectares"}}]}}]}}]}}]} as unknown as DocumentNode<GetFarmQuery, GetFarmQueryVariables>;
export const UpdateFarmDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"UpdateFarm"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"id"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"name"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"location"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"JSON"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"updateFarm"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"where"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"id"}}}]}},{"kind":"Argument","name":{"kind":"Name","value":"data"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"name"},"value":{"kind":"Variable","name":{"kind":"Name","value":"name"}}},{"kind":"ObjectField","name":{"kind":"Name","value":"location"},"value":{"kind":"Variable","name":{"kind":"Name","value":"location"}}}]}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"location"}}]}}]}}]} as unknown as DocumentNode<UpdateFarmMutation, UpdateFarmMutationVariables>;
export const DeleteFarmDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"DeleteFarm"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"id"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"deleteFarm"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"where"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"id"}}}]}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}}]}}]}}]} as unknown as DocumentNode<DeleteFarmMutation, DeleteFarmMutationVariables>;
export const GetFieldsDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"GetFields"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"farmId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"fields"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"where"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"farm"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"id"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"equals"},"value":{"kind":"Variable","name":{"kind":"Name","value":"farmId"}}}]}}]}}]}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"areaHectares"}},{"kind":"Field","name":{"kind":"Name","value":"location"}},{"kind":"Field","name":{"kind":"Name","value":"boundary"}}]}}]}}]} as unknown as DocumentNode<GetFieldsQuery, GetFieldsQueryVariables>;
export const GetUserFieldsDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"GetUserFields"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"userId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"fields"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"where"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"farm"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"createdBy"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"id"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"equals"},"value":{"kind":"Variable","name":{"kind":"Name","value":"userId"}}}]}}]}}]}}]}},{"kind":"Argument","name":{"kind":"Name","value":"orderBy"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"name"},"value":{"kind":"EnumValue","value":"asc"}}]}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"areaHectares"}},{"kind":"Field","name":{"kind":"Name","value":"location"}},{"kind":"Field","name":{"kind":"Name","value":"boundary"}},{"kind":"Field","name":{"kind":"Name","value":"farm"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}}]}}]}}]}}]} as unknown as DocumentNode<GetUserFieldsQuery, GetUserFieldsQueryVariables>;
export const GetUserFieldsFilteredDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"GetUserFieldsFiltered"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"userId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"farmId"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"fields"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"where"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"farm"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"createdBy"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"id"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"equals"},"value":{"kind":"Variable","name":{"kind":"Name","value":"userId"}}}]}}]}},{"kind":"ObjectField","name":{"kind":"Name","value":"id"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"equals"},"value":{"kind":"Variable","name":{"kind":"Name","value":"farmId"}}}]}}]}}]}},{"kind":"Argument","name":{"kind":"Name","value":"orderBy"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"name"},"value":{"kind":"EnumValue","value":"asc"}}]}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"areaHectares"}},{"kind":"Field","name":{"kind":"Name","value":"boundary"}},{"kind":"Field","name":{"kind":"Name","value":"farm"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}}]}}]}}]}}]} as unknown as DocumentNode<GetUserFieldsFilteredQuery, GetUserFieldsFilteredQueryVariables>;
export const GetAllFieldsDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"GetAllFields"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"fields"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}}]}}]}}]} as unknown as DocumentNode<GetAllFieldsQuery, GetAllFieldsQueryVariables>;
export const GetFieldDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"GetField"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"id"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"field"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"where"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"id"}}}]}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"areaHectares"}},{"kind":"Field","name":{"kind":"Name","value":"location"}},{"kind":"Field","name":{"kind":"Name","value":"boundary"}},{"kind":"Field","name":{"kind":"Name","value":"farm"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}}]}}]}}]}}]} as unknown as DocumentNode<GetFieldQuery, GetFieldQueryVariables>;
export const GetFieldAreaDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"GetFieldArea"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"id"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"field"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"where"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"id"}}}]}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"areaHectares"}}]}}]}}]} as unknown as DocumentNode<GetFieldAreaQuery, GetFieldAreaQueryVariables>;
export const CreateFieldDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"CreateField"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"farmId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"name"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"areaHectares"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"Float"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"location"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"JSON"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"boundary"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"JSON"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"createField"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"data"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"farm"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"connect"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"farmId"}}}]}}]}},{"kind":"ObjectField","name":{"kind":"Name","value":"name"},"value":{"kind":"Variable","name":{"kind":"Name","value":"name"}}},{"kind":"ObjectField","name":{"kind":"Name","value":"areaHectares"},"value":{"kind":"Variable","name":{"kind":"Name","value":"areaHectares"}}},{"kind":"ObjectField","name":{"kind":"Name","value":"location"},"value":{"kind":"Variable","name":{"kind":"Name","value":"location"}}},{"kind":"ObjectField","name":{"kind":"Name","value":"boundary"},"value":{"kind":"Variable","name":{"kind":"Name","value":"boundary"}}}]}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"areaHectares"}},{"kind":"Field","name":{"kind":"Name","value":"location"}},{"kind":"Field","name":{"kind":"Name","value":"boundary"}}]}}]}}]} as unknown as DocumentNode<CreateFieldMutation, CreateFieldMutationVariables>;
export const UpdateFieldDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"UpdateField"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"id"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"farmId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"name"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"areaHectares"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"Float"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"location"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"JSON"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"boundary"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"JSON"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"updateField"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"where"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"id"}}}]}},{"kind":"Argument","name":{"kind":"Name","value":"data"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"farm"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"connect"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"farmId"}}}]}}]}},{"kind":"ObjectField","name":{"kind":"Name","value":"name"},"value":{"kind":"Variable","name":{"kind":"Name","value":"name"}}},{"kind":"ObjectField","name":{"kind":"Name","value":"areaHectares"},"value":{"kind":"Variable","name":{"kind":"Name","value":"areaHectares"}}},{"kind":"ObjectField","name":{"kind":"Name","value":"location"},"value":{"kind":"Variable","name":{"kind":"Name","value":"location"}}},{"kind":"ObjectField","name":{"kind":"Name","value":"boundary"},"value":{"kind":"Variable","name":{"kind":"Name","value":"boundary"}}}]}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"areaHectares"}},{"kind":"Field","name":{"kind":"Name","value":"location"}},{"kind":"Field","name":{"kind":"Name","value":"boundary"}},{"kind":"Field","name":{"kind":"Name","value":"farm"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}}]}}]}}]}}]} as unknown as DocumentNode<UpdateFieldMutation, UpdateFieldMutationVariables>;
export const DeleteFieldDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"DeleteField"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"id"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"deleteField"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"where"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"id"}}}]}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}}]}}]}}]} as unknown as DocumentNode<DeleteFieldMutation, DeleteFieldMutationVariables>;
export const GetCropTypesDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"GetCropTypes"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"cropTypes"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}}]}}]}}]} as unknown as DocumentNode<GetCropTypesQuery, GetCropTypesQueryVariables>;
export const GetCropsDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"GetCrops"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"fieldId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"crops"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"where"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"field"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"id"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"equals"},"value":{"kind":"Variable","name":{"kind":"Name","value":"fieldId"}}}]}}]}}]}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"cropAreaHectares"}},{"kind":"Field","name":{"kind":"Name","value":"boundary"}},{"kind":"Field","name":{"kind":"Name","value":"cropType"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}}]}}]}}]}}]} as unknown as DocumentNode<GetCropsQuery, GetCropsQueryVariables>;
export const GetCropDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"GetCrop"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"id"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"crop"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"where"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"id"}}}]}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"cropAreaHectares"}},{"kind":"Field","name":{"kind":"Name","value":"boundary"}},{"kind":"Field","name":{"kind":"Name","value":"cropType"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}}]}}]}}]}}]} as unknown as DocumentNode<GetCropQuery, GetCropQueryVariables>;
export const CreateCropDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"CreateCrop"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"landId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"cropTypeId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"cropAreaHectares"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"Float"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"boundary"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"JSON"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"createCrop"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"data"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"field"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"connect"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"landId"}}}]}}]}},{"kind":"ObjectField","name":{"kind":"Name","value":"cropType"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"connect"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"cropTypeId"}}}]}}]}},{"kind":"ObjectField","name":{"kind":"Name","value":"cropAreaHectares"},"value":{"kind":"Variable","name":{"kind":"Name","value":"cropAreaHectares"}}},{"kind":"ObjectField","name":{"kind":"Name","value":"boundary"},"value":{"kind":"Variable","name":{"kind":"Name","value":"boundary"}}}]}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"cropAreaHectares"}},{"kind":"Field","name":{"kind":"Name","value":"cropType"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}}]}},{"kind":"Field","name":{"kind":"Name","value":"boundary"}}]}}]}}]} as unknown as DocumentNode<CreateCropMutation, CreateCropMutationVariables>;
export const UpdateCropDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"UpdateCrop"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"id"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"cropTypeId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"cropAreaHectares"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"Float"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"boundary"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"JSON"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"updateCrop"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"where"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"id"}}}]}},{"kind":"Argument","name":{"kind":"Name","value":"data"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"cropType"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"connect"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"cropTypeId"}}}]}}]}},{"kind":"ObjectField","name":{"kind":"Name","value":"cropAreaHectares"},"value":{"kind":"Variable","name":{"kind":"Name","value":"cropAreaHectares"}}},{"kind":"ObjectField","name":{"kind":"Name","value":"boundary"},"value":{"kind":"Variable","name":{"kind":"Name","value":"boundary"}}}]}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"cropAreaHectares"}},{"kind":"Field","name":{"kind":"Name","value":"cropType"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}}]}},{"kind":"Field","name":{"kind":"Name","value":"boundary"}}]}}]}}]} as unknown as DocumentNode<UpdateCropMutation, UpdateCropMutationVariables>;
export const DeleteCropDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"DeleteCrop"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"id"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"deleteCrop"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"where"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"id"}}}]}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}}]}}]}}]} as unknown as DocumentNode<DeleteCropMutation, DeleteCropMutationVariables>;
export const GetDashboardDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"GetDashboard"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"where"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"FarmWhereInput"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"farms"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"where"},"value":{"kind":"Variable","name":{"kind":"Name","value":"where"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"fields"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"areaHectares"}},{"kind":"Field","name":{"kind":"Name","value":"crops"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"cropAreaHectares"}},{"kind":"Field","name":{"kind":"Name","value":"cropType"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"name"}}]}}]}}]}}]}}]}}]} as unknown as DocumentNode<GetDashboardQuery, GetDashboardQueryVariables>;
export const WeatherRecordsDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"WeatherRecords"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"fieldId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"start"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"DateTime"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"end"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"DateTime"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"weatherRecords"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"where"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"field"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"id"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"equals"},"value":{"kind":"Variable","name":{"kind":"Name","value":"fieldId"}}}]}}]}},{"kind":"ObjectField","name":{"kind":"Name","value":"date"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"gte"},"value":{"kind":"Variable","name":{"kind":"Name","value":"start"}}},{"kind":"ObjectField","name":{"kind":"Name","value":"lte"},"value":{"kind":"Variable","name":{"kind":"Name","value":"end"}}}]}}]}},{"kind":"Argument","name":{"kind":"Name","value":"take"},"value":{"kind":"IntValue","value":"1000"}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"date"}},{"kind":"Field","name":{"kind":"Name","value":"temperature"}},{"kind":"Field","name":{"kind":"Name","value":"humidity"}},{"kind":"Field","name":{"kind":"Name","value":"precipitationMm"}}]}}]}}]} as unknown as DocumentNode<WeatherRecordsQuery, WeatherRecordsQueryVariables>;
export const CreateWeatherRecordsDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"CreateWeatherRecords"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"data"}},"type":{"kind":"NonNullType","type":{"kind":"ListType","type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"WeatherRecordCreateInput"}}}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"createWeatherRecords"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"data"},"value":{"kind":"Variable","name":{"kind":"Name","value":"data"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}}]}}]}}]} as unknown as DocumentNode<CreateWeatherRecordsMutation, CreateWeatherRecordsMutationVariables>;
export const GetSoilMeasurementsDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"GetSoilMeasurements"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"fieldIds"}},"type":{"kind":"NonNullType","type":{"kind":"ListType","type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"dateFrom"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"DateTime"}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"dateTo"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"DateTime"}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"skip"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"Int"}},"defaultValue":{"kind":"IntValue","value":"0"}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"take"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"Int"}},"defaultValue":{"kind":"IntValue","value":"50"}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"soilMeasurements"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"where"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"field"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"id"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"in"},"value":{"kind":"Variable","name":{"kind":"Name","value":"fieldIds"}}}]}}]}},{"kind":"ObjectField","name":{"kind":"Name","value":"measurementDate"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"gte"},"value":{"kind":"Variable","name":{"kind":"Name","value":"dateFrom"}}},{"kind":"ObjectField","name":{"kind":"Name","value":"lte"},"value":{"kind":"Variable","name":{"kind":"Name","value":"dateTo"}}}]}}]}},{"kind":"Argument","name":{"kind":"Name","value":"orderBy"},"value":{"kind":"ListValue","values":[{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"measurementDate"},"value":{"kind":"EnumValue","value":"desc"}}]}]}},{"kind":"Argument","name":{"kind":"Name","value":"skip"},"value":{"kind":"Variable","name":{"kind":"Name","value":"skip"}}},{"kind":"Argument","name":{"kind":"Name","value":"take"},"value":{"kind":"Variable","name":{"kind":"Name","value":"take"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"measurementDate"}},{"kind":"Field","name":{"kind":"Name","value":"sensorId"}},{"kind":"Field","name":{"kind":"Name","value":"ph"}},{"kind":"Field","name":{"kind":"Name","value":"organicMatter"}},{"kind":"Field","name":{"kind":"Name","value":"nitrogen"}},{"kind":"Field","name":{"kind":"Name","value":"moisture"}},{"kind":"Field","name":{"kind":"Name","value":"temperature"}},{"kind":"Field","name":{"kind":"Name","value":"field"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}}]}}]}}]}}]} as unknown as DocumentNode<GetSoilMeasurementsQuery, GetSoilMeasurementsQueryVariables>;
export const GetNppBaselinesDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"GetNPPBaselines"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"fieldId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"yearGte"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"Int"}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"yearLte"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"Int"}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"skip"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"Int"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"take"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"Int"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"netPrimaryProductivities"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"where"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"field"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"id"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"equals"},"value":{"kind":"Variable","name":{"kind":"Name","value":"fieldId"}}}]}}]}},{"kind":"ObjectField","name":{"kind":"Name","value":"year"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"gte"},"value":{"kind":"Variable","name":{"kind":"Name","value":"yearGte"}}},{"kind":"ObjectField","name":{"kind":"Name","value":"lte"},"value":{"kind":"Variable","name":{"kind":"Name","value":"yearLte"}}}]}}]}},{"kind":"Argument","name":{"kind":"Name","value":"orderBy"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"year"},"value":{"kind":"EnumValue","value":"desc"}}]}},{"kind":"Argument","name":{"kind":"Name","value":"skip"},"value":{"kind":"Variable","name":{"kind":"Name","value":"skip"}}},{"kind":"Argument","name":{"kind":"Name","value":"take"},"value":{"kind":"Variable","name":{"kind":"Name","value":"take"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"year"}},{"kind":"Field","name":{"kind":"Name","value":"meanNPP"}},{"kind":"Field","name":{"kind":"Name","value":"totalNPP"}},{"kind":"Field","name":{"kind":"Name","value":"co2e"}},{"kind":"Field","name":{"kind":"Name","value":"recordedAt"}}]}}]}}]} as unknown as DocumentNode<GetNppBaselinesQuery, GetNppBaselinesQueryVariables>;
export const GetLandCoverStatsDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"GetLandCoverStats"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"fieldId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"yearGte"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"Int"}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"yearLte"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"Int"}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"skip"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"Int"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"take"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"Int"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"landCoverStatistics"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"where"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"field"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"id"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"equals"},"value":{"kind":"Variable","name":{"kind":"Name","value":"fieldId"}}}]}}]}},{"kind":"ObjectField","name":{"kind":"Name","value":"year"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"gte"},"value":{"kind":"Variable","name":{"kind":"Name","value":"yearGte"}}},{"kind":"ObjectField","name":{"kind":"Name","value":"lte"},"value":{"kind":"Variable","name":{"kind":"Name","value":"yearLte"}}}]}}]}},{"kind":"Argument","name":{"kind":"Name","value":"orderBy"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"year"},"value":{"kind":"EnumValue","value":"desc"}}]}},{"kind":"Argument","name":{"kind":"Name","value":"skip"},"value":{"kind":"Variable","name":{"kind":"Name","value":"skip"}}},{"kind":"Argument","name":{"kind":"Name","value":"take"},"value":{"kind":"Variable","name":{"kind":"Name","value":"take"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"year"}},{"kind":"Field","name":{"kind":"Name","value":"breakdown"}},{"kind":"Field","name":{"kind":"Name","value":"imageUrl"}},{"kind":"Field","name":{"kind":"Name","value":"recordedAt"}}]}}]}}]} as unknown as DocumentNode<GetLandCoverStatsQuery, GetLandCoverStatsQueryVariables>;
export const GetSoilCarbonStocksDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"GetSoilCarbonStocks"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"fieldId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"yearGte"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"Int"}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"yearLte"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"Int"}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"skip"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"Int"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"take"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"Int"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"soilOrganicCarbonStocks"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"where"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"field"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"id"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"equals"},"value":{"kind":"Variable","name":{"kind":"Name","value":"fieldId"}}}]}}]}},{"kind":"ObjectField","name":{"kind":"Name","value":"year"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"gte"},"value":{"kind":"Variable","name":{"kind":"Name","value":"yearGte"}}},{"kind":"ObjectField","name":{"kind":"Name","value":"lte"},"value":{"kind":"Variable","name":{"kind":"Name","value":"yearLte"}}}]}}]}},{"kind":"Argument","name":{"kind":"Name","value":"orderBy"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"year"},"value":{"kind":"EnumValue","value":"desc"}}]}},{"kind":"Argument","name":{"kind":"Name","value":"skip"},"value":{"kind":"Variable","name":{"kind":"Name","value":"skip"}}},{"kind":"Argument","name":{"kind":"Name","value":"take"},"value":{"kind":"Variable","name":{"kind":"Name","value":"take"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"year"}},{"kind":"Field","name":{"kind":"Name","value":"meanSOC"}},{"kind":"Field","name":{"kind":"Name","value":"totalSOC"}},{"kind":"Field","name":{"kind":"Name","value":"imageUrl"}},{"kind":"Field","name":{"kind":"Name","value":"recordedAt"}}]}}]}}]} as unknown as DocumentNode<GetSoilCarbonStocksQuery, GetSoilCarbonStocksQueryVariables>;
export const GetSoilMoistureDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"GetSoilMoisture"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"fieldId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"dateFrom"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"DateTime"}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"dateTo"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"DateTime"}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"skip"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"Int"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"take"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"Int"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"soilMoistureObservations"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"where"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"field"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"id"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"equals"},"value":{"kind":"Variable","name":{"kind":"Name","value":"fieldId"}}}]}}]}},{"kind":"ObjectField","name":{"kind":"Name","value":"date"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"gte"},"value":{"kind":"Variable","name":{"kind":"Name","value":"dateFrom"}}},{"kind":"ObjectField","name":{"kind":"Name","value":"lte"},"value":{"kind":"Variable","name":{"kind":"Name","value":"dateTo"}}}]}}]}},{"kind":"Argument","name":{"kind":"Name","value":"orderBy"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"date"},"value":{"kind":"EnumValue","value":"asc"}}]}},{"kind":"Argument","name":{"kind":"Name","value":"skip"},"value":{"kind":"Variable","name":{"kind":"Name","value":"skip"}}},{"kind":"Argument","name":{"kind":"Name","value":"take"},"value":{"kind":"Variable","name":{"kind":"Name","value":"take"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"date"}},{"kind":"Field","name":{"kind":"Name","value":"meanMoisture"}},{"kind":"Field","name":{"kind":"Name","value":"imageUrl"}},{"kind":"Field","name":{"kind":"Name","value":"recordedAt"}}]}}]}}]} as unknown as DocumentNode<GetSoilMoistureQuery, GetSoilMoistureQueryVariables>;
export const GetLandPracticesDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"GetLandPractices"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"fieldId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"sustainablePractices"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"where"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"events"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"some"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"field"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"id"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"equals"},"value":{"kind":"Variable","name":{"kind":"Name","value":"fieldId"}}}]}}]}}]}}]}}]}},{"kind":"Argument","name":{"kind":"Name","value":"orderBy"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"name"},"value":{"kind":"EnumValue","value":"asc"}}]}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"category"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"name"}}]}},{"kind":"Field","name":{"kind":"Name","value":"description"}}]}}]}}]} as unknown as DocumentNode<GetLandPracticesQuery, GetLandPracticesQueryVariables>;
export const GetPracticeEventsDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"GetPracticeEvents"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"fieldId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"sustainablePracticeEvents"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"where"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"field"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"id"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"equals"},"value":{"kind":"Variable","name":{"kind":"Name","value":"fieldId"}}}]}}]}}]}},{"kind":"Argument","name":{"kind":"Name","value":"orderBy"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"appliedDate"},"value":{"kind":"EnumValue","value":"asc"}}]}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"practice"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}}]}},{"kind":"Field","name":{"kind":"Name","value":"appliedDate"}},{"kind":"Field","name":{"kind":"Name","value":"parameters"}}]}}]}}]} as unknown as DocumentNode<GetPracticeEventsQuery, GetPracticeEventsQueryVariables>;
export const GetSustainablePracticesDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"GetSustainablePractices"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"sustainablePractices"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"orderBy"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"name"},"value":{"kind":"EnumValue","value":"asc"}}]}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"description"}}]}}]}}]} as unknown as DocumentNode<GetSustainablePracticesQuery, GetSustainablePracticesQueryVariables>;
export const CreateSustainablePracticeEventDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"CreateSustainablePracticeEvent"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"practiceId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"fieldId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"parameters"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"JSON"}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"targetImpact"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"Float"}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"appliedDate"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"DateTime"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"createSustainablePracticeEvent"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"data"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"practice"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"connect"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"practiceId"}}}]}}]}},{"kind":"ObjectField","name":{"kind":"Name","value":"field"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"connect"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"fieldId"}}}]}}]}},{"kind":"ObjectField","name":{"kind":"Name","value":"parameters"},"value":{"kind":"Variable","name":{"kind":"Name","value":"parameters"}}},{"kind":"ObjectField","name":{"kind":"Name","value":"targetImpact"},"value":{"kind":"Variable","name":{"kind":"Name","value":"targetImpact"}}},{"kind":"ObjectField","name":{"kind":"Name","value":"appliedDate"},"value":{"kind":"Variable","name":{"kind":"Name","value":"appliedDate"}}}]}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"field"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}}]}},{"kind":"Field","name":{"kind":"Name","value":"practice"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}}]}},{"kind":"Field","name":{"kind":"Name","value":"parameters"}},{"kind":"Field","name":{"kind":"Name","value":"appliedDate"}}]}}]}}]} as unknown as DocumentNode<CreateSustainablePracticeEventMutation, CreateSustainablePracticeEventMutationVariables>;
export const GetPracticeEventsForPracticeDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"GetPracticeEventsForPractice"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"fieldId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"practiceId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"dateFrom"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"DateTime"}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"dateTo"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"DateTime"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"sustainablePracticeEvents"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"where"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"field"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"id"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"equals"},"value":{"kind":"Variable","name":{"kind":"Name","value":"fieldId"}}}]}}]}},{"kind":"ObjectField","name":{"kind":"Name","value":"practice"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"id"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"equals"},"value":{"kind":"Variable","name":{"kind":"Name","value":"practiceId"}}}]}}]}},{"kind":"ObjectField","name":{"kind":"Name","value":"appliedDate"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"gte"},"value":{"kind":"Variable","name":{"kind":"Name","value":"dateFrom"}}},{"kind":"ObjectField","name":{"kind":"Name","value":"lte"},"value":{"kind":"Variable","name":{"kind":"Name","value":"dateTo"}}}]}}]}},{"kind":"Argument","name":{"kind":"Name","value":"orderBy"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"appliedDate"},"value":{"kind":"EnumValue","value":"desc"}}]}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"parameters"}},{"kind":"Field","name":{"kind":"Name","value":"targetImpact"}},{"kind":"Field","name":{"kind":"Name","value":"appliedDate"}},{"kind":"Field","name":{"kind":"Name","value":"createdAt"}}]}}]}}]} as unknown as DocumentNode<GetPracticeEventsForPracticeQuery, GetPracticeEventsForPracticeQueryVariables>;
export const GetOffsetsForPracticesDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"GetOffsetsForPractices"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"practiceIds"}},"type":{"kind":"NonNullType","type":{"kind":"ListType","type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"carbonOffsetFactors"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"where"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"sustainablePractice"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"id"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"in"},"value":{"kind":"Variable","name":{"kind":"Name","value":"practiceIds"}}}]}}]}}]}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"min"}},{"kind":"Field","name":{"kind":"Name","value":"max"}},{"kind":"Field","name":{"kind":"Name","value":"cropType"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}}]}},{"kind":"Field","name":{"kind":"Name","value":"sustainablePractice"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}}]}}]}}]}}]} as unknown as DocumentNode<GetOffsetsForPracticesQuery, GetOffsetsForPracticesQueryVariables>;
export const GetPostsDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"GetPosts"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"posts"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"where"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"status"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"equals"},"value":{"kind":"StringValue","value":"published","block":false}}]}}]}},{"kind":"Argument","name":{"kind":"Name","value":"orderBy"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"publishedAt"},"value":{"kind":"EnumValue","value":"desc"}}]}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"title"}},{"kind":"Field","name":{"kind":"Name","value":"slug"}},{"kind":"Field","name":{"kind":"Name","value":"excerpt"}},{"kind":"Field","name":{"kind":"Name","value":"coverImage"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"url"}}]}},{"kind":"Field","name":{"kind":"Name","value":"publishedAt"}},{"kind":"Field","name":{"kind":"Name","value":"author"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"avatar"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"url"}}]}}]}}]}}]}}]} as unknown as DocumentNode<GetPostsQuery, GetPostsQueryVariables>;
export const GetPostBySlugDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"GetPostBySlug"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"slug"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"posts"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"where"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"slug"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"equals"},"value":{"kind":"Variable","name":{"kind":"Name","value":"slug"}}}]}}]}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"title"}},{"kind":"Field","name":{"kind":"Name","value":"content"}},{"kind":"Field","name":{"kind":"Name","value":"coverImage"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"url"}}]}},{"kind":"Field","name":{"kind":"Name","value":"publishedAt"}},{"kind":"Field","name":{"kind":"Name","value":"author"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"avatar"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"url"}}]}}]}},{"kind":"Field","name":{"kind":"Name","value":"tags"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"slug"}}]}},{"kind":"Field","name":{"kind":"Name","value":"category"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"name"}}]}}]}}]}}]} as unknown as DocumentNode<GetPostBySlugQuery, GetPostBySlugQueryVariables>;
export const CreateSubscriberDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"CreateSubscriber"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"email"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"createNewsletterSubscriber"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"data"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"email"},"value":{"kind":"Variable","name":{"kind":"Name","value":"email"}}}]}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"email"}},{"kind":"Field","name":{"kind":"Name","value":"subscribedAt"}}]}}]}}]} as unknown as DocumentNode<CreateSubscriberMutation, CreateSubscriberMutationVariables>;
export const SubscriberByEmailDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"SubscriberByEmail"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"email"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"newsletterSubscribers"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"where"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"email"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"equals"},"value":{"kind":"Variable","name":{"kind":"Name","value":"email"}}}]}}]}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"email"}},{"kind":"Field","name":{"kind":"Name","value":"isActive"}}]}}]}}]} as unknown as DocumentNode<SubscriberByEmailQuery, SubscriberByEmailQueryVariables>;
export const UpdateSubscriberDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"UpdateSubscriber"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"id"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"isActive"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"Boolean"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"updateNewsletterSubscriber"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"where"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"id"}}}]}},{"kind":"Argument","name":{"kind":"Name","value":"data"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"isActive"},"value":{"kind":"Variable","name":{"kind":"Name","value":"isActive"}}}]}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"isActive"}}]}}]}}]} as unknown as DocumentNode<UpdateSubscriberMutation, UpdateSubscriberMutationVariables>;
export const GetJobOpeningsDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"GetJobOpenings"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"jobOpenings"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"title"}},{"kind":"Field","name":{"kind":"Name","value":"department"}},{"kind":"Field","name":{"kind":"Name","value":"location"}},{"kind":"Field","name":{"kind":"Name","value":"employmentType"}},{"kind":"Field","name":{"kind":"Name","value":"seniority"}}]}}]}}]} as unknown as DocumentNode<GetJobOpeningsQuery, GetJobOpeningsQueryVariables>;
export const GetJobOpeningDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"GetJobOpening"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"where"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"JobOpeningWhereUniqueInput"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"jobOpening"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"where"},"value":{"kind":"Variable","name":{"kind":"Name","value":"where"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"title"}},{"kind":"Field","name":{"kind":"Name","value":"department"}},{"kind":"Field","name":{"kind":"Name","value":"location"}},{"kind":"Field","name":{"kind":"Name","value":"employmentType"}},{"kind":"Field","name":{"kind":"Name","value":"seniority"}},{"kind":"Field","name":{"kind":"Name","value":"description"}}]}}]}}]} as unknown as DocumentNode<GetJobOpeningQuery, GetJobOpeningQueryVariables>;
export const ApplyJobDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"ApplyJob"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"data"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"JobCandidateCreateInput"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"createJobCandidate"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"data"},"value":{"kind":"Variable","name":{"kind":"Name","value":"data"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}}]}}]}}]} as unknown as DocumentNode<ApplyJobMutation, ApplyJobMutationVariables>;
export const GetReferralPartnersDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"GetReferralPartners"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"referralPartners"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"orderBy"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"createdAt"},"value":{"kind":"EnumValue","value":"desc"}}]}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"type"}},{"kind":"Field","name":{"kind":"Name","value":"commission_pct"}},{"kind":"Field","name":{"kind":"Name","value":"contactEmail"}},{"kind":"Field","name":{"kind":"Name","value":"ownerUser"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}}]}}]}}]}}]} as unknown as DocumentNode<GetReferralPartnersQuery, GetReferralPartnersQueryVariables>;
export const CreateReferralPartnerDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"CreateReferralPartner"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"name"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"type"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"contactEmail"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"commissionPct"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"Float"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"createReferralPartner"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"data"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"name"},"value":{"kind":"Variable","name":{"kind":"Name","value":"name"}}},{"kind":"ObjectField","name":{"kind":"Name","value":"type"},"value":{"kind":"Variable","name":{"kind":"Name","value":"type"}}},{"kind":"ObjectField","name":{"kind":"Name","value":"contactEmail"},"value":{"kind":"Variable","name":{"kind":"Name","value":"contactEmail"}}},{"kind":"ObjectField","name":{"kind":"Name","value":"commission_pct"},"value":{"kind":"Variable","name":{"kind":"Name","value":"commissionPct"}}}]}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}}]}}]}}]} as unknown as DocumentNode<CreateReferralPartnerMutation, CreateReferralPartnerMutationVariables>;
export const CreateReferralPartnerForUserDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"CreateReferralPartnerForUser"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"name"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"type"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"contactEmail"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"commissionPct"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"Float"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"ownerUserId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"createReferralPartner"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"data"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"name"},"value":{"kind":"Variable","name":{"kind":"Name","value":"name"}}},{"kind":"ObjectField","name":{"kind":"Name","value":"type"},"value":{"kind":"Variable","name":{"kind":"Name","value":"type"}}},{"kind":"ObjectField","name":{"kind":"Name","value":"contactEmail"},"value":{"kind":"Variable","name":{"kind":"Name","value":"contactEmail"}}},{"kind":"ObjectField","name":{"kind":"Name","value":"commission_pct"},"value":{"kind":"Variable","name":{"kind":"Name","value":"commissionPct"}}},{"kind":"ObjectField","name":{"kind":"Name","value":"ownerUser"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"connect"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"ownerUserId"}}}]}}]}}]}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}}]}}]}}]} as unknown as DocumentNode<CreateReferralPartnerForUserMutation, CreateReferralPartnerForUserMutationVariables>;
export const SearchUsersDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"SearchUsers"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"query"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"users"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"where"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"OR"},"value":{"kind":"ListValue","values":[{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"name"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"contains"},"value":{"kind":"Variable","name":{"kind":"Name","value":"query"}}},{"kind":"ObjectField","name":{"kind":"Name","value":"mode"},"value":{"kind":"EnumValue","value":"insensitive"}}]}}]},{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"email"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"contains"},"value":{"kind":"Variable","name":{"kind":"Name","value":"query"}}},{"kind":"ObjectField","name":{"kind":"Name","value":"mode"},"value":{"kind":"EnumValue","value":"insensitive"}}]}}]}]}}]}},{"kind":"Argument","name":{"kind":"Name","value":"take"},"value":{"kind":"IntValue","value":"10"}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"email"}}]}}]}}]} as unknown as DocumentNode<SearchUsersQuery, SearchUsersQueryVariables>;
export const GetPartnerMembershipsDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"GetPartnerMemberships"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"memberships"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"where"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"role"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"equals"},"value":{"kind":"StringValue","value":"partner","block":false}}]}}]}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"user"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"email"}}]}}]}}]}}]} as unknown as DocumentNode<GetPartnerMembershipsQuery, GetPartnerMembershipsQueryVariables>;
export const AddPartnerMembershipDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"AddPartnerMembership"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"userId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"createMembership"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"data"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"user"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"connect"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"userId"}}}]}}]}},{"kind":"ObjectField","name":{"kind":"Name","value":"role"},"value":{"kind":"StringValue","value":"partner","block":false}}]}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}}]}}]}}]} as unknown as DocumentNode<AddPartnerMembershipMutation, AddPartnerMembershipMutationVariables>;
export const RemovePartnerMembershipDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"RemovePartnerMembership"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"id"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"deleteMembership"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"where"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"id"}}}]}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}}]}}]}}]} as unknown as DocumentNode<RemovePartnerMembershipMutation, RemovePartnerMembershipMutationVariables>;
export const GetReferralCampaignsDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"GetReferralCampaigns"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"referralCampaigns"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"orderBy"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"startDate"},"value":{"kind":"EnumValue","value":"desc"}}]}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"code"}},{"kind":"Field","name":{"kind":"Name","value":"discount_pct"}},{"kind":"Field","name":{"kind":"Name","value":"startDate"}},{"kind":"Field","name":{"kind":"Name","value":"endDate"}},{"kind":"Field","name":{"kind":"Name","value":"partner"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}}]}}]}}]}}]} as unknown as DocumentNode<GetReferralCampaignsQuery, GetReferralCampaignsQueryVariables>;
export const CreateReferralCampaignDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"CreateReferralCampaign"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"partnerId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"code"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"discountPct"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"Float"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"startDate"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"DateTime"}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"endDate"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"DateTime"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"createReferralCampaign"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"data"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"partner"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"connect"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"partnerId"}}}]}}]}},{"kind":"ObjectField","name":{"kind":"Name","value":"code"},"value":{"kind":"Variable","name":{"kind":"Name","value":"code"}}},{"kind":"ObjectField","name":{"kind":"Name","value":"discount_pct"},"value":{"kind":"Variable","name":{"kind":"Name","value":"discountPct"}}},{"kind":"ObjectField","name":{"kind":"Name","value":"startDate"},"value":{"kind":"Variable","name":{"kind":"Name","value":"startDate"}}},{"kind":"ObjectField","name":{"kind":"Name","value":"endDate"},"value":{"kind":"Variable","name":{"kind":"Name","value":"endDate"}}}]}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"code"}}]}}]}}]} as unknown as DocumentNode<CreateReferralCampaignMutation, CreateReferralCampaignMutationVariables>;
export const FindActiveReferralCampaignDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"FindActiveReferralCampaign"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"code"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"now"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"DateTime"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"referralCampaigns"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"where"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"code"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"equals"},"value":{"kind":"Variable","name":{"kind":"Name","value":"code"}}}]}},{"kind":"ObjectField","name":{"kind":"Name","value":"AND"},"value":{"kind":"ListValue","values":[{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"OR"},"value":{"kind":"ListValue","values":[{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"startDate"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"equals"},"value":{"kind":"NullValue"}}]}}]},{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"startDate"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"lte"},"value":{"kind":"Variable","name":{"kind":"Name","value":"now"}}}]}}]}]}}]},{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"OR"},"value":{"kind":"ListValue","values":[{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"endDate"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"equals"},"value":{"kind":"NullValue"}}]}}]},{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"endDate"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"gte"},"value":{"kind":"Variable","name":{"kind":"Name","value":"now"}}}]}}]}]}}]}]}}]}},{"kind":"Argument","name":{"kind":"Name","value":"take"},"value":{"kind":"IntValue","value":"1"}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"discount_pct"}}]}}]}}]} as unknown as DocumentNode<FindActiveReferralCampaignQuery, FindActiveReferralCampaignQueryVariables>;
export const UpdateReferralPartnerDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"UpdateReferralPartner"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"id"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"commissionPct"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"Float"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"updateReferralPartner"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"where"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"id"}}}]}},{"kind":"Argument","name":{"kind":"Name","value":"data"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"commission_pct"},"value":{"kind":"Variable","name":{"kind":"Name","value":"commissionPct"}}}]}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"commission_pct"}}]}}]}}]} as unknown as DocumentNode<UpdateReferralPartnerMutation, UpdateReferralPartnerMutationVariables>;
export const CreateReferralRedemptionDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"CreateReferralRedemption"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"campaignId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"userId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"signup"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"DateTime"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"discountValue"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"Float"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"createReferralRedemption"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"data"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"campaign"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"connect"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"campaignId"}}}]}}]}},{"kind":"ObjectField","name":{"kind":"Name","value":"farmerUser"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"connect"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"userId"}}}]}}]}},{"kind":"ObjectField","name":{"kind":"Name","value":"signupDate"},"value":{"kind":"Variable","name":{"kind":"Name","value":"signup"}}},{"kind":"ObjectField","name":{"kind":"Name","value":"discountValue"},"value":{"kind":"Variable","name":{"kind":"Name","value":"discountValue"}}}]}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}}]}}]}}]} as unknown as DocumentNode<CreateReferralRedemptionMutation, CreateReferralRedemptionMutationVariables>;
export const DeleteReferralCampaignDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"DeleteReferralCampaign"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"id"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"deleteReferralCampaign"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"where"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"id"}}}]}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}}]}}]}}]} as unknown as DocumentNode<DeleteReferralCampaignMutation, DeleteReferralCampaignMutationVariables>;
export const CheckPartnerMembershipDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"CheckPartnerMembership"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"userId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"memberships"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"where"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"user"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"id"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"equals"},"value":{"kind":"Variable","name":{"kind":"Name","value":"userId"}}}]}}]}},{"kind":"ObjectField","name":{"kind":"Name","value":"role"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"equals"},"value":{"kind":"StringValue","value":"partner","block":false}}]}}]}},{"kind":"Argument","name":{"kind":"Name","value":"take"},"value":{"kind":"IntValue","value":"1"}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}}]}}]}}]} as unknown as DocumentNode<CheckPartnerMembershipQuery, CheckPartnerMembershipQueryVariables>;
export const GetPartnerDashboardDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"GetPartnerDashboard"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"userId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"referralPartners"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"where"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"ownerUser"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"id"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"equals"},"value":{"kind":"Variable","name":{"kind":"Name","value":"userId"}}}]}}]}}]}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"commission_pct"}},{"kind":"Field","name":{"kind":"Name","value":"campaigns"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"orderBy"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"startDate"},"value":{"kind":"EnumValue","value":"desc"}}]}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"code"}},{"kind":"Field","name":{"kind":"Name","value":"discount_pct"}},{"kind":"Field","name":{"kind":"Name","value":"startDate"}},{"kind":"Field","name":{"kind":"Name","value":"endDate"}},{"kind":"Field","name":{"kind":"Name","value":"redemptions"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"discountValue"}},{"kind":"Field","name":{"kind":"Name","value":"signupDate"}},{"kind":"Field","name":{"kind":"Name","value":"farmerUser"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}}]}},{"kind":"Field","name":{"kind":"Name","value":"subscription"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"status"}}]}}]}}]}}]}}]}}]} as unknown as DocumentNode<GetPartnerDashboardQuery, GetPartnerDashboardQueryVariables>;
export const GetMessageTemplatesDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"GetMessageTemplates"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"messageTemplates"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"orderBy"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"createdAt"},"value":{"kind":"EnumValue","value":"desc"}}]}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"title"}},{"kind":"Field","name":{"kind":"Name","value":"bodyMarkdown"}},{"kind":"Field","name":{"kind":"Name","value":"type"}},{"kind":"Field","name":{"kind":"Name","value":"urgency"}},{"kind":"Field","name":{"kind":"Name","value":"mediaId"}},{"kind":"Field","name":{"kind":"Name","value":"ctaLabel"}},{"kind":"Field","name":{"kind":"Name","value":"channelMask"}},{"kind":"Field","name":{"kind":"Name","value":"createdAt"}}]}}]}}]} as unknown as DocumentNode<GetMessageTemplatesQuery, GetMessageTemplatesQueryVariables>;
export const CreateMessageTemplateDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"CreateMessageTemplate"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"title"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"bodyMarkdown"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"type"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"urgency"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"mediaId"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"ctaLabel"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"ctaLink"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"channelMask"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"JSON"}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"requireAcknowledgement"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"Boolean"}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"maxViews"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"Int"}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"startAt"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"DateTime"}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"endAt"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"DateTime"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"createMessageTemplate"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"data"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"title"},"value":{"kind":"Variable","name":{"kind":"Name","value":"title"}}},{"kind":"ObjectField","name":{"kind":"Name","value":"bodyMarkdown"},"value":{"kind":"Variable","name":{"kind":"Name","value":"bodyMarkdown"}}},{"kind":"ObjectField","name":{"kind":"Name","value":"type"},"value":{"kind":"Variable","name":{"kind":"Name","value":"type"}}},{"kind":"ObjectField","name":{"kind":"Name","value":"urgency"},"value":{"kind":"Variable","name":{"kind":"Name","value":"urgency"}}},{"kind":"ObjectField","name":{"kind":"Name","value":"mediaId"},"value":{"kind":"Variable","name":{"kind":"Name","value":"mediaId"}}},{"kind":"ObjectField","name":{"kind":"Name","value":"ctaLabel"},"value":{"kind":"Variable","name":{"kind":"Name","value":"ctaLabel"}}},{"kind":"ObjectField","name":{"kind":"Name","value":"ctaLink"},"value":{"kind":"Variable","name":{"kind":"Name","value":"ctaLink"}}},{"kind":"ObjectField","name":{"kind":"Name","value":"channelMask"},"value":{"kind":"Variable","name":{"kind":"Name","value":"channelMask"}}},{"kind":"ObjectField","name":{"kind":"Name","value":"requireAcknowledgement"},"value":{"kind":"Variable","name":{"kind":"Name","value":"requireAcknowledgement"}}},{"kind":"ObjectField","name":{"kind":"Name","value":"maxViews"},"value":{"kind":"Variable","name":{"kind":"Name","value":"maxViews"}}},{"kind":"ObjectField","name":{"kind":"Name","value":"startAt"},"value":{"kind":"Variable","name":{"kind":"Name","value":"startAt"}}},{"kind":"ObjectField","name":{"kind":"Name","value":"endAt"},"value":{"kind":"Variable","name":{"kind":"Name","value":"endAt"}}}]}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}}]}}]}}]} as unknown as DocumentNode<CreateMessageTemplateMutation, CreateMessageTemplateMutationVariables>;
export const DeleteMessageTemplateDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"DeleteMessageTemplate"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"id"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"deleteMessageTemplate"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"where"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"id"}}}]}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}}]}}]}}]} as unknown as DocumentNode<DeleteMessageTemplateMutation, DeleteMessageTemplateMutationVariables>;
export const GetMessageDeliveriesDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"GetMessageDeliveries"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"where"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"MessageDeliveryWhereInput"}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"take"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"Int"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"skip"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"Int"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"messageDeliveries"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"where"},"value":{"kind":"Variable","name":{"kind":"Name","value":"where"}}},{"kind":"Argument","name":{"kind":"Name","value":"orderBy"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"createdAt"},"value":{"kind":"EnumValue","value":"desc"}}]}},{"kind":"Argument","name":{"kind":"Name","value":"take"},"value":{"kind":"Variable","name":{"kind":"Name","value":"take"}}},{"kind":"Argument","name":{"kind":"Name","value":"skip"},"value":{"kind":"Variable","name":{"kind":"Name","value":"skip"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"status"}},{"kind":"Field","name":{"kind":"Name","value":"urgency"}},{"kind":"Field","name":{"kind":"Name","value":"views"}},{"kind":"Field","name":{"kind":"Name","value":"lastShownAt"}},{"kind":"Field","name":{"kind":"Name","value":"createdAt"}},{"kind":"Field","name":{"kind":"Name","value":"user"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"email"}}]}},{"kind":"Field","name":{"kind":"Name","value":"template"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"title"}},{"kind":"Field","name":{"kind":"Name","value":"type"}}]}},{"kind":"Field","name":{"kind":"Name","value":"clicks"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}}]}}]}}]}}]} as unknown as DocumentNode<GetMessageDeliveriesQuery, GetMessageDeliveriesQueryVariables>;
export const GetMessageStatsDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"GetMessageStats"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","alias":{"kind":"Name","value":"sent"},"name":{"kind":"Name","value":"messageDeliveriesCount"}},{"kind":"Field","alias":{"kind":"Name","value":"read"},"name":{"kind":"Name","value":"messageDeliveriesCount"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"where"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"status"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"equals"},"value":{"kind":"StringValue","value":"read","block":false}}]}}]}}]},{"kind":"Field","alias":{"kind":"Name","value":"dismissed"},"name":{"kind":"Name","value":"messageDeliveriesCount"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"where"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"status"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"equals"},"value":{"kind":"StringValue","value":"dismissed","block":false}}]}}]}}]}]}}]} as unknown as DocumentNode<GetMessageStatsQuery, GetMessageStatsQueryVariables>;
export const GetMessageDetailDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"GetMessageDetail"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"id"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"messageDelivery"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"where"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"id"}}}]}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"status"}},{"kind":"Field","name":{"kind":"Name","value":"createdAt"}},{"kind":"Field","name":{"kind":"Name","value":"template"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"title"}},{"kind":"Field","name":{"kind":"Name","value":"bodyMarkdown"}},{"kind":"Field","name":{"kind":"Name","value":"mediaId"}},{"kind":"Field","name":{"kind":"Name","value":"ctaLabel"}},{"kind":"Field","name":{"kind":"Name","value":"ctaLink"}}]}}]}}]}}]} as unknown as DocumentNode<GetMessageDetailQuery, GetMessageDetailQueryVariables>;
export const GetUnreadCountDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"GetUnreadCount"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","alias":{"kind":"Name","value":"deliveriesUnread"},"name":{"kind":"Name","value":"messageDeliveriesCount"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"where"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"status"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"equals"},"value":{"kind":"StringValue","value":"unread","block":false}}]}}]}}]},{"kind":"Field","alias":{"kind":"Name","value":"alertsUnread"},"name":{"kind":"Name","value":"alertsCount"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"where"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"status"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"equals"},"value":{"kind":"StringValue","value":"open","block":false}}]}}]}}]}]}}]} as unknown as DocumentNode<GetUnreadCountQuery, GetUnreadCountQueryVariables>;
export const GetInboxDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"GetInbox"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"alerts"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"where"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"status"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"equals"},"value":{"kind":"StringValue","value":"open","block":false}}]}}]}},{"kind":"Argument","name":{"kind":"Name","value":"orderBy"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"createdAt"},"value":{"kind":"EnumValue","value":"desc"}}]}},{"kind":"Argument","name":{"kind":"Name","value":"take"},"value":{"kind":"IntValue","value":"10"}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"message"}},{"kind":"Field","name":{"kind":"Name","value":"createdAt"}}]}},{"kind":"Field","name":{"kind":"Name","value":"messageDeliveries"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"where"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"status"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"equals"},"value":{"kind":"StringValue","value":"unread","block":false}}]}}]}},{"kind":"Argument","name":{"kind":"Name","value":"orderBy"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"createdAt"},"value":{"kind":"EnumValue","value":"desc"}}]}},{"kind":"Argument","name":{"kind":"Name","value":"take"},"value":{"kind":"IntValue","value":"10"}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"createdAt"}},{"kind":"Field","name":{"kind":"Name","value":"template"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"title"}}]}}]}}]}}]} as unknown as DocumentNode<GetInboxQuery, GetInboxQueryVariables>;
export const MarkDeliveryReadModalDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"MarkDeliveryReadModal"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"id"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"updateMessageDelivery"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"where"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"id"}}}]}},{"kind":"Argument","name":{"kind":"Name","value":"data"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"status"},"value":{"kind":"StringValue","value":"read","block":false}}]}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}}]}}]}}]} as unknown as DocumentNode<MarkDeliveryReadModalMutation, MarkDeliveryReadModalMutationVariables>;
export const MarkDeliveryRemindDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"MarkDeliveryRemind"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"id"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"ts"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"DateTime"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"updateMessageDelivery"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"where"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"id"}}}]}},{"kind":"Argument","name":{"kind":"Name","value":"data"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"lastShownAt"},"value":{"kind":"Variable","name":{"kind":"Name","value":"ts"}}}]}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}}]}}]}}]} as unknown as DocumentNode<MarkDeliveryRemindMutation, MarkDeliveryRemindMutationVariables>;
export const MarkAlertReadDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"MarkAlertRead"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"id"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"updateAlert"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"where"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"id"}}}]}},{"kind":"Argument","name":{"kind":"Name","value":"data"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"status"},"value":{"kind":"StringValue","value":"dismissed","block":false}}]}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}}]}}]}}]} as unknown as DocumentNode<MarkAlertReadMutation, MarkAlertReadMutationVariables>;
export const UpdateMessageDeliveryDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"UpdateMessageDelivery"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"id"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"data"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"MessageDeliveryUpdateInput"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"updateMessageDelivery"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"where"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"id"}}}]}},{"kind":"Argument","name":{"kind":"Name","value":"data"},"value":{"kind":"Variable","name":{"kind":"Name","value":"data"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}}]}}]}}]} as unknown as DocumentNode<UpdateMessageDeliveryMutation, UpdateMessageDeliveryMutationVariables>;
export const CreateMessageDeliveryDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"CreateMessageDelivery"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"templateId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"userId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"createMessageDelivery"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"data"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"template"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"connect"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"templateId"}}}]}}]}},{"kind":"ObjectField","name":{"kind":"Name","value":"user"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"connect"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"userId"}}}]}}]}}]}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}}]}}]}}]} as unknown as DocumentNode<CreateMessageDeliveryMutation, CreateMessageDeliveryMutationVariables>;
export const GetReceivedMessagesDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"GetReceivedMessages"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"where"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"MessageDeliveryWhereInput"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"take"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"Int"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"skip"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"Int"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"search"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"messageDeliveries"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"where"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"AND"},"value":{"kind":"ListValue","values":[{"kind":"Variable","name":{"kind":"Name","value":"where"}},{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"template"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"title"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"contains"},"value":{"kind":"Variable","name":{"kind":"Name","value":"search"}}},{"kind":"ObjectField","name":{"kind":"Name","value":"mode"},"value":{"kind":"EnumValue","value":"insensitive"}}]}}]}}]}]}}]}},{"kind":"Argument","name":{"kind":"Name","value":"orderBy"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"createdAt"},"value":{"kind":"EnumValue","value":"desc"}}]}},{"kind":"Argument","name":{"kind":"Name","value":"take"},"value":{"kind":"Variable","name":{"kind":"Name","value":"take"}}},{"kind":"Argument","name":{"kind":"Name","value":"skip"},"value":{"kind":"Variable","name":{"kind":"Name","value":"skip"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"status"}},{"kind":"Field","name":{"kind":"Name","value":"views"}},{"kind":"Field","name":{"kind":"Name","value":"lastShownAt"}},{"kind":"Field","name":{"kind":"Name","value":"createdAt"}},{"kind":"Field","name":{"kind":"Name","value":"template"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"title"}},{"kind":"Field","name":{"kind":"Name","value":"mediaId"}}]}}]}},{"kind":"Field","name":{"kind":"Name","value":"messageDeliveriesCount"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"where"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"AND"},"value":{"kind":"ListValue","values":[{"kind":"Variable","name":{"kind":"Name","value":"where"}},{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"template"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"title"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"contains"},"value":{"kind":"Variable","name":{"kind":"Name","value":"search"}}},{"kind":"ObjectField","name":{"kind":"Name","value":"mode"},"value":{"kind":"EnumValue","value":"insensitive"}}]}}]}}]}]}}]}}]}]}}]} as unknown as DocumentNode<GetReceivedMessagesQuery, GetReceivedMessagesQueryVariables>;
export const GetSentMessagesDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"GetSentMessages"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"where"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"MessageTemplateWhereInput"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"take"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"Int"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"skip"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"Int"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"search"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"messageTemplates"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"where"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"AND"},"value":{"kind":"ListValue","values":[{"kind":"Variable","name":{"kind":"Name","value":"where"}},{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"title"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"contains"},"value":{"kind":"Variable","name":{"kind":"Name","value":"search"}}},{"kind":"ObjectField","name":{"kind":"Name","value":"mode"},"value":{"kind":"EnumValue","value":"insensitive"}}]}}]}]}}]}},{"kind":"Argument","name":{"kind":"Name","value":"orderBy"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"createdAt"},"value":{"kind":"EnumValue","value":"desc"}}]}},{"kind":"Argument","name":{"kind":"Name","value":"take"},"value":{"kind":"Variable","name":{"kind":"Name","value":"take"}}},{"kind":"Argument","name":{"kind":"Name","value":"skip"},"value":{"kind":"Variable","name":{"kind":"Name","value":"skip"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"title"}},{"kind":"Field","name":{"kind":"Name","value":"type"}},{"kind":"Field","name":{"kind":"Name","value":"urgency"}},{"kind":"Field","name":{"kind":"Name","value":"createdAt"}}]}},{"kind":"Field","name":{"kind":"Name","value":"messageTemplatesCount"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"where"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"AND"},"value":{"kind":"ListValue","values":[{"kind":"Variable","name":{"kind":"Name","value":"where"}},{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"title"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"contains"},"value":{"kind":"Variable","name":{"kind":"Name","value":"search"}}},{"kind":"ObjectField","name":{"kind":"Name","value":"mode"},"value":{"kind":"EnumValue","value":"insensitive"}}]}}]}]}}]}}]}]}}]} as unknown as DocumentNode<GetSentMessagesQuery, GetSentMessagesQueryVariables>;
export const GetAlertsDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"GetAlerts"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"where"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"AlertWhereInput"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"take"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"Int"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"skip"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"Int"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"search"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"alerts"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"where"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"AND"},"value":{"kind":"ListValue","values":[{"kind":"Variable","name":{"kind":"Name","value":"where"}},{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"message"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"contains"},"value":{"kind":"Variable","name":{"kind":"Name","value":"search"}}},{"kind":"ObjectField","name":{"kind":"Name","value":"mode"},"value":{"kind":"EnumValue","value":"insensitive"}}]}}]}]}}]}},{"kind":"Argument","name":{"kind":"Name","value":"orderBy"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"createdAt"},"value":{"kind":"EnumValue","value":"desc"}}]}},{"kind":"Argument","name":{"kind":"Name","value":"take"},"value":{"kind":"Variable","name":{"kind":"Name","value":"take"}}},{"kind":"Argument","name":{"kind":"Name","value":"skip"},"value":{"kind":"Variable","name":{"kind":"Name","value":"skip"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"message"}},{"kind":"Field","name":{"kind":"Name","value":"urgency"}},{"kind":"Field","name":{"kind":"Name","value":"status"}},{"kind":"Field","name":{"kind":"Name","value":"createdAt"}}]}},{"kind":"Field","name":{"kind":"Name","value":"alertsCount"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"where"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"AND"},"value":{"kind":"ListValue","values":[{"kind":"Variable","name":{"kind":"Name","value":"where"}},{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"message"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"contains"},"value":{"kind":"Variable","name":{"kind":"Name","value":"search"}}},{"kind":"ObjectField","name":{"kind":"Name","value":"mode"},"value":{"kind":"EnumValue","value":"insensitive"}}]}}]}]}}]}}]}]}}]} as unknown as DocumentNode<GetAlertsQuery, GetAlertsQueryVariables>;
export const GetAlertDetailDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"GetAlertDetail"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"id"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"alert"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"where"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"id"}}}]}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"message"}},{"kind":"Field","name":{"kind":"Name","value":"urgency"}},{"kind":"Field","name":{"kind":"Name","value":"status"}},{"kind":"Field","name":{"kind":"Name","value":"due_date"}},{"kind":"Field","name":{"kind":"Name","value":"createdAt"}}]}}]}}]} as unknown as DocumentNode<GetAlertDetailQuery, GetAlertDetailQueryVariables>;
export const GetUsersByRoleDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"GetUsersByRole"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"role"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"memberships"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"where"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"role"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"equals"},"value":{"kind":"Variable","name":{"kind":"Name","value":"role"}}}]}}]}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"user"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"email"}},{"kind":"Field","name":{"kind":"Name","value":"name"}}]}}]}}]}}]} as unknown as DocumentNode<GetUsersByRoleQuery, GetUsersByRoleQueryVariables>;
export const OrgByUserDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"OrgByUser"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"userId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"user"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"where"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"userId"}}}]}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"memberships"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"organisation"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"stripeCustomerId"}}]}}]}}]}}]}}]} as unknown as DocumentNode<OrgByUserQuery, OrgByUserQueryVariables>;
export const SetOrgCustDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"SetOrgCust"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"orgId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"custId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"updateOrganisation"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"where"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"orgId"}}}]}},{"kind":"Argument","name":{"kind":"Name","value":"data"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"stripeCustomerId"},"value":{"kind":"Variable","name":{"kind":"Name","value":"custId"}}}]}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}}]}}]}}]} as unknown as DocumentNode<SetOrgCustMutation, SetOrgCustMutationVariables>;
export const CreateSubscriptionDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"CreateSubscription"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"data"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"SubscriptionCreateInput"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"createSubscription"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"data"},"value":{"kind":"Variable","name":{"kind":"Name","value":"data"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}}]}}]}}]} as unknown as DocumentNode<CreateSubscriptionMutation, CreateSubscriptionMutationVariables>;
export const UpdateSubDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"UpdateSub"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"orgId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"stripeSubId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"stripePriceId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"status"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"start"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"DateTime"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"end"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"DateTime"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"updateSubscription"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"where"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"stripeSubscriptionId"},"value":{"kind":"Variable","name":{"kind":"Name","value":"stripeSubId"}}}]}},{"kind":"Argument","name":{"kind":"Name","value":"data"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"organisation"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"connect"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"orgId"}}}]}}]}},{"kind":"ObjectField","name":{"kind":"Name","value":"stripeSubscriptionId"},"value":{"kind":"Variable","name":{"kind":"Name","value":"stripeSubId"}}},{"kind":"ObjectField","name":{"kind":"Name","value":"status"},"value":{"kind":"Variable","name":{"kind":"Name","value":"status"}}},{"kind":"ObjectField","name":{"kind":"Name","value":"startDate"},"value":{"kind":"Variable","name":{"kind":"Name","value":"start"}}},{"kind":"ObjectField","name":{"kind":"Name","value":"currentPeriodEnd"},"value":{"kind":"Variable","name":{"kind":"Name","value":"end"}}}]}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"status"}}]}}]}}]} as unknown as DocumentNode<UpdateSubMutation, UpdateSubMutationVariables>;
export const GetPlansDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"GetPlans"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"plans"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"key"}},{"kind":"Field","name":{"kind":"Name","value":"label"}},{"kind":"Field","name":{"kind":"Name","value":"features"}},{"kind":"Field","name":{"kind":"Name","value":"activePrice"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"amount"}},{"kind":"Field","name":{"kind":"Name","value":"currency"}}]}}]}}]}}]} as unknown as DocumentNode<GetPlansQuery, GetPlansQueryVariables>;
export const FindActivePriceDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"FindActivePrice"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"key"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"plan"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"where"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"key"},"value":{"kind":"Variable","name":{"kind":"Name","value":"key"}}}]}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"activePrice"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"stripePriceId"}}]}}]}}]}}]} as unknown as DocumentNode<FindActivePriceQuery, FindActivePriceQueryVariables>;
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: { input: string; output: string; }
  String: { input: string; output: string; }
  Boolean: { input: boolean; output: boolean; }
  Int: { input: number; output: number; }
  Float: { input: number; output: number; }
  DateTime: { input: any; output: any; }
  /** The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf). */
  JSON: { input: any; output: any; }
  /** The `Upload` scalar type represents a file upload. */
  Upload: { input: any; output: any; }
};

export type Activity = {
  __typename?: 'Activity';
  activity_date?: Maybe<Scalars['DateTime']['output']>;
  activity_type?: Maybe<Scalars['String']['output']>;
  equipment?: Maybe<Equipment>;
  field?: Maybe<Field>;
  gps_track?: Maybe<Scalars['JSON']['output']>;
  id: Scalars['ID']['output'];
  impact?: Maybe<ActivityImpact>;
  notes?: Maybe<Scalars['String']['output']>;
  operator?: Maybe<Operator>;
};

export type ActivityCreateInput = {
  activity_date?: InputMaybe<Scalars['DateTime']['input']>;
  activity_type?: InputMaybe<Scalars['String']['input']>;
  equipment?: InputMaybe<EquipmentRelateToOneForCreateInput>;
  field?: InputMaybe<FieldRelateToOneForCreateInput>;
  gps_track?: InputMaybe<Scalars['JSON']['input']>;
  impact?: InputMaybe<ActivityImpactRelateToOneForCreateInput>;
  notes?: InputMaybe<Scalars['String']['input']>;
  operator?: InputMaybe<OperatorRelateToOneForCreateInput>;
};

export type ActivityImpact = {
  __typename?: 'ActivityImpact';
  acidification_kg_so2eq?: Maybe<Scalars['Float']['output']>;
  activity?: Maybe<Activity>;
  biodiversity_eq?: Maybe<Scalars['Float']['output']>;
  direct_kg_co2e?: Maybe<Scalars['Float']['output']>;
  eutrophication_kg_po4eq?: Maybe<Scalars['Float']['output']>;
  id: Scalars['ID']['output'];
  indirect_kg_co2e?: Maybe<Scalars['Float']['output']>;
  water_m3?: Maybe<Scalars['Float']['output']>;
};

export type ActivityImpactCreateInput = {
  acidification_kg_so2eq?: InputMaybe<Scalars['Float']['input']>;
  activity?: InputMaybe<ActivityRelateToOneForCreateInput>;
  biodiversity_eq?: InputMaybe<Scalars['Float']['input']>;
  direct_kg_co2e?: InputMaybe<Scalars['Float']['input']>;
  eutrophication_kg_po4eq?: InputMaybe<Scalars['Float']['input']>;
  indirect_kg_co2e?: InputMaybe<Scalars['Float']['input']>;
  water_m3?: InputMaybe<Scalars['Float']['input']>;
};

export type ActivityImpactOrderByInput = {
  acidification_kg_so2eq?: InputMaybe<OrderDirection>;
  biodiversity_eq?: InputMaybe<OrderDirection>;
  direct_kg_co2e?: InputMaybe<OrderDirection>;
  eutrophication_kg_po4eq?: InputMaybe<OrderDirection>;
  id?: InputMaybe<OrderDirection>;
  indirect_kg_co2e?: InputMaybe<OrderDirection>;
  water_m3?: InputMaybe<OrderDirection>;
};

export type ActivityImpactRelateToOneForCreateInput = {
  connect?: InputMaybe<ActivityImpactWhereUniqueInput>;
  create?: InputMaybe<ActivityImpactCreateInput>;
};

export type ActivityImpactRelateToOneForUpdateInput = {
  connect?: InputMaybe<ActivityImpactWhereUniqueInput>;
  create?: InputMaybe<ActivityImpactCreateInput>;
  disconnect?: InputMaybe<Scalars['Boolean']['input']>;
};

export type ActivityImpactUpdateArgs = {
  data: ActivityImpactUpdateInput;
  where: ActivityImpactWhereUniqueInput;
};

export type ActivityImpactUpdateInput = {
  acidification_kg_so2eq?: InputMaybe<Scalars['Float']['input']>;
  activity?: InputMaybe<ActivityRelateToOneForUpdateInput>;
  biodiversity_eq?: InputMaybe<Scalars['Float']['input']>;
  direct_kg_co2e?: InputMaybe<Scalars['Float']['input']>;
  eutrophication_kg_po4eq?: InputMaybe<Scalars['Float']['input']>;
  indirect_kg_co2e?: InputMaybe<Scalars['Float']['input']>;
  water_m3?: InputMaybe<Scalars['Float']['input']>;
};

export type ActivityImpactWhereInput = {
  AND?: InputMaybe<Array<ActivityImpactWhereInput>>;
  NOT?: InputMaybe<Array<ActivityImpactWhereInput>>;
  OR?: InputMaybe<Array<ActivityImpactWhereInput>>;
  acidification_kg_so2eq?: InputMaybe<FloatNullableFilter>;
  activity?: InputMaybe<ActivityWhereInput>;
  biodiversity_eq?: InputMaybe<FloatNullableFilter>;
  direct_kg_co2e?: InputMaybe<FloatNullableFilter>;
  eutrophication_kg_po4eq?: InputMaybe<FloatNullableFilter>;
  id?: InputMaybe<IdFilter>;
  indirect_kg_co2e?: InputMaybe<FloatNullableFilter>;
  water_m3?: InputMaybe<FloatNullableFilter>;
};

export type ActivityImpactWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']['input']>;
};

export type ActivityManyRelationFilter = {
  every?: InputMaybe<ActivityWhereInput>;
  none?: InputMaybe<ActivityWhereInput>;
  some?: InputMaybe<ActivityWhereInput>;
};

export type ActivityOrderByInput = {
  activity_date?: InputMaybe<OrderDirection>;
  activity_type?: InputMaybe<OrderDirection>;
  id?: InputMaybe<OrderDirection>;
  notes?: InputMaybe<OrderDirection>;
};

export type ActivityRelateToManyForCreateInput = {
  connect?: InputMaybe<Array<ActivityWhereUniqueInput>>;
  create?: InputMaybe<Array<ActivityCreateInput>>;
};

export type ActivityRelateToManyForUpdateInput = {
  connect?: InputMaybe<Array<ActivityWhereUniqueInput>>;
  create?: InputMaybe<Array<ActivityCreateInput>>;
  disconnect?: InputMaybe<Array<ActivityWhereUniqueInput>>;
  set?: InputMaybe<Array<ActivityWhereUniqueInput>>;
};

export type ActivityRelateToOneForCreateInput = {
  connect?: InputMaybe<ActivityWhereUniqueInput>;
  create?: InputMaybe<ActivityCreateInput>;
};

export type ActivityRelateToOneForUpdateInput = {
  connect?: InputMaybe<ActivityWhereUniqueInput>;
  create?: InputMaybe<ActivityCreateInput>;
  disconnect?: InputMaybe<Scalars['Boolean']['input']>;
};

export type ActivityUpdateArgs = {
  data: ActivityUpdateInput;
  where: ActivityWhereUniqueInput;
};

export type ActivityUpdateInput = {
  activity_date?: InputMaybe<Scalars['DateTime']['input']>;
  activity_type?: InputMaybe<Scalars['String']['input']>;
  equipment?: InputMaybe<EquipmentRelateToOneForUpdateInput>;
  field?: InputMaybe<FieldRelateToOneForUpdateInput>;
  gps_track?: InputMaybe<Scalars['JSON']['input']>;
  impact?: InputMaybe<ActivityImpactRelateToOneForUpdateInput>;
  notes?: InputMaybe<Scalars['String']['input']>;
  operator?: InputMaybe<OperatorRelateToOneForUpdateInput>;
};

export type ActivityWhereInput = {
  AND?: InputMaybe<Array<ActivityWhereInput>>;
  NOT?: InputMaybe<Array<ActivityWhereInput>>;
  OR?: InputMaybe<Array<ActivityWhereInput>>;
  activity_date?: InputMaybe<DateTimeNullableFilter>;
  activity_type?: InputMaybe<StringFilter>;
  equipment?: InputMaybe<EquipmentWhereInput>;
  field?: InputMaybe<FieldWhereInput>;
  id?: InputMaybe<IdFilter>;
  impact?: InputMaybe<ActivityImpactWhereInput>;
  notes?: InputMaybe<StringFilter>;
  operator?: InputMaybe<OperatorWhereInput>;
};

export type ActivityWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']['input']>;
};

export type Alert = {
  __typename?: 'Alert';
  channel?: Maybe<Scalars['String']['output']>;
  createdAt?: Maybe<Scalars['DateTime']['output']>;
  due_date?: Maybe<Scalars['DateTime']['output']>;
  id: Scalars['ID']['output'];
  message?: Maybe<Scalars['String']['output']>;
  organisation?: Maybe<Organisation>;
  requireAcknowledgement?: Maybe<Scalars['Boolean']['output']>;
  rule?: Maybe<RegulatoryRule>;
  status?: Maybe<Scalars['String']['output']>;
  tags?: Maybe<Scalars['JSON']['output']>;
  updatedAt?: Maybe<Scalars['DateTime']['output']>;
  urgency?: Maybe<Scalars['String']['output']>;
  user?: Maybe<User>;
};

export type AlertCreateInput = {
  channel?: InputMaybe<Scalars['String']['input']>;
  createdAt?: InputMaybe<Scalars['DateTime']['input']>;
  due_date?: InputMaybe<Scalars['DateTime']['input']>;
  message?: InputMaybe<Scalars['String']['input']>;
  organisation?: InputMaybe<OrganisationRelateToOneForCreateInput>;
  requireAcknowledgement?: InputMaybe<Scalars['Boolean']['input']>;
  rule?: InputMaybe<RegulatoryRuleRelateToOneForCreateInput>;
  status?: InputMaybe<Scalars['String']['input']>;
  tags?: InputMaybe<Scalars['JSON']['input']>;
  updatedAt?: InputMaybe<Scalars['DateTime']['input']>;
  urgency?: InputMaybe<Scalars['String']['input']>;
  user?: InputMaybe<UserRelateToOneForCreateInput>;
};

export type AlertManyRelationFilter = {
  every?: InputMaybe<AlertWhereInput>;
  none?: InputMaybe<AlertWhereInput>;
  some?: InputMaybe<AlertWhereInput>;
};

export type AlertOrderByInput = {
  channel?: InputMaybe<OrderDirection>;
  createdAt?: InputMaybe<OrderDirection>;
  due_date?: InputMaybe<OrderDirection>;
  id?: InputMaybe<OrderDirection>;
  message?: InputMaybe<OrderDirection>;
  requireAcknowledgement?: InputMaybe<OrderDirection>;
  status?: InputMaybe<OrderDirection>;
  updatedAt?: InputMaybe<OrderDirection>;
  urgency?: InputMaybe<OrderDirection>;
};

export type AlertRelateToManyForCreateInput = {
  connect?: InputMaybe<Array<AlertWhereUniqueInput>>;
  create?: InputMaybe<Array<AlertCreateInput>>;
};

export type AlertRelateToManyForUpdateInput = {
  connect?: InputMaybe<Array<AlertWhereUniqueInput>>;
  create?: InputMaybe<Array<AlertCreateInput>>;
  disconnect?: InputMaybe<Array<AlertWhereUniqueInput>>;
  set?: InputMaybe<Array<AlertWhereUniqueInput>>;
};

export type AlertUpdateArgs = {
  data: AlertUpdateInput;
  where: AlertWhereUniqueInput;
};

export type AlertUpdateInput = {
  channel?: InputMaybe<Scalars['String']['input']>;
  createdAt?: InputMaybe<Scalars['DateTime']['input']>;
  due_date?: InputMaybe<Scalars['DateTime']['input']>;
  message?: InputMaybe<Scalars['String']['input']>;
  organisation?: InputMaybe<OrganisationRelateToOneForUpdateInput>;
  requireAcknowledgement?: InputMaybe<Scalars['Boolean']['input']>;
  rule?: InputMaybe<RegulatoryRuleRelateToOneForUpdateInput>;
  status?: InputMaybe<Scalars['String']['input']>;
  tags?: InputMaybe<Scalars['JSON']['input']>;
  updatedAt?: InputMaybe<Scalars['DateTime']['input']>;
  urgency?: InputMaybe<Scalars['String']['input']>;
  user?: InputMaybe<UserRelateToOneForUpdateInput>;
};

export type AlertWhereInput = {
  AND?: InputMaybe<Array<AlertWhereInput>>;
  NOT?: InputMaybe<Array<AlertWhereInput>>;
  OR?: InputMaybe<Array<AlertWhereInput>>;
  channel?: InputMaybe<StringNullableFilter>;
  createdAt?: InputMaybe<DateTimeNullableFilter>;
  due_date?: InputMaybe<DateTimeNullableFilter>;
  id?: InputMaybe<IdFilter>;
  message?: InputMaybe<StringFilter>;
  organisation?: InputMaybe<OrganisationWhereInput>;
  requireAcknowledgement?: InputMaybe<BooleanFilter>;
  rule?: InputMaybe<RegulatoryRuleWhereInput>;
  status?: InputMaybe<StringNullableFilter>;
  updatedAt?: InputMaybe<DateTimeNullableFilter>;
  urgency?: InputMaybe<StringNullableFilter>;
  user?: InputMaybe<UserWhereInput>;
};

export type AlertWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']['input']>;
};

export type Animal = {
  __typename?: 'Animal';
  box?: Maybe<Box>;
  breed?: Maybe<Breed>;
  dateOfBirth?: Maybe<Scalars['DateTime']['output']>;
  earTag?: Maybe<Scalars['String']['output']>;
  events?: Maybe<Array<AnimalEvent>>;
  eventsCount?: Maybe<Scalars['Int']['output']>;
  field?: Maybe<Field>;
  id: Scalars['ID']['output'];
  lastUpdated?: Maybe<Scalars['DateTime']['output']>;
  nationalId?: Maybe<Scalars['String']['output']>;
  photoUrl?: Maybe<Scalars['String']['output']>;
  productionOrientation?: Maybe<Scalars['String']['output']>;
  sex?: Maybe<Scalars['String']['output']>;
  status?: Maybe<Scalars['String']['output']>;
};


export type AnimalEventsArgs = {
  cursor?: InputMaybe<AnimalEventWhereUniqueInput>;
  orderBy?: Array<AnimalEventOrderByInput>;
  skip?: Scalars['Int']['input'];
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: AnimalEventWhereInput;
};


export type AnimalEventsCountArgs = {
  where?: AnimalEventWhereInput;
};

export type AnimalCreateInput = {
  box?: InputMaybe<BoxRelateToOneForCreateInput>;
  breed?: InputMaybe<BreedRelateToOneForCreateInput>;
  dateOfBirth?: InputMaybe<Scalars['DateTime']['input']>;
  earTag?: InputMaybe<Scalars['String']['input']>;
  events?: InputMaybe<AnimalEventRelateToManyForCreateInput>;
  field?: InputMaybe<FieldRelateToOneForCreateInput>;
  lastUpdated?: InputMaybe<Scalars['DateTime']['input']>;
  nationalId?: InputMaybe<Scalars['String']['input']>;
  photoUrl?: InputMaybe<Scalars['String']['input']>;
  productionOrientation?: InputMaybe<Scalars['String']['input']>;
  sex?: InputMaybe<Scalars['String']['input']>;
  status?: InputMaybe<Scalars['String']['input']>;
};

export type AnimalEvent = {
  __typename?: 'AnimalEvent';
  animal?: Maybe<Animal>;
  eventDate?: Maybe<Scalars['DateTime']['output']>;
  eventType?: Maybe<Scalars['String']['output']>;
  id: Scalars['ID']['output'];
  notes?: Maybe<Scalars['String']['output']>;
  product?: Maybe<Product>;
};

export type AnimalEventCreateInput = {
  animal?: InputMaybe<AnimalRelateToOneForCreateInput>;
  eventDate?: InputMaybe<Scalars['DateTime']['input']>;
  eventType?: InputMaybe<Scalars['String']['input']>;
  notes?: InputMaybe<Scalars['String']['input']>;
  product?: InputMaybe<ProductRelateToOneForCreateInput>;
};

export type AnimalEventManyRelationFilter = {
  every?: InputMaybe<AnimalEventWhereInput>;
  none?: InputMaybe<AnimalEventWhereInput>;
  some?: InputMaybe<AnimalEventWhereInput>;
};

export type AnimalEventOrderByInput = {
  eventDate?: InputMaybe<OrderDirection>;
  eventType?: InputMaybe<OrderDirection>;
  id?: InputMaybe<OrderDirection>;
  notes?: InputMaybe<OrderDirection>;
};

export type AnimalEventRelateToManyForCreateInput = {
  connect?: InputMaybe<Array<AnimalEventWhereUniqueInput>>;
  create?: InputMaybe<Array<AnimalEventCreateInput>>;
};

export type AnimalEventRelateToManyForUpdateInput = {
  connect?: InputMaybe<Array<AnimalEventWhereUniqueInput>>;
  create?: InputMaybe<Array<AnimalEventCreateInput>>;
  disconnect?: InputMaybe<Array<AnimalEventWhereUniqueInput>>;
  set?: InputMaybe<Array<AnimalEventWhereUniqueInput>>;
};

export type AnimalEventUpdateArgs = {
  data: AnimalEventUpdateInput;
  where: AnimalEventWhereUniqueInput;
};

export type AnimalEventUpdateInput = {
  animal?: InputMaybe<AnimalRelateToOneForUpdateInput>;
  eventDate?: InputMaybe<Scalars['DateTime']['input']>;
  eventType?: InputMaybe<Scalars['String']['input']>;
  notes?: InputMaybe<Scalars['String']['input']>;
  product?: InputMaybe<ProductRelateToOneForUpdateInput>;
};

export type AnimalEventWhereInput = {
  AND?: InputMaybe<Array<AnimalEventWhereInput>>;
  NOT?: InputMaybe<Array<AnimalEventWhereInput>>;
  OR?: InputMaybe<Array<AnimalEventWhereInput>>;
  animal?: InputMaybe<AnimalWhereInput>;
  eventDate?: InputMaybe<DateTimeNullableFilter>;
  eventType?: InputMaybe<StringNullableFilter>;
  id?: InputMaybe<IdFilter>;
  notes?: InputMaybe<StringFilter>;
  product?: InputMaybe<ProductWhereInput>;
};

export type AnimalEventWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']['input']>;
};

export type AnimalManyRelationFilter = {
  every?: InputMaybe<AnimalWhereInput>;
  none?: InputMaybe<AnimalWhereInput>;
  some?: InputMaybe<AnimalWhereInput>;
};

export type AnimalOrderByInput = {
  dateOfBirth?: InputMaybe<OrderDirection>;
  earTag?: InputMaybe<OrderDirection>;
  id?: InputMaybe<OrderDirection>;
  lastUpdated?: InputMaybe<OrderDirection>;
  nationalId?: InputMaybe<OrderDirection>;
  photoUrl?: InputMaybe<OrderDirection>;
  productionOrientation?: InputMaybe<OrderDirection>;
  sex?: InputMaybe<OrderDirection>;
  status?: InputMaybe<OrderDirection>;
};

export type AnimalRelateToManyForCreateInput = {
  connect?: InputMaybe<Array<AnimalWhereUniqueInput>>;
  create?: InputMaybe<Array<AnimalCreateInput>>;
};

export type AnimalRelateToManyForUpdateInput = {
  connect?: InputMaybe<Array<AnimalWhereUniqueInput>>;
  create?: InputMaybe<Array<AnimalCreateInput>>;
  disconnect?: InputMaybe<Array<AnimalWhereUniqueInput>>;
  set?: InputMaybe<Array<AnimalWhereUniqueInput>>;
};

export type AnimalRelateToOneForCreateInput = {
  connect?: InputMaybe<AnimalWhereUniqueInput>;
  create?: InputMaybe<AnimalCreateInput>;
};

export type AnimalRelateToOneForUpdateInput = {
  connect?: InputMaybe<AnimalWhereUniqueInput>;
  create?: InputMaybe<AnimalCreateInput>;
  disconnect?: InputMaybe<Scalars['Boolean']['input']>;
};

export type AnimalUpdateArgs = {
  data: AnimalUpdateInput;
  where: AnimalWhereUniqueInput;
};

export type AnimalUpdateInput = {
  box?: InputMaybe<BoxRelateToOneForUpdateInput>;
  breed?: InputMaybe<BreedRelateToOneForUpdateInput>;
  dateOfBirth?: InputMaybe<Scalars['DateTime']['input']>;
  earTag?: InputMaybe<Scalars['String']['input']>;
  events?: InputMaybe<AnimalEventRelateToManyForUpdateInput>;
  field?: InputMaybe<FieldRelateToOneForUpdateInput>;
  lastUpdated?: InputMaybe<Scalars['DateTime']['input']>;
  nationalId?: InputMaybe<Scalars['String']['input']>;
  photoUrl?: InputMaybe<Scalars['String']['input']>;
  productionOrientation?: InputMaybe<Scalars['String']['input']>;
  sex?: InputMaybe<Scalars['String']['input']>;
  status?: InputMaybe<Scalars['String']['input']>;
};

export type AnimalWhereInput = {
  AND?: InputMaybe<Array<AnimalWhereInput>>;
  NOT?: InputMaybe<Array<AnimalWhereInput>>;
  OR?: InputMaybe<Array<AnimalWhereInput>>;
  box?: InputMaybe<BoxWhereInput>;
  breed?: InputMaybe<BreedWhereInput>;
  dateOfBirth?: InputMaybe<DateTimeNullableFilter>;
  earTag?: InputMaybe<StringFilter>;
  events?: InputMaybe<AnimalEventManyRelationFilter>;
  field?: InputMaybe<FieldWhereInput>;
  id?: InputMaybe<IdFilter>;
  lastUpdated?: InputMaybe<DateTimeNullableFilter>;
  nationalId?: InputMaybe<StringFilter>;
  photoUrl?: InputMaybe<StringFilter>;
  productionOrientation?: InputMaybe<StringNullableFilter>;
  sex?: InputMaybe<StringNullableFilter>;
  status?: InputMaybe<StringNullableFilter>;
};

export type AnimalWhereUniqueInput = {
  earTag?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['ID']['input']>;
};

export type Application = {
  __typename?: 'Application';
  appliedAt?: Maybe<Scalars['DateTime']['output']>;
  candidate?: Maybe<JobCandidate>;
  id: Scalars['ID']['output'];
  interviews?: Maybe<Array<Interview>>;
  interviewsCount?: Maybe<Scalars['Int']['output']>;
  job?: Maybe<JobOpening>;
  params?: Maybe<Scalars['JSON']['output']>;
  status?: Maybe<ApplicationStatus>;
  updatedAt?: Maybe<Scalars['DateTime']['output']>;
};


export type ApplicationInterviewsArgs = {
  cursor?: InputMaybe<InterviewWhereUniqueInput>;
  orderBy?: Array<InterviewOrderByInput>;
  skip?: Scalars['Int']['input'];
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InterviewWhereInput;
};


export type ApplicationInterviewsCountArgs = {
  where?: InterviewWhereInput;
};

export type ApplicationCreateInput = {
  appliedAt?: InputMaybe<Scalars['DateTime']['input']>;
  candidate?: InputMaybe<JobCandidateRelateToOneForCreateInput>;
  interviews?: InputMaybe<InterviewRelateToManyForCreateInput>;
  job?: InputMaybe<JobOpeningRelateToOneForCreateInput>;
  params?: InputMaybe<Scalars['JSON']['input']>;
  status?: InputMaybe<ApplicationStatusRelateToOneForCreateInput>;
  updatedAt?: InputMaybe<Scalars['DateTime']['input']>;
};

export type ApplicationManyRelationFilter = {
  every?: InputMaybe<ApplicationWhereInput>;
  none?: InputMaybe<ApplicationWhereInput>;
  some?: InputMaybe<ApplicationWhereInput>;
};

export type ApplicationOrderByInput = {
  appliedAt?: InputMaybe<OrderDirection>;
  id?: InputMaybe<OrderDirection>;
  updatedAt?: InputMaybe<OrderDirection>;
};

export type ApplicationRelateToManyForCreateInput = {
  connect?: InputMaybe<Array<ApplicationWhereUniqueInput>>;
  create?: InputMaybe<Array<ApplicationCreateInput>>;
};

export type ApplicationRelateToManyForUpdateInput = {
  connect?: InputMaybe<Array<ApplicationWhereUniqueInput>>;
  create?: InputMaybe<Array<ApplicationCreateInput>>;
  disconnect?: InputMaybe<Array<ApplicationWhereUniqueInput>>;
  set?: InputMaybe<Array<ApplicationWhereUniqueInput>>;
};

export type ApplicationRelateToOneForCreateInput = {
  connect?: InputMaybe<ApplicationWhereUniqueInput>;
  create?: InputMaybe<ApplicationCreateInput>;
};

export type ApplicationRelateToOneForUpdateInput = {
  connect?: InputMaybe<ApplicationWhereUniqueInput>;
  create?: InputMaybe<ApplicationCreateInput>;
  disconnect?: InputMaybe<Scalars['Boolean']['input']>;
};

export type ApplicationStatus = {
  __typename?: 'ApplicationStatus';
  applications?: Maybe<Array<Application>>;
  applicationsCount?: Maybe<Scalars['Int']['output']>;
  id: Scalars['ID']['output'];
  key?: Maybe<Scalars['String']['output']>;
  labelKey?: Maybe<Scalars['String']['output']>;
  order?: Maybe<Scalars['Int']['output']>;
};


export type ApplicationStatusApplicationsArgs = {
  cursor?: InputMaybe<ApplicationWhereUniqueInput>;
  orderBy?: Array<ApplicationOrderByInput>;
  skip?: Scalars['Int']['input'];
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: ApplicationWhereInput;
};


export type ApplicationStatusApplicationsCountArgs = {
  where?: ApplicationWhereInput;
};

export type ApplicationStatusCreateInput = {
  applications?: InputMaybe<ApplicationRelateToManyForCreateInput>;
  key?: InputMaybe<Scalars['String']['input']>;
  labelKey?: InputMaybe<Scalars['String']['input']>;
  order?: InputMaybe<Scalars['Int']['input']>;
};

export type ApplicationStatusOrderByInput = {
  id?: InputMaybe<OrderDirection>;
  key?: InputMaybe<OrderDirection>;
  labelKey?: InputMaybe<OrderDirection>;
  order?: InputMaybe<OrderDirection>;
};

export type ApplicationStatusRelateToOneForCreateInput = {
  connect?: InputMaybe<ApplicationStatusWhereUniqueInput>;
  create?: InputMaybe<ApplicationStatusCreateInput>;
};

export type ApplicationStatusRelateToOneForUpdateInput = {
  connect?: InputMaybe<ApplicationStatusWhereUniqueInput>;
  create?: InputMaybe<ApplicationStatusCreateInput>;
  disconnect?: InputMaybe<Scalars['Boolean']['input']>;
};

export type ApplicationStatusUpdateArgs = {
  data: ApplicationStatusUpdateInput;
  where: ApplicationStatusWhereUniqueInput;
};

export type ApplicationStatusUpdateInput = {
  applications?: InputMaybe<ApplicationRelateToManyForUpdateInput>;
  key?: InputMaybe<Scalars['String']['input']>;
  labelKey?: InputMaybe<Scalars['String']['input']>;
  order?: InputMaybe<Scalars['Int']['input']>;
};

export type ApplicationStatusWhereInput = {
  AND?: InputMaybe<Array<ApplicationStatusWhereInput>>;
  NOT?: InputMaybe<Array<ApplicationStatusWhereInput>>;
  OR?: InputMaybe<Array<ApplicationStatusWhereInput>>;
  applications?: InputMaybe<ApplicationManyRelationFilter>;
  id?: InputMaybe<IdFilter>;
  key?: InputMaybe<StringFilter>;
  labelKey?: InputMaybe<StringFilter>;
  order?: InputMaybe<IntFilter>;
};

export type ApplicationStatusWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']['input']>;
  key?: InputMaybe<Scalars['String']['input']>;
};

export type ApplicationUpdateArgs = {
  data: ApplicationUpdateInput;
  where: ApplicationWhereUniqueInput;
};

export type ApplicationUpdateInput = {
  appliedAt?: InputMaybe<Scalars['DateTime']['input']>;
  candidate?: InputMaybe<JobCandidateRelateToOneForUpdateInput>;
  interviews?: InputMaybe<InterviewRelateToManyForUpdateInput>;
  job?: InputMaybe<JobOpeningRelateToOneForUpdateInput>;
  params?: InputMaybe<Scalars['JSON']['input']>;
  status?: InputMaybe<ApplicationStatusRelateToOneForUpdateInput>;
  updatedAt?: InputMaybe<Scalars['DateTime']['input']>;
};

export type ApplicationWhereInput = {
  AND?: InputMaybe<Array<ApplicationWhereInput>>;
  NOT?: InputMaybe<Array<ApplicationWhereInput>>;
  OR?: InputMaybe<Array<ApplicationWhereInput>>;
  appliedAt?: InputMaybe<DateTimeNullableFilter>;
  candidate?: InputMaybe<JobCandidateWhereInput>;
  id?: InputMaybe<IdFilter>;
  interviews?: InputMaybe<InterviewManyRelationFilter>;
  job?: InputMaybe<JobOpeningWhereInput>;
  status?: InputMaybe<ApplicationStatusWhereInput>;
  updatedAt?: InputMaybe<DateTimeNullableFilter>;
};

export type ApplicationWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']['input']>;
};

export type AuthenticatedItem = User;

export type Author = {
  __typename?: 'Author';
  avatar?: Maybe<ImageFieldOutput>;
  bio?: Maybe<Scalars['String']['output']>;
  createdAt?: Maybe<Scalars['DateTime']['output']>;
  email?: Maybe<Scalars['String']['output']>;
  id: Scalars['ID']['output'];
  name?: Maybe<Scalars['String']['output']>;
  posts?: Maybe<Array<Post>>;
  postsCount?: Maybe<Scalars['Int']['output']>;
};


export type AuthorPostsArgs = {
  cursor?: InputMaybe<PostWhereUniqueInput>;
  orderBy?: Array<PostOrderByInput>;
  skip?: Scalars['Int']['input'];
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: PostWhereInput;
};


export type AuthorPostsCountArgs = {
  where?: PostWhereInput;
};

export type AuthorCreateInput = {
  avatar?: InputMaybe<ImageFieldInput>;
  bio?: InputMaybe<Scalars['String']['input']>;
  createdAt?: InputMaybe<Scalars['DateTime']['input']>;
  email?: InputMaybe<Scalars['String']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
  posts?: InputMaybe<PostRelateToManyForCreateInput>;
};

export type AuthorOrderByInput = {
  bio?: InputMaybe<OrderDirection>;
  createdAt?: InputMaybe<OrderDirection>;
  email?: InputMaybe<OrderDirection>;
  id?: InputMaybe<OrderDirection>;
  name?: InputMaybe<OrderDirection>;
};

export type AuthorRelateToOneForCreateInput = {
  connect?: InputMaybe<AuthorWhereUniqueInput>;
  create?: InputMaybe<AuthorCreateInput>;
};

export type AuthorRelateToOneForUpdateInput = {
  connect?: InputMaybe<AuthorWhereUniqueInput>;
  create?: InputMaybe<AuthorCreateInput>;
  disconnect?: InputMaybe<Scalars['Boolean']['input']>;
};

export type AuthorUpdateArgs = {
  data: AuthorUpdateInput;
  where: AuthorWhereUniqueInput;
};

export type AuthorUpdateInput = {
  avatar?: InputMaybe<ImageFieldInput>;
  bio?: InputMaybe<Scalars['String']['input']>;
  createdAt?: InputMaybe<Scalars['DateTime']['input']>;
  email?: InputMaybe<Scalars['String']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
  posts?: InputMaybe<PostRelateToManyForUpdateInput>;
};

export type AuthorWhereInput = {
  AND?: InputMaybe<Array<AuthorWhereInput>>;
  NOT?: InputMaybe<Array<AuthorWhereInput>>;
  OR?: InputMaybe<Array<AuthorWhereInput>>;
  bio?: InputMaybe<StringFilter>;
  createdAt?: InputMaybe<DateTimeNullableFilter>;
  email?: InputMaybe<StringFilter>;
  id?: InputMaybe<IdFilter>;
  name?: InputMaybe<StringFilter>;
  posts?: InputMaybe<PostManyRelationFilter>;
};

export type AuthorWhereUniqueInput = {
  email?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['ID']['input']>;
};

export type Barn = {
  __typename?: 'Barn';
  activities?: Maybe<Array<BarnActivity>>;
  activitiesCount?: Maybe<Scalars['Int']['output']>;
  aslCode?: Maybe<Scalars['String']['output']>;
  boxes?: Maybe<Array<Box>>;
  boxesCount?: Maybe<Scalars['Int']['output']>;
  farm?: Maybe<Farm>;
  feedSilos?: Maybe<Array<FeedSilo>>;
  feedSilosCount?: Maybe<Scalars['Int']['output']>;
  geometry?: Maybe<Scalars['JSON']['output']>;
  id: Scalars['ID']['output'];
  milkingEvents?: Maybe<Array<MilkingEvent>>;
  milkingEventsCount?: Maybe<Scalars['Int']['output']>;
  name?: Maybe<Scalars['String']['output']>;
  productionOrientation?: Maybe<Scalars['String']['output']>;
  welfareScore?: Maybe<Scalars['Float']['output']>;
};


export type BarnActivitiesArgs = {
  cursor?: InputMaybe<BarnActivityWhereUniqueInput>;
  orderBy?: Array<BarnActivityOrderByInput>;
  skip?: Scalars['Int']['input'];
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: BarnActivityWhereInput;
};


export type BarnActivitiesCountArgs = {
  where?: BarnActivityWhereInput;
};


export type BarnBoxesArgs = {
  cursor?: InputMaybe<BoxWhereUniqueInput>;
  orderBy?: Array<BoxOrderByInput>;
  skip?: Scalars['Int']['input'];
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: BoxWhereInput;
};


export type BarnBoxesCountArgs = {
  where?: BoxWhereInput;
};


export type BarnFeedSilosArgs = {
  cursor?: InputMaybe<FeedSiloWhereUniqueInput>;
  orderBy?: Array<FeedSiloOrderByInput>;
  skip?: Scalars['Int']['input'];
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: FeedSiloWhereInput;
};


export type BarnFeedSilosCountArgs = {
  where?: FeedSiloWhereInput;
};


export type BarnMilkingEventsArgs = {
  cursor?: InputMaybe<MilkingEventWhereUniqueInput>;
  orderBy?: Array<MilkingEventOrderByInput>;
  skip?: Scalars['Int']['input'];
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: MilkingEventWhereInput;
};


export type BarnMilkingEventsCountArgs = {
  where?: MilkingEventWhereInput;
};

export type BarnActivity = {
  __typename?: 'BarnActivity';
  activityType?: Maybe<Scalars['String']['output']>;
  barn?: Maybe<Barn>;
  box?: Maybe<Box>;
  date?: Maybe<Scalars['DateTime']['output']>;
  duration_h?: Maybe<Scalars['Float']['output']>;
  id: Scalars['ID']['output'];
  operator?: Maybe<Operator>;
};

export type BarnActivityCreateInput = {
  activityType?: InputMaybe<Scalars['String']['input']>;
  barn?: InputMaybe<BarnRelateToOneForCreateInput>;
  box?: InputMaybe<BoxRelateToOneForCreateInput>;
  date?: InputMaybe<Scalars['DateTime']['input']>;
  duration_h?: InputMaybe<Scalars['Float']['input']>;
  operator?: InputMaybe<OperatorRelateToOneForCreateInput>;
};

export type BarnActivityManyRelationFilter = {
  every?: InputMaybe<BarnActivityWhereInput>;
  none?: InputMaybe<BarnActivityWhereInput>;
  some?: InputMaybe<BarnActivityWhereInput>;
};

export type BarnActivityOrderByInput = {
  activityType?: InputMaybe<OrderDirection>;
  date?: InputMaybe<OrderDirection>;
  duration_h?: InputMaybe<OrderDirection>;
  id?: InputMaybe<OrderDirection>;
};

export type BarnActivityRelateToManyForCreateInput = {
  connect?: InputMaybe<Array<BarnActivityWhereUniqueInput>>;
  create?: InputMaybe<Array<BarnActivityCreateInput>>;
};

export type BarnActivityRelateToManyForUpdateInput = {
  connect?: InputMaybe<Array<BarnActivityWhereUniqueInput>>;
  create?: InputMaybe<Array<BarnActivityCreateInput>>;
  disconnect?: InputMaybe<Array<BarnActivityWhereUniqueInput>>;
  set?: InputMaybe<Array<BarnActivityWhereUniqueInput>>;
};

export type BarnActivityUpdateArgs = {
  data: BarnActivityUpdateInput;
  where: BarnActivityWhereUniqueInput;
};

export type BarnActivityUpdateInput = {
  activityType?: InputMaybe<Scalars['String']['input']>;
  barn?: InputMaybe<BarnRelateToOneForUpdateInput>;
  box?: InputMaybe<BoxRelateToOneForUpdateInput>;
  date?: InputMaybe<Scalars['DateTime']['input']>;
  duration_h?: InputMaybe<Scalars['Float']['input']>;
  operator?: InputMaybe<OperatorRelateToOneForUpdateInput>;
};

export type BarnActivityWhereInput = {
  AND?: InputMaybe<Array<BarnActivityWhereInput>>;
  NOT?: InputMaybe<Array<BarnActivityWhereInput>>;
  OR?: InputMaybe<Array<BarnActivityWhereInput>>;
  activityType?: InputMaybe<StringFilter>;
  barn?: InputMaybe<BarnWhereInput>;
  box?: InputMaybe<BoxWhereInput>;
  date?: InputMaybe<DateTimeNullableFilter>;
  duration_h?: InputMaybe<FloatNullableFilter>;
  id?: InputMaybe<IdFilter>;
  operator?: InputMaybe<OperatorWhereInput>;
};

export type BarnActivityWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']['input']>;
};

export type BarnCreateInput = {
  activities?: InputMaybe<BarnActivityRelateToManyForCreateInput>;
  aslCode?: InputMaybe<Scalars['String']['input']>;
  boxes?: InputMaybe<BoxRelateToManyForCreateInput>;
  farm?: InputMaybe<FarmRelateToOneForCreateInput>;
  feedSilos?: InputMaybe<FeedSiloRelateToManyForCreateInput>;
  geometry?: InputMaybe<Scalars['JSON']['input']>;
  milkingEvents?: InputMaybe<MilkingEventRelateToManyForCreateInput>;
  name?: InputMaybe<Scalars['String']['input']>;
  productionOrientation?: InputMaybe<Scalars['String']['input']>;
  welfareScore?: InputMaybe<Scalars['Float']['input']>;
};

export type BarnManyRelationFilter = {
  every?: InputMaybe<BarnWhereInput>;
  none?: InputMaybe<BarnWhereInput>;
  some?: InputMaybe<BarnWhereInput>;
};

export type BarnOrderByInput = {
  aslCode?: InputMaybe<OrderDirection>;
  id?: InputMaybe<OrderDirection>;
  name?: InputMaybe<OrderDirection>;
  productionOrientation?: InputMaybe<OrderDirection>;
  welfareScore?: InputMaybe<OrderDirection>;
};

export type BarnRelateToManyForCreateInput = {
  connect?: InputMaybe<Array<BarnWhereUniqueInput>>;
  create?: InputMaybe<Array<BarnCreateInput>>;
};

export type BarnRelateToManyForUpdateInput = {
  connect?: InputMaybe<Array<BarnWhereUniqueInput>>;
  create?: InputMaybe<Array<BarnCreateInput>>;
  disconnect?: InputMaybe<Array<BarnWhereUniqueInput>>;
  set?: InputMaybe<Array<BarnWhereUniqueInput>>;
};

export type BarnRelateToOneForCreateInput = {
  connect?: InputMaybe<BarnWhereUniqueInput>;
  create?: InputMaybe<BarnCreateInput>;
};

export type BarnRelateToOneForUpdateInput = {
  connect?: InputMaybe<BarnWhereUniqueInput>;
  create?: InputMaybe<BarnCreateInput>;
  disconnect?: InputMaybe<Scalars['Boolean']['input']>;
};

export type BarnUpdateArgs = {
  data: BarnUpdateInput;
  where: BarnWhereUniqueInput;
};

export type BarnUpdateInput = {
  activities?: InputMaybe<BarnActivityRelateToManyForUpdateInput>;
  aslCode?: InputMaybe<Scalars['String']['input']>;
  boxes?: InputMaybe<BoxRelateToManyForUpdateInput>;
  farm?: InputMaybe<FarmRelateToOneForUpdateInput>;
  feedSilos?: InputMaybe<FeedSiloRelateToManyForUpdateInput>;
  geometry?: InputMaybe<Scalars['JSON']['input']>;
  milkingEvents?: InputMaybe<MilkingEventRelateToManyForUpdateInput>;
  name?: InputMaybe<Scalars['String']['input']>;
  productionOrientation?: InputMaybe<Scalars['String']['input']>;
  welfareScore?: InputMaybe<Scalars['Float']['input']>;
};

export type BarnWhereInput = {
  AND?: InputMaybe<Array<BarnWhereInput>>;
  NOT?: InputMaybe<Array<BarnWhereInput>>;
  OR?: InputMaybe<Array<BarnWhereInput>>;
  activities?: InputMaybe<BarnActivityManyRelationFilter>;
  aslCode?: InputMaybe<StringFilter>;
  boxes?: InputMaybe<BoxManyRelationFilter>;
  farm?: InputMaybe<FarmWhereInput>;
  feedSilos?: InputMaybe<FeedSiloManyRelationFilter>;
  id?: InputMaybe<IdFilter>;
  milkingEvents?: InputMaybe<MilkingEventManyRelationFilter>;
  name?: InputMaybe<StringFilter>;
  productionOrientation?: InputMaybe<StringNullableFilter>;
  welfareScore?: InputMaybe<FloatNullableFilter>;
};

export type BarnWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']['input']>;
};

export type BooleanFilter = {
  equals?: InputMaybe<Scalars['Boolean']['input']>;
  not?: InputMaybe<BooleanFilter>;
};

export type Box = {
  __typename?: 'Box';
  animals?: Maybe<Array<Animal>>;
  animalsCount?: Maybe<Scalars['Int']['output']>;
  barn?: Maybe<Barn>;
  beddingType?: Maybe<Scalars['String']['output']>;
  capacity_head?: Maybe<Scalars['Int']['output']>;
  floorArea_m2?: Maybe<Scalars['Float']['output']>;
  id: Scalars['ID']['output'];
  name?: Maybe<Scalars['String']['output']>;
  paddockArea_m2?: Maybe<Scalars['Float']['output']>;
  phase?: Maybe<Scalars['String']['output']>;
};


export type BoxAnimalsArgs = {
  cursor?: InputMaybe<AnimalWhereUniqueInput>;
  orderBy?: Array<AnimalOrderByInput>;
  skip?: Scalars['Int']['input'];
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: AnimalWhereInput;
};


export type BoxAnimalsCountArgs = {
  where?: AnimalWhereInput;
};

export type BoxCreateInput = {
  animals?: InputMaybe<AnimalRelateToManyForCreateInput>;
  barn?: InputMaybe<BarnRelateToOneForCreateInput>;
  beddingType?: InputMaybe<Scalars['String']['input']>;
  capacity_head?: InputMaybe<Scalars['Int']['input']>;
  floorArea_m2?: InputMaybe<Scalars['Float']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
  paddockArea_m2?: InputMaybe<Scalars['Float']['input']>;
  phase?: InputMaybe<Scalars['String']['input']>;
};

export type BoxManyRelationFilter = {
  every?: InputMaybe<BoxWhereInput>;
  none?: InputMaybe<BoxWhereInput>;
  some?: InputMaybe<BoxWhereInput>;
};

export type BoxOrderByInput = {
  beddingType?: InputMaybe<OrderDirection>;
  capacity_head?: InputMaybe<OrderDirection>;
  floorArea_m2?: InputMaybe<OrderDirection>;
  id?: InputMaybe<OrderDirection>;
  name?: InputMaybe<OrderDirection>;
  paddockArea_m2?: InputMaybe<OrderDirection>;
  phase?: InputMaybe<OrderDirection>;
};

export type BoxRelateToManyForCreateInput = {
  connect?: InputMaybe<Array<BoxWhereUniqueInput>>;
  create?: InputMaybe<Array<BoxCreateInput>>;
};

export type BoxRelateToManyForUpdateInput = {
  connect?: InputMaybe<Array<BoxWhereUniqueInput>>;
  create?: InputMaybe<Array<BoxCreateInput>>;
  disconnect?: InputMaybe<Array<BoxWhereUniqueInput>>;
  set?: InputMaybe<Array<BoxWhereUniqueInput>>;
};

export type BoxRelateToOneForCreateInput = {
  connect?: InputMaybe<BoxWhereUniqueInput>;
  create?: InputMaybe<BoxCreateInput>;
};

export type BoxRelateToOneForUpdateInput = {
  connect?: InputMaybe<BoxWhereUniqueInput>;
  create?: InputMaybe<BoxCreateInput>;
  disconnect?: InputMaybe<Scalars['Boolean']['input']>;
};

export type BoxUpdateArgs = {
  data: BoxUpdateInput;
  where: BoxWhereUniqueInput;
};

export type BoxUpdateInput = {
  animals?: InputMaybe<AnimalRelateToManyForUpdateInput>;
  barn?: InputMaybe<BarnRelateToOneForUpdateInput>;
  beddingType?: InputMaybe<Scalars['String']['input']>;
  capacity_head?: InputMaybe<Scalars['Int']['input']>;
  floorArea_m2?: InputMaybe<Scalars['Float']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
  paddockArea_m2?: InputMaybe<Scalars['Float']['input']>;
  phase?: InputMaybe<Scalars['String']['input']>;
};

export type BoxWhereInput = {
  AND?: InputMaybe<Array<BoxWhereInput>>;
  NOT?: InputMaybe<Array<BoxWhereInput>>;
  OR?: InputMaybe<Array<BoxWhereInput>>;
  animals?: InputMaybe<AnimalManyRelationFilter>;
  barn?: InputMaybe<BarnWhereInput>;
  beddingType?: InputMaybe<StringFilter>;
  capacity_head?: InputMaybe<IntNullableFilter>;
  floorArea_m2?: InputMaybe<FloatNullableFilter>;
  id?: InputMaybe<IdFilter>;
  name?: InputMaybe<StringFilter>;
  paddockArea_m2?: InputMaybe<FloatNullableFilter>;
  phase?: InputMaybe<StringNullableFilter>;
};

export type BoxWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']['input']>;
};

export type Breed = {
  __typename?: 'Breed';
  animals?: Maybe<Array<Animal>>;
  animalsCount?: Maybe<Scalars['Int']['output']>;
  description?: Maybe<Scalars['String']['output']>;
  id: Scalars['ID']['output'];
  name?: Maybe<Scalars['String']['output']>;
  photoUrl?: Maybe<Scalars['String']['output']>;
};


export type BreedAnimalsArgs = {
  cursor?: InputMaybe<AnimalWhereUniqueInput>;
  orderBy?: Array<AnimalOrderByInput>;
  skip?: Scalars['Int']['input'];
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: AnimalWhereInput;
};


export type BreedAnimalsCountArgs = {
  where?: AnimalWhereInput;
};

export type BreedCreateInput = {
  animals?: InputMaybe<AnimalRelateToManyForCreateInput>;
  description?: InputMaybe<Scalars['String']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
  photoUrl?: InputMaybe<Scalars['String']['input']>;
};

export type BreedOrderByInput = {
  description?: InputMaybe<OrderDirection>;
  id?: InputMaybe<OrderDirection>;
  name?: InputMaybe<OrderDirection>;
  photoUrl?: InputMaybe<OrderDirection>;
};

export type BreedRelateToOneForCreateInput = {
  connect?: InputMaybe<BreedWhereUniqueInput>;
  create?: InputMaybe<BreedCreateInput>;
};

export type BreedRelateToOneForUpdateInput = {
  connect?: InputMaybe<BreedWhereUniqueInput>;
  create?: InputMaybe<BreedCreateInput>;
  disconnect?: InputMaybe<Scalars['Boolean']['input']>;
};

export type BreedUpdateArgs = {
  data: BreedUpdateInput;
  where: BreedWhereUniqueInput;
};

export type BreedUpdateInput = {
  animals?: InputMaybe<AnimalRelateToManyForUpdateInput>;
  description?: InputMaybe<Scalars['String']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
  photoUrl?: InputMaybe<Scalars['String']['input']>;
};

export type BreedWhereInput = {
  AND?: InputMaybe<Array<BreedWhereInput>>;
  NOT?: InputMaybe<Array<BreedWhereInput>>;
  OR?: InputMaybe<Array<BreedWhereInput>>;
  animals?: InputMaybe<AnimalManyRelationFilter>;
  description?: InputMaybe<StringFilter>;
  id?: InputMaybe<IdFilter>;
  name?: InputMaybe<StringFilter>;
  photoUrl?: InputMaybe<StringFilter>;
};

export type BreedWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']['input']>;
};

export type CarbonOffsetFactor = {
  __typename?: 'CarbonOffsetFactor';
  cropType?: Maybe<CropType>;
  id: Scalars['ID']['output'];
  max?: Maybe<Scalars['Float']['output']>;
  mean?: Maybe<Scalars['Float']['output']>;
  min?: Maybe<Scalars['Float']['output']>;
  sustainablePractice?: Maybe<SustainablePractice>;
};

export type CarbonOffsetFactorCreateInput = {
  cropType?: InputMaybe<CropTypeRelateToOneForCreateInput>;
  max?: InputMaybe<Scalars['Float']['input']>;
  mean?: InputMaybe<Scalars['Float']['input']>;
  min?: InputMaybe<Scalars['Float']['input']>;
  sustainablePractice?: InputMaybe<SustainablePracticeRelateToOneForCreateInput>;
};

export type CarbonOffsetFactorManyRelationFilter = {
  every?: InputMaybe<CarbonOffsetFactorWhereInput>;
  none?: InputMaybe<CarbonOffsetFactorWhereInput>;
  some?: InputMaybe<CarbonOffsetFactorWhereInput>;
};

export type CarbonOffsetFactorOrderByInput = {
  id?: InputMaybe<OrderDirection>;
  max?: InputMaybe<OrderDirection>;
  mean?: InputMaybe<OrderDirection>;
  min?: InputMaybe<OrderDirection>;
};

export type CarbonOffsetFactorRelateToManyForCreateInput = {
  connect?: InputMaybe<Array<CarbonOffsetFactorWhereUniqueInput>>;
  create?: InputMaybe<Array<CarbonOffsetFactorCreateInput>>;
};

export type CarbonOffsetFactorRelateToManyForUpdateInput = {
  connect?: InputMaybe<Array<CarbonOffsetFactorWhereUniqueInput>>;
  create?: InputMaybe<Array<CarbonOffsetFactorCreateInput>>;
  disconnect?: InputMaybe<Array<CarbonOffsetFactorWhereUniqueInput>>;
  set?: InputMaybe<Array<CarbonOffsetFactorWhereUniqueInput>>;
};

export type CarbonOffsetFactorUpdateArgs = {
  data: CarbonOffsetFactorUpdateInput;
  where: CarbonOffsetFactorWhereUniqueInput;
};

export type CarbonOffsetFactorUpdateInput = {
  cropType?: InputMaybe<CropTypeRelateToOneForUpdateInput>;
  max?: InputMaybe<Scalars['Float']['input']>;
  mean?: InputMaybe<Scalars['Float']['input']>;
  min?: InputMaybe<Scalars['Float']['input']>;
  sustainablePractice?: InputMaybe<SustainablePracticeRelateToOneForUpdateInput>;
};

export type CarbonOffsetFactorWhereInput = {
  AND?: InputMaybe<Array<CarbonOffsetFactorWhereInput>>;
  NOT?: InputMaybe<Array<CarbonOffsetFactorWhereInput>>;
  OR?: InputMaybe<Array<CarbonOffsetFactorWhereInput>>;
  cropType?: InputMaybe<CropTypeWhereInput>;
  id?: InputMaybe<IdFilter>;
  max?: InputMaybe<FloatNullableFilter>;
  mean?: InputMaybe<FloatNullableFilter>;
  min?: InputMaybe<FloatNullableFilter>;
  sustainablePractice?: InputMaybe<SustainablePracticeWhereInput>;
};

export type CarbonOffsetFactorWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']['input']>;
};

export type Category = {
  __typename?: 'Category';
  id: Scalars['ID']['output'];
  name?: Maybe<Scalars['String']['output']>;
  posts?: Maybe<Array<Post>>;
  postsCount?: Maybe<Scalars['Int']['output']>;
};


export type CategoryPostsArgs = {
  cursor?: InputMaybe<PostWhereUniqueInput>;
  orderBy?: Array<PostOrderByInput>;
  skip?: Scalars['Int']['input'];
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: PostWhereInput;
};


export type CategoryPostsCountArgs = {
  where?: PostWhereInput;
};

export type CategoryCreateInput = {
  name?: InputMaybe<Scalars['String']['input']>;
  posts?: InputMaybe<PostRelateToManyForCreateInput>;
};

export type CategoryKpi = {
  __typename?: 'CategoryKPI';
  id: Scalars['ID']['output'];
  kpis?: Maybe<Array<Kpi>>;
  kpisCount?: Maybe<Scalars['Int']['output']>;
  name?: Maybe<Scalars['String']['output']>;
};


export type CategoryKpiKpisArgs = {
  cursor?: InputMaybe<KpiWhereUniqueInput>;
  orderBy?: Array<KpiOrderByInput>;
  skip?: Scalars['Int']['input'];
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: KpiWhereInput;
};


export type CategoryKpiKpisCountArgs = {
  where?: KpiWhereInput;
};

export type CategoryKpiCreateInput = {
  kpis?: InputMaybe<KpiRelateToManyForCreateInput>;
  name?: InputMaybe<Scalars['String']['input']>;
};

export type CategoryKpiOrderByInput = {
  id?: InputMaybe<OrderDirection>;
  name?: InputMaybe<OrderDirection>;
};

export type CategoryKpiRelateToOneForCreateInput = {
  connect?: InputMaybe<CategoryKpiWhereUniqueInput>;
  create?: InputMaybe<CategoryKpiCreateInput>;
};

export type CategoryKpiRelateToOneForUpdateInput = {
  connect?: InputMaybe<CategoryKpiWhereUniqueInput>;
  create?: InputMaybe<CategoryKpiCreateInput>;
  disconnect?: InputMaybe<Scalars['Boolean']['input']>;
};

export type CategoryKpiUpdateArgs = {
  data: CategoryKpiUpdateInput;
  where: CategoryKpiWhereUniqueInput;
};

export type CategoryKpiUpdateInput = {
  kpis?: InputMaybe<KpiRelateToManyForUpdateInput>;
  name?: InputMaybe<Scalars['String']['input']>;
};

export type CategoryKpiWhereInput = {
  AND?: InputMaybe<Array<CategoryKpiWhereInput>>;
  NOT?: InputMaybe<Array<CategoryKpiWhereInput>>;
  OR?: InputMaybe<Array<CategoryKpiWhereInput>>;
  id?: InputMaybe<IdFilter>;
  kpis?: InputMaybe<KpiManyRelationFilter>;
  name?: InputMaybe<StringFilter>;
};

export type CategoryKpiWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']['input']>;
};

export type CategoryOrderByInput = {
  id?: InputMaybe<OrderDirection>;
  name?: InputMaybe<OrderDirection>;
};

export type CategoryRelateToOneForCreateInput = {
  connect?: InputMaybe<CategoryWhereUniqueInput>;
  create?: InputMaybe<CategoryCreateInput>;
};

export type CategoryRelateToOneForUpdateInput = {
  connect?: InputMaybe<CategoryWhereUniqueInput>;
  create?: InputMaybe<CategoryCreateInput>;
  disconnect?: InputMaybe<Scalars['Boolean']['input']>;
};

export type CategoryUpdateArgs = {
  data: CategoryUpdateInput;
  where: CategoryWhereUniqueInput;
};

export type CategoryUpdateInput = {
  name?: InputMaybe<Scalars['String']['input']>;
  posts?: InputMaybe<PostRelateToManyForUpdateInput>;
};

export type CategoryWhereInput = {
  AND?: InputMaybe<Array<CategoryWhereInput>>;
  NOT?: InputMaybe<Array<CategoryWhereInput>>;
  OR?: InputMaybe<Array<CategoryWhereInput>>;
  id?: InputMaybe<IdFilter>;
  name?: InputMaybe<StringFilter>;
  posts?: InputMaybe<PostManyRelationFilter>;
};

export type CategoryWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']['input']>;
};

export type Chat = {
  __typename?: 'Chat';
  createdAt?: Maybe<Scalars['DateTime']['output']>;
  createdBy?: Maybe<User>;
  id: Scalars['ID']['output'];
  messages?: Maybe<Scalars['JSON']['output']>;
  title?: Maybe<Scalars['String']['output']>;
};

export type ChatCreateInput = {
  createdAt?: InputMaybe<Scalars['DateTime']['input']>;
  createdBy?: InputMaybe<UserRelateToOneForCreateInput>;
  messages?: InputMaybe<Scalars['JSON']['input']>;
  title?: InputMaybe<Scalars['String']['input']>;
};

export type ChatManyRelationFilter = {
  every?: InputMaybe<ChatWhereInput>;
  none?: InputMaybe<ChatWhereInput>;
  some?: InputMaybe<ChatWhereInput>;
};

export type ChatOrderByInput = {
  createdAt?: InputMaybe<OrderDirection>;
  id?: InputMaybe<OrderDirection>;
  title?: InputMaybe<OrderDirection>;
};

export type ChatRelateToManyForCreateInput = {
  connect?: InputMaybe<Array<ChatWhereUniqueInput>>;
  create?: InputMaybe<Array<ChatCreateInput>>;
};

export type ChatRelateToManyForUpdateInput = {
  connect?: InputMaybe<Array<ChatWhereUniqueInput>>;
  create?: InputMaybe<Array<ChatCreateInput>>;
  disconnect?: InputMaybe<Array<ChatWhereUniqueInput>>;
  set?: InputMaybe<Array<ChatWhereUniqueInput>>;
};

export type ChatUpdateArgs = {
  data: ChatUpdateInput;
  where: ChatWhereUniqueInput;
};

export type ChatUpdateInput = {
  createdAt?: InputMaybe<Scalars['DateTime']['input']>;
  createdBy?: InputMaybe<UserRelateToOneForUpdateInput>;
  messages?: InputMaybe<Scalars['JSON']['input']>;
  title?: InputMaybe<Scalars['String']['input']>;
};

export type ChatWhereInput = {
  AND?: InputMaybe<Array<ChatWhereInput>>;
  NOT?: InputMaybe<Array<ChatWhereInput>>;
  OR?: InputMaybe<Array<ChatWhereInput>>;
  createdAt?: InputMaybe<DateTimeNullableFilter>;
  createdBy?: InputMaybe<UserWhereInput>;
  id?: InputMaybe<IdFilter>;
  title?: InputMaybe<StringFilter>;
};

export type ChatWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']['input']>;
};

export type CreateInitialUserInput = {
  email?: InputMaybe<Scalars['String']['input']>;
  isAdmin?: InputMaybe<Scalars['Boolean']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
  password?: InputMaybe<Scalars['String']['input']>;
};

export type Crop = {
  __typename?: 'Crop';
  boundary?: Maybe<Scalars['JSON']['output']>;
  cropAreaHectares?: Maybe<Scalars['Float']['output']>;
  cropType?: Maybe<CropType>;
  field?: Maybe<Field>;
  id: Scalars['ID']['output'];
  photoUrl?: Maybe<Scalars['String']['output']>;
  plantedDate?: Maybe<Scalars['DateTime']['output']>;
};

export type CropCreateInput = {
  boundary?: InputMaybe<Scalars['JSON']['input']>;
  cropAreaHectares?: InputMaybe<Scalars['Float']['input']>;
  cropType?: InputMaybe<CropTypeRelateToOneForCreateInput>;
  field?: InputMaybe<FieldRelateToOneForCreateInput>;
  photoUrl?: InputMaybe<Scalars['String']['input']>;
  plantedDate?: InputMaybe<Scalars['DateTime']['input']>;
};

export type CropManyRelationFilter = {
  every?: InputMaybe<CropWhereInput>;
  none?: InputMaybe<CropWhereInput>;
  some?: InputMaybe<CropWhereInput>;
};

export type CropOrderByInput = {
  cropAreaHectares?: InputMaybe<OrderDirection>;
  id?: InputMaybe<OrderDirection>;
  photoUrl?: InputMaybe<OrderDirection>;
  plantedDate?: InputMaybe<OrderDirection>;
};

export type CropRelateToManyForCreateInput = {
  connect?: InputMaybe<Array<CropWhereUniqueInput>>;
  create?: InputMaybe<Array<CropCreateInput>>;
};

export type CropRelateToManyForUpdateInput = {
  connect?: InputMaybe<Array<CropWhereUniqueInput>>;
  create?: InputMaybe<Array<CropCreateInput>>;
  disconnect?: InputMaybe<Array<CropWhereUniqueInput>>;
  set?: InputMaybe<Array<CropWhereUniqueInput>>;
};

export type CropType = {
  __typename?: 'CropType';
  carbonOffsetFactors?: Maybe<Array<CarbonOffsetFactor>>;
  carbonOffsetFactorsCount?: Maybe<Scalars['Int']['output']>;
  crops?: Maybe<Array<Crop>>;
  cropsCount?: Maybe<Scalars['Int']['output']>;
  id: Scalars['ID']['output'];
  name?: Maybe<Scalars['String']['output']>;
};


export type CropTypeCarbonOffsetFactorsArgs = {
  cursor?: InputMaybe<CarbonOffsetFactorWhereUniqueInput>;
  orderBy?: Array<CarbonOffsetFactorOrderByInput>;
  skip?: Scalars['Int']['input'];
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: CarbonOffsetFactorWhereInput;
};


export type CropTypeCarbonOffsetFactorsCountArgs = {
  where?: CarbonOffsetFactorWhereInput;
};


export type CropTypeCropsArgs = {
  cursor?: InputMaybe<CropWhereUniqueInput>;
  orderBy?: Array<CropOrderByInput>;
  skip?: Scalars['Int']['input'];
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: CropWhereInput;
};


export type CropTypeCropsCountArgs = {
  where?: CropWhereInput;
};

export type CropTypeCreateInput = {
  carbonOffsetFactors?: InputMaybe<CarbonOffsetFactorRelateToManyForCreateInput>;
  crops?: InputMaybe<CropRelateToManyForCreateInput>;
  name?: InputMaybe<Scalars['String']['input']>;
};

export type CropTypeOrderByInput = {
  id?: InputMaybe<OrderDirection>;
  name?: InputMaybe<OrderDirection>;
};

export type CropTypeRelateToOneForCreateInput = {
  connect?: InputMaybe<CropTypeWhereUniqueInput>;
  create?: InputMaybe<CropTypeCreateInput>;
};

export type CropTypeRelateToOneForUpdateInput = {
  connect?: InputMaybe<CropTypeWhereUniqueInput>;
  create?: InputMaybe<CropTypeCreateInput>;
  disconnect?: InputMaybe<Scalars['Boolean']['input']>;
};

export type CropTypeUpdateArgs = {
  data: CropTypeUpdateInput;
  where: CropTypeWhereUniqueInput;
};

export type CropTypeUpdateInput = {
  carbonOffsetFactors?: InputMaybe<CarbonOffsetFactorRelateToManyForUpdateInput>;
  crops?: InputMaybe<CropRelateToManyForUpdateInput>;
  name?: InputMaybe<Scalars['String']['input']>;
};

export type CropTypeWhereInput = {
  AND?: InputMaybe<Array<CropTypeWhereInput>>;
  NOT?: InputMaybe<Array<CropTypeWhereInput>>;
  OR?: InputMaybe<Array<CropTypeWhereInput>>;
  carbonOffsetFactors?: InputMaybe<CarbonOffsetFactorManyRelationFilter>;
  crops?: InputMaybe<CropManyRelationFilter>;
  id?: InputMaybe<IdFilter>;
  name?: InputMaybe<StringFilter>;
};

export type CropTypeWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']['input']>;
};

export type CropUpdateArgs = {
  data: CropUpdateInput;
  where: CropWhereUniqueInput;
};

export type CropUpdateInput = {
  boundary?: InputMaybe<Scalars['JSON']['input']>;
  cropAreaHectares?: InputMaybe<Scalars['Float']['input']>;
  cropType?: InputMaybe<CropTypeRelateToOneForUpdateInput>;
  field?: InputMaybe<FieldRelateToOneForUpdateInput>;
  photoUrl?: InputMaybe<Scalars['String']['input']>;
  plantedDate?: InputMaybe<Scalars['DateTime']['input']>;
};

export type CropWhereInput = {
  AND?: InputMaybe<Array<CropWhereInput>>;
  NOT?: InputMaybe<Array<CropWhereInput>>;
  OR?: InputMaybe<Array<CropWhereInput>>;
  cropAreaHectares?: InputMaybe<FloatNullableFilter>;
  cropType?: InputMaybe<CropTypeWhereInput>;
  field?: InputMaybe<FieldWhereInput>;
  id?: InputMaybe<IdFilter>;
  photoUrl?: InputMaybe<StringFilter>;
  plantedDate?: InputMaybe<DateTimeNullableFilter>;
};

export type CropWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']['input']>;
};

export type DateTimeFilter = {
  equals?: InputMaybe<Scalars['DateTime']['input']>;
  gt?: InputMaybe<Scalars['DateTime']['input']>;
  gte?: InputMaybe<Scalars['DateTime']['input']>;
  in?: InputMaybe<Array<Scalars['DateTime']['input']>>;
  lt?: InputMaybe<Scalars['DateTime']['input']>;
  lte?: InputMaybe<Scalars['DateTime']['input']>;
  not?: InputMaybe<DateTimeFilter>;
  notIn?: InputMaybe<Array<Scalars['DateTime']['input']>>;
};

export type DateTimeNullableFilter = {
  equals?: InputMaybe<Scalars['DateTime']['input']>;
  gt?: InputMaybe<Scalars['DateTime']['input']>;
  gte?: InputMaybe<Scalars['DateTime']['input']>;
  in?: InputMaybe<Array<Scalars['DateTime']['input']>>;
  lt?: InputMaybe<Scalars['DateTime']['input']>;
  lte?: InputMaybe<Scalars['DateTime']['input']>;
  not?: InputMaybe<DateTimeNullableFilter>;
  notIn?: InputMaybe<Array<Scalars['DateTime']['input']>>;
};

export type Document = {
  __typename?: 'Document';
  id: Scalars['ID']['output'];
  title?: Maybe<Scalars['String']['output']>;
  uploadedAt?: Maybe<Scalars['DateTime']['output']>;
  url?: Maybe<Scalars['String']['output']>;
};

export type DocumentCreateInput = {
  title?: InputMaybe<Scalars['String']['input']>;
  uploadedAt?: InputMaybe<Scalars['DateTime']['input']>;
  url?: InputMaybe<Scalars['String']['input']>;
};

export type DocumentOrderByInput = {
  id?: InputMaybe<OrderDirection>;
  title?: InputMaybe<OrderDirection>;
  uploadedAt?: InputMaybe<OrderDirection>;
  url?: InputMaybe<OrderDirection>;
};

export type DocumentUpdateArgs = {
  data: DocumentUpdateInput;
  where: DocumentWhereUniqueInput;
};

export type DocumentUpdateInput = {
  title?: InputMaybe<Scalars['String']['input']>;
  uploadedAt?: InputMaybe<Scalars['DateTime']['input']>;
  url?: InputMaybe<Scalars['String']['input']>;
};

export type DocumentWhereInput = {
  AND?: InputMaybe<Array<DocumentWhereInput>>;
  NOT?: InputMaybe<Array<DocumentWhereInput>>;
  OR?: InputMaybe<Array<DocumentWhereInput>>;
  id?: InputMaybe<IdFilter>;
  title?: InputMaybe<StringFilter>;
  uploadedAt?: InputMaybe<DateTimeNullableFilter>;
  url?: InputMaybe<StringFilter>;
};

export type DocumentWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']['input']>;
};

export type EcoScheme = {
  __typename?: 'EcoScheme';
  id: Scalars['ID']['output'];
  name?: Maybe<Scalars['String']['output']>;
  payment_eur_per_ha?: Maybe<Scalars['Float']['output']>;
  rule_logic_json?: Maybe<Scalars['JSON']['output']>;
};

export type EcoSchemeCreateInput = {
  name?: InputMaybe<Scalars['String']['input']>;
  payment_eur_per_ha?: InputMaybe<Scalars['Float']['input']>;
  rule_logic_json?: InputMaybe<Scalars['JSON']['input']>;
};

export type EcoSchemeOrderByInput = {
  id?: InputMaybe<OrderDirection>;
  name?: InputMaybe<OrderDirection>;
  payment_eur_per_ha?: InputMaybe<OrderDirection>;
};

export type EcoSchemeUpdateArgs = {
  data: EcoSchemeUpdateInput;
  where: EcoSchemeWhereUniqueInput;
};

export type EcoSchemeUpdateInput = {
  name?: InputMaybe<Scalars['String']['input']>;
  payment_eur_per_ha?: InputMaybe<Scalars['Float']['input']>;
  rule_logic_json?: InputMaybe<Scalars['JSON']['input']>;
};

export type EcoSchemeWhereInput = {
  AND?: InputMaybe<Array<EcoSchemeWhereInput>>;
  NOT?: InputMaybe<Array<EcoSchemeWhereInput>>;
  OR?: InputMaybe<Array<EcoSchemeWhereInput>>;
  id?: InputMaybe<IdFilter>;
  name?: InputMaybe<StringFilter>;
  payment_eur_per_ha?: InputMaybe<FloatNullableFilter>;
};

export type EcoSchemeWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']['input']>;
};

export type EmissionScenario = {
  __typename?: 'EmissionScenario';
  description?: Maybe<Scalars['String']['output']>;
  farm?: Maybe<Farm>;
  id: Scalars['ID']['output'];
  name?: Maybe<Scalars['String']['output']>;
  parameters_json?: Maybe<Scalars['JSON']['output']>;
  projected_10yr_carbon_sequestration_t?: Maybe<Scalars['Float']['output']>;
  projected_emission_reduction_kg_co2e?: Maybe<Scalars['Float']['output']>;
};

export type EmissionScenarioCreateInput = {
  description?: InputMaybe<Scalars['String']['input']>;
  farm?: InputMaybe<FarmRelateToOneForCreateInput>;
  name?: InputMaybe<Scalars['String']['input']>;
  parameters_json?: InputMaybe<Scalars['JSON']['input']>;
  projected_10yr_carbon_sequestration_t?: InputMaybe<Scalars['Float']['input']>;
  projected_emission_reduction_kg_co2e?: InputMaybe<Scalars['Float']['input']>;
};

export type EmissionScenarioOrderByInput = {
  description?: InputMaybe<OrderDirection>;
  id?: InputMaybe<OrderDirection>;
  name?: InputMaybe<OrderDirection>;
  projected_10yr_carbon_sequestration_t?: InputMaybe<OrderDirection>;
  projected_emission_reduction_kg_co2e?: InputMaybe<OrderDirection>;
};

export type EmissionScenarioUpdateArgs = {
  data: EmissionScenarioUpdateInput;
  where: EmissionScenarioWhereUniqueInput;
};

export type EmissionScenarioUpdateInput = {
  description?: InputMaybe<Scalars['String']['input']>;
  farm?: InputMaybe<FarmRelateToOneForUpdateInput>;
  name?: InputMaybe<Scalars['String']['input']>;
  parameters_json?: InputMaybe<Scalars['JSON']['input']>;
  projected_10yr_carbon_sequestration_t?: InputMaybe<Scalars['Float']['input']>;
  projected_emission_reduction_kg_co2e?: InputMaybe<Scalars['Float']['input']>;
};

export type EmissionScenarioWhereInput = {
  AND?: InputMaybe<Array<EmissionScenarioWhereInput>>;
  NOT?: InputMaybe<Array<EmissionScenarioWhereInput>>;
  OR?: InputMaybe<Array<EmissionScenarioWhereInput>>;
  description?: InputMaybe<StringFilter>;
  farm?: InputMaybe<FarmWhereInput>;
  id?: InputMaybe<IdFilter>;
  name?: InputMaybe<StringFilter>;
  projected_10yr_carbon_sequestration_t?: InputMaybe<FloatNullableFilter>;
  projected_emission_reduction_kg_co2e?: InputMaybe<FloatNullableFilter>;
};

export type EmissionScenarioWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']['input']>;
};

export type Equipment = {
  __typename?: 'Equipment';
  farm?: Maybe<Farm>;
  id: Scalars['ID']['output'];
  name?: Maybe<Scalars['String']['output']>;
};

export type EquipmentCreateInput = {
  farm?: InputMaybe<FarmRelateToOneForCreateInput>;
  name?: InputMaybe<Scalars['String']['input']>;
};

export type EquipmentOrderByInput = {
  id?: InputMaybe<OrderDirection>;
  name?: InputMaybe<OrderDirection>;
};

export type EquipmentRelateToOneForCreateInput = {
  connect?: InputMaybe<EquipmentWhereUniqueInput>;
  create?: InputMaybe<EquipmentCreateInput>;
};

export type EquipmentRelateToOneForUpdateInput = {
  connect?: InputMaybe<EquipmentWhereUniqueInput>;
  create?: InputMaybe<EquipmentCreateInput>;
  disconnect?: InputMaybe<Scalars['Boolean']['input']>;
};

export type EquipmentUpdateArgs = {
  data: EquipmentUpdateInput;
  where: EquipmentWhereUniqueInput;
};

export type EquipmentUpdateInput = {
  farm?: InputMaybe<FarmRelateToOneForUpdateInput>;
  name?: InputMaybe<Scalars['String']['input']>;
};

export type EquipmentWhereInput = {
  AND?: InputMaybe<Array<EquipmentWhereInput>>;
  NOT?: InputMaybe<Array<EquipmentWhereInput>>;
  OR?: InputMaybe<Array<EquipmentWhereInput>>;
  farm?: InputMaybe<FarmWhereInput>;
  id?: InputMaybe<IdFilter>;
  name?: InputMaybe<StringFilter>;
};

export type EquipmentWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']['input']>;
};

export type Farm = {
  __typename?: 'Farm';
  barns?: Maybe<Array<Barn>>;
  barnsCount?: Maybe<Scalars['Int']['output']>;
  createdAt?: Maybe<Scalars['DateTime']['output']>;
  createdBy?: Maybe<User>;
  fields?: Maybe<Array<Field>>;
  fieldsCount?: Maybe<Scalars['Int']['output']>;
  id: Scalars['ID']['output'];
  isDefault?: Maybe<Scalars['Boolean']['output']>;
  location?: Maybe<Scalars['JSON']['output']>;
  name?: Maybe<Scalars['String']['output']>;
  organisation?: Maybe<Organisation>;
};


export type FarmBarnsArgs = {
  cursor?: InputMaybe<BarnWhereUniqueInput>;
  orderBy?: Array<BarnOrderByInput>;
  skip?: Scalars['Int']['input'];
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: BarnWhereInput;
};


export type FarmBarnsCountArgs = {
  where?: BarnWhereInput;
};


export type FarmFieldsArgs = {
  cursor?: InputMaybe<FieldWhereUniqueInput>;
  orderBy?: Array<FieldOrderByInput>;
  skip?: Scalars['Int']['input'];
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: FieldWhereInput;
};


export type FarmFieldsCountArgs = {
  where?: FieldWhereInput;
};

export type FarmCreateInput = {
  barns?: InputMaybe<BarnRelateToManyForCreateInput>;
  createdAt?: InputMaybe<Scalars['DateTime']['input']>;
  createdBy?: InputMaybe<UserRelateToOneForCreateInput>;
  fields?: InputMaybe<FieldRelateToManyForCreateInput>;
  isDefault?: InputMaybe<Scalars['Boolean']['input']>;
  location?: InputMaybe<Scalars['JSON']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
  organisation?: InputMaybe<OrganisationRelateToOneForCreateInput>;
};

export type FarmManyRelationFilter = {
  every?: InputMaybe<FarmWhereInput>;
  none?: InputMaybe<FarmWhereInput>;
  some?: InputMaybe<FarmWhereInput>;
};

export type FarmOrderByInput = {
  createdAt?: InputMaybe<OrderDirection>;
  id?: InputMaybe<OrderDirection>;
  isDefault?: InputMaybe<OrderDirection>;
  name?: InputMaybe<OrderDirection>;
};

export type FarmRelateToManyForCreateInput = {
  connect?: InputMaybe<Array<FarmWhereUniqueInput>>;
  create?: InputMaybe<Array<FarmCreateInput>>;
};

export type FarmRelateToManyForUpdateInput = {
  connect?: InputMaybe<Array<FarmWhereUniqueInput>>;
  create?: InputMaybe<Array<FarmCreateInput>>;
  disconnect?: InputMaybe<Array<FarmWhereUniqueInput>>;
  set?: InputMaybe<Array<FarmWhereUniqueInput>>;
};

export type FarmRelateToOneForCreateInput = {
  connect?: InputMaybe<FarmWhereUniqueInput>;
  create?: InputMaybe<FarmCreateInput>;
};

export type FarmRelateToOneForUpdateInput = {
  connect?: InputMaybe<FarmWhereUniqueInput>;
  create?: InputMaybe<FarmCreateInput>;
  disconnect?: InputMaybe<Scalars['Boolean']['input']>;
};

export type FarmUpdateArgs = {
  data: FarmUpdateInput;
  where: FarmWhereUniqueInput;
};

export type FarmUpdateInput = {
  barns?: InputMaybe<BarnRelateToManyForUpdateInput>;
  createdAt?: InputMaybe<Scalars['DateTime']['input']>;
  createdBy?: InputMaybe<UserRelateToOneForUpdateInput>;
  fields?: InputMaybe<FieldRelateToManyForUpdateInput>;
  isDefault?: InputMaybe<Scalars['Boolean']['input']>;
  location?: InputMaybe<Scalars['JSON']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
  organisation?: InputMaybe<OrganisationRelateToOneForUpdateInput>;
};

export type FarmWhereInput = {
  AND?: InputMaybe<Array<FarmWhereInput>>;
  NOT?: InputMaybe<Array<FarmWhereInput>>;
  OR?: InputMaybe<Array<FarmWhereInput>>;
  barns?: InputMaybe<BarnManyRelationFilter>;
  createdAt?: InputMaybe<DateTimeNullableFilter>;
  createdBy?: InputMaybe<UserWhereInput>;
  fields?: InputMaybe<FieldManyRelationFilter>;
  id?: InputMaybe<IdFilter>;
  isDefault?: InputMaybe<BooleanFilter>;
  name?: InputMaybe<StringFilter>;
  organisation?: InputMaybe<OrganisationWhereInput>;
};

export type FarmWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']['input']>;
};

export type FeedDispenseEvent = {
  __typename?: 'FeedDispenseEvent';
  box?: Maybe<Box>;
  date?: Maybe<Scalars['DateTime']['output']>;
  id: Scalars['ID']['output'];
  operator?: Maybe<Operator>;
  qty_kg?: Maybe<Scalars['Float']['output']>;
  ration?: Maybe<FeedRationPlan>;
  silo?: Maybe<FeedSilo>;
};

export type FeedDispenseEventCreateInput = {
  box?: InputMaybe<BoxRelateToOneForCreateInput>;
  date?: InputMaybe<Scalars['DateTime']['input']>;
  operator?: InputMaybe<OperatorRelateToOneForCreateInput>;
  qty_kg?: InputMaybe<Scalars['Float']['input']>;
  ration?: InputMaybe<FeedRationPlanRelateToOneForCreateInput>;
  silo?: InputMaybe<FeedSiloRelateToOneForCreateInput>;
};

export type FeedDispenseEventManyRelationFilter = {
  every?: InputMaybe<FeedDispenseEventWhereInput>;
  none?: InputMaybe<FeedDispenseEventWhereInput>;
  some?: InputMaybe<FeedDispenseEventWhereInput>;
};

export type FeedDispenseEventOrderByInput = {
  date?: InputMaybe<OrderDirection>;
  id?: InputMaybe<OrderDirection>;
  qty_kg?: InputMaybe<OrderDirection>;
};

export type FeedDispenseEventRelateToManyForCreateInput = {
  connect?: InputMaybe<Array<FeedDispenseEventWhereUniqueInput>>;
  create?: InputMaybe<Array<FeedDispenseEventCreateInput>>;
};

export type FeedDispenseEventRelateToManyForUpdateInput = {
  connect?: InputMaybe<Array<FeedDispenseEventWhereUniqueInput>>;
  create?: InputMaybe<Array<FeedDispenseEventCreateInput>>;
  disconnect?: InputMaybe<Array<FeedDispenseEventWhereUniqueInput>>;
  set?: InputMaybe<Array<FeedDispenseEventWhereUniqueInput>>;
};

export type FeedDispenseEventUpdateArgs = {
  data: FeedDispenseEventUpdateInput;
  where: FeedDispenseEventWhereUniqueInput;
};

export type FeedDispenseEventUpdateInput = {
  box?: InputMaybe<BoxRelateToOneForUpdateInput>;
  date?: InputMaybe<Scalars['DateTime']['input']>;
  operator?: InputMaybe<OperatorRelateToOneForUpdateInput>;
  qty_kg?: InputMaybe<Scalars['Float']['input']>;
  ration?: InputMaybe<FeedRationPlanRelateToOneForUpdateInput>;
  silo?: InputMaybe<FeedSiloRelateToOneForUpdateInput>;
};

export type FeedDispenseEventWhereInput = {
  AND?: InputMaybe<Array<FeedDispenseEventWhereInput>>;
  NOT?: InputMaybe<Array<FeedDispenseEventWhereInput>>;
  OR?: InputMaybe<Array<FeedDispenseEventWhereInput>>;
  box?: InputMaybe<BoxWhereInput>;
  date?: InputMaybe<DateTimeNullableFilter>;
  id?: InputMaybe<IdFilter>;
  operator?: InputMaybe<OperatorWhereInput>;
  qty_kg?: InputMaybe<FloatNullableFilter>;
  ration?: InputMaybe<FeedRationPlanWhereInput>;
  silo?: InputMaybe<FeedSiloWhereInput>;
};

export type FeedDispenseEventWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']['input']>;
};

export type FeedLot = {
  __typename?: 'FeedLot';
  addedAt?: Maybe<Scalars['DateTime']['output']>;
  batch_no?: Maybe<Scalars['String']['output']>;
  id: Scalars['ID']['output'];
  product?: Maybe<Product>;
  qty_kg?: Maybe<Scalars['Float']['output']>;
  silo?: Maybe<FeedSilo>;
};

export type FeedLotCreateInput = {
  addedAt?: InputMaybe<Scalars['DateTime']['input']>;
  batch_no?: InputMaybe<Scalars['String']['input']>;
  product?: InputMaybe<ProductRelateToOneForCreateInput>;
  qty_kg?: InputMaybe<Scalars['Float']['input']>;
  silo?: InputMaybe<FeedSiloRelateToOneForCreateInput>;
};

export type FeedLotManyRelationFilter = {
  every?: InputMaybe<FeedLotWhereInput>;
  none?: InputMaybe<FeedLotWhereInput>;
  some?: InputMaybe<FeedLotWhereInput>;
};

export type FeedLotOrderByInput = {
  addedAt?: InputMaybe<OrderDirection>;
  batch_no?: InputMaybe<OrderDirection>;
  id?: InputMaybe<OrderDirection>;
  qty_kg?: InputMaybe<OrderDirection>;
};

export type FeedLotRelateToManyForCreateInput = {
  connect?: InputMaybe<Array<FeedLotWhereUniqueInput>>;
  create?: InputMaybe<Array<FeedLotCreateInput>>;
};

export type FeedLotRelateToManyForUpdateInput = {
  connect?: InputMaybe<Array<FeedLotWhereUniqueInput>>;
  create?: InputMaybe<Array<FeedLotCreateInput>>;
  disconnect?: InputMaybe<Array<FeedLotWhereUniqueInput>>;
  set?: InputMaybe<Array<FeedLotWhereUniqueInput>>;
};

export type FeedLotUpdateArgs = {
  data: FeedLotUpdateInput;
  where: FeedLotWhereUniqueInput;
};

export type FeedLotUpdateInput = {
  addedAt?: InputMaybe<Scalars['DateTime']['input']>;
  batch_no?: InputMaybe<Scalars['String']['input']>;
  product?: InputMaybe<ProductRelateToOneForUpdateInput>;
  qty_kg?: InputMaybe<Scalars['Float']['input']>;
  silo?: InputMaybe<FeedSiloRelateToOneForUpdateInput>;
};

export type FeedLotWhereInput = {
  AND?: InputMaybe<Array<FeedLotWhereInput>>;
  NOT?: InputMaybe<Array<FeedLotWhereInput>>;
  OR?: InputMaybe<Array<FeedLotWhereInput>>;
  addedAt?: InputMaybe<DateTimeNullableFilter>;
  batch_no?: InputMaybe<StringFilter>;
  id?: InputMaybe<IdFilter>;
  product?: InputMaybe<ProductWhereInput>;
  qty_kg?: InputMaybe<FloatNullableFilter>;
  silo?: InputMaybe<FeedSiloWhereInput>;
};

export type FeedLotWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']['input']>;
};

export type FeedRationComponent = {
  __typename?: 'FeedRationComponent';
  dry_matter_pct?: Maybe<Scalars['Float']['output']>;
  id: Scalars['ID']['output'];
  product?: Maybe<Product>;
  qty_kg_head_day?: Maybe<Scalars['Float']['output']>;
  ration?: Maybe<FeedRationPlan>;
};

export type FeedRationComponentCreateInput = {
  dry_matter_pct?: InputMaybe<Scalars['Float']['input']>;
  product?: InputMaybe<ProductRelateToOneForCreateInput>;
  qty_kg_head_day?: InputMaybe<Scalars['Float']['input']>;
  ration?: InputMaybe<FeedRationPlanRelateToOneForCreateInput>;
};

export type FeedRationComponentManyRelationFilter = {
  every?: InputMaybe<FeedRationComponentWhereInput>;
  none?: InputMaybe<FeedRationComponentWhereInput>;
  some?: InputMaybe<FeedRationComponentWhereInput>;
};

export type FeedRationComponentOrderByInput = {
  dry_matter_pct?: InputMaybe<OrderDirection>;
  id?: InputMaybe<OrderDirection>;
  qty_kg_head_day?: InputMaybe<OrderDirection>;
};

export type FeedRationComponentRelateToManyForCreateInput = {
  connect?: InputMaybe<Array<FeedRationComponentWhereUniqueInput>>;
  create?: InputMaybe<Array<FeedRationComponentCreateInput>>;
};

export type FeedRationComponentRelateToManyForUpdateInput = {
  connect?: InputMaybe<Array<FeedRationComponentWhereUniqueInput>>;
  create?: InputMaybe<Array<FeedRationComponentCreateInput>>;
  disconnect?: InputMaybe<Array<FeedRationComponentWhereUniqueInput>>;
  set?: InputMaybe<Array<FeedRationComponentWhereUniqueInput>>;
};

export type FeedRationComponentUpdateArgs = {
  data: FeedRationComponentUpdateInput;
  where: FeedRationComponentWhereUniqueInput;
};

export type FeedRationComponentUpdateInput = {
  dry_matter_pct?: InputMaybe<Scalars['Float']['input']>;
  product?: InputMaybe<ProductRelateToOneForUpdateInput>;
  qty_kg_head_day?: InputMaybe<Scalars['Float']['input']>;
  ration?: InputMaybe<FeedRationPlanRelateToOneForUpdateInput>;
};

export type FeedRationComponentWhereInput = {
  AND?: InputMaybe<Array<FeedRationComponentWhereInput>>;
  NOT?: InputMaybe<Array<FeedRationComponentWhereInput>>;
  OR?: InputMaybe<Array<FeedRationComponentWhereInput>>;
  dry_matter_pct?: InputMaybe<FloatNullableFilter>;
  id?: InputMaybe<IdFilter>;
  product?: InputMaybe<ProductWhereInput>;
  qty_kg_head_day?: InputMaybe<FloatNullableFilter>;
  ration?: InputMaybe<FeedRationPlanWhereInput>;
};

export type FeedRationComponentWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']['input']>;
};

export type FeedRationPlan = {
  __typename?: 'FeedRationPlan';
  barn?: Maybe<Barn>;
  components?: Maybe<Array<FeedRationComponent>>;
  componentsCount?: Maybe<Scalars['Int']['output']>;
  dispenses?: Maybe<Array<FeedDispenseEvent>>;
  dispensesCount?: Maybe<Scalars['Int']['output']>;
  endDate?: Maybe<Scalars['DateTime']['output']>;
  id: Scalars['ID']['output'];
  name?: Maybe<Scalars['String']['output']>;
  startDate?: Maybe<Scalars['DateTime']['output']>;
};


export type FeedRationPlanComponentsArgs = {
  cursor?: InputMaybe<FeedRationComponentWhereUniqueInput>;
  orderBy?: Array<FeedRationComponentOrderByInput>;
  skip?: Scalars['Int']['input'];
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: FeedRationComponentWhereInput;
};


export type FeedRationPlanComponentsCountArgs = {
  where?: FeedRationComponentWhereInput;
};


export type FeedRationPlanDispensesArgs = {
  cursor?: InputMaybe<FeedDispenseEventWhereUniqueInput>;
  orderBy?: Array<FeedDispenseEventOrderByInput>;
  skip?: Scalars['Int']['input'];
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: FeedDispenseEventWhereInput;
};


export type FeedRationPlanDispensesCountArgs = {
  where?: FeedDispenseEventWhereInput;
};

export type FeedRationPlanCreateInput = {
  barn?: InputMaybe<BarnRelateToOneForCreateInput>;
  components?: InputMaybe<FeedRationComponentRelateToManyForCreateInput>;
  dispenses?: InputMaybe<FeedDispenseEventRelateToManyForCreateInput>;
  endDate?: InputMaybe<Scalars['DateTime']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
  startDate?: InputMaybe<Scalars['DateTime']['input']>;
};

export type FeedRationPlanOrderByInput = {
  endDate?: InputMaybe<OrderDirection>;
  id?: InputMaybe<OrderDirection>;
  name?: InputMaybe<OrderDirection>;
  startDate?: InputMaybe<OrderDirection>;
};

export type FeedRationPlanRelateToOneForCreateInput = {
  connect?: InputMaybe<FeedRationPlanWhereUniqueInput>;
  create?: InputMaybe<FeedRationPlanCreateInput>;
};

export type FeedRationPlanRelateToOneForUpdateInput = {
  connect?: InputMaybe<FeedRationPlanWhereUniqueInput>;
  create?: InputMaybe<FeedRationPlanCreateInput>;
  disconnect?: InputMaybe<Scalars['Boolean']['input']>;
};

export type FeedRationPlanUpdateArgs = {
  data: FeedRationPlanUpdateInput;
  where: FeedRationPlanWhereUniqueInput;
};

export type FeedRationPlanUpdateInput = {
  barn?: InputMaybe<BarnRelateToOneForUpdateInput>;
  components?: InputMaybe<FeedRationComponentRelateToManyForUpdateInput>;
  dispenses?: InputMaybe<FeedDispenseEventRelateToManyForUpdateInput>;
  endDate?: InputMaybe<Scalars['DateTime']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
  startDate?: InputMaybe<Scalars['DateTime']['input']>;
};

export type FeedRationPlanWhereInput = {
  AND?: InputMaybe<Array<FeedRationPlanWhereInput>>;
  NOT?: InputMaybe<Array<FeedRationPlanWhereInput>>;
  OR?: InputMaybe<Array<FeedRationPlanWhereInput>>;
  barn?: InputMaybe<BarnWhereInput>;
  components?: InputMaybe<FeedRationComponentManyRelationFilter>;
  dispenses?: InputMaybe<FeedDispenseEventManyRelationFilter>;
  endDate?: InputMaybe<DateTimeNullableFilter>;
  id?: InputMaybe<IdFilter>;
  name?: InputMaybe<StringFilter>;
  startDate?: InputMaybe<DateTimeNullableFilter>;
};

export type FeedRationPlanWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']['input']>;
};

export type FeedSilo = {
  __typename?: 'FeedSilo';
  barn?: Maybe<Barn>;
  capacity_kg?: Maybe<Scalars['Float']['output']>;
  current_level_pct?: Maybe<Scalars['Float']['output']>;
  dispenses?: Maybe<Array<FeedDispenseEvent>>;
  dispensesCount?: Maybe<Scalars['Int']['output']>;
  id: Scalars['ID']['output'];
  lots?: Maybe<Array<FeedLot>>;
  lotsCount?: Maybe<Scalars['Int']['output']>;
  name?: Maybe<Scalars['String']['output']>;
  sensorId?: Maybe<Scalars['String']['output']>;
};


export type FeedSiloDispensesArgs = {
  cursor?: InputMaybe<FeedDispenseEventWhereUniqueInput>;
  orderBy?: Array<FeedDispenseEventOrderByInput>;
  skip?: Scalars['Int']['input'];
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: FeedDispenseEventWhereInput;
};


export type FeedSiloDispensesCountArgs = {
  where?: FeedDispenseEventWhereInput;
};


export type FeedSiloLotsArgs = {
  cursor?: InputMaybe<FeedLotWhereUniqueInput>;
  orderBy?: Array<FeedLotOrderByInput>;
  skip?: Scalars['Int']['input'];
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: FeedLotWhereInput;
};


export type FeedSiloLotsCountArgs = {
  where?: FeedLotWhereInput;
};

export type FeedSiloCreateInput = {
  barn?: InputMaybe<BarnRelateToOneForCreateInput>;
  capacity_kg?: InputMaybe<Scalars['Float']['input']>;
  current_level_pct?: InputMaybe<Scalars['Float']['input']>;
  dispenses?: InputMaybe<FeedDispenseEventRelateToManyForCreateInput>;
  lots?: InputMaybe<FeedLotRelateToManyForCreateInput>;
  name?: InputMaybe<Scalars['String']['input']>;
  sensorId?: InputMaybe<Scalars['String']['input']>;
};

export type FeedSiloManyRelationFilter = {
  every?: InputMaybe<FeedSiloWhereInput>;
  none?: InputMaybe<FeedSiloWhereInput>;
  some?: InputMaybe<FeedSiloWhereInput>;
};

export type FeedSiloOrderByInput = {
  capacity_kg?: InputMaybe<OrderDirection>;
  current_level_pct?: InputMaybe<OrderDirection>;
  id?: InputMaybe<OrderDirection>;
  name?: InputMaybe<OrderDirection>;
  sensorId?: InputMaybe<OrderDirection>;
};

export type FeedSiloRelateToManyForCreateInput = {
  connect?: InputMaybe<Array<FeedSiloWhereUniqueInput>>;
  create?: InputMaybe<Array<FeedSiloCreateInput>>;
};

export type FeedSiloRelateToManyForUpdateInput = {
  connect?: InputMaybe<Array<FeedSiloWhereUniqueInput>>;
  create?: InputMaybe<Array<FeedSiloCreateInput>>;
  disconnect?: InputMaybe<Array<FeedSiloWhereUniqueInput>>;
  set?: InputMaybe<Array<FeedSiloWhereUniqueInput>>;
};

export type FeedSiloRelateToOneForCreateInput = {
  connect?: InputMaybe<FeedSiloWhereUniqueInput>;
  create?: InputMaybe<FeedSiloCreateInput>;
};

export type FeedSiloRelateToOneForUpdateInput = {
  connect?: InputMaybe<FeedSiloWhereUniqueInput>;
  create?: InputMaybe<FeedSiloCreateInput>;
  disconnect?: InputMaybe<Scalars['Boolean']['input']>;
};

export type FeedSiloUpdateArgs = {
  data: FeedSiloUpdateInput;
  where: FeedSiloWhereUniqueInput;
};

export type FeedSiloUpdateInput = {
  barn?: InputMaybe<BarnRelateToOneForUpdateInput>;
  capacity_kg?: InputMaybe<Scalars['Float']['input']>;
  current_level_pct?: InputMaybe<Scalars['Float']['input']>;
  dispenses?: InputMaybe<FeedDispenseEventRelateToManyForUpdateInput>;
  lots?: InputMaybe<FeedLotRelateToManyForUpdateInput>;
  name?: InputMaybe<Scalars['String']['input']>;
  sensorId?: InputMaybe<Scalars['String']['input']>;
};

export type FeedSiloWhereInput = {
  AND?: InputMaybe<Array<FeedSiloWhereInput>>;
  NOT?: InputMaybe<Array<FeedSiloWhereInput>>;
  OR?: InputMaybe<Array<FeedSiloWhereInput>>;
  barn?: InputMaybe<BarnWhereInput>;
  capacity_kg?: InputMaybe<FloatNullableFilter>;
  current_level_pct?: InputMaybe<FloatNullableFilter>;
  dispenses?: InputMaybe<FeedDispenseEventManyRelationFilter>;
  id?: InputMaybe<IdFilter>;
  lots?: InputMaybe<FeedLotManyRelationFilter>;
  name?: InputMaybe<StringFilter>;
  sensorId?: InputMaybe<StringFilter>;
};

export type FeedSiloWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']['input']>;
};

export type Field = {
  __typename?: 'Field';
  activities?: Maybe<Array<Activity>>;
  activitiesCount?: Maybe<Scalars['Int']['output']>;
  animals?: Maybe<Array<Animal>>;
  animalsCount?: Maybe<Scalars['Int']['output']>;
  areaHectares?: Maybe<Scalars['Float']['output']>;
  boundary?: Maybe<Scalars['JSON']['output']>;
  createdAt?: Maybe<Scalars['DateTime']['output']>;
  crops?: Maybe<Array<Crop>>;
  cropsCount?: Maybe<Scalars['Int']['output']>;
  farm?: Maybe<Farm>;
  id: Scalars['ID']['output'];
  landCoverStats?: Maybe<Array<LandCoverStatistic>>;
  landCoverStatsCount?: Maybe<Scalars['Int']['output']>;
  location?: Maybe<Scalars['JSON']['output']>;
  name?: Maybe<Scalars['String']['output']>;
  ndvi?: Maybe<Array<NdviAsset>>;
  ndviCount?: Maybe<Scalars['Int']['output']>;
  nppBaselines?: Maybe<Array<NetPrimaryProductivity>>;
  nppBaselinesCount?: Maybe<Scalars['Int']['output']>;
  practiceEvents?: Maybe<Array<SustainablePracticeEvent>>;
  practiceEventsCount?: Maybe<Scalars['Int']['output']>;
  soilMeasurements?: Maybe<Array<SoilMeasurement>>;
  soilMeasurementsCount?: Maybe<Scalars['Int']['output']>;
  soilMoistureObservations?: Maybe<Array<SoilMoistureObservation>>;
  soilMoistureObservationsCount?: Maybe<Scalars['Int']['output']>;
  soilOrganicCarbonStocks?: Maybe<Array<SoilOrganicCarbonStock>>;
  soilOrganicCarbonStocksCount?: Maybe<Scalars['Int']['output']>;
  weatherRecords?: Maybe<Array<WeatherRecord>>;
  weatherRecordsCount?: Maybe<Scalars['Int']['output']>;
};


export type FieldActivitiesArgs = {
  cursor?: InputMaybe<ActivityWhereUniqueInput>;
  orderBy?: Array<ActivityOrderByInput>;
  skip?: Scalars['Int']['input'];
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: ActivityWhereInput;
};


export type FieldActivitiesCountArgs = {
  where?: ActivityWhereInput;
};


export type FieldAnimalsArgs = {
  cursor?: InputMaybe<AnimalWhereUniqueInput>;
  orderBy?: Array<AnimalOrderByInput>;
  skip?: Scalars['Int']['input'];
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: AnimalWhereInput;
};


export type FieldAnimalsCountArgs = {
  where?: AnimalWhereInput;
};


export type FieldCropsArgs = {
  cursor?: InputMaybe<CropWhereUniqueInput>;
  orderBy?: Array<CropOrderByInput>;
  skip?: Scalars['Int']['input'];
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: CropWhereInput;
};


export type FieldCropsCountArgs = {
  where?: CropWhereInput;
};


export type FieldLandCoverStatsArgs = {
  cursor?: InputMaybe<LandCoverStatisticWhereUniqueInput>;
  orderBy?: Array<LandCoverStatisticOrderByInput>;
  skip?: Scalars['Int']['input'];
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: LandCoverStatisticWhereInput;
};


export type FieldLandCoverStatsCountArgs = {
  where?: LandCoverStatisticWhereInput;
};


export type FieldNdviArgs = {
  cursor?: InputMaybe<NdviAssetWhereUniqueInput>;
  orderBy?: Array<NdviAssetOrderByInput>;
  skip?: Scalars['Int']['input'];
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: NdviAssetWhereInput;
};


export type FieldNdviCountArgs = {
  where?: NdviAssetWhereInput;
};


export type FieldNppBaselinesArgs = {
  cursor?: InputMaybe<NetPrimaryProductivityWhereUniqueInput>;
  orderBy?: Array<NetPrimaryProductivityOrderByInput>;
  skip?: Scalars['Int']['input'];
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: NetPrimaryProductivityWhereInput;
};


export type FieldNppBaselinesCountArgs = {
  where?: NetPrimaryProductivityWhereInput;
};


export type FieldPracticeEventsArgs = {
  cursor?: InputMaybe<SustainablePracticeEventWhereUniqueInput>;
  orderBy?: Array<SustainablePracticeEventOrderByInput>;
  skip?: Scalars['Int']['input'];
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: SustainablePracticeEventWhereInput;
};


export type FieldPracticeEventsCountArgs = {
  where?: SustainablePracticeEventWhereInput;
};


export type FieldSoilMeasurementsArgs = {
  cursor?: InputMaybe<SoilMeasurementWhereUniqueInput>;
  orderBy?: Array<SoilMeasurementOrderByInput>;
  skip?: Scalars['Int']['input'];
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: SoilMeasurementWhereInput;
};


export type FieldSoilMeasurementsCountArgs = {
  where?: SoilMeasurementWhereInput;
};


export type FieldSoilMoistureObservationsArgs = {
  cursor?: InputMaybe<SoilMoistureObservationWhereUniqueInput>;
  orderBy?: Array<SoilMoistureObservationOrderByInput>;
  skip?: Scalars['Int']['input'];
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: SoilMoistureObservationWhereInput;
};


export type FieldSoilMoistureObservationsCountArgs = {
  where?: SoilMoistureObservationWhereInput;
};


export type FieldSoilOrganicCarbonStocksArgs = {
  cursor?: InputMaybe<SoilOrganicCarbonStockWhereUniqueInput>;
  orderBy?: Array<SoilOrganicCarbonStockOrderByInput>;
  skip?: Scalars['Int']['input'];
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: SoilOrganicCarbonStockWhereInput;
};


export type FieldSoilOrganicCarbonStocksCountArgs = {
  where?: SoilOrganicCarbonStockWhereInput;
};


export type FieldWeatherRecordsArgs = {
  cursor?: InputMaybe<WeatherRecordWhereUniqueInput>;
  orderBy?: Array<WeatherRecordOrderByInput>;
  skip?: Scalars['Int']['input'];
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: WeatherRecordWhereInput;
};


export type FieldWeatherRecordsCountArgs = {
  where?: WeatherRecordWhereInput;
};

export type FieldCreateInput = {
  activities?: InputMaybe<ActivityRelateToManyForCreateInput>;
  animals?: InputMaybe<AnimalRelateToManyForCreateInput>;
  areaHectares?: InputMaybe<Scalars['Float']['input']>;
  boundary?: InputMaybe<Scalars['JSON']['input']>;
  createdAt?: InputMaybe<Scalars['DateTime']['input']>;
  crops?: InputMaybe<CropRelateToManyForCreateInput>;
  farm?: InputMaybe<FarmRelateToOneForCreateInput>;
  landCoverStats?: InputMaybe<LandCoverStatisticRelateToManyForCreateInput>;
  location?: InputMaybe<Scalars['JSON']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
  ndvi?: InputMaybe<NdviAssetRelateToManyForCreateInput>;
  nppBaselines?: InputMaybe<NetPrimaryProductivityRelateToManyForCreateInput>;
  practiceEvents?: InputMaybe<SustainablePracticeEventRelateToManyForCreateInput>;
  soilMeasurements?: InputMaybe<SoilMeasurementRelateToManyForCreateInput>;
  soilMoistureObservations?: InputMaybe<SoilMoistureObservationRelateToManyForCreateInput>;
  soilOrganicCarbonStocks?: InputMaybe<SoilOrganicCarbonStockRelateToManyForCreateInput>;
  weatherRecords?: InputMaybe<WeatherRecordRelateToManyForCreateInput>;
};

export type FieldImpactSummary = {
  __typename?: 'FieldImpactSummary';
  field?: Maybe<Field>;
  id: Scalars['ID']['output'];
  total_direct_kg_co2e?: Maybe<Scalars['Float']['output']>;
  total_indirect_kg_co2e?: Maybe<Scalars['Float']['output']>;
  total_kg_co2e_per_ha?: Maybe<Scalars['Float']['output']>;
  year?: Maybe<Scalars['Int']['output']>;
};

export type FieldImpactSummaryCreateInput = {
  field?: InputMaybe<FieldRelateToOneForCreateInput>;
  total_direct_kg_co2e?: InputMaybe<Scalars['Float']['input']>;
  total_indirect_kg_co2e?: InputMaybe<Scalars['Float']['input']>;
  total_kg_co2e_per_ha?: InputMaybe<Scalars['Float']['input']>;
  year?: InputMaybe<Scalars['Int']['input']>;
};

export type FieldImpactSummaryOrderByInput = {
  id?: InputMaybe<OrderDirection>;
  total_direct_kg_co2e?: InputMaybe<OrderDirection>;
  total_indirect_kg_co2e?: InputMaybe<OrderDirection>;
  total_kg_co2e_per_ha?: InputMaybe<OrderDirection>;
  year?: InputMaybe<OrderDirection>;
};

export type FieldImpactSummaryUpdateArgs = {
  data: FieldImpactSummaryUpdateInput;
  where: FieldImpactSummaryWhereUniqueInput;
};

export type FieldImpactSummaryUpdateInput = {
  field?: InputMaybe<FieldRelateToOneForUpdateInput>;
  total_direct_kg_co2e?: InputMaybe<Scalars['Float']['input']>;
  total_indirect_kg_co2e?: InputMaybe<Scalars['Float']['input']>;
  total_kg_co2e_per_ha?: InputMaybe<Scalars['Float']['input']>;
  year?: InputMaybe<Scalars['Int']['input']>;
};

export type FieldImpactSummaryWhereInput = {
  AND?: InputMaybe<Array<FieldImpactSummaryWhereInput>>;
  NOT?: InputMaybe<Array<FieldImpactSummaryWhereInput>>;
  OR?: InputMaybe<Array<FieldImpactSummaryWhereInput>>;
  field?: InputMaybe<FieldWhereInput>;
  id?: InputMaybe<IdFilter>;
  total_direct_kg_co2e?: InputMaybe<FloatNullableFilter>;
  total_indirect_kg_co2e?: InputMaybe<FloatNullableFilter>;
  total_kg_co2e_per_ha?: InputMaybe<FloatNullableFilter>;
  year?: InputMaybe<IntNullableFilter>;
};

export type FieldImpactSummaryWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']['input']>;
};

export type FieldManyRelationFilter = {
  every?: InputMaybe<FieldWhereInput>;
  none?: InputMaybe<FieldWhereInput>;
  some?: InputMaybe<FieldWhereInput>;
};

export type FieldOrderByInput = {
  areaHectares?: InputMaybe<OrderDirection>;
  createdAt?: InputMaybe<OrderDirection>;
  id?: InputMaybe<OrderDirection>;
  name?: InputMaybe<OrderDirection>;
};

export type FieldRelateToManyForCreateInput = {
  connect?: InputMaybe<Array<FieldWhereUniqueInput>>;
  create?: InputMaybe<Array<FieldCreateInput>>;
};

export type FieldRelateToManyForUpdateInput = {
  connect?: InputMaybe<Array<FieldWhereUniqueInput>>;
  create?: InputMaybe<Array<FieldCreateInput>>;
  disconnect?: InputMaybe<Array<FieldWhereUniqueInput>>;
  set?: InputMaybe<Array<FieldWhereUniqueInput>>;
};

export type FieldRelateToOneForCreateInput = {
  connect?: InputMaybe<FieldWhereUniqueInput>;
  create?: InputMaybe<FieldCreateInput>;
};

export type FieldRelateToOneForUpdateInput = {
  connect?: InputMaybe<FieldWhereUniqueInput>;
  create?: InputMaybe<FieldCreateInput>;
  disconnect?: InputMaybe<Scalars['Boolean']['input']>;
};

export type FieldUpdateArgs = {
  data: FieldUpdateInput;
  where: FieldWhereUniqueInput;
};

export type FieldUpdateInput = {
  activities?: InputMaybe<ActivityRelateToManyForUpdateInput>;
  animals?: InputMaybe<AnimalRelateToManyForUpdateInput>;
  areaHectares?: InputMaybe<Scalars['Float']['input']>;
  boundary?: InputMaybe<Scalars['JSON']['input']>;
  createdAt?: InputMaybe<Scalars['DateTime']['input']>;
  crops?: InputMaybe<CropRelateToManyForUpdateInput>;
  farm?: InputMaybe<FarmRelateToOneForUpdateInput>;
  landCoverStats?: InputMaybe<LandCoverStatisticRelateToManyForUpdateInput>;
  location?: InputMaybe<Scalars['JSON']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
  ndvi?: InputMaybe<NdviAssetRelateToManyForUpdateInput>;
  nppBaselines?: InputMaybe<NetPrimaryProductivityRelateToManyForUpdateInput>;
  practiceEvents?: InputMaybe<SustainablePracticeEventRelateToManyForUpdateInput>;
  soilMeasurements?: InputMaybe<SoilMeasurementRelateToManyForUpdateInput>;
  soilMoistureObservations?: InputMaybe<SoilMoistureObservationRelateToManyForUpdateInput>;
  soilOrganicCarbonStocks?: InputMaybe<SoilOrganicCarbonStockRelateToManyForUpdateInput>;
  weatherRecords?: InputMaybe<WeatherRecordRelateToManyForUpdateInput>;
};

export type FieldWhereInput = {
  AND?: InputMaybe<Array<FieldWhereInput>>;
  NOT?: InputMaybe<Array<FieldWhereInput>>;
  OR?: InputMaybe<Array<FieldWhereInput>>;
  activities?: InputMaybe<ActivityManyRelationFilter>;
  animals?: InputMaybe<AnimalManyRelationFilter>;
  areaHectares?: InputMaybe<FloatNullableFilter>;
  createdAt?: InputMaybe<DateTimeNullableFilter>;
  crops?: InputMaybe<CropManyRelationFilter>;
  farm?: InputMaybe<FarmWhereInput>;
  id?: InputMaybe<IdFilter>;
  landCoverStats?: InputMaybe<LandCoverStatisticManyRelationFilter>;
  name?: InputMaybe<StringFilter>;
  ndvi?: InputMaybe<NdviAssetManyRelationFilter>;
  nppBaselines?: InputMaybe<NetPrimaryProductivityManyRelationFilter>;
  practiceEvents?: InputMaybe<SustainablePracticeEventManyRelationFilter>;
  soilMeasurements?: InputMaybe<SoilMeasurementManyRelationFilter>;
  soilMoistureObservations?: InputMaybe<SoilMoistureObservationManyRelationFilter>;
  soilOrganicCarbonStocks?: InputMaybe<SoilOrganicCarbonStockManyRelationFilter>;
  weatherRecords?: InputMaybe<WeatherRecordManyRelationFilter>;
};

export type FieldWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']['input']>;
};

export type FloatFilter = {
  equals?: InputMaybe<Scalars['Float']['input']>;
  gt?: InputMaybe<Scalars['Float']['input']>;
  gte?: InputMaybe<Scalars['Float']['input']>;
  in?: InputMaybe<Array<Scalars['Float']['input']>>;
  lt?: InputMaybe<Scalars['Float']['input']>;
  lte?: InputMaybe<Scalars['Float']['input']>;
  not?: InputMaybe<FloatFilter>;
  notIn?: InputMaybe<Array<Scalars['Float']['input']>>;
};

export type FloatNullableFilter = {
  equals?: InputMaybe<Scalars['Float']['input']>;
  gt?: InputMaybe<Scalars['Float']['input']>;
  gte?: InputMaybe<Scalars['Float']['input']>;
  in?: InputMaybe<Array<Scalars['Float']['input']>>;
  lt?: InputMaybe<Scalars['Float']['input']>;
  lte?: InputMaybe<Scalars['Float']['input']>;
  not?: InputMaybe<FloatNullableFilter>;
  notIn?: InputMaybe<Array<Scalars['Float']['input']>>;
};

export type HerdMetric = {
  __typename?: 'HerdMetric';
  barn?: Maybe<Barn>;
  id: Scalars['ID']['output'];
  metric_key?: Maybe<Scalars['String']['output']>;
  period_end?: Maybe<Scalars['DateTime']['output']>;
  period_start?: Maybe<Scalars['DateTime']['output']>;
  value?: Maybe<Scalars['Float']['output']>;
};

export type HerdMetricCreateInput = {
  barn?: InputMaybe<BarnRelateToOneForCreateInput>;
  metric_key?: InputMaybe<Scalars['String']['input']>;
  period_end?: InputMaybe<Scalars['DateTime']['input']>;
  period_start?: InputMaybe<Scalars['DateTime']['input']>;
  value?: InputMaybe<Scalars['Float']['input']>;
};

export type HerdMetricOrderByInput = {
  id?: InputMaybe<OrderDirection>;
  metric_key?: InputMaybe<OrderDirection>;
  period_end?: InputMaybe<OrderDirection>;
  period_start?: InputMaybe<OrderDirection>;
  value?: InputMaybe<OrderDirection>;
};

export type HerdMetricUpdateArgs = {
  data: HerdMetricUpdateInput;
  where: HerdMetricWhereUniqueInput;
};

export type HerdMetricUpdateInput = {
  barn?: InputMaybe<BarnRelateToOneForUpdateInput>;
  metric_key?: InputMaybe<Scalars['String']['input']>;
  period_end?: InputMaybe<Scalars['DateTime']['input']>;
  period_start?: InputMaybe<Scalars['DateTime']['input']>;
  value?: InputMaybe<Scalars['Float']['input']>;
};

export type HerdMetricWhereInput = {
  AND?: InputMaybe<Array<HerdMetricWhereInput>>;
  NOT?: InputMaybe<Array<HerdMetricWhereInput>>;
  OR?: InputMaybe<Array<HerdMetricWhereInput>>;
  barn?: InputMaybe<BarnWhereInput>;
  id?: InputMaybe<IdFilter>;
  metric_key?: InputMaybe<StringFilter>;
  period_end?: InputMaybe<DateTimeNullableFilter>;
  period_start?: InputMaybe<DateTimeNullableFilter>;
  value?: InputMaybe<FloatNullableFilter>;
};

export type HerdMetricWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']['input']>;
};

export type IdFilter = {
  equals?: InputMaybe<Scalars['ID']['input']>;
  gt?: InputMaybe<Scalars['ID']['input']>;
  gte?: InputMaybe<Scalars['ID']['input']>;
  in?: InputMaybe<Array<Scalars['ID']['input']>>;
  lt?: InputMaybe<Scalars['ID']['input']>;
  lte?: InputMaybe<Scalars['ID']['input']>;
  not?: InputMaybe<IdFilter>;
  notIn?: InputMaybe<Array<Scalars['ID']['input']>>;
};

export enum ImageExtension {
  Gif = 'gif',
  Jpg = 'jpg',
  Png = 'png',
  Webp = 'webp'
}

export type ImageFieldInput = {
  upload: Scalars['Upload']['input'];
};

export type ImageFieldOutput = {
  __typename?: 'ImageFieldOutput';
  extension: ImageExtension;
  filesize: Scalars['Int']['output'];
  height: Scalars['Int']['output'];
  id: Scalars['ID']['output'];
  url: Scalars['String']['output'];
  width: Scalars['Int']['output'];
};

export type IntFilter = {
  equals?: InputMaybe<Scalars['Int']['input']>;
  gt?: InputMaybe<Scalars['Int']['input']>;
  gte?: InputMaybe<Scalars['Int']['input']>;
  in?: InputMaybe<Array<Scalars['Int']['input']>>;
  lt?: InputMaybe<Scalars['Int']['input']>;
  lte?: InputMaybe<Scalars['Int']['input']>;
  not?: InputMaybe<IntFilter>;
  notIn?: InputMaybe<Array<Scalars['Int']['input']>>;
};

export type IntNullableFilter = {
  equals?: InputMaybe<Scalars['Int']['input']>;
  gt?: InputMaybe<Scalars['Int']['input']>;
  gte?: InputMaybe<Scalars['Int']['input']>;
  in?: InputMaybe<Array<Scalars['Int']['input']>>;
  lt?: InputMaybe<Scalars['Int']['input']>;
  lte?: InputMaybe<Scalars['Int']['input']>;
  not?: InputMaybe<IntNullableFilter>;
  notIn?: InputMaybe<Array<Scalars['Int']['input']>>;
};

export type Interview = {
  __typename?: 'Interview';
  application?: Maybe<Application>;
  createdAt?: Maybe<Scalars['DateTime']['output']>;
  feedback?: Maybe<Scalars['String']['output']>;
  id: Scalars['ID']['output'];
  interviewer?: Maybe<Scalars['String']['output']>;
  notes?: Maybe<Scalars['String']['output']>;
  scheduledAt?: Maybe<Scalars['DateTime']['output']>;
  stage?: Maybe<InterviewStage>;
};

export type InterviewCreateInput = {
  application?: InputMaybe<ApplicationRelateToOneForCreateInput>;
  createdAt?: InputMaybe<Scalars['DateTime']['input']>;
  feedback?: InputMaybe<Scalars['String']['input']>;
  interviewer?: InputMaybe<Scalars['String']['input']>;
  notes?: InputMaybe<Scalars['String']['input']>;
  scheduledAt?: InputMaybe<Scalars['DateTime']['input']>;
  stage?: InputMaybe<InterviewStageRelateToOneForCreateInput>;
};

export type InterviewManyRelationFilter = {
  every?: InputMaybe<InterviewWhereInput>;
  none?: InputMaybe<InterviewWhereInput>;
  some?: InputMaybe<InterviewWhereInput>;
};

export type InterviewOrderByInput = {
  createdAt?: InputMaybe<OrderDirection>;
  feedback?: InputMaybe<OrderDirection>;
  id?: InputMaybe<OrderDirection>;
  interviewer?: InputMaybe<OrderDirection>;
  notes?: InputMaybe<OrderDirection>;
  scheduledAt?: InputMaybe<OrderDirection>;
};

export type InterviewRelateToManyForCreateInput = {
  connect?: InputMaybe<Array<InterviewWhereUniqueInput>>;
  create?: InputMaybe<Array<InterviewCreateInput>>;
};

export type InterviewRelateToManyForUpdateInput = {
  connect?: InputMaybe<Array<InterviewWhereUniqueInput>>;
  create?: InputMaybe<Array<InterviewCreateInput>>;
  disconnect?: InputMaybe<Array<InterviewWhereUniqueInput>>;
  set?: InputMaybe<Array<InterviewWhereUniqueInput>>;
};

export type InterviewStage = {
  __typename?: 'InterviewStage';
  id: Scalars['ID']['output'];
  interviews?: Maybe<Array<Interview>>;
  interviewsCount?: Maybe<Scalars['Int']['output']>;
  key?: Maybe<Scalars['String']['output']>;
  labelKey?: Maybe<Scalars['String']['output']>;
  order?: Maybe<Scalars['Int']['output']>;
};


export type InterviewStageInterviewsArgs = {
  cursor?: InputMaybe<InterviewWhereUniqueInput>;
  orderBy?: Array<InterviewOrderByInput>;
  skip?: Scalars['Int']['input'];
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InterviewWhereInput;
};


export type InterviewStageInterviewsCountArgs = {
  where?: InterviewWhereInput;
};

export type InterviewStageCreateInput = {
  interviews?: InputMaybe<InterviewRelateToManyForCreateInput>;
  key?: InputMaybe<Scalars['String']['input']>;
  labelKey?: InputMaybe<Scalars['String']['input']>;
  order?: InputMaybe<Scalars['Int']['input']>;
};

export type InterviewStageOrderByInput = {
  id?: InputMaybe<OrderDirection>;
  key?: InputMaybe<OrderDirection>;
  labelKey?: InputMaybe<OrderDirection>;
  order?: InputMaybe<OrderDirection>;
};

export type InterviewStageRelateToOneForCreateInput = {
  connect?: InputMaybe<InterviewStageWhereUniqueInput>;
  create?: InputMaybe<InterviewStageCreateInput>;
};

export type InterviewStageRelateToOneForUpdateInput = {
  connect?: InputMaybe<InterviewStageWhereUniqueInput>;
  create?: InputMaybe<InterviewStageCreateInput>;
  disconnect?: InputMaybe<Scalars['Boolean']['input']>;
};

export type InterviewStageUpdateArgs = {
  data: InterviewStageUpdateInput;
  where: InterviewStageWhereUniqueInput;
};

export type InterviewStageUpdateInput = {
  interviews?: InputMaybe<InterviewRelateToManyForUpdateInput>;
  key?: InputMaybe<Scalars['String']['input']>;
  labelKey?: InputMaybe<Scalars['String']['input']>;
  order?: InputMaybe<Scalars['Int']['input']>;
};

export type InterviewStageWhereInput = {
  AND?: InputMaybe<Array<InterviewStageWhereInput>>;
  NOT?: InputMaybe<Array<InterviewStageWhereInput>>;
  OR?: InputMaybe<Array<InterviewStageWhereInput>>;
  id?: InputMaybe<IdFilter>;
  interviews?: InputMaybe<InterviewManyRelationFilter>;
  key?: InputMaybe<StringFilter>;
  labelKey?: InputMaybe<StringFilter>;
  order?: InputMaybe<IntFilter>;
};

export type InterviewStageWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']['input']>;
  key?: InputMaybe<Scalars['String']['input']>;
};

export type InterviewUpdateArgs = {
  data: InterviewUpdateInput;
  where: InterviewWhereUniqueInput;
};

export type InterviewUpdateInput = {
  application?: InputMaybe<ApplicationRelateToOneForUpdateInput>;
  createdAt?: InputMaybe<Scalars['DateTime']['input']>;
  feedback?: InputMaybe<Scalars['String']['input']>;
  interviewer?: InputMaybe<Scalars['String']['input']>;
  notes?: InputMaybe<Scalars['String']['input']>;
  scheduledAt?: InputMaybe<Scalars['DateTime']['input']>;
  stage?: InputMaybe<InterviewStageRelateToOneForUpdateInput>;
};

export type InterviewWhereInput = {
  AND?: InputMaybe<Array<InterviewWhereInput>>;
  NOT?: InputMaybe<Array<InterviewWhereInput>>;
  OR?: InputMaybe<Array<InterviewWhereInput>>;
  application?: InputMaybe<ApplicationWhereInput>;
  createdAt?: InputMaybe<DateTimeNullableFilter>;
  feedback?: InputMaybe<StringFilter>;
  id?: InputMaybe<IdFilter>;
  interviewer?: InputMaybe<StringFilter>;
  notes?: InputMaybe<StringFilter>;
  scheduledAt?: InputMaybe<DateTimeFilter>;
  stage?: InputMaybe<InterviewStageWhereInput>;
};

export type InterviewWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']['input']>;
};

export type JobCandidate = {
  __typename?: 'JobCandidate';
  address?: Maybe<Scalars['String']['output']>;
  applications?: Maybe<Array<Application>>;
  applicationsCount?: Maybe<Scalars['Int']['output']>;
  appliedAt?: Maybe<Scalars['DateTime']['output']>;
  city?: Maybe<Scalars['String']['output']>;
  country?: Maybe<Scalars['String']['output']>;
  desiredPay?: Maybe<Scalars['Float']['output']>;
  email?: Maybe<Scalars['String']['output']>;
  id: Scalars['ID']['output'];
  lastName?: Maybe<Scalars['String']['output']>;
  linkedin?: Maybe<Scalars['String']['output']>;
  name?: Maybe<Scalars['String']['output']>;
  phone?: Maybe<Scalars['String']['output']>;
  postalCode?: Maybe<Scalars['String']['output']>;
  province?: Maybe<Scalars['String']['output']>;
  resumeUrl?: Maybe<Scalars['String']['output']>;
  website?: Maybe<Scalars['String']['output']>;
};


export type JobCandidateApplicationsArgs = {
  cursor?: InputMaybe<ApplicationWhereUniqueInput>;
  orderBy?: Array<ApplicationOrderByInput>;
  skip?: Scalars['Int']['input'];
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: ApplicationWhereInput;
};


export type JobCandidateApplicationsCountArgs = {
  where?: ApplicationWhereInput;
};

export type JobCandidateCreateInput = {
  address?: InputMaybe<Scalars['String']['input']>;
  applications?: InputMaybe<ApplicationRelateToManyForCreateInput>;
  appliedAt?: InputMaybe<Scalars['DateTime']['input']>;
  city?: InputMaybe<Scalars['String']['input']>;
  country?: InputMaybe<Scalars['String']['input']>;
  desiredPay?: InputMaybe<Scalars['Float']['input']>;
  email?: InputMaybe<Scalars['String']['input']>;
  lastName?: InputMaybe<Scalars['String']['input']>;
  linkedin?: InputMaybe<Scalars['String']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
  phone?: InputMaybe<Scalars['String']['input']>;
  postalCode?: InputMaybe<Scalars['String']['input']>;
  province?: InputMaybe<Scalars['String']['input']>;
  resumeUrl?: InputMaybe<Scalars['String']['input']>;
  website?: InputMaybe<Scalars['String']['input']>;
};

export type JobCandidateOrderByInput = {
  address?: InputMaybe<OrderDirection>;
  appliedAt?: InputMaybe<OrderDirection>;
  city?: InputMaybe<OrderDirection>;
  country?: InputMaybe<OrderDirection>;
  desiredPay?: InputMaybe<OrderDirection>;
  email?: InputMaybe<OrderDirection>;
  id?: InputMaybe<OrderDirection>;
  lastName?: InputMaybe<OrderDirection>;
  linkedin?: InputMaybe<OrderDirection>;
  name?: InputMaybe<OrderDirection>;
  phone?: InputMaybe<OrderDirection>;
  postalCode?: InputMaybe<OrderDirection>;
  province?: InputMaybe<OrderDirection>;
  resumeUrl?: InputMaybe<OrderDirection>;
  website?: InputMaybe<OrderDirection>;
};

export type JobCandidateRelateToOneForCreateInput = {
  connect?: InputMaybe<JobCandidateWhereUniqueInput>;
  create?: InputMaybe<JobCandidateCreateInput>;
};

export type JobCandidateRelateToOneForUpdateInput = {
  connect?: InputMaybe<JobCandidateWhereUniqueInput>;
  create?: InputMaybe<JobCandidateCreateInput>;
  disconnect?: InputMaybe<Scalars['Boolean']['input']>;
};

export type JobCandidateUpdateArgs = {
  data: JobCandidateUpdateInput;
  where: JobCandidateWhereUniqueInput;
};

export type JobCandidateUpdateInput = {
  address?: InputMaybe<Scalars['String']['input']>;
  applications?: InputMaybe<ApplicationRelateToManyForUpdateInput>;
  appliedAt?: InputMaybe<Scalars['DateTime']['input']>;
  city?: InputMaybe<Scalars['String']['input']>;
  country?: InputMaybe<Scalars['String']['input']>;
  desiredPay?: InputMaybe<Scalars['Float']['input']>;
  email?: InputMaybe<Scalars['String']['input']>;
  lastName?: InputMaybe<Scalars['String']['input']>;
  linkedin?: InputMaybe<Scalars['String']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
  phone?: InputMaybe<Scalars['String']['input']>;
  postalCode?: InputMaybe<Scalars['String']['input']>;
  province?: InputMaybe<Scalars['String']['input']>;
  resumeUrl?: InputMaybe<Scalars['String']['input']>;
  website?: InputMaybe<Scalars['String']['input']>;
};

export type JobCandidateWhereInput = {
  AND?: InputMaybe<Array<JobCandidateWhereInput>>;
  NOT?: InputMaybe<Array<JobCandidateWhereInput>>;
  OR?: InputMaybe<Array<JobCandidateWhereInput>>;
  address?: InputMaybe<StringFilter>;
  applications?: InputMaybe<ApplicationManyRelationFilter>;
  appliedAt?: InputMaybe<DateTimeNullableFilter>;
  city?: InputMaybe<StringFilter>;
  country?: InputMaybe<StringFilter>;
  desiredPay?: InputMaybe<FloatNullableFilter>;
  email?: InputMaybe<StringFilter>;
  id?: InputMaybe<IdFilter>;
  lastName?: InputMaybe<StringFilter>;
  linkedin?: InputMaybe<StringFilter>;
  name?: InputMaybe<StringFilter>;
  phone?: InputMaybe<StringFilter>;
  postalCode?: InputMaybe<StringFilter>;
  province?: InputMaybe<StringFilter>;
  resumeUrl?: InputMaybe<StringFilter>;
  website?: InputMaybe<StringFilter>;
};

export type JobCandidateWhereUniqueInput = {
  email?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['ID']['input']>;
};

export type JobOpening = {
  __typename?: 'JobOpening';
  applications?: Maybe<Array<Application>>;
  applicationsCount?: Maybe<Scalars['Int']['output']>;
  department?: Maybe<Scalars['String']['output']>;
  description?: Maybe<Scalars['String']['output']>;
  employmentType?: Maybe<Scalars['String']['output']>;
  id: Scalars['ID']['output'];
  location?: Maybe<Scalars['String']['output']>;
  postedAt?: Maybe<Scalars['DateTime']['output']>;
  seniority?: Maybe<Scalars['String']['output']>;
  title?: Maybe<Scalars['String']['output']>;
};


export type JobOpeningApplicationsArgs = {
  cursor?: InputMaybe<ApplicationWhereUniqueInput>;
  orderBy?: Array<ApplicationOrderByInput>;
  skip?: Scalars['Int']['input'];
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: ApplicationWhereInput;
};


export type JobOpeningApplicationsCountArgs = {
  where?: ApplicationWhereInput;
};

export type JobOpeningCreateInput = {
  applications?: InputMaybe<ApplicationRelateToManyForCreateInput>;
  department?: InputMaybe<Scalars['String']['input']>;
  description?: InputMaybe<Scalars['String']['input']>;
  employmentType?: InputMaybe<Scalars['String']['input']>;
  location?: InputMaybe<Scalars['String']['input']>;
  postedAt?: InputMaybe<Scalars['DateTime']['input']>;
  seniority?: InputMaybe<Scalars['String']['input']>;
  title?: InputMaybe<Scalars['String']['input']>;
};

export type JobOpeningOrderByInput = {
  department?: InputMaybe<OrderDirection>;
  description?: InputMaybe<OrderDirection>;
  employmentType?: InputMaybe<OrderDirection>;
  id?: InputMaybe<OrderDirection>;
  location?: InputMaybe<OrderDirection>;
  postedAt?: InputMaybe<OrderDirection>;
  seniority?: InputMaybe<OrderDirection>;
  title?: InputMaybe<OrderDirection>;
};

export type JobOpeningRelateToOneForCreateInput = {
  connect?: InputMaybe<JobOpeningWhereUniqueInput>;
  create?: InputMaybe<JobOpeningCreateInput>;
};

export type JobOpeningRelateToOneForUpdateInput = {
  connect?: InputMaybe<JobOpeningWhereUniqueInput>;
  create?: InputMaybe<JobOpeningCreateInput>;
  disconnect?: InputMaybe<Scalars['Boolean']['input']>;
};

export type JobOpeningUpdateArgs = {
  data: JobOpeningUpdateInput;
  where: JobOpeningWhereUniqueInput;
};

export type JobOpeningUpdateInput = {
  applications?: InputMaybe<ApplicationRelateToManyForUpdateInput>;
  department?: InputMaybe<Scalars['String']['input']>;
  description?: InputMaybe<Scalars['String']['input']>;
  employmentType?: InputMaybe<Scalars['String']['input']>;
  location?: InputMaybe<Scalars['String']['input']>;
  postedAt?: InputMaybe<Scalars['DateTime']['input']>;
  seniority?: InputMaybe<Scalars['String']['input']>;
  title?: InputMaybe<Scalars['String']['input']>;
};

export type JobOpeningWhereInput = {
  AND?: InputMaybe<Array<JobOpeningWhereInput>>;
  NOT?: InputMaybe<Array<JobOpeningWhereInput>>;
  OR?: InputMaybe<Array<JobOpeningWhereInput>>;
  applications?: InputMaybe<ApplicationManyRelationFilter>;
  department?: InputMaybe<StringFilter>;
  description?: InputMaybe<StringFilter>;
  employmentType?: InputMaybe<StringNullableFilter>;
  id?: InputMaybe<IdFilter>;
  location?: InputMaybe<StringFilter>;
  postedAt?: InputMaybe<DateTimeNullableFilter>;
  seniority?: InputMaybe<StringNullableFilter>;
  title?: InputMaybe<StringFilter>;
};

export type JobOpeningWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']['input']>;
};

export type Kpi = {
  __typename?: 'KPI';
  category?: Maybe<CategoryKpi>;
  createdAt?: Maybe<Scalars['DateTime']['output']>;
  currentValue?: Maybe<Scalars['Float']['output']>;
  dateTarget?: Maybe<Scalars['DateTime']['output']>;
  description?: Maybe<Scalars['String']['output']>;
  id: Scalars['ID']['output'];
  target?: Maybe<Scalars['Float']['output']>;
  title?: Maybe<Scalars['String']['output']>;
  updatedAt?: Maybe<Scalars['DateTime']['output']>;
  visible?: Maybe<Scalars['Boolean']['output']>;
};

export type KpiCreateInput = {
  category?: InputMaybe<CategoryKpiRelateToOneForCreateInput>;
  createdAt?: InputMaybe<Scalars['DateTime']['input']>;
  currentValue?: InputMaybe<Scalars['Float']['input']>;
  dateTarget?: InputMaybe<Scalars['DateTime']['input']>;
  description?: InputMaybe<Scalars['String']['input']>;
  target?: InputMaybe<Scalars['Float']['input']>;
  title?: InputMaybe<Scalars['String']['input']>;
  updatedAt?: InputMaybe<Scalars['DateTime']['input']>;
  visible?: InputMaybe<Scalars['Boolean']['input']>;
};

export type KpiManyRelationFilter = {
  every?: InputMaybe<KpiWhereInput>;
  none?: InputMaybe<KpiWhereInput>;
  some?: InputMaybe<KpiWhereInput>;
};

export type KpiOrderByInput = {
  createdAt?: InputMaybe<OrderDirection>;
  currentValue?: InputMaybe<OrderDirection>;
  dateTarget?: InputMaybe<OrderDirection>;
  description?: InputMaybe<OrderDirection>;
  id?: InputMaybe<OrderDirection>;
  target?: InputMaybe<OrderDirection>;
  title?: InputMaybe<OrderDirection>;
  updatedAt?: InputMaybe<OrderDirection>;
  visible?: InputMaybe<OrderDirection>;
};

export type KpiRelateToManyForCreateInput = {
  connect?: InputMaybe<Array<KpiWhereUniqueInput>>;
  create?: InputMaybe<Array<KpiCreateInput>>;
};

export type KpiRelateToManyForUpdateInput = {
  connect?: InputMaybe<Array<KpiWhereUniqueInput>>;
  create?: InputMaybe<Array<KpiCreateInput>>;
  disconnect?: InputMaybe<Array<KpiWhereUniqueInput>>;
  set?: InputMaybe<Array<KpiWhereUniqueInput>>;
};

export type KpiUpdateArgs = {
  data: KpiUpdateInput;
  where: KpiWhereUniqueInput;
};

export type KpiUpdateInput = {
  category?: InputMaybe<CategoryKpiRelateToOneForUpdateInput>;
  createdAt?: InputMaybe<Scalars['DateTime']['input']>;
  currentValue?: InputMaybe<Scalars['Float']['input']>;
  dateTarget?: InputMaybe<Scalars['DateTime']['input']>;
  description?: InputMaybe<Scalars['String']['input']>;
  target?: InputMaybe<Scalars['Float']['input']>;
  title?: InputMaybe<Scalars['String']['input']>;
  updatedAt?: InputMaybe<Scalars['DateTime']['input']>;
  visible?: InputMaybe<Scalars['Boolean']['input']>;
};

export type KpiWhereInput = {
  AND?: InputMaybe<Array<KpiWhereInput>>;
  NOT?: InputMaybe<Array<KpiWhereInput>>;
  OR?: InputMaybe<Array<KpiWhereInput>>;
  category?: InputMaybe<CategoryKpiWhereInput>;
  createdAt?: InputMaybe<DateTimeNullableFilter>;
  currentValue?: InputMaybe<FloatNullableFilter>;
  dateTarget?: InputMaybe<DateTimeFilter>;
  description?: InputMaybe<StringFilter>;
  id?: InputMaybe<IdFilter>;
  target?: InputMaybe<FloatFilter>;
  title?: InputMaybe<StringFilter>;
  updatedAt?: InputMaybe<DateTimeNullableFilter>;
  visible?: InputMaybe<BooleanFilter>;
};

export type KpiWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']['input']>;
};

export type KeystoneAdminMeta = {
  __typename?: 'KeystoneAdminMeta';
  list?: Maybe<KeystoneAdminUiListMeta>;
  lists: Array<KeystoneAdminUiListMeta>;
};


export type KeystoneAdminMetaListArgs = {
  key: Scalars['String']['input'];
};

export type KeystoneAdminUiFieldGroupMeta = {
  __typename?: 'KeystoneAdminUIFieldGroupMeta';
  description?: Maybe<Scalars['String']['output']>;
  fields: Array<KeystoneAdminUiFieldMeta>;
  label: Scalars['String']['output'];
};

export type KeystoneAdminUiFieldMeta = {
  __typename?: 'KeystoneAdminUIFieldMeta';
  createView: KeystoneAdminUiFieldMetaCreateView;
  customViewsIndex?: Maybe<Scalars['Int']['output']>;
  description?: Maybe<Scalars['String']['output']>;
  fieldMeta?: Maybe<Scalars['JSON']['output']>;
  isFilterable: Scalars['Boolean']['output'];
  isNonNull?: Maybe<Array<KeystoneAdminUiFieldMetaIsNonNull>>;
  isOrderable: Scalars['Boolean']['output'];
  itemView?: Maybe<KeystoneAdminUiFieldMetaItemView>;
  label: Scalars['String']['output'];
  listView: KeystoneAdminUiFieldMetaListView;
  path: Scalars['String']['output'];
  search?: Maybe<QueryMode>;
  viewsIndex: Scalars['Int']['output'];
};


export type KeystoneAdminUiFieldMetaItemViewArgs = {
  id?: InputMaybe<Scalars['ID']['input']>;
};

export type KeystoneAdminUiFieldMetaCreateView = {
  __typename?: 'KeystoneAdminUIFieldMetaCreateView';
  fieldMode: KeystoneAdminUiFieldMetaCreateViewFieldMode;
};

export enum KeystoneAdminUiFieldMetaCreateViewFieldMode {
  Edit = 'edit',
  Hidden = 'hidden'
}

export enum KeystoneAdminUiFieldMetaIsNonNull {
  Create = 'create',
  Read = 'read',
  Update = 'update'
}

export type KeystoneAdminUiFieldMetaItemView = {
  __typename?: 'KeystoneAdminUIFieldMetaItemView';
  fieldMode?: Maybe<KeystoneAdminUiFieldMetaItemViewFieldMode>;
  fieldPosition?: Maybe<KeystoneAdminUiFieldMetaItemViewFieldPosition>;
};

export enum KeystoneAdminUiFieldMetaItemViewFieldMode {
  Edit = 'edit',
  Hidden = 'hidden',
  Read = 'read'
}

export enum KeystoneAdminUiFieldMetaItemViewFieldPosition {
  Form = 'form',
  Sidebar = 'sidebar'
}

export type KeystoneAdminUiFieldMetaListView = {
  __typename?: 'KeystoneAdminUIFieldMetaListView';
  fieldMode: KeystoneAdminUiFieldMetaListViewFieldMode;
};

export enum KeystoneAdminUiFieldMetaListViewFieldMode {
  Hidden = 'hidden',
  Read = 'read'
}

export type KeystoneAdminUiGraphQl = {
  __typename?: 'KeystoneAdminUIGraphQL';
  names: KeystoneAdminUiGraphQlNames;
};

export type KeystoneAdminUiGraphQlNames = {
  __typename?: 'KeystoneAdminUIGraphQLNames';
  createInputName: Scalars['String']['output'];
  createManyMutationName: Scalars['String']['output'];
  createMutationName: Scalars['String']['output'];
  deleteManyMutationName: Scalars['String']['output'];
  deleteMutationName: Scalars['String']['output'];
  itemQueryName: Scalars['String']['output'];
  listOrderName: Scalars['String']['output'];
  listQueryCountName: Scalars['String']['output'];
  listQueryName: Scalars['String']['output'];
  outputTypeName: Scalars['String']['output'];
  relateToManyForCreateInputName: Scalars['String']['output'];
  relateToManyForUpdateInputName: Scalars['String']['output'];
  relateToOneForCreateInputName: Scalars['String']['output'];
  relateToOneForUpdateInputName: Scalars['String']['output'];
  updateInputName: Scalars['String']['output'];
  updateManyInputName: Scalars['String']['output'];
  updateManyMutationName: Scalars['String']['output'];
  updateMutationName: Scalars['String']['output'];
  whereInputName: Scalars['String']['output'];
  whereUniqueInputName: Scalars['String']['output'];
};

export type KeystoneAdminUiListMeta = {
  __typename?: 'KeystoneAdminUIListMeta';
  description?: Maybe<Scalars['String']['output']>;
  fields: Array<KeystoneAdminUiFieldMeta>;
  graphql: KeystoneAdminUiGraphQl;
  groups: Array<KeystoneAdminUiFieldGroupMeta>;
  hideCreate: Scalars['Boolean']['output'];
  hideDelete: Scalars['Boolean']['output'];
  initialColumns: Array<Scalars['String']['output']>;
  initialSearchFields: Array<Scalars['String']['output']>;
  initialSort?: Maybe<KeystoneAdminUiSort>;
  isHidden: Scalars['Boolean']['output'];
  isSingleton: Scalars['Boolean']['output'];
  itemQueryName: Scalars['String']['output'];
  key: Scalars['String']['output'];
  label: Scalars['String']['output'];
  labelField: Scalars['String']['output'];
  listQueryName: Scalars['String']['output'];
  pageSize: Scalars['Int']['output'];
  path: Scalars['String']['output'];
  plural: Scalars['String']['output'];
  singular: Scalars['String']['output'];
};

export type KeystoneAdminUiSort = {
  __typename?: 'KeystoneAdminUISort';
  direction: KeystoneAdminUiSortDirection;
  field: Scalars['String']['output'];
};

export enum KeystoneAdminUiSortDirection {
  Asc = 'ASC',
  Desc = 'DESC'
}

export type KeystoneMeta = {
  __typename?: 'KeystoneMeta';
  adminMeta: KeystoneAdminMeta;
};

export type LandCoverStatistic = {
  __typename?: 'LandCoverStatistic';
  breakdown?: Maybe<Scalars['JSON']['output']>;
  field?: Maybe<Field>;
  id: Scalars['ID']['output'];
  imageUrl?: Maybe<Scalars['String']['output']>;
  recordedAt?: Maybe<Scalars['DateTime']['output']>;
  year?: Maybe<Scalars['Int']['output']>;
};

export type LandCoverStatisticCreateInput = {
  breakdown?: InputMaybe<Scalars['JSON']['input']>;
  field?: InputMaybe<FieldRelateToOneForCreateInput>;
  imageUrl?: InputMaybe<Scalars['String']['input']>;
  recordedAt?: InputMaybe<Scalars['DateTime']['input']>;
  year?: InputMaybe<Scalars['Int']['input']>;
};

export type LandCoverStatisticManyRelationFilter = {
  every?: InputMaybe<LandCoverStatisticWhereInput>;
  none?: InputMaybe<LandCoverStatisticWhereInput>;
  some?: InputMaybe<LandCoverStatisticWhereInput>;
};

export type LandCoverStatisticOrderByInput = {
  id?: InputMaybe<OrderDirection>;
  imageUrl?: InputMaybe<OrderDirection>;
  recordedAt?: InputMaybe<OrderDirection>;
  year?: InputMaybe<OrderDirection>;
};

export type LandCoverStatisticRelateToManyForCreateInput = {
  connect?: InputMaybe<Array<LandCoverStatisticWhereUniqueInput>>;
  create?: InputMaybe<Array<LandCoverStatisticCreateInput>>;
};

export type LandCoverStatisticRelateToManyForUpdateInput = {
  connect?: InputMaybe<Array<LandCoverStatisticWhereUniqueInput>>;
  create?: InputMaybe<Array<LandCoverStatisticCreateInput>>;
  disconnect?: InputMaybe<Array<LandCoverStatisticWhereUniqueInput>>;
  set?: InputMaybe<Array<LandCoverStatisticWhereUniqueInput>>;
};

export type LandCoverStatisticUpdateArgs = {
  data: LandCoverStatisticUpdateInput;
  where: LandCoverStatisticWhereUniqueInput;
};

export type LandCoverStatisticUpdateInput = {
  breakdown?: InputMaybe<Scalars['JSON']['input']>;
  field?: InputMaybe<FieldRelateToOneForUpdateInput>;
  imageUrl?: InputMaybe<Scalars['String']['input']>;
  recordedAt?: InputMaybe<Scalars['DateTime']['input']>;
  year?: InputMaybe<Scalars['Int']['input']>;
};

export type LandCoverStatisticWhereInput = {
  AND?: InputMaybe<Array<LandCoverStatisticWhereInput>>;
  NOT?: InputMaybe<Array<LandCoverStatisticWhereInput>>;
  OR?: InputMaybe<Array<LandCoverStatisticWhereInput>>;
  field?: InputMaybe<FieldWhereInput>;
  id?: InputMaybe<IdFilter>;
  imageUrl?: InputMaybe<StringFilter>;
  recordedAt?: InputMaybe<DateTimeNullableFilter>;
  year?: InputMaybe<IntNullableFilter>;
};

export type LandCoverStatisticWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']['input']>;
};

export type Membership = {
  __typename?: 'Membership';
  id: Scalars['ID']['output'];
  organisation?: Maybe<Organisation>;
  role?: Maybe<Scalars['String']['output']>;
  user?: Maybe<User>;
};

export type MembershipCreateInput = {
  organisation?: InputMaybe<OrganisationRelateToOneForCreateInput>;
  role?: InputMaybe<Scalars['String']['input']>;
  user?: InputMaybe<UserRelateToOneForCreateInput>;
};

export type MembershipManyRelationFilter = {
  every?: InputMaybe<MembershipWhereInput>;
  none?: InputMaybe<MembershipWhereInput>;
  some?: InputMaybe<MembershipWhereInput>;
};

export type MembershipOrderByInput = {
  id?: InputMaybe<OrderDirection>;
  role?: InputMaybe<OrderDirection>;
};

export type MembershipRelateToManyForCreateInput = {
  connect?: InputMaybe<Array<MembershipWhereUniqueInput>>;
  create?: InputMaybe<Array<MembershipCreateInput>>;
};

export type MembershipRelateToManyForUpdateInput = {
  connect?: InputMaybe<Array<MembershipWhereUniqueInput>>;
  create?: InputMaybe<Array<MembershipCreateInput>>;
  disconnect?: InputMaybe<Array<MembershipWhereUniqueInput>>;
  set?: InputMaybe<Array<MembershipWhereUniqueInput>>;
};

export type MembershipUpdateArgs = {
  data: MembershipUpdateInput;
  where: MembershipWhereUniqueInput;
};

export type MembershipUpdateInput = {
  organisation?: InputMaybe<OrganisationRelateToOneForUpdateInput>;
  role?: InputMaybe<Scalars['String']['input']>;
  user?: InputMaybe<UserRelateToOneForUpdateInput>;
};

export type MembershipWhereInput = {
  AND?: InputMaybe<Array<MembershipWhereInput>>;
  NOT?: InputMaybe<Array<MembershipWhereInput>>;
  OR?: InputMaybe<Array<MembershipWhereInput>>;
  id?: InputMaybe<IdFilter>;
  organisation?: InputMaybe<OrganisationWhereInput>;
  role?: InputMaybe<StringNullableFilter>;
  user?: InputMaybe<UserWhereInput>;
};

export type MembershipWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']['input']>;
};

export type MessageClick = {
  __typename?: 'MessageClick';
  clickedAt?: Maybe<Scalars['DateTime']['output']>;
  delivery?: Maybe<MessageDelivery>;
  id: Scalars['ID']['output'];
};

export type MessageClickCreateInput = {
  clickedAt?: InputMaybe<Scalars['DateTime']['input']>;
  delivery?: InputMaybe<MessageDeliveryRelateToOneForCreateInput>;
};

export type MessageClickManyRelationFilter = {
  every?: InputMaybe<MessageClickWhereInput>;
  none?: InputMaybe<MessageClickWhereInput>;
  some?: InputMaybe<MessageClickWhereInput>;
};

export type MessageClickOrderByInput = {
  clickedAt?: InputMaybe<OrderDirection>;
  id?: InputMaybe<OrderDirection>;
};

export type MessageClickRelateToManyForCreateInput = {
  connect?: InputMaybe<Array<MessageClickWhereUniqueInput>>;
  create?: InputMaybe<Array<MessageClickCreateInput>>;
};

export type MessageClickRelateToManyForUpdateInput = {
  connect?: InputMaybe<Array<MessageClickWhereUniqueInput>>;
  create?: InputMaybe<Array<MessageClickCreateInput>>;
  disconnect?: InputMaybe<Array<MessageClickWhereUniqueInput>>;
  set?: InputMaybe<Array<MessageClickWhereUniqueInput>>;
};

export type MessageClickUpdateArgs = {
  data: MessageClickUpdateInput;
  where: MessageClickWhereUniqueInput;
};

export type MessageClickUpdateInput = {
  clickedAt?: InputMaybe<Scalars['DateTime']['input']>;
  delivery?: InputMaybe<MessageDeliveryRelateToOneForUpdateInput>;
};

export type MessageClickWhereInput = {
  AND?: InputMaybe<Array<MessageClickWhereInput>>;
  NOT?: InputMaybe<Array<MessageClickWhereInput>>;
  OR?: InputMaybe<Array<MessageClickWhereInput>>;
  clickedAt?: InputMaybe<DateTimeNullableFilter>;
  delivery?: InputMaybe<MessageDeliveryWhereInput>;
  id?: InputMaybe<IdFilter>;
};

export type MessageClickWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']['input']>;
};

export type MessageDelivery = {
  __typename?: 'MessageDelivery';
  clicks?: Maybe<Array<MessageClick>>;
  clicksCount?: Maybe<Scalars['Int']['output']>;
  createdAt?: Maybe<Scalars['DateTime']['output']>;
  id: Scalars['ID']['output'];
  lastShownAt?: Maybe<Scalars['DateTime']['output']>;
  organisation?: Maybe<Organisation>;
  status?: Maybe<Scalars['String']['output']>;
  template?: Maybe<MessageTemplate>;
  urgency?: Maybe<Scalars['String']['output']>;
  user?: Maybe<User>;
  views?: Maybe<Scalars['Int']['output']>;
};


export type MessageDeliveryClicksArgs = {
  cursor?: InputMaybe<MessageClickWhereUniqueInput>;
  orderBy?: Array<MessageClickOrderByInput>;
  skip?: Scalars['Int']['input'];
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: MessageClickWhereInput;
};


export type MessageDeliveryClicksCountArgs = {
  where?: MessageClickWhereInput;
};

export type MessageDeliveryCreateInput = {
  clicks?: InputMaybe<MessageClickRelateToManyForCreateInput>;
  createdAt?: InputMaybe<Scalars['DateTime']['input']>;
  lastShownAt?: InputMaybe<Scalars['DateTime']['input']>;
  organisation?: InputMaybe<OrganisationRelateToOneForCreateInput>;
  status?: InputMaybe<Scalars['String']['input']>;
  template?: InputMaybe<MessageTemplateRelateToOneForCreateInput>;
  urgency?: InputMaybe<Scalars['String']['input']>;
  user?: InputMaybe<UserRelateToOneForCreateInput>;
  views?: InputMaybe<Scalars['Int']['input']>;
};

export type MessageDeliveryManyRelationFilter = {
  every?: InputMaybe<MessageDeliveryWhereInput>;
  none?: InputMaybe<MessageDeliveryWhereInput>;
  some?: InputMaybe<MessageDeliveryWhereInput>;
};

export type MessageDeliveryOrderByInput = {
  createdAt?: InputMaybe<OrderDirection>;
  id?: InputMaybe<OrderDirection>;
  lastShownAt?: InputMaybe<OrderDirection>;
  status?: InputMaybe<OrderDirection>;
  urgency?: InputMaybe<OrderDirection>;
  views?: InputMaybe<OrderDirection>;
};

export type MessageDeliveryRelateToManyForCreateInput = {
  connect?: InputMaybe<Array<MessageDeliveryWhereUniqueInput>>;
  create?: InputMaybe<Array<MessageDeliveryCreateInput>>;
};

export type MessageDeliveryRelateToManyForUpdateInput = {
  connect?: InputMaybe<Array<MessageDeliveryWhereUniqueInput>>;
  create?: InputMaybe<Array<MessageDeliveryCreateInput>>;
  disconnect?: InputMaybe<Array<MessageDeliveryWhereUniqueInput>>;
  set?: InputMaybe<Array<MessageDeliveryWhereUniqueInput>>;
};

export type MessageDeliveryRelateToOneForCreateInput = {
  connect?: InputMaybe<MessageDeliveryWhereUniqueInput>;
  create?: InputMaybe<MessageDeliveryCreateInput>;
};

export type MessageDeliveryRelateToOneForUpdateInput = {
  connect?: InputMaybe<MessageDeliveryWhereUniqueInput>;
  create?: InputMaybe<MessageDeliveryCreateInput>;
  disconnect?: InputMaybe<Scalars['Boolean']['input']>;
};

export type MessageDeliveryUpdateArgs = {
  data: MessageDeliveryUpdateInput;
  where: MessageDeliveryWhereUniqueInput;
};

export type MessageDeliveryUpdateInput = {
  clicks?: InputMaybe<MessageClickRelateToManyForUpdateInput>;
  createdAt?: InputMaybe<Scalars['DateTime']['input']>;
  lastShownAt?: InputMaybe<Scalars['DateTime']['input']>;
  organisation?: InputMaybe<OrganisationRelateToOneForUpdateInput>;
  status?: InputMaybe<Scalars['String']['input']>;
  template?: InputMaybe<MessageTemplateRelateToOneForUpdateInput>;
  urgency?: InputMaybe<Scalars['String']['input']>;
  user?: InputMaybe<UserRelateToOneForUpdateInput>;
  views?: InputMaybe<Scalars['Int']['input']>;
};

export type MessageDeliveryWhereInput = {
  AND?: InputMaybe<Array<MessageDeliveryWhereInput>>;
  NOT?: InputMaybe<Array<MessageDeliveryWhereInput>>;
  OR?: InputMaybe<Array<MessageDeliveryWhereInput>>;
  clicks?: InputMaybe<MessageClickManyRelationFilter>;
  createdAt?: InputMaybe<DateTimeNullableFilter>;
  id?: InputMaybe<IdFilter>;
  lastShownAt?: InputMaybe<DateTimeNullableFilter>;
  organisation?: InputMaybe<OrganisationWhereInput>;
  status?: InputMaybe<StringNullableFilter>;
  template?: InputMaybe<MessageTemplateWhereInput>;
  urgency?: InputMaybe<StringNullableFilter>;
  user?: InputMaybe<UserWhereInput>;
  views?: InputMaybe<IntNullableFilter>;
};

export type MessageDeliveryWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']['input']>;
};

export type MessageTemplate = {
  __typename?: 'MessageTemplate';
  bodyMarkdown?: Maybe<Scalars['String']['output']>;
  channelMask?: Maybe<Scalars['JSON']['output']>;
  countryScope?: Maybe<Scalars['JSON']['output']>;
  createdAt?: Maybe<Scalars['DateTime']['output']>;
  ctaLabel?: Maybe<Scalars['String']['output']>;
  ctaLink?: Maybe<Scalars['String']['output']>;
  deliveries?: Maybe<Array<MessageDelivery>>;
  deliveriesCount?: Maybe<Scalars['Int']['output']>;
  endAt?: Maybe<Scalars['DateTime']['output']>;
  id: Scalars['ID']['output'];
  langScope?: Maybe<Scalars['JSON']['output']>;
  maxViews?: Maybe<Scalars['Int']['output']>;
  mediaId?: Maybe<Scalars['String']['output']>;
  requireAcknowledgement?: Maybe<Scalars['Boolean']['output']>;
  startAt?: Maybe<Scalars['DateTime']['output']>;
  tags?: Maybe<Scalars['JSON']['output']>;
  targetFarmSizeHaMax?: Maybe<Scalars['Float']['output']>;
  targetFarmSizeHaMin?: Maybe<Scalars['Float']['output']>;
  targetOrganisationIds?: Maybe<Scalars['JSON']['output']>;
  targetPlans?: Maybe<Scalars['JSON']['output']>;
  targetRoles?: Maybe<Scalars['JSON']['output']>;
  title?: Maybe<Scalars['String']['output']>;
  type?: Maybe<Scalars['String']['output']>;
  updatedAt?: Maybe<Scalars['DateTime']['output']>;
  urgency?: Maybe<Scalars['String']['output']>;
};


export type MessageTemplateDeliveriesArgs = {
  cursor?: InputMaybe<MessageDeliveryWhereUniqueInput>;
  orderBy?: Array<MessageDeliveryOrderByInput>;
  skip?: Scalars['Int']['input'];
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: MessageDeliveryWhereInput;
};


export type MessageTemplateDeliveriesCountArgs = {
  where?: MessageDeliveryWhereInput;
};

export type MessageTemplateCreateInput = {
  bodyMarkdown?: InputMaybe<Scalars['String']['input']>;
  channelMask?: InputMaybe<Scalars['JSON']['input']>;
  countryScope?: InputMaybe<Scalars['JSON']['input']>;
  createdAt?: InputMaybe<Scalars['DateTime']['input']>;
  ctaLabel?: InputMaybe<Scalars['String']['input']>;
  ctaLink?: InputMaybe<Scalars['String']['input']>;
  deliveries?: InputMaybe<MessageDeliveryRelateToManyForCreateInput>;
  endAt?: InputMaybe<Scalars['DateTime']['input']>;
  langScope?: InputMaybe<Scalars['JSON']['input']>;
  maxViews?: InputMaybe<Scalars['Int']['input']>;
  mediaId?: InputMaybe<Scalars['String']['input']>;
  requireAcknowledgement?: InputMaybe<Scalars['Boolean']['input']>;
  startAt?: InputMaybe<Scalars['DateTime']['input']>;
  tags?: InputMaybe<Scalars['JSON']['input']>;
  targetFarmSizeHaMax?: InputMaybe<Scalars['Float']['input']>;
  targetFarmSizeHaMin?: InputMaybe<Scalars['Float']['input']>;
  targetOrganisationIds?: InputMaybe<Scalars['JSON']['input']>;
  targetPlans?: InputMaybe<Scalars['JSON']['input']>;
  targetRoles?: InputMaybe<Scalars['JSON']['input']>;
  title?: InputMaybe<Scalars['String']['input']>;
  type?: InputMaybe<Scalars['String']['input']>;
  updatedAt?: InputMaybe<Scalars['DateTime']['input']>;
  urgency?: InputMaybe<Scalars['String']['input']>;
};

export type MessageTemplateOrderByInput = {
  bodyMarkdown?: InputMaybe<OrderDirection>;
  createdAt?: InputMaybe<OrderDirection>;
  ctaLabel?: InputMaybe<OrderDirection>;
  ctaLink?: InputMaybe<OrderDirection>;
  endAt?: InputMaybe<OrderDirection>;
  id?: InputMaybe<OrderDirection>;
  maxViews?: InputMaybe<OrderDirection>;
  mediaId?: InputMaybe<OrderDirection>;
  requireAcknowledgement?: InputMaybe<OrderDirection>;
  startAt?: InputMaybe<OrderDirection>;
  targetFarmSizeHaMax?: InputMaybe<OrderDirection>;
  targetFarmSizeHaMin?: InputMaybe<OrderDirection>;
  title?: InputMaybe<OrderDirection>;
  type?: InputMaybe<OrderDirection>;
  updatedAt?: InputMaybe<OrderDirection>;
  urgency?: InputMaybe<OrderDirection>;
};

export type MessageTemplateRelateToOneForCreateInput = {
  connect?: InputMaybe<MessageTemplateWhereUniqueInput>;
  create?: InputMaybe<MessageTemplateCreateInput>;
};

export type MessageTemplateRelateToOneForUpdateInput = {
  connect?: InputMaybe<MessageTemplateWhereUniqueInput>;
  create?: InputMaybe<MessageTemplateCreateInput>;
  disconnect?: InputMaybe<Scalars['Boolean']['input']>;
};

export type MessageTemplateUpdateArgs = {
  data: MessageTemplateUpdateInput;
  where: MessageTemplateWhereUniqueInput;
};

export type MessageTemplateUpdateInput = {
  bodyMarkdown?: InputMaybe<Scalars['String']['input']>;
  channelMask?: InputMaybe<Scalars['JSON']['input']>;
  countryScope?: InputMaybe<Scalars['JSON']['input']>;
  createdAt?: InputMaybe<Scalars['DateTime']['input']>;
  ctaLabel?: InputMaybe<Scalars['String']['input']>;
  ctaLink?: InputMaybe<Scalars['String']['input']>;
  deliveries?: InputMaybe<MessageDeliveryRelateToManyForUpdateInput>;
  endAt?: InputMaybe<Scalars['DateTime']['input']>;
  langScope?: InputMaybe<Scalars['JSON']['input']>;
  maxViews?: InputMaybe<Scalars['Int']['input']>;
  mediaId?: InputMaybe<Scalars['String']['input']>;
  requireAcknowledgement?: InputMaybe<Scalars['Boolean']['input']>;
  startAt?: InputMaybe<Scalars['DateTime']['input']>;
  tags?: InputMaybe<Scalars['JSON']['input']>;
  targetFarmSizeHaMax?: InputMaybe<Scalars['Float']['input']>;
  targetFarmSizeHaMin?: InputMaybe<Scalars['Float']['input']>;
  targetOrganisationIds?: InputMaybe<Scalars['JSON']['input']>;
  targetPlans?: InputMaybe<Scalars['JSON']['input']>;
  targetRoles?: InputMaybe<Scalars['JSON']['input']>;
  title?: InputMaybe<Scalars['String']['input']>;
  type?: InputMaybe<Scalars['String']['input']>;
  updatedAt?: InputMaybe<Scalars['DateTime']['input']>;
  urgency?: InputMaybe<Scalars['String']['input']>;
};

export type MessageTemplateWhereInput = {
  AND?: InputMaybe<Array<MessageTemplateWhereInput>>;
  NOT?: InputMaybe<Array<MessageTemplateWhereInput>>;
  OR?: InputMaybe<Array<MessageTemplateWhereInput>>;
  bodyMarkdown?: InputMaybe<StringFilter>;
  createdAt?: InputMaybe<DateTimeNullableFilter>;
  ctaLabel?: InputMaybe<StringFilter>;
  ctaLink?: InputMaybe<StringFilter>;
  deliveries?: InputMaybe<MessageDeliveryManyRelationFilter>;
  endAt?: InputMaybe<DateTimeNullableFilter>;
  id?: InputMaybe<IdFilter>;
  maxViews?: InputMaybe<IntNullableFilter>;
  mediaId?: InputMaybe<StringFilter>;
  requireAcknowledgement?: InputMaybe<BooleanFilter>;
  startAt?: InputMaybe<DateTimeNullableFilter>;
  targetFarmSizeHaMax?: InputMaybe<FloatNullableFilter>;
  targetFarmSizeHaMin?: InputMaybe<FloatNullableFilter>;
  title?: InputMaybe<StringFilter>;
  type?: InputMaybe<StringNullableFilter>;
  updatedAt?: InputMaybe<DateTimeNullableFilter>;
  urgency?: InputMaybe<StringNullableFilter>;
};

export type MessageTemplateWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']['input']>;
};

export type MilkAnalysis = {
  __typename?: 'MilkAnalysis';
  conductivity?: Maybe<Scalars['Float']['output']>;
  fat_pct?: Maybe<Scalars['Float']['output']>;
  id: Scalars['ID']['output'];
  lactose_pct?: Maybe<Scalars['Float']['output']>;
  milking?: Maybe<MilkingEvent>;
  protein_pct?: Maybe<Scalars['Float']['output']>;
  scc?: Maybe<Scalars['Int']['output']>;
  urea_mg_dl?: Maybe<Scalars['Float']['output']>;
};

export type MilkAnalysisCreateInput = {
  conductivity?: InputMaybe<Scalars['Float']['input']>;
  fat_pct?: InputMaybe<Scalars['Float']['input']>;
  lactose_pct?: InputMaybe<Scalars['Float']['input']>;
  milking?: InputMaybe<MilkingEventRelateToOneForCreateInput>;
  protein_pct?: InputMaybe<Scalars['Float']['input']>;
  scc?: InputMaybe<Scalars['Int']['input']>;
  urea_mg_dl?: InputMaybe<Scalars['Float']['input']>;
};

export type MilkAnalysisOrderByInput = {
  conductivity?: InputMaybe<OrderDirection>;
  fat_pct?: InputMaybe<OrderDirection>;
  id?: InputMaybe<OrderDirection>;
  lactose_pct?: InputMaybe<OrderDirection>;
  protein_pct?: InputMaybe<OrderDirection>;
  scc?: InputMaybe<OrderDirection>;
  urea_mg_dl?: InputMaybe<OrderDirection>;
};

export type MilkAnalysisRelateToOneForCreateInput = {
  connect?: InputMaybe<MilkAnalysisWhereUniqueInput>;
  create?: InputMaybe<MilkAnalysisCreateInput>;
};

export type MilkAnalysisRelateToOneForUpdateInput = {
  connect?: InputMaybe<MilkAnalysisWhereUniqueInput>;
  create?: InputMaybe<MilkAnalysisCreateInput>;
  disconnect?: InputMaybe<Scalars['Boolean']['input']>;
};

export type MilkAnalysisUpdateArgs = {
  data: MilkAnalysisUpdateInput;
  where: MilkAnalysisWhereUniqueInput;
};

export type MilkAnalysisUpdateInput = {
  conductivity?: InputMaybe<Scalars['Float']['input']>;
  fat_pct?: InputMaybe<Scalars['Float']['input']>;
  lactose_pct?: InputMaybe<Scalars['Float']['input']>;
  milking?: InputMaybe<MilkingEventRelateToOneForUpdateInput>;
  protein_pct?: InputMaybe<Scalars['Float']['input']>;
  scc?: InputMaybe<Scalars['Int']['input']>;
  urea_mg_dl?: InputMaybe<Scalars['Float']['input']>;
};

export type MilkAnalysisWhereInput = {
  AND?: InputMaybe<Array<MilkAnalysisWhereInput>>;
  NOT?: InputMaybe<Array<MilkAnalysisWhereInput>>;
  OR?: InputMaybe<Array<MilkAnalysisWhereInput>>;
  conductivity?: InputMaybe<FloatNullableFilter>;
  fat_pct?: InputMaybe<FloatNullableFilter>;
  id?: InputMaybe<IdFilter>;
  lactose_pct?: InputMaybe<FloatNullableFilter>;
  milking?: InputMaybe<MilkingEventWhereInput>;
  protein_pct?: InputMaybe<FloatNullableFilter>;
  scc?: InputMaybe<IntNullableFilter>;
  urea_mg_dl?: InputMaybe<FloatNullableFilter>;
};

export type MilkAnalysisWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']['input']>;
};

export type MilkingEvent = {
  __typename?: 'MilkingEvent';
  analysis?: Maybe<MilkAnalysis>;
  barn?: Maybe<Barn>;
  box?: Maybe<Box>;
  dateTime?: Maybe<Scalars['DateTime']['output']>;
  id: Scalars['ID']['output'];
  milk_kg?: Maybe<Scalars['Float']['output']>;
  operator?: Maybe<Operator>;
};

export type MilkingEventCreateInput = {
  analysis?: InputMaybe<MilkAnalysisRelateToOneForCreateInput>;
  barn?: InputMaybe<BarnRelateToOneForCreateInput>;
  box?: InputMaybe<BoxRelateToOneForCreateInput>;
  dateTime?: InputMaybe<Scalars['DateTime']['input']>;
  milk_kg?: InputMaybe<Scalars['Float']['input']>;
  operator?: InputMaybe<OperatorRelateToOneForCreateInput>;
};

export type MilkingEventManyRelationFilter = {
  every?: InputMaybe<MilkingEventWhereInput>;
  none?: InputMaybe<MilkingEventWhereInput>;
  some?: InputMaybe<MilkingEventWhereInput>;
};

export type MilkingEventOrderByInput = {
  dateTime?: InputMaybe<OrderDirection>;
  id?: InputMaybe<OrderDirection>;
  milk_kg?: InputMaybe<OrderDirection>;
};

export type MilkingEventRelateToManyForCreateInput = {
  connect?: InputMaybe<Array<MilkingEventWhereUniqueInput>>;
  create?: InputMaybe<Array<MilkingEventCreateInput>>;
};

export type MilkingEventRelateToManyForUpdateInput = {
  connect?: InputMaybe<Array<MilkingEventWhereUniqueInput>>;
  create?: InputMaybe<Array<MilkingEventCreateInput>>;
  disconnect?: InputMaybe<Array<MilkingEventWhereUniqueInput>>;
  set?: InputMaybe<Array<MilkingEventWhereUniqueInput>>;
};

export type MilkingEventRelateToOneForCreateInput = {
  connect?: InputMaybe<MilkingEventWhereUniqueInput>;
  create?: InputMaybe<MilkingEventCreateInput>;
};

export type MilkingEventRelateToOneForUpdateInput = {
  connect?: InputMaybe<MilkingEventWhereUniqueInput>;
  create?: InputMaybe<MilkingEventCreateInput>;
  disconnect?: InputMaybe<Scalars['Boolean']['input']>;
};

export type MilkingEventUpdateArgs = {
  data: MilkingEventUpdateInput;
  where: MilkingEventWhereUniqueInput;
};

export type MilkingEventUpdateInput = {
  analysis?: InputMaybe<MilkAnalysisRelateToOneForUpdateInput>;
  barn?: InputMaybe<BarnRelateToOneForUpdateInput>;
  box?: InputMaybe<BoxRelateToOneForUpdateInput>;
  dateTime?: InputMaybe<Scalars['DateTime']['input']>;
  milk_kg?: InputMaybe<Scalars['Float']['input']>;
  operator?: InputMaybe<OperatorRelateToOneForUpdateInput>;
};

export type MilkingEventWhereInput = {
  AND?: InputMaybe<Array<MilkingEventWhereInput>>;
  NOT?: InputMaybe<Array<MilkingEventWhereInput>>;
  OR?: InputMaybe<Array<MilkingEventWhereInput>>;
  analysis?: InputMaybe<MilkAnalysisWhereInput>;
  barn?: InputMaybe<BarnWhereInput>;
  box?: InputMaybe<BoxWhereInput>;
  dateTime?: InputMaybe<DateTimeNullableFilter>;
  id?: InputMaybe<IdFilter>;
  milk_kg?: InputMaybe<FloatNullableFilter>;
  operator?: InputMaybe<OperatorWhereInput>;
};

export type MilkingEventWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']['input']>;
};

export type Mutation = {
  __typename?: 'Mutation';
  authenticateUserWithPassword?: Maybe<UserAuthenticationWithPasswordResult>;
  createActivities?: Maybe<Array<Maybe<Activity>>>;
  createActivity?: Maybe<Activity>;
  createActivityImpact?: Maybe<ActivityImpact>;
  createActivityImpacts?: Maybe<Array<Maybe<ActivityImpact>>>;
  createAlert?: Maybe<Alert>;
  createAlerts?: Maybe<Array<Maybe<Alert>>>;
  createAnimal?: Maybe<Animal>;
  createAnimalEvent?: Maybe<AnimalEvent>;
  createAnimalEvents?: Maybe<Array<Maybe<AnimalEvent>>>;
  createAnimals?: Maybe<Array<Maybe<Animal>>>;
  createApplication?: Maybe<Application>;
  createApplicationStatus?: Maybe<ApplicationStatus>;
  createApplicationStatuses?: Maybe<Array<Maybe<ApplicationStatus>>>;
  createApplications?: Maybe<Array<Maybe<Application>>>;
  createAuthor?: Maybe<Author>;
  createAuthors?: Maybe<Array<Maybe<Author>>>;
  createBarn?: Maybe<Barn>;
  createBarnActivities?: Maybe<Array<Maybe<BarnActivity>>>;
  createBarnActivity?: Maybe<BarnActivity>;
  createBarns?: Maybe<Array<Maybe<Barn>>>;
  createBox?: Maybe<Box>;
  createBoxes?: Maybe<Array<Maybe<Box>>>;
  createBreed?: Maybe<Breed>;
  createBreeds?: Maybe<Array<Maybe<Breed>>>;
  createCarbonOffsetFactor?: Maybe<CarbonOffsetFactor>;
  createCarbonOffsetFactors?: Maybe<Array<Maybe<CarbonOffsetFactor>>>;
  createCategories?: Maybe<Array<Maybe<Category>>>;
  createCategory?: Maybe<Category>;
  createCategoryKPI?: Maybe<CategoryKpi>;
  createCategoryKPIS?: Maybe<Array<Maybe<CategoryKpi>>>;
  createChat?: Maybe<Chat>;
  createChats?: Maybe<Array<Maybe<Chat>>>;
  createCrop?: Maybe<Crop>;
  createCropType?: Maybe<CropType>;
  createCropTypes?: Maybe<Array<Maybe<CropType>>>;
  createCrops?: Maybe<Array<Maybe<Crop>>>;
  createDocument?: Maybe<Document>;
  createDocuments?: Maybe<Array<Maybe<Document>>>;
  createEcoScheme?: Maybe<EcoScheme>;
  createEcoSchemes?: Maybe<Array<Maybe<EcoScheme>>>;
  createEmissionScenario?: Maybe<EmissionScenario>;
  createEmissionScenarios?: Maybe<Array<Maybe<EmissionScenario>>>;
  createEquipment?: Maybe<Equipment>;
  createEquipmentList?: Maybe<Array<Maybe<Equipment>>>;
  createFarm?: Maybe<Farm>;
  createFarms?: Maybe<Array<Maybe<Farm>>>;
  createFeedDispenseEvent?: Maybe<FeedDispenseEvent>;
  createFeedDispenseEvents?: Maybe<Array<Maybe<FeedDispenseEvent>>>;
  createFeedLot?: Maybe<FeedLot>;
  createFeedLots?: Maybe<Array<Maybe<FeedLot>>>;
  createFeedRationComponent?: Maybe<FeedRationComponent>;
  createFeedRationComponents?: Maybe<Array<Maybe<FeedRationComponent>>>;
  createFeedRationPlan?: Maybe<FeedRationPlan>;
  createFeedRationPlans?: Maybe<Array<Maybe<FeedRationPlan>>>;
  createFeedSilo?: Maybe<FeedSilo>;
  createFeedSilos?: Maybe<Array<Maybe<FeedSilo>>>;
  createField?: Maybe<Field>;
  createFieldImpactSummaries?: Maybe<Array<Maybe<FieldImpactSummary>>>;
  createFieldImpactSummary?: Maybe<FieldImpactSummary>;
  createFields?: Maybe<Array<Maybe<Field>>>;
  createHerdMetric?: Maybe<HerdMetric>;
  createHerdMetrics?: Maybe<Array<Maybe<HerdMetric>>>;
  createInitialUser: UserAuthenticationWithPasswordSuccess;
  createInterview?: Maybe<Interview>;
  createInterviewStage?: Maybe<InterviewStage>;
  createInterviewStages?: Maybe<Array<Maybe<InterviewStage>>>;
  createInterviews?: Maybe<Array<Maybe<Interview>>>;
  createJobCandidate?: Maybe<JobCandidate>;
  createJobCandidates?: Maybe<Array<Maybe<JobCandidate>>>;
  createJobOpening?: Maybe<JobOpening>;
  createJobOpenings?: Maybe<Array<Maybe<JobOpening>>>;
  createKPI?: Maybe<Kpi>;
  createKPIS?: Maybe<Array<Maybe<Kpi>>>;
  createLandCoverStatistic?: Maybe<LandCoverStatistic>;
  createLandCoverStatistics?: Maybe<Array<Maybe<LandCoverStatistic>>>;
  createMembership?: Maybe<Membership>;
  createMemberships?: Maybe<Array<Maybe<Membership>>>;
  createMessageClick?: Maybe<MessageClick>;
  createMessageClicks?: Maybe<Array<Maybe<MessageClick>>>;
  createMessageDeliveries?: Maybe<Array<Maybe<MessageDelivery>>>;
  createMessageDelivery?: Maybe<MessageDelivery>;
  createMessageTemplate?: Maybe<MessageTemplate>;
  createMessageTemplates?: Maybe<Array<Maybe<MessageTemplate>>>;
  createMilkAnalyses?: Maybe<Array<Maybe<MilkAnalysis>>>;
  createMilkAnalysis?: Maybe<MilkAnalysis>;
  createMilkingEvent?: Maybe<MilkingEvent>;
  createMilkingEvents?: Maybe<Array<Maybe<MilkingEvent>>>;
  createNDVIAsset?: Maybe<NdviAsset>;
  createNDVIAssets?: Maybe<Array<Maybe<NdviAsset>>>;
  createNetPrimaryProductivities?: Maybe<Array<Maybe<NetPrimaryProductivity>>>;
  createNetPrimaryProductivity?: Maybe<NetPrimaryProductivity>;
  createNewsletterSegment?: Maybe<NewsletterSegment>;
  createNewsletterSegments?: Maybe<Array<Maybe<NewsletterSegment>>>;
  createNewsletterSubscriber?: Maybe<NewsletterSubscriber>;
  createNewsletterSubscribers?: Maybe<Array<Maybe<NewsletterSubscriber>>>;
  createOperator?: Maybe<Operator>;
  createOperators?: Maybe<Array<Maybe<Operator>>>;
  createOrganisation?: Maybe<Organisation>;
  createOrganisations?: Maybe<Array<Maybe<Organisation>>>;
  createPlan?: Maybe<Plan>;
  createPlanPrice?: Maybe<PlanPrice>;
  createPlanPrices?: Maybe<Array<Maybe<PlanPrice>>>;
  createPlans?: Maybe<Array<Maybe<Plan>>>;
  createPost?: Maybe<Post>;
  createPosts?: Maybe<Array<Maybe<Post>>>;
  createProduct?: Maybe<Product>;
  createProducts?: Maybe<Array<Maybe<Product>>>;
  createReferralCampaign?: Maybe<ReferralCampaign>;
  createReferralCampaigns?: Maybe<Array<Maybe<ReferralCampaign>>>;
  createReferralPartner?: Maybe<ReferralPartner>;
  createReferralPartners?: Maybe<Array<Maybe<ReferralPartner>>>;
  createReferralRedemption?: Maybe<ReferralRedemption>;
  createReferralRedemptions?: Maybe<Array<Maybe<ReferralRedemption>>>;
  createRegulatoryRule?: Maybe<RegulatoryRule>;
  createRegulatoryRules?: Maybe<Array<Maybe<RegulatoryRule>>>;
  createSoilMeasurement?: Maybe<SoilMeasurement>;
  createSoilMeasurements?: Maybe<Array<Maybe<SoilMeasurement>>>;
  createSoilMoistureObservation?: Maybe<SoilMoistureObservation>;
  createSoilMoistureObservations?: Maybe<Array<Maybe<SoilMoistureObservation>>>;
  createSoilOrganicCarbonStock?: Maybe<SoilOrganicCarbonStock>;
  createSoilOrganicCarbonStocks?: Maybe<Array<Maybe<SoilOrganicCarbonStock>>>;
  createSubscription?: Maybe<Subscription>;
  createSubscriptions?: Maybe<Array<Maybe<Subscription>>>;
  createSustainablePractice?: Maybe<SustainablePractice>;
  createSustainablePracticeCategories?: Maybe<Array<Maybe<SustainablePracticeCategory>>>;
  createSustainablePracticeCategory?: Maybe<SustainablePracticeCategory>;
  createSustainablePracticeEvent?: Maybe<SustainablePracticeEvent>;
  createSustainablePracticeEvents?: Maybe<Array<Maybe<SustainablePracticeEvent>>>;
  createSustainablePractices?: Maybe<Array<Maybe<SustainablePractice>>>;
  createTag?: Maybe<Tag>;
  createTags?: Maybe<Array<Maybe<Tag>>>;
  createUser?: Maybe<User>;
  createUsers?: Maybe<Array<Maybe<User>>>;
  createWeatherRecord?: Maybe<WeatherRecord>;
  createWeatherRecords?: Maybe<Array<Maybe<WeatherRecord>>>;
  deleteActivities?: Maybe<Array<Maybe<Activity>>>;
  deleteActivity?: Maybe<Activity>;
  deleteActivityImpact?: Maybe<ActivityImpact>;
  deleteActivityImpacts?: Maybe<Array<Maybe<ActivityImpact>>>;
  deleteAlert?: Maybe<Alert>;
  deleteAlerts?: Maybe<Array<Maybe<Alert>>>;
  deleteAnimal?: Maybe<Animal>;
  deleteAnimalEvent?: Maybe<AnimalEvent>;
  deleteAnimalEvents?: Maybe<Array<Maybe<AnimalEvent>>>;
  deleteAnimals?: Maybe<Array<Maybe<Animal>>>;
  deleteApplication?: Maybe<Application>;
  deleteApplicationStatus?: Maybe<ApplicationStatus>;
  deleteApplicationStatuses?: Maybe<Array<Maybe<ApplicationStatus>>>;
  deleteApplications?: Maybe<Array<Maybe<Application>>>;
  deleteAuthor?: Maybe<Author>;
  deleteAuthors?: Maybe<Array<Maybe<Author>>>;
  deleteBarn?: Maybe<Barn>;
  deleteBarnActivities?: Maybe<Array<Maybe<BarnActivity>>>;
  deleteBarnActivity?: Maybe<BarnActivity>;
  deleteBarns?: Maybe<Array<Maybe<Barn>>>;
  deleteBox?: Maybe<Box>;
  deleteBoxes?: Maybe<Array<Maybe<Box>>>;
  deleteBreed?: Maybe<Breed>;
  deleteBreeds?: Maybe<Array<Maybe<Breed>>>;
  deleteCarbonOffsetFactor?: Maybe<CarbonOffsetFactor>;
  deleteCarbonOffsetFactors?: Maybe<Array<Maybe<CarbonOffsetFactor>>>;
  deleteCategories?: Maybe<Array<Maybe<Category>>>;
  deleteCategory?: Maybe<Category>;
  deleteCategoryKPI?: Maybe<CategoryKpi>;
  deleteCategoryKPIS?: Maybe<Array<Maybe<CategoryKpi>>>;
  deleteChat?: Maybe<Chat>;
  deleteChats?: Maybe<Array<Maybe<Chat>>>;
  deleteCrop?: Maybe<Crop>;
  deleteCropType?: Maybe<CropType>;
  deleteCropTypes?: Maybe<Array<Maybe<CropType>>>;
  deleteCrops?: Maybe<Array<Maybe<Crop>>>;
  deleteDocument?: Maybe<Document>;
  deleteDocuments?: Maybe<Array<Maybe<Document>>>;
  deleteEcoScheme?: Maybe<EcoScheme>;
  deleteEcoSchemes?: Maybe<Array<Maybe<EcoScheme>>>;
  deleteEmissionScenario?: Maybe<EmissionScenario>;
  deleteEmissionScenarios?: Maybe<Array<Maybe<EmissionScenario>>>;
  deleteEquipment?: Maybe<Equipment>;
  deleteEquipmentList?: Maybe<Array<Maybe<Equipment>>>;
  deleteFarm?: Maybe<Farm>;
  deleteFarms?: Maybe<Array<Maybe<Farm>>>;
  deleteFeedDispenseEvent?: Maybe<FeedDispenseEvent>;
  deleteFeedDispenseEvents?: Maybe<Array<Maybe<FeedDispenseEvent>>>;
  deleteFeedLot?: Maybe<FeedLot>;
  deleteFeedLots?: Maybe<Array<Maybe<FeedLot>>>;
  deleteFeedRationComponent?: Maybe<FeedRationComponent>;
  deleteFeedRationComponents?: Maybe<Array<Maybe<FeedRationComponent>>>;
  deleteFeedRationPlan?: Maybe<FeedRationPlan>;
  deleteFeedRationPlans?: Maybe<Array<Maybe<FeedRationPlan>>>;
  deleteFeedSilo?: Maybe<FeedSilo>;
  deleteFeedSilos?: Maybe<Array<Maybe<FeedSilo>>>;
  deleteField?: Maybe<Field>;
  deleteFieldImpactSummaries?: Maybe<Array<Maybe<FieldImpactSummary>>>;
  deleteFieldImpactSummary?: Maybe<FieldImpactSummary>;
  deleteFields?: Maybe<Array<Maybe<Field>>>;
  deleteHerdMetric?: Maybe<HerdMetric>;
  deleteHerdMetrics?: Maybe<Array<Maybe<HerdMetric>>>;
  deleteInterview?: Maybe<Interview>;
  deleteInterviewStage?: Maybe<InterviewStage>;
  deleteInterviewStages?: Maybe<Array<Maybe<InterviewStage>>>;
  deleteInterviews?: Maybe<Array<Maybe<Interview>>>;
  deleteJobCandidate?: Maybe<JobCandidate>;
  deleteJobCandidates?: Maybe<Array<Maybe<JobCandidate>>>;
  deleteJobOpening?: Maybe<JobOpening>;
  deleteJobOpenings?: Maybe<Array<Maybe<JobOpening>>>;
  deleteKPI?: Maybe<Kpi>;
  deleteKPIS?: Maybe<Array<Maybe<Kpi>>>;
  deleteLandCoverStatistic?: Maybe<LandCoverStatistic>;
  deleteLandCoverStatistics?: Maybe<Array<Maybe<LandCoverStatistic>>>;
  deleteMembership?: Maybe<Membership>;
  deleteMemberships?: Maybe<Array<Maybe<Membership>>>;
  deleteMessageClick?: Maybe<MessageClick>;
  deleteMessageClicks?: Maybe<Array<Maybe<MessageClick>>>;
  deleteMessageDeliveries?: Maybe<Array<Maybe<MessageDelivery>>>;
  deleteMessageDelivery?: Maybe<MessageDelivery>;
  deleteMessageTemplate?: Maybe<MessageTemplate>;
  deleteMessageTemplates?: Maybe<Array<Maybe<MessageTemplate>>>;
  deleteMilkAnalyses?: Maybe<Array<Maybe<MilkAnalysis>>>;
  deleteMilkAnalysis?: Maybe<MilkAnalysis>;
  deleteMilkingEvent?: Maybe<MilkingEvent>;
  deleteMilkingEvents?: Maybe<Array<Maybe<MilkingEvent>>>;
  deleteNDVIAsset?: Maybe<NdviAsset>;
  deleteNDVIAssets?: Maybe<Array<Maybe<NdviAsset>>>;
  deleteNetPrimaryProductivities?: Maybe<Array<Maybe<NetPrimaryProductivity>>>;
  deleteNetPrimaryProductivity?: Maybe<NetPrimaryProductivity>;
  deleteNewsletterSegment?: Maybe<NewsletterSegment>;
  deleteNewsletterSegments?: Maybe<Array<Maybe<NewsletterSegment>>>;
  deleteNewsletterSubscriber?: Maybe<NewsletterSubscriber>;
  deleteNewsletterSubscribers?: Maybe<Array<Maybe<NewsletterSubscriber>>>;
  deleteOperator?: Maybe<Operator>;
  deleteOperators?: Maybe<Array<Maybe<Operator>>>;
  deleteOrganisation?: Maybe<Organisation>;
  deleteOrganisations?: Maybe<Array<Maybe<Organisation>>>;
  deletePlan?: Maybe<Plan>;
  deletePlanPrice?: Maybe<PlanPrice>;
  deletePlanPrices?: Maybe<Array<Maybe<PlanPrice>>>;
  deletePlans?: Maybe<Array<Maybe<Plan>>>;
  deletePost?: Maybe<Post>;
  deletePosts?: Maybe<Array<Maybe<Post>>>;
  deleteProduct?: Maybe<Product>;
  deleteProducts?: Maybe<Array<Maybe<Product>>>;
  deleteReferralCampaign?: Maybe<ReferralCampaign>;
  deleteReferralCampaigns?: Maybe<Array<Maybe<ReferralCampaign>>>;
  deleteReferralPartner?: Maybe<ReferralPartner>;
  deleteReferralPartners?: Maybe<Array<Maybe<ReferralPartner>>>;
  deleteReferralRedemption?: Maybe<ReferralRedemption>;
  deleteReferralRedemptions?: Maybe<Array<Maybe<ReferralRedemption>>>;
  deleteRegulatoryRule?: Maybe<RegulatoryRule>;
  deleteRegulatoryRules?: Maybe<Array<Maybe<RegulatoryRule>>>;
  deleteSoilMeasurement?: Maybe<SoilMeasurement>;
  deleteSoilMeasurements?: Maybe<Array<Maybe<SoilMeasurement>>>;
  deleteSoilMoistureObservation?: Maybe<SoilMoistureObservation>;
  deleteSoilMoistureObservations?: Maybe<Array<Maybe<SoilMoistureObservation>>>;
  deleteSoilOrganicCarbonStock?: Maybe<SoilOrganicCarbonStock>;
  deleteSoilOrganicCarbonStocks?: Maybe<Array<Maybe<SoilOrganicCarbonStock>>>;
  deleteSubscription?: Maybe<Subscription>;
  deleteSubscriptions?: Maybe<Array<Maybe<Subscription>>>;
  deleteSustainablePractice?: Maybe<SustainablePractice>;
  deleteSustainablePracticeCategories?: Maybe<Array<Maybe<SustainablePracticeCategory>>>;
  deleteSustainablePracticeCategory?: Maybe<SustainablePracticeCategory>;
  deleteSustainablePracticeEvent?: Maybe<SustainablePracticeEvent>;
  deleteSustainablePracticeEvents?: Maybe<Array<Maybe<SustainablePracticeEvent>>>;
  deleteSustainablePractices?: Maybe<Array<Maybe<SustainablePractice>>>;
  deleteTag?: Maybe<Tag>;
  deleteTags?: Maybe<Array<Maybe<Tag>>>;
  deleteUser?: Maybe<User>;
  deleteUsers?: Maybe<Array<Maybe<User>>>;
  deleteWeatherRecord?: Maybe<WeatherRecord>;
  deleteWeatherRecords?: Maybe<Array<Maybe<WeatherRecord>>>;
  endSession: Scalars['Boolean']['output'];
  updateActivities?: Maybe<Array<Maybe<Activity>>>;
  updateActivity?: Maybe<Activity>;
  updateActivityImpact?: Maybe<ActivityImpact>;
  updateActivityImpacts?: Maybe<Array<Maybe<ActivityImpact>>>;
  updateAlert?: Maybe<Alert>;
  updateAlerts?: Maybe<Array<Maybe<Alert>>>;
  updateAnimal?: Maybe<Animal>;
  updateAnimalEvent?: Maybe<AnimalEvent>;
  updateAnimalEvents?: Maybe<Array<Maybe<AnimalEvent>>>;
  updateAnimals?: Maybe<Array<Maybe<Animal>>>;
  updateApplication?: Maybe<Application>;
  updateApplicationStatus?: Maybe<ApplicationStatus>;
  updateApplicationStatuses?: Maybe<Array<Maybe<ApplicationStatus>>>;
  updateApplications?: Maybe<Array<Maybe<Application>>>;
  updateAuthor?: Maybe<Author>;
  updateAuthors?: Maybe<Array<Maybe<Author>>>;
  updateBarn?: Maybe<Barn>;
  updateBarnActivities?: Maybe<Array<Maybe<BarnActivity>>>;
  updateBarnActivity?: Maybe<BarnActivity>;
  updateBarns?: Maybe<Array<Maybe<Barn>>>;
  updateBox?: Maybe<Box>;
  updateBoxes?: Maybe<Array<Maybe<Box>>>;
  updateBreed?: Maybe<Breed>;
  updateBreeds?: Maybe<Array<Maybe<Breed>>>;
  updateCarbonOffsetFactor?: Maybe<CarbonOffsetFactor>;
  updateCarbonOffsetFactors?: Maybe<Array<Maybe<CarbonOffsetFactor>>>;
  updateCategories?: Maybe<Array<Maybe<Category>>>;
  updateCategory?: Maybe<Category>;
  updateCategoryKPI?: Maybe<CategoryKpi>;
  updateCategoryKPIS?: Maybe<Array<Maybe<CategoryKpi>>>;
  updateChat?: Maybe<Chat>;
  updateChats?: Maybe<Array<Maybe<Chat>>>;
  updateCrop?: Maybe<Crop>;
  updateCropType?: Maybe<CropType>;
  updateCropTypes?: Maybe<Array<Maybe<CropType>>>;
  updateCrops?: Maybe<Array<Maybe<Crop>>>;
  updateDocument?: Maybe<Document>;
  updateDocuments?: Maybe<Array<Maybe<Document>>>;
  updateEcoScheme?: Maybe<EcoScheme>;
  updateEcoSchemes?: Maybe<Array<Maybe<EcoScheme>>>;
  updateEmissionScenario?: Maybe<EmissionScenario>;
  updateEmissionScenarios?: Maybe<Array<Maybe<EmissionScenario>>>;
  updateEquipment?: Maybe<Equipment>;
  updateEquipmentList?: Maybe<Array<Maybe<Equipment>>>;
  updateFarm?: Maybe<Farm>;
  updateFarms?: Maybe<Array<Maybe<Farm>>>;
  updateFeedDispenseEvent?: Maybe<FeedDispenseEvent>;
  updateFeedDispenseEvents?: Maybe<Array<Maybe<FeedDispenseEvent>>>;
  updateFeedLot?: Maybe<FeedLot>;
  updateFeedLots?: Maybe<Array<Maybe<FeedLot>>>;
  updateFeedRationComponent?: Maybe<FeedRationComponent>;
  updateFeedRationComponents?: Maybe<Array<Maybe<FeedRationComponent>>>;
  updateFeedRationPlan?: Maybe<FeedRationPlan>;
  updateFeedRationPlans?: Maybe<Array<Maybe<FeedRationPlan>>>;
  updateFeedSilo?: Maybe<FeedSilo>;
  updateFeedSilos?: Maybe<Array<Maybe<FeedSilo>>>;
  updateField?: Maybe<Field>;
  updateFieldImpactSummaries?: Maybe<Array<Maybe<FieldImpactSummary>>>;
  updateFieldImpactSummary?: Maybe<FieldImpactSummary>;
  updateFields?: Maybe<Array<Maybe<Field>>>;
  updateHerdMetric?: Maybe<HerdMetric>;
  updateHerdMetrics?: Maybe<Array<Maybe<HerdMetric>>>;
  updateInterview?: Maybe<Interview>;
  updateInterviewStage?: Maybe<InterviewStage>;
  updateInterviewStages?: Maybe<Array<Maybe<InterviewStage>>>;
  updateInterviews?: Maybe<Array<Maybe<Interview>>>;
  updateJobCandidate?: Maybe<JobCandidate>;
  updateJobCandidates?: Maybe<Array<Maybe<JobCandidate>>>;
  updateJobOpening?: Maybe<JobOpening>;
  updateJobOpenings?: Maybe<Array<Maybe<JobOpening>>>;
  updateKPI?: Maybe<Kpi>;
  updateKPIS?: Maybe<Array<Maybe<Kpi>>>;
  updateLandCoverStatistic?: Maybe<LandCoverStatistic>;
  updateLandCoverStatistics?: Maybe<Array<Maybe<LandCoverStatistic>>>;
  updateMembership?: Maybe<Membership>;
  updateMemberships?: Maybe<Array<Maybe<Membership>>>;
  updateMessageClick?: Maybe<MessageClick>;
  updateMessageClicks?: Maybe<Array<Maybe<MessageClick>>>;
  updateMessageDeliveries?: Maybe<Array<Maybe<MessageDelivery>>>;
  updateMessageDelivery?: Maybe<MessageDelivery>;
  updateMessageTemplate?: Maybe<MessageTemplate>;
  updateMessageTemplates?: Maybe<Array<Maybe<MessageTemplate>>>;
  updateMilkAnalyses?: Maybe<Array<Maybe<MilkAnalysis>>>;
  updateMilkAnalysis?: Maybe<MilkAnalysis>;
  updateMilkingEvent?: Maybe<MilkingEvent>;
  updateMilkingEvents?: Maybe<Array<Maybe<MilkingEvent>>>;
  updateNDVIAsset?: Maybe<NdviAsset>;
  updateNDVIAssets?: Maybe<Array<Maybe<NdviAsset>>>;
  updateNetPrimaryProductivities?: Maybe<Array<Maybe<NetPrimaryProductivity>>>;
  updateNetPrimaryProductivity?: Maybe<NetPrimaryProductivity>;
  updateNewsletterSegment?: Maybe<NewsletterSegment>;
  updateNewsletterSegments?: Maybe<Array<Maybe<NewsletterSegment>>>;
  updateNewsletterSubscriber?: Maybe<NewsletterSubscriber>;
  updateNewsletterSubscribers?: Maybe<Array<Maybe<NewsletterSubscriber>>>;
  updateOperator?: Maybe<Operator>;
  updateOperators?: Maybe<Array<Maybe<Operator>>>;
  updateOrganisation?: Maybe<Organisation>;
  updateOrganisations?: Maybe<Array<Maybe<Organisation>>>;
  updatePlan?: Maybe<Plan>;
  updatePlanPrice?: Maybe<PlanPrice>;
  updatePlanPrices?: Maybe<Array<Maybe<PlanPrice>>>;
  updatePlans?: Maybe<Array<Maybe<Plan>>>;
  updatePost?: Maybe<Post>;
  updatePosts?: Maybe<Array<Maybe<Post>>>;
  updateProduct?: Maybe<Product>;
  updateProducts?: Maybe<Array<Maybe<Product>>>;
  updateReferralCampaign?: Maybe<ReferralCampaign>;
  updateReferralCampaigns?: Maybe<Array<Maybe<ReferralCampaign>>>;
  updateReferralPartner?: Maybe<ReferralPartner>;
  updateReferralPartners?: Maybe<Array<Maybe<ReferralPartner>>>;
  updateReferralRedemption?: Maybe<ReferralRedemption>;
  updateReferralRedemptions?: Maybe<Array<Maybe<ReferralRedemption>>>;
  updateRegulatoryRule?: Maybe<RegulatoryRule>;
  updateRegulatoryRules?: Maybe<Array<Maybe<RegulatoryRule>>>;
  updateSoilMeasurement?: Maybe<SoilMeasurement>;
  updateSoilMeasurements?: Maybe<Array<Maybe<SoilMeasurement>>>;
  updateSoilMoistureObservation?: Maybe<SoilMoistureObservation>;
  updateSoilMoistureObservations?: Maybe<Array<Maybe<SoilMoistureObservation>>>;
  updateSoilOrganicCarbonStock?: Maybe<SoilOrganicCarbonStock>;
  updateSoilOrganicCarbonStocks?: Maybe<Array<Maybe<SoilOrganicCarbonStock>>>;
  updateSubscription?: Maybe<Subscription>;
  updateSubscriptions?: Maybe<Array<Maybe<Subscription>>>;
  updateSustainablePractice?: Maybe<SustainablePractice>;
  updateSustainablePracticeCategories?: Maybe<Array<Maybe<SustainablePracticeCategory>>>;
  updateSustainablePracticeCategory?: Maybe<SustainablePracticeCategory>;
  updateSustainablePracticeEvent?: Maybe<SustainablePracticeEvent>;
  updateSustainablePracticeEvents?: Maybe<Array<Maybe<SustainablePracticeEvent>>>;
  updateSustainablePractices?: Maybe<Array<Maybe<SustainablePractice>>>;
  updateTag?: Maybe<Tag>;
  updateTags?: Maybe<Array<Maybe<Tag>>>;
  updateUser?: Maybe<User>;
  updateUsers?: Maybe<Array<Maybe<User>>>;
  updateWeatherRecord?: Maybe<WeatherRecord>;
  updateWeatherRecords?: Maybe<Array<Maybe<WeatherRecord>>>;
};


export type MutationAuthenticateUserWithPasswordArgs = {
  email: Scalars['String']['input'];
  password: Scalars['String']['input'];
};


export type MutationCreateActivitiesArgs = {
  data: Array<ActivityCreateInput>;
};


export type MutationCreateActivityArgs = {
  data: ActivityCreateInput;
};


export type MutationCreateActivityImpactArgs = {
  data: ActivityImpactCreateInput;
};


export type MutationCreateActivityImpactsArgs = {
  data: Array<ActivityImpactCreateInput>;
};


export type MutationCreateAlertArgs = {
  data: AlertCreateInput;
};


export type MutationCreateAlertsArgs = {
  data: Array<AlertCreateInput>;
};


export type MutationCreateAnimalArgs = {
  data: AnimalCreateInput;
};


export type MutationCreateAnimalEventArgs = {
  data: AnimalEventCreateInput;
};


export type MutationCreateAnimalEventsArgs = {
  data: Array<AnimalEventCreateInput>;
};


export type MutationCreateAnimalsArgs = {
  data: Array<AnimalCreateInput>;
};


export type MutationCreateApplicationArgs = {
  data: ApplicationCreateInput;
};


export type MutationCreateApplicationStatusArgs = {
  data: ApplicationStatusCreateInput;
};


export type MutationCreateApplicationStatusesArgs = {
  data: Array<ApplicationStatusCreateInput>;
};


export type MutationCreateApplicationsArgs = {
  data: Array<ApplicationCreateInput>;
};


export type MutationCreateAuthorArgs = {
  data: AuthorCreateInput;
};


export type MutationCreateAuthorsArgs = {
  data: Array<AuthorCreateInput>;
};


export type MutationCreateBarnArgs = {
  data: BarnCreateInput;
};


export type MutationCreateBarnActivitiesArgs = {
  data: Array<BarnActivityCreateInput>;
};


export type MutationCreateBarnActivityArgs = {
  data: BarnActivityCreateInput;
};


export type MutationCreateBarnsArgs = {
  data: Array<BarnCreateInput>;
};


export type MutationCreateBoxArgs = {
  data: BoxCreateInput;
};


export type MutationCreateBoxesArgs = {
  data: Array<BoxCreateInput>;
};


export type MutationCreateBreedArgs = {
  data: BreedCreateInput;
};


export type MutationCreateBreedsArgs = {
  data: Array<BreedCreateInput>;
};


export type MutationCreateCarbonOffsetFactorArgs = {
  data: CarbonOffsetFactorCreateInput;
};


export type MutationCreateCarbonOffsetFactorsArgs = {
  data: Array<CarbonOffsetFactorCreateInput>;
};


export type MutationCreateCategoriesArgs = {
  data: Array<CategoryCreateInput>;
};


export type MutationCreateCategoryArgs = {
  data: CategoryCreateInput;
};


export type MutationCreateCategoryKpiArgs = {
  data: CategoryKpiCreateInput;
};


export type MutationCreateCategoryKpisArgs = {
  data: Array<CategoryKpiCreateInput>;
};


export type MutationCreateChatArgs = {
  data: ChatCreateInput;
};


export type MutationCreateChatsArgs = {
  data: Array<ChatCreateInput>;
};


export type MutationCreateCropArgs = {
  data: CropCreateInput;
};


export type MutationCreateCropTypeArgs = {
  data: CropTypeCreateInput;
};


export type MutationCreateCropTypesArgs = {
  data: Array<CropTypeCreateInput>;
};


export type MutationCreateCropsArgs = {
  data: Array<CropCreateInput>;
};


export type MutationCreateDocumentArgs = {
  data: DocumentCreateInput;
};


export type MutationCreateDocumentsArgs = {
  data: Array<DocumentCreateInput>;
};


export type MutationCreateEcoSchemeArgs = {
  data: EcoSchemeCreateInput;
};


export type MutationCreateEcoSchemesArgs = {
  data: Array<EcoSchemeCreateInput>;
};


export type MutationCreateEmissionScenarioArgs = {
  data: EmissionScenarioCreateInput;
};


export type MutationCreateEmissionScenariosArgs = {
  data: Array<EmissionScenarioCreateInput>;
};


export type MutationCreateEquipmentArgs = {
  data: EquipmentCreateInput;
};


export type MutationCreateEquipmentListArgs = {
  data: Array<EquipmentCreateInput>;
};


export type MutationCreateFarmArgs = {
  data: FarmCreateInput;
};


export type MutationCreateFarmsArgs = {
  data: Array<FarmCreateInput>;
};


export type MutationCreateFeedDispenseEventArgs = {
  data: FeedDispenseEventCreateInput;
};


export type MutationCreateFeedDispenseEventsArgs = {
  data: Array<FeedDispenseEventCreateInput>;
};


export type MutationCreateFeedLotArgs = {
  data: FeedLotCreateInput;
};


export type MutationCreateFeedLotsArgs = {
  data: Array<FeedLotCreateInput>;
};


export type MutationCreateFeedRationComponentArgs = {
  data: FeedRationComponentCreateInput;
};


export type MutationCreateFeedRationComponentsArgs = {
  data: Array<FeedRationComponentCreateInput>;
};


export type MutationCreateFeedRationPlanArgs = {
  data: FeedRationPlanCreateInput;
};


export type MutationCreateFeedRationPlansArgs = {
  data: Array<FeedRationPlanCreateInput>;
};


export type MutationCreateFeedSiloArgs = {
  data: FeedSiloCreateInput;
};


export type MutationCreateFeedSilosArgs = {
  data: Array<FeedSiloCreateInput>;
};


export type MutationCreateFieldArgs = {
  data: FieldCreateInput;
};


export type MutationCreateFieldImpactSummariesArgs = {
  data: Array<FieldImpactSummaryCreateInput>;
};


export type MutationCreateFieldImpactSummaryArgs = {
  data: FieldImpactSummaryCreateInput;
};


export type MutationCreateFieldsArgs = {
  data: Array<FieldCreateInput>;
};


export type MutationCreateHerdMetricArgs = {
  data: HerdMetricCreateInput;
};


export type MutationCreateHerdMetricsArgs = {
  data: Array<HerdMetricCreateInput>;
};


export type MutationCreateInitialUserArgs = {
  data: CreateInitialUserInput;
};


export type MutationCreateInterviewArgs = {
  data: InterviewCreateInput;
};


export type MutationCreateInterviewStageArgs = {
  data: InterviewStageCreateInput;
};


export type MutationCreateInterviewStagesArgs = {
  data: Array<InterviewStageCreateInput>;
};


export type MutationCreateInterviewsArgs = {
  data: Array<InterviewCreateInput>;
};


export type MutationCreateJobCandidateArgs = {
  data: JobCandidateCreateInput;
};


export type MutationCreateJobCandidatesArgs = {
  data: Array<JobCandidateCreateInput>;
};


export type MutationCreateJobOpeningArgs = {
  data: JobOpeningCreateInput;
};


export type MutationCreateJobOpeningsArgs = {
  data: Array<JobOpeningCreateInput>;
};


export type MutationCreateKpiArgs = {
  data: KpiCreateInput;
};


export type MutationCreateKpisArgs = {
  data: Array<KpiCreateInput>;
};


export type MutationCreateLandCoverStatisticArgs = {
  data: LandCoverStatisticCreateInput;
};


export type MutationCreateLandCoverStatisticsArgs = {
  data: Array<LandCoverStatisticCreateInput>;
};


export type MutationCreateMembershipArgs = {
  data: MembershipCreateInput;
};


export type MutationCreateMembershipsArgs = {
  data: Array<MembershipCreateInput>;
};


export type MutationCreateMessageClickArgs = {
  data: MessageClickCreateInput;
};


export type MutationCreateMessageClicksArgs = {
  data: Array<MessageClickCreateInput>;
};


export type MutationCreateMessageDeliveriesArgs = {
  data: Array<MessageDeliveryCreateInput>;
};


export type MutationCreateMessageDeliveryArgs = {
  data: MessageDeliveryCreateInput;
};


export type MutationCreateMessageTemplateArgs = {
  data: MessageTemplateCreateInput;
};


export type MutationCreateMessageTemplatesArgs = {
  data: Array<MessageTemplateCreateInput>;
};


export type MutationCreateMilkAnalysesArgs = {
  data: Array<MilkAnalysisCreateInput>;
};


export type MutationCreateMilkAnalysisArgs = {
  data: MilkAnalysisCreateInput;
};


export type MutationCreateMilkingEventArgs = {
  data: MilkingEventCreateInput;
};


export type MutationCreateMilkingEventsArgs = {
  data: Array<MilkingEventCreateInput>;
};


export type MutationCreateNdviAssetArgs = {
  data: NdviAssetCreateInput;
};


export type MutationCreateNdviAssetsArgs = {
  data: Array<NdviAssetCreateInput>;
};


export type MutationCreateNetPrimaryProductivitiesArgs = {
  data: Array<NetPrimaryProductivityCreateInput>;
};


export type MutationCreateNetPrimaryProductivityArgs = {
  data: NetPrimaryProductivityCreateInput;
};


export type MutationCreateNewsletterSegmentArgs = {
  data: NewsletterSegmentCreateInput;
};


export type MutationCreateNewsletterSegmentsArgs = {
  data: Array<NewsletterSegmentCreateInput>;
};


export type MutationCreateNewsletterSubscriberArgs = {
  data: NewsletterSubscriberCreateInput;
};


export type MutationCreateNewsletterSubscribersArgs = {
  data: Array<NewsletterSubscriberCreateInput>;
};


export type MutationCreateOperatorArgs = {
  data: OperatorCreateInput;
};


export type MutationCreateOperatorsArgs = {
  data: Array<OperatorCreateInput>;
};


export type MutationCreateOrganisationArgs = {
  data: OrganisationCreateInput;
};


export type MutationCreateOrganisationsArgs = {
  data: Array<OrganisationCreateInput>;
};


export type MutationCreatePlanArgs = {
  data: PlanCreateInput;
};


export type MutationCreatePlanPriceArgs = {
  data: PlanPriceCreateInput;
};


export type MutationCreatePlanPricesArgs = {
  data: Array<PlanPriceCreateInput>;
};


export type MutationCreatePlansArgs = {
  data: Array<PlanCreateInput>;
};


export type MutationCreatePostArgs = {
  data: PostCreateInput;
};


export type MutationCreatePostsArgs = {
  data: Array<PostCreateInput>;
};


export type MutationCreateProductArgs = {
  data: ProductCreateInput;
};


export type MutationCreateProductsArgs = {
  data: Array<ProductCreateInput>;
};


export type MutationCreateReferralCampaignArgs = {
  data: ReferralCampaignCreateInput;
};


export type MutationCreateReferralCampaignsArgs = {
  data: Array<ReferralCampaignCreateInput>;
};


export type MutationCreateReferralPartnerArgs = {
  data: ReferralPartnerCreateInput;
};


export type MutationCreateReferralPartnersArgs = {
  data: Array<ReferralPartnerCreateInput>;
};


export type MutationCreateReferralRedemptionArgs = {
  data: ReferralRedemptionCreateInput;
};


export type MutationCreateReferralRedemptionsArgs = {
  data: Array<ReferralRedemptionCreateInput>;
};


export type MutationCreateRegulatoryRuleArgs = {
  data: RegulatoryRuleCreateInput;
};


export type MutationCreateRegulatoryRulesArgs = {
  data: Array<RegulatoryRuleCreateInput>;
};


export type MutationCreateSoilMeasurementArgs = {
  data: SoilMeasurementCreateInput;
};


export type MutationCreateSoilMeasurementsArgs = {
  data: Array<SoilMeasurementCreateInput>;
};


export type MutationCreateSoilMoistureObservationArgs = {
  data: SoilMoistureObservationCreateInput;
};


export type MutationCreateSoilMoistureObservationsArgs = {
  data: Array<SoilMoistureObservationCreateInput>;
};


export type MutationCreateSoilOrganicCarbonStockArgs = {
  data: SoilOrganicCarbonStockCreateInput;
};


export type MutationCreateSoilOrganicCarbonStocksArgs = {
  data: Array<SoilOrganicCarbonStockCreateInput>;
};


export type MutationCreateSubscriptionArgs = {
  data: SubscriptionCreateInput;
};


export type MutationCreateSubscriptionsArgs = {
  data: Array<SubscriptionCreateInput>;
};


export type MutationCreateSustainablePracticeArgs = {
  data: SustainablePracticeCreateInput;
};


export type MutationCreateSustainablePracticeCategoriesArgs = {
  data: Array<SustainablePracticeCategoryCreateInput>;
};


export type MutationCreateSustainablePracticeCategoryArgs = {
  data: SustainablePracticeCategoryCreateInput;
};


export type MutationCreateSustainablePracticeEventArgs = {
  data: SustainablePracticeEventCreateInput;
};


export type MutationCreateSustainablePracticeEventsArgs = {
  data: Array<SustainablePracticeEventCreateInput>;
};


export type MutationCreateSustainablePracticesArgs = {
  data: Array<SustainablePracticeCreateInput>;
};


export type MutationCreateTagArgs = {
  data: TagCreateInput;
};


export type MutationCreateTagsArgs = {
  data: Array<TagCreateInput>;
};


export type MutationCreateUserArgs = {
  data: UserCreateInput;
};


export type MutationCreateUsersArgs = {
  data: Array<UserCreateInput>;
};


export type MutationCreateWeatherRecordArgs = {
  data: WeatherRecordCreateInput;
};


export type MutationCreateWeatherRecordsArgs = {
  data: Array<WeatherRecordCreateInput>;
};


export type MutationDeleteActivitiesArgs = {
  where: Array<ActivityWhereUniqueInput>;
};


export type MutationDeleteActivityArgs = {
  where: ActivityWhereUniqueInput;
};


export type MutationDeleteActivityImpactArgs = {
  where: ActivityImpactWhereUniqueInput;
};


export type MutationDeleteActivityImpactsArgs = {
  where: Array<ActivityImpactWhereUniqueInput>;
};


export type MutationDeleteAlertArgs = {
  where: AlertWhereUniqueInput;
};


export type MutationDeleteAlertsArgs = {
  where: Array<AlertWhereUniqueInput>;
};


export type MutationDeleteAnimalArgs = {
  where: AnimalWhereUniqueInput;
};


export type MutationDeleteAnimalEventArgs = {
  where: AnimalEventWhereUniqueInput;
};


export type MutationDeleteAnimalEventsArgs = {
  where: Array<AnimalEventWhereUniqueInput>;
};


export type MutationDeleteAnimalsArgs = {
  where: Array<AnimalWhereUniqueInput>;
};


export type MutationDeleteApplicationArgs = {
  where: ApplicationWhereUniqueInput;
};


export type MutationDeleteApplicationStatusArgs = {
  where: ApplicationStatusWhereUniqueInput;
};


export type MutationDeleteApplicationStatusesArgs = {
  where: Array<ApplicationStatusWhereUniqueInput>;
};


export type MutationDeleteApplicationsArgs = {
  where: Array<ApplicationWhereUniqueInput>;
};


export type MutationDeleteAuthorArgs = {
  where: AuthorWhereUniqueInput;
};


export type MutationDeleteAuthorsArgs = {
  where: Array<AuthorWhereUniqueInput>;
};


export type MutationDeleteBarnArgs = {
  where: BarnWhereUniqueInput;
};


export type MutationDeleteBarnActivitiesArgs = {
  where: Array<BarnActivityWhereUniqueInput>;
};


export type MutationDeleteBarnActivityArgs = {
  where: BarnActivityWhereUniqueInput;
};


export type MutationDeleteBarnsArgs = {
  where: Array<BarnWhereUniqueInput>;
};


export type MutationDeleteBoxArgs = {
  where: BoxWhereUniqueInput;
};


export type MutationDeleteBoxesArgs = {
  where: Array<BoxWhereUniqueInput>;
};


export type MutationDeleteBreedArgs = {
  where: BreedWhereUniqueInput;
};


export type MutationDeleteBreedsArgs = {
  where: Array<BreedWhereUniqueInput>;
};


export type MutationDeleteCarbonOffsetFactorArgs = {
  where: CarbonOffsetFactorWhereUniqueInput;
};


export type MutationDeleteCarbonOffsetFactorsArgs = {
  where: Array<CarbonOffsetFactorWhereUniqueInput>;
};


export type MutationDeleteCategoriesArgs = {
  where: Array<CategoryWhereUniqueInput>;
};


export type MutationDeleteCategoryArgs = {
  where: CategoryWhereUniqueInput;
};


export type MutationDeleteCategoryKpiArgs = {
  where: CategoryKpiWhereUniqueInput;
};


export type MutationDeleteCategoryKpisArgs = {
  where: Array<CategoryKpiWhereUniqueInput>;
};


export type MutationDeleteChatArgs = {
  where: ChatWhereUniqueInput;
};


export type MutationDeleteChatsArgs = {
  where: Array<ChatWhereUniqueInput>;
};


export type MutationDeleteCropArgs = {
  where: CropWhereUniqueInput;
};


export type MutationDeleteCropTypeArgs = {
  where: CropTypeWhereUniqueInput;
};


export type MutationDeleteCropTypesArgs = {
  where: Array<CropTypeWhereUniqueInput>;
};


export type MutationDeleteCropsArgs = {
  where: Array<CropWhereUniqueInput>;
};


export type MutationDeleteDocumentArgs = {
  where: DocumentWhereUniqueInput;
};


export type MutationDeleteDocumentsArgs = {
  where: Array<DocumentWhereUniqueInput>;
};


export type MutationDeleteEcoSchemeArgs = {
  where: EcoSchemeWhereUniqueInput;
};


export type MutationDeleteEcoSchemesArgs = {
  where: Array<EcoSchemeWhereUniqueInput>;
};


export type MutationDeleteEmissionScenarioArgs = {
  where: EmissionScenarioWhereUniqueInput;
};


export type MutationDeleteEmissionScenariosArgs = {
  where: Array<EmissionScenarioWhereUniqueInput>;
};


export type MutationDeleteEquipmentArgs = {
  where: EquipmentWhereUniqueInput;
};


export type MutationDeleteEquipmentListArgs = {
  where: Array<EquipmentWhereUniqueInput>;
};


export type MutationDeleteFarmArgs = {
  where: FarmWhereUniqueInput;
};


export type MutationDeleteFarmsArgs = {
  where: Array<FarmWhereUniqueInput>;
};


export type MutationDeleteFeedDispenseEventArgs = {
  where: FeedDispenseEventWhereUniqueInput;
};


export type MutationDeleteFeedDispenseEventsArgs = {
  where: Array<FeedDispenseEventWhereUniqueInput>;
};


export type MutationDeleteFeedLotArgs = {
  where: FeedLotWhereUniqueInput;
};


export type MutationDeleteFeedLotsArgs = {
  where: Array<FeedLotWhereUniqueInput>;
};


export type MutationDeleteFeedRationComponentArgs = {
  where: FeedRationComponentWhereUniqueInput;
};


export type MutationDeleteFeedRationComponentsArgs = {
  where: Array<FeedRationComponentWhereUniqueInput>;
};


export type MutationDeleteFeedRationPlanArgs = {
  where: FeedRationPlanWhereUniqueInput;
};


export type MutationDeleteFeedRationPlansArgs = {
  where: Array<FeedRationPlanWhereUniqueInput>;
};


export type MutationDeleteFeedSiloArgs = {
  where: FeedSiloWhereUniqueInput;
};


export type MutationDeleteFeedSilosArgs = {
  where: Array<FeedSiloWhereUniqueInput>;
};


export type MutationDeleteFieldArgs = {
  where: FieldWhereUniqueInput;
};


export type MutationDeleteFieldImpactSummariesArgs = {
  where: Array<FieldImpactSummaryWhereUniqueInput>;
};


export type MutationDeleteFieldImpactSummaryArgs = {
  where: FieldImpactSummaryWhereUniqueInput;
};


export type MutationDeleteFieldsArgs = {
  where: Array<FieldWhereUniqueInput>;
};


export type MutationDeleteHerdMetricArgs = {
  where: HerdMetricWhereUniqueInput;
};


export type MutationDeleteHerdMetricsArgs = {
  where: Array<HerdMetricWhereUniqueInput>;
};


export type MutationDeleteInterviewArgs = {
  where: InterviewWhereUniqueInput;
};


export type MutationDeleteInterviewStageArgs = {
  where: InterviewStageWhereUniqueInput;
};


export type MutationDeleteInterviewStagesArgs = {
  where: Array<InterviewStageWhereUniqueInput>;
};


export type MutationDeleteInterviewsArgs = {
  where: Array<InterviewWhereUniqueInput>;
};


export type MutationDeleteJobCandidateArgs = {
  where: JobCandidateWhereUniqueInput;
};


export type MutationDeleteJobCandidatesArgs = {
  where: Array<JobCandidateWhereUniqueInput>;
};


export type MutationDeleteJobOpeningArgs = {
  where: JobOpeningWhereUniqueInput;
};


export type MutationDeleteJobOpeningsArgs = {
  where: Array<JobOpeningWhereUniqueInput>;
};


export type MutationDeleteKpiArgs = {
  where: KpiWhereUniqueInput;
};


export type MutationDeleteKpisArgs = {
  where: Array<KpiWhereUniqueInput>;
};


export type MutationDeleteLandCoverStatisticArgs = {
  where: LandCoverStatisticWhereUniqueInput;
};


export type MutationDeleteLandCoverStatisticsArgs = {
  where: Array<LandCoverStatisticWhereUniqueInput>;
};


export type MutationDeleteMembershipArgs = {
  where: MembershipWhereUniqueInput;
};


export type MutationDeleteMembershipsArgs = {
  where: Array<MembershipWhereUniqueInput>;
};


export type MutationDeleteMessageClickArgs = {
  where: MessageClickWhereUniqueInput;
};


export type MutationDeleteMessageClicksArgs = {
  where: Array<MessageClickWhereUniqueInput>;
};


export type MutationDeleteMessageDeliveriesArgs = {
  where: Array<MessageDeliveryWhereUniqueInput>;
};


export type MutationDeleteMessageDeliveryArgs = {
  where: MessageDeliveryWhereUniqueInput;
};


export type MutationDeleteMessageTemplateArgs = {
  where: MessageTemplateWhereUniqueInput;
};


export type MutationDeleteMessageTemplatesArgs = {
  where: Array<MessageTemplateWhereUniqueInput>;
};


export type MutationDeleteMilkAnalysesArgs = {
  where: Array<MilkAnalysisWhereUniqueInput>;
};


export type MutationDeleteMilkAnalysisArgs = {
  where: MilkAnalysisWhereUniqueInput;
};


export type MutationDeleteMilkingEventArgs = {
  where: MilkingEventWhereUniqueInput;
};


export type MutationDeleteMilkingEventsArgs = {
  where: Array<MilkingEventWhereUniqueInput>;
};


export type MutationDeleteNdviAssetArgs = {
  where: NdviAssetWhereUniqueInput;
};


export type MutationDeleteNdviAssetsArgs = {
  where: Array<NdviAssetWhereUniqueInput>;
};


export type MutationDeleteNetPrimaryProductivitiesArgs = {
  where: Array<NetPrimaryProductivityWhereUniqueInput>;
};


export type MutationDeleteNetPrimaryProductivityArgs = {
  where: NetPrimaryProductivityWhereUniqueInput;
};


export type MutationDeleteNewsletterSegmentArgs = {
  where: NewsletterSegmentWhereUniqueInput;
};


export type MutationDeleteNewsletterSegmentsArgs = {
  where: Array<NewsletterSegmentWhereUniqueInput>;
};


export type MutationDeleteNewsletterSubscriberArgs = {
  where: NewsletterSubscriberWhereUniqueInput;
};


export type MutationDeleteNewsletterSubscribersArgs = {
  where: Array<NewsletterSubscriberWhereUniqueInput>;
};


export type MutationDeleteOperatorArgs = {
  where: OperatorWhereUniqueInput;
};


export type MutationDeleteOperatorsArgs = {
  where: Array<OperatorWhereUniqueInput>;
};


export type MutationDeleteOrganisationArgs = {
  where: OrganisationWhereUniqueInput;
};


export type MutationDeleteOrganisationsArgs = {
  where: Array<OrganisationWhereUniqueInput>;
};


export type MutationDeletePlanArgs = {
  where: PlanWhereUniqueInput;
};


export type MutationDeletePlanPriceArgs = {
  where: PlanPriceWhereUniqueInput;
};


export type MutationDeletePlanPricesArgs = {
  where: Array<PlanPriceWhereUniqueInput>;
};


export type MutationDeletePlansArgs = {
  where: Array<PlanWhereUniqueInput>;
};


export type MutationDeletePostArgs = {
  where: PostWhereUniqueInput;
};


export type MutationDeletePostsArgs = {
  where: Array<PostWhereUniqueInput>;
};


export type MutationDeleteProductArgs = {
  where: ProductWhereUniqueInput;
};


export type MutationDeleteProductsArgs = {
  where: Array<ProductWhereUniqueInput>;
};


export type MutationDeleteReferralCampaignArgs = {
  where: ReferralCampaignWhereUniqueInput;
};


export type MutationDeleteReferralCampaignsArgs = {
  where: Array<ReferralCampaignWhereUniqueInput>;
};


export type MutationDeleteReferralPartnerArgs = {
  where: ReferralPartnerWhereUniqueInput;
};


export type MutationDeleteReferralPartnersArgs = {
  where: Array<ReferralPartnerWhereUniqueInput>;
};


export type MutationDeleteReferralRedemptionArgs = {
  where: ReferralRedemptionWhereUniqueInput;
};


export type MutationDeleteReferralRedemptionsArgs = {
  where: Array<ReferralRedemptionWhereUniqueInput>;
};


export type MutationDeleteRegulatoryRuleArgs = {
  where: RegulatoryRuleWhereUniqueInput;
};


export type MutationDeleteRegulatoryRulesArgs = {
  where: Array<RegulatoryRuleWhereUniqueInput>;
};


export type MutationDeleteSoilMeasurementArgs = {
  where: SoilMeasurementWhereUniqueInput;
};


export type MutationDeleteSoilMeasurementsArgs = {
  where: Array<SoilMeasurementWhereUniqueInput>;
};


export type MutationDeleteSoilMoistureObservationArgs = {
  where: SoilMoistureObservationWhereUniqueInput;
};


export type MutationDeleteSoilMoistureObservationsArgs = {
  where: Array<SoilMoistureObservationWhereUniqueInput>;
};


export type MutationDeleteSoilOrganicCarbonStockArgs = {
  where: SoilOrganicCarbonStockWhereUniqueInput;
};


export type MutationDeleteSoilOrganicCarbonStocksArgs = {
  where: Array<SoilOrganicCarbonStockWhereUniqueInput>;
};


export type MutationDeleteSubscriptionArgs = {
  where: SubscriptionWhereUniqueInput;
};


export type MutationDeleteSubscriptionsArgs = {
  where: Array<SubscriptionWhereUniqueInput>;
};


export type MutationDeleteSustainablePracticeArgs = {
  where: SustainablePracticeWhereUniqueInput;
};


export type MutationDeleteSustainablePracticeCategoriesArgs = {
  where: Array<SustainablePracticeCategoryWhereUniqueInput>;
};


export type MutationDeleteSustainablePracticeCategoryArgs = {
  where: SustainablePracticeCategoryWhereUniqueInput;
};


export type MutationDeleteSustainablePracticeEventArgs = {
  where: SustainablePracticeEventWhereUniqueInput;
};


export type MutationDeleteSustainablePracticeEventsArgs = {
  where: Array<SustainablePracticeEventWhereUniqueInput>;
};


export type MutationDeleteSustainablePracticesArgs = {
  where: Array<SustainablePracticeWhereUniqueInput>;
};


export type MutationDeleteTagArgs = {
  where: TagWhereUniqueInput;
};


export type MutationDeleteTagsArgs = {
  where: Array<TagWhereUniqueInput>;
};


export type MutationDeleteUserArgs = {
  where: UserWhereUniqueInput;
};


export type MutationDeleteUsersArgs = {
  where: Array<UserWhereUniqueInput>;
};


export type MutationDeleteWeatherRecordArgs = {
  where: WeatherRecordWhereUniqueInput;
};


export type MutationDeleteWeatherRecordsArgs = {
  where: Array<WeatherRecordWhereUniqueInput>;
};


export type MutationUpdateActivitiesArgs = {
  data: Array<ActivityUpdateArgs>;
};


export type MutationUpdateActivityArgs = {
  data: ActivityUpdateInput;
  where: ActivityWhereUniqueInput;
};


export type MutationUpdateActivityImpactArgs = {
  data: ActivityImpactUpdateInput;
  where: ActivityImpactWhereUniqueInput;
};


export type MutationUpdateActivityImpactsArgs = {
  data: Array<ActivityImpactUpdateArgs>;
};


export type MutationUpdateAlertArgs = {
  data: AlertUpdateInput;
  where: AlertWhereUniqueInput;
};


export type MutationUpdateAlertsArgs = {
  data: Array<AlertUpdateArgs>;
};


export type MutationUpdateAnimalArgs = {
  data: AnimalUpdateInput;
  where: AnimalWhereUniqueInput;
};


export type MutationUpdateAnimalEventArgs = {
  data: AnimalEventUpdateInput;
  where: AnimalEventWhereUniqueInput;
};


export type MutationUpdateAnimalEventsArgs = {
  data: Array<AnimalEventUpdateArgs>;
};


export type MutationUpdateAnimalsArgs = {
  data: Array<AnimalUpdateArgs>;
};


export type MutationUpdateApplicationArgs = {
  data: ApplicationUpdateInput;
  where: ApplicationWhereUniqueInput;
};


export type MutationUpdateApplicationStatusArgs = {
  data: ApplicationStatusUpdateInput;
  where: ApplicationStatusWhereUniqueInput;
};


export type MutationUpdateApplicationStatusesArgs = {
  data: Array<ApplicationStatusUpdateArgs>;
};


export type MutationUpdateApplicationsArgs = {
  data: Array<ApplicationUpdateArgs>;
};


export type MutationUpdateAuthorArgs = {
  data: AuthorUpdateInput;
  where: AuthorWhereUniqueInput;
};


export type MutationUpdateAuthorsArgs = {
  data: Array<AuthorUpdateArgs>;
};


export type MutationUpdateBarnArgs = {
  data: BarnUpdateInput;
  where: BarnWhereUniqueInput;
};


export type MutationUpdateBarnActivitiesArgs = {
  data: Array<BarnActivityUpdateArgs>;
};


export type MutationUpdateBarnActivityArgs = {
  data: BarnActivityUpdateInput;
  where: BarnActivityWhereUniqueInput;
};


export type MutationUpdateBarnsArgs = {
  data: Array<BarnUpdateArgs>;
};


export type MutationUpdateBoxArgs = {
  data: BoxUpdateInput;
  where: BoxWhereUniqueInput;
};


export type MutationUpdateBoxesArgs = {
  data: Array<BoxUpdateArgs>;
};


export type MutationUpdateBreedArgs = {
  data: BreedUpdateInput;
  where: BreedWhereUniqueInput;
};


export type MutationUpdateBreedsArgs = {
  data: Array<BreedUpdateArgs>;
};


export type MutationUpdateCarbonOffsetFactorArgs = {
  data: CarbonOffsetFactorUpdateInput;
  where: CarbonOffsetFactorWhereUniqueInput;
};


export type MutationUpdateCarbonOffsetFactorsArgs = {
  data: Array<CarbonOffsetFactorUpdateArgs>;
};


export type MutationUpdateCategoriesArgs = {
  data: Array<CategoryUpdateArgs>;
};


export type MutationUpdateCategoryArgs = {
  data: CategoryUpdateInput;
  where: CategoryWhereUniqueInput;
};


export type MutationUpdateCategoryKpiArgs = {
  data: CategoryKpiUpdateInput;
  where: CategoryKpiWhereUniqueInput;
};


export type MutationUpdateCategoryKpisArgs = {
  data: Array<CategoryKpiUpdateArgs>;
};


export type MutationUpdateChatArgs = {
  data: ChatUpdateInput;
  where: ChatWhereUniqueInput;
};


export type MutationUpdateChatsArgs = {
  data: Array<ChatUpdateArgs>;
};


export type MutationUpdateCropArgs = {
  data: CropUpdateInput;
  where: CropWhereUniqueInput;
};


export type MutationUpdateCropTypeArgs = {
  data: CropTypeUpdateInput;
  where: CropTypeWhereUniqueInput;
};


export type MutationUpdateCropTypesArgs = {
  data: Array<CropTypeUpdateArgs>;
};


export type MutationUpdateCropsArgs = {
  data: Array<CropUpdateArgs>;
};


export type MutationUpdateDocumentArgs = {
  data: DocumentUpdateInput;
  where: DocumentWhereUniqueInput;
};


export type MutationUpdateDocumentsArgs = {
  data: Array<DocumentUpdateArgs>;
};


export type MutationUpdateEcoSchemeArgs = {
  data: EcoSchemeUpdateInput;
  where: EcoSchemeWhereUniqueInput;
};


export type MutationUpdateEcoSchemesArgs = {
  data: Array<EcoSchemeUpdateArgs>;
};


export type MutationUpdateEmissionScenarioArgs = {
  data: EmissionScenarioUpdateInput;
  where: EmissionScenarioWhereUniqueInput;
};


export type MutationUpdateEmissionScenariosArgs = {
  data: Array<EmissionScenarioUpdateArgs>;
};


export type MutationUpdateEquipmentArgs = {
  data: EquipmentUpdateInput;
  where: EquipmentWhereUniqueInput;
};


export type MutationUpdateEquipmentListArgs = {
  data: Array<EquipmentUpdateArgs>;
};


export type MutationUpdateFarmArgs = {
  data: FarmUpdateInput;
  where: FarmWhereUniqueInput;
};


export type MutationUpdateFarmsArgs = {
  data: Array<FarmUpdateArgs>;
};


export type MutationUpdateFeedDispenseEventArgs = {
  data: FeedDispenseEventUpdateInput;
  where: FeedDispenseEventWhereUniqueInput;
};


export type MutationUpdateFeedDispenseEventsArgs = {
  data: Array<FeedDispenseEventUpdateArgs>;
};


export type MutationUpdateFeedLotArgs = {
  data: FeedLotUpdateInput;
  where: FeedLotWhereUniqueInput;
};


export type MutationUpdateFeedLotsArgs = {
  data: Array<FeedLotUpdateArgs>;
};


export type MutationUpdateFeedRationComponentArgs = {
  data: FeedRationComponentUpdateInput;
  where: FeedRationComponentWhereUniqueInput;
};


export type MutationUpdateFeedRationComponentsArgs = {
  data: Array<FeedRationComponentUpdateArgs>;
};


export type MutationUpdateFeedRationPlanArgs = {
  data: FeedRationPlanUpdateInput;
  where: FeedRationPlanWhereUniqueInput;
};


export type MutationUpdateFeedRationPlansArgs = {
  data: Array<FeedRationPlanUpdateArgs>;
};


export type MutationUpdateFeedSiloArgs = {
  data: FeedSiloUpdateInput;
  where: FeedSiloWhereUniqueInput;
};


export type MutationUpdateFeedSilosArgs = {
  data: Array<FeedSiloUpdateArgs>;
};


export type MutationUpdateFieldArgs = {
  data: FieldUpdateInput;
  where: FieldWhereUniqueInput;
};


export type MutationUpdateFieldImpactSummariesArgs = {
  data: Array<FieldImpactSummaryUpdateArgs>;
};


export type MutationUpdateFieldImpactSummaryArgs = {
  data: FieldImpactSummaryUpdateInput;
  where: FieldImpactSummaryWhereUniqueInput;
};


export type MutationUpdateFieldsArgs = {
  data: Array<FieldUpdateArgs>;
};


export type MutationUpdateHerdMetricArgs = {
  data: HerdMetricUpdateInput;
  where: HerdMetricWhereUniqueInput;
};


export type MutationUpdateHerdMetricsArgs = {
  data: Array<HerdMetricUpdateArgs>;
};


export type MutationUpdateInterviewArgs = {
  data: InterviewUpdateInput;
  where: InterviewWhereUniqueInput;
};


export type MutationUpdateInterviewStageArgs = {
  data: InterviewStageUpdateInput;
  where: InterviewStageWhereUniqueInput;
};


export type MutationUpdateInterviewStagesArgs = {
  data: Array<InterviewStageUpdateArgs>;
};


export type MutationUpdateInterviewsArgs = {
  data: Array<InterviewUpdateArgs>;
};


export type MutationUpdateJobCandidateArgs = {
  data: JobCandidateUpdateInput;
  where: JobCandidateWhereUniqueInput;
};


export type MutationUpdateJobCandidatesArgs = {
  data: Array<JobCandidateUpdateArgs>;
};


export type MutationUpdateJobOpeningArgs = {
  data: JobOpeningUpdateInput;
  where: JobOpeningWhereUniqueInput;
};


export type MutationUpdateJobOpeningsArgs = {
  data: Array<JobOpeningUpdateArgs>;
};


export type MutationUpdateKpiArgs = {
  data: KpiUpdateInput;
  where: KpiWhereUniqueInput;
};


export type MutationUpdateKpisArgs = {
  data: Array<KpiUpdateArgs>;
};


export type MutationUpdateLandCoverStatisticArgs = {
  data: LandCoverStatisticUpdateInput;
  where: LandCoverStatisticWhereUniqueInput;
};


export type MutationUpdateLandCoverStatisticsArgs = {
  data: Array<LandCoverStatisticUpdateArgs>;
};


export type MutationUpdateMembershipArgs = {
  data: MembershipUpdateInput;
  where: MembershipWhereUniqueInput;
};


export type MutationUpdateMembershipsArgs = {
  data: Array<MembershipUpdateArgs>;
};


export type MutationUpdateMessageClickArgs = {
  data: MessageClickUpdateInput;
  where: MessageClickWhereUniqueInput;
};


export type MutationUpdateMessageClicksArgs = {
  data: Array<MessageClickUpdateArgs>;
};


export type MutationUpdateMessageDeliveriesArgs = {
  data: Array<MessageDeliveryUpdateArgs>;
};


export type MutationUpdateMessageDeliveryArgs = {
  data: MessageDeliveryUpdateInput;
  where: MessageDeliveryWhereUniqueInput;
};


export type MutationUpdateMessageTemplateArgs = {
  data: MessageTemplateUpdateInput;
  where: MessageTemplateWhereUniqueInput;
};


export type MutationUpdateMessageTemplatesArgs = {
  data: Array<MessageTemplateUpdateArgs>;
};


export type MutationUpdateMilkAnalysesArgs = {
  data: Array<MilkAnalysisUpdateArgs>;
};


export type MutationUpdateMilkAnalysisArgs = {
  data: MilkAnalysisUpdateInput;
  where: MilkAnalysisWhereUniqueInput;
};


export type MutationUpdateMilkingEventArgs = {
  data: MilkingEventUpdateInput;
  where: MilkingEventWhereUniqueInput;
};


export type MutationUpdateMilkingEventsArgs = {
  data: Array<MilkingEventUpdateArgs>;
};


export type MutationUpdateNdviAssetArgs = {
  data: NdviAssetUpdateInput;
  where: NdviAssetWhereUniqueInput;
};


export type MutationUpdateNdviAssetsArgs = {
  data: Array<NdviAssetUpdateArgs>;
};


export type MutationUpdateNetPrimaryProductivitiesArgs = {
  data: Array<NetPrimaryProductivityUpdateArgs>;
};


export type MutationUpdateNetPrimaryProductivityArgs = {
  data: NetPrimaryProductivityUpdateInput;
  where: NetPrimaryProductivityWhereUniqueInput;
};


export type MutationUpdateNewsletterSegmentArgs = {
  data: NewsletterSegmentUpdateInput;
  where: NewsletterSegmentWhereUniqueInput;
};


export type MutationUpdateNewsletterSegmentsArgs = {
  data: Array<NewsletterSegmentUpdateArgs>;
};


export type MutationUpdateNewsletterSubscriberArgs = {
  data: NewsletterSubscriberUpdateInput;
  where: NewsletterSubscriberWhereUniqueInput;
};


export type MutationUpdateNewsletterSubscribersArgs = {
  data: Array<NewsletterSubscriberUpdateArgs>;
};


export type MutationUpdateOperatorArgs = {
  data: OperatorUpdateInput;
  where: OperatorWhereUniqueInput;
};


export type MutationUpdateOperatorsArgs = {
  data: Array<OperatorUpdateArgs>;
};


export type MutationUpdateOrganisationArgs = {
  data: OrganisationUpdateInput;
  where: OrganisationWhereUniqueInput;
};


export type MutationUpdateOrganisationsArgs = {
  data: Array<OrganisationUpdateArgs>;
};


export type MutationUpdatePlanArgs = {
  data: PlanUpdateInput;
  where: PlanWhereUniqueInput;
};


export type MutationUpdatePlanPriceArgs = {
  data: PlanPriceUpdateInput;
  where: PlanPriceWhereUniqueInput;
};


export type MutationUpdatePlanPricesArgs = {
  data: Array<PlanPriceUpdateArgs>;
};


export type MutationUpdatePlansArgs = {
  data: Array<PlanUpdateArgs>;
};


export type MutationUpdatePostArgs = {
  data: PostUpdateInput;
  where: PostWhereUniqueInput;
};


export type MutationUpdatePostsArgs = {
  data: Array<PostUpdateArgs>;
};


export type MutationUpdateProductArgs = {
  data: ProductUpdateInput;
  where: ProductWhereUniqueInput;
};


export type MutationUpdateProductsArgs = {
  data: Array<ProductUpdateArgs>;
};


export type MutationUpdateReferralCampaignArgs = {
  data: ReferralCampaignUpdateInput;
  where: ReferralCampaignWhereUniqueInput;
};


export type MutationUpdateReferralCampaignsArgs = {
  data: Array<ReferralCampaignUpdateArgs>;
};


export type MutationUpdateReferralPartnerArgs = {
  data: ReferralPartnerUpdateInput;
  where: ReferralPartnerWhereUniqueInput;
};


export type MutationUpdateReferralPartnersArgs = {
  data: Array<ReferralPartnerUpdateArgs>;
};


export type MutationUpdateReferralRedemptionArgs = {
  data: ReferralRedemptionUpdateInput;
  where: ReferralRedemptionWhereUniqueInput;
};


export type MutationUpdateReferralRedemptionsArgs = {
  data: Array<ReferralRedemptionUpdateArgs>;
};


export type MutationUpdateRegulatoryRuleArgs = {
  data: RegulatoryRuleUpdateInput;
  where: RegulatoryRuleWhereUniqueInput;
};


export type MutationUpdateRegulatoryRulesArgs = {
  data: Array<RegulatoryRuleUpdateArgs>;
};


export type MutationUpdateSoilMeasurementArgs = {
  data: SoilMeasurementUpdateInput;
  where: SoilMeasurementWhereUniqueInput;
};


export type MutationUpdateSoilMeasurementsArgs = {
  data: Array<SoilMeasurementUpdateArgs>;
};


export type MutationUpdateSoilMoistureObservationArgs = {
  data: SoilMoistureObservationUpdateInput;
  where: SoilMoistureObservationWhereUniqueInput;
};


export type MutationUpdateSoilMoistureObservationsArgs = {
  data: Array<SoilMoistureObservationUpdateArgs>;
};


export type MutationUpdateSoilOrganicCarbonStockArgs = {
  data: SoilOrganicCarbonStockUpdateInput;
  where: SoilOrganicCarbonStockWhereUniqueInput;
};


export type MutationUpdateSoilOrganicCarbonStocksArgs = {
  data: Array<SoilOrganicCarbonStockUpdateArgs>;
};


export type MutationUpdateSubscriptionArgs = {
  data: SubscriptionUpdateInput;
  where: SubscriptionWhereUniqueInput;
};


export type MutationUpdateSubscriptionsArgs = {
  data: Array<SubscriptionUpdateArgs>;
};


export type MutationUpdateSustainablePracticeArgs = {
  data: SustainablePracticeUpdateInput;
  where: SustainablePracticeWhereUniqueInput;
};


export type MutationUpdateSustainablePracticeCategoriesArgs = {
  data: Array<SustainablePracticeCategoryUpdateArgs>;
};


export type MutationUpdateSustainablePracticeCategoryArgs = {
  data: SustainablePracticeCategoryUpdateInput;
  where: SustainablePracticeCategoryWhereUniqueInput;
};


export type MutationUpdateSustainablePracticeEventArgs = {
  data: SustainablePracticeEventUpdateInput;
  where: SustainablePracticeEventWhereUniqueInput;
};


export type MutationUpdateSustainablePracticeEventsArgs = {
  data: Array<SustainablePracticeEventUpdateArgs>;
};


export type MutationUpdateSustainablePracticesArgs = {
  data: Array<SustainablePracticeUpdateArgs>;
};


export type MutationUpdateTagArgs = {
  data: TagUpdateInput;
  where: TagWhereUniqueInput;
};


export type MutationUpdateTagsArgs = {
  data: Array<TagUpdateArgs>;
};


export type MutationUpdateUserArgs = {
  data: UserUpdateInput;
  where: UserWhereUniqueInput;
};


export type MutationUpdateUsersArgs = {
  data: Array<UserUpdateArgs>;
};


export type MutationUpdateWeatherRecordArgs = {
  data: WeatherRecordUpdateInput;
  where: WeatherRecordWhereUniqueInput;
};


export type MutationUpdateWeatherRecordsArgs = {
  data: Array<WeatherRecordUpdateArgs>;
};

export type NdviAsset = {
  __typename?: 'NDVIAsset';
  captureDate?: Maybe<Scalars['DateTime']['output']>;
  cloudCover?: Maybe<Scalars['Float']['output']>;
  field?: Maybe<Field>;
  id: Scalars['ID']['output'];
  provider?: Maybe<Scalars['String']['output']>;
  s3Key?: Maybe<Scalars['String']['output']>;
  tileJsonUrl?: Maybe<Scalars['String']['output']>;
};

export type NdviAssetCreateInput = {
  captureDate?: InputMaybe<Scalars['DateTime']['input']>;
  cloudCover?: InputMaybe<Scalars['Float']['input']>;
  field?: InputMaybe<FieldRelateToOneForCreateInput>;
  provider?: InputMaybe<Scalars['String']['input']>;
  s3Key?: InputMaybe<Scalars['String']['input']>;
  tileJsonUrl?: InputMaybe<Scalars['String']['input']>;
};

export type NdviAssetManyRelationFilter = {
  every?: InputMaybe<NdviAssetWhereInput>;
  none?: InputMaybe<NdviAssetWhereInput>;
  some?: InputMaybe<NdviAssetWhereInput>;
};

export type NdviAssetOrderByInput = {
  captureDate?: InputMaybe<OrderDirection>;
  cloudCover?: InputMaybe<OrderDirection>;
  id?: InputMaybe<OrderDirection>;
  provider?: InputMaybe<OrderDirection>;
  s3Key?: InputMaybe<OrderDirection>;
  tileJsonUrl?: InputMaybe<OrderDirection>;
};

export type NdviAssetRelateToManyForCreateInput = {
  connect?: InputMaybe<Array<NdviAssetWhereUniqueInput>>;
  create?: InputMaybe<Array<NdviAssetCreateInput>>;
};

export type NdviAssetRelateToManyForUpdateInput = {
  connect?: InputMaybe<Array<NdviAssetWhereUniqueInput>>;
  create?: InputMaybe<Array<NdviAssetCreateInput>>;
  disconnect?: InputMaybe<Array<NdviAssetWhereUniqueInput>>;
  set?: InputMaybe<Array<NdviAssetWhereUniqueInput>>;
};

export type NdviAssetUpdateArgs = {
  data: NdviAssetUpdateInput;
  where: NdviAssetWhereUniqueInput;
};

export type NdviAssetUpdateInput = {
  captureDate?: InputMaybe<Scalars['DateTime']['input']>;
  cloudCover?: InputMaybe<Scalars['Float']['input']>;
  field?: InputMaybe<FieldRelateToOneForUpdateInput>;
  provider?: InputMaybe<Scalars['String']['input']>;
  s3Key?: InputMaybe<Scalars['String']['input']>;
  tileJsonUrl?: InputMaybe<Scalars['String']['input']>;
};

export type NdviAssetWhereInput = {
  AND?: InputMaybe<Array<NdviAssetWhereInput>>;
  NOT?: InputMaybe<Array<NdviAssetWhereInput>>;
  OR?: InputMaybe<Array<NdviAssetWhereInput>>;
  captureDate?: InputMaybe<DateTimeNullableFilter>;
  cloudCover?: InputMaybe<FloatNullableFilter>;
  field?: InputMaybe<FieldWhereInput>;
  id?: InputMaybe<IdFilter>;
  provider?: InputMaybe<StringNullableFilter>;
  s3Key?: InputMaybe<StringFilter>;
  tileJsonUrl?: InputMaybe<StringFilter>;
};

export type NdviAssetWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']['input']>;
};

export type NestedStringFilter = {
  contains?: InputMaybe<Scalars['String']['input']>;
  endsWith?: InputMaybe<Scalars['String']['input']>;
  equals?: InputMaybe<Scalars['String']['input']>;
  gt?: InputMaybe<Scalars['String']['input']>;
  gte?: InputMaybe<Scalars['String']['input']>;
  in?: InputMaybe<Array<Scalars['String']['input']>>;
  lt?: InputMaybe<Scalars['String']['input']>;
  lte?: InputMaybe<Scalars['String']['input']>;
  not?: InputMaybe<NestedStringFilter>;
  notIn?: InputMaybe<Array<Scalars['String']['input']>>;
  startsWith?: InputMaybe<Scalars['String']['input']>;
};

export type NetPrimaryProductivity = {
  __typename?: 'NetPrimaryProductivity';
  co2e?: Maybe<Scalars['Float']['output']>;
  field?: Maybe<Field>;
  id: Scalars['ID']['output'];
  imageUrl?: Maybe<Scalars['String']['output']>;
  meanNPP?: Maybe<Scalars['Float']['output']>;
  recordedAt?: Maybe<Scalars['DateTime']['output']>;
  totalNPP?: Maybe<Scalars['Float']['output']>;
  year?: Maybe<Scalars['Int']['output']>;
};

export type NetPrimaryProductivityCreateInput = {
  co2e?: InputMaybe<Scalars['Float']['input']>;
  field?: InputMaybe<FieldRelateToOneForCreateInput>;
  imageUrl?: InputMaybe<Scalars['String']['input']>;
  meanNPP?: InputMaybe<Scalars['Float']['input']>;
  recordedAt?: InputMaybe<Scalars['DateTime']['input']>;
  totalNPP?: InputMaybe<Scalars['Float']['input']>;
  year?: InputMaybe<Scalars['Int']['input']>;
};

export type NetPrimaryProductivityManyRelationFilter = {
  every?: InputMaybe<NetPrimaryProductivityWhereInput>;
  none?: InputMaybe<NetPrimaryProductivityWhereInput>;
  some?: InputMaybe<NetPrimaryProductivityWhereInput>;
};

export type NetPrimaryProductivityOrderByInput = {
  co2e?: InputMaybe<OrderDirection>;
  id?: InputMaybe<OrderDirection>;
  imageUrl?: InputMaybe<OrderDirection>;
  meanNPP?: InputMaybe<OrderDirection>;
  recordedAt?: InputMaybe<OrderDirection>;
  totalNPP?: InputMaybe<OrderDirection>;
  year?: InputMaybe<OrderDirection>;
};

export type NetPrimaryProductivityRelateToManyForCreateInput = {
  connect?: InputMaybe<Array<NetPrimaryProductivityWhereUniqueInput>>;
  create?: InputMaybe<Array<NetPrimaryProductivityCreateInput>>;
};

export type NetPrimaryProductivityRelateToManyForUpdateInput = {
  connect?: InputMaybe<Array<NetPrimaryProductivityWhereUniqueInput>>;
  create?: InputMaybe<Array<NetPrimaryProductivityCreateInput>>;
  disconnect?: InputMaybe<Array<NetPrimaryProductivityWhereUniqueInput>>;
  set?: InputMaybe<Array<NetPrimaryProductivityWhereUniqueInput>>;
};

export type NetPrimaryProductivityUpdateArgs = {
  data: NetPrimaryProductivityUpdateInput;
  where: NetPrimaryProductivityWhereUniqueInput;
};

export type NetPrimaryProductivityUpdateInput = {
  co2e?: InputMaybe<Scalars['Float']['input']>;
  field?: InputMaybe<FieldRelateToOneForUpdateInput>;
  imageUrl?: InputMaybe<Scalars['String']['input']>;
  meanNPP?: InputMaybe<Scalars['Float']['input']>;
  recordedAt?: InputMaybe<Scalars['DateTime']['input']>;
  totalNPP?: InputMaybe<Scalars['Float']['input']>;
  year?: InputMaybe<Scalars['Int']['input']>;
};

export type NetPrimaryProductivityWhereInput = {
  AND?: InputMaybe<Array<NetPrimaryProductivityWhereInput>>;
  NOT?: InputMaybe<Array<NetPrimaryProductivityWhereInput>>;
  OR?: InputMaybe<Array<NetPrimaryProductivityWhereInput>>;
  co2e?: InputMaybe<FloatNullableFilter>;
  field?: InputMaybe<FieldWhereInput>;
  id?: InputMaybe<IdFilter>;
  imageUrl?: InputMaybe<StringFilter>;
  meanNPP?: InputMaybe<FloatNullableFilter>;
  recordedAt?: InputMaybe<DateTimeNullableFilter>;
  totalNPP?: InputMaybe<FloatNullableFilter>;
  year?: InputMaybe<IntNullableFilter>;
};

export type NetPrimaryProductivityWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']['input']>;
};

export type NewsletterSegment = {
  __typename?: 'NewsletterSegment';
  description?: Maybe<Scalars['String']['output']>;
  id: Scalars['ID']['output'];
  name?: Maybe<Scalars['String']['output']>;
  newsletterSubscribers?: Maybe<Array<NewsletterSubscriber>>;
  newsletterSubscribersCount?: Maybe<Scalars['Int']['output']>;
};


export type NewsletterSegmentNewsletterSubscribersArgs = {
  cursor?: InputMaybe<NewsletterSubscriberWhereUniqueInput>;
  orderBy?: Array<NewsletterSubscriberOrderByInput>;
  skip?: Scalars['Int']['input'];
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: NewsletterSubscriberWhereInput;
};


export type NewsletterSegmentNewsletterSubscribersCountArgs = {
  where?: NewsletterSubscriberWhereInput;
};

export type NewsletterSegmentCreateInput = {
  description?: InputMaybe<Scalars['String']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
  newsletterSubscribers?: InputMaybe<NewsletterSubscriberRelateToManyForCreateInput>;
};

export type NewsletterSegmentManyRelationFilter = {
  every?: InputMaybe<NewsletterSegmentWhereInput>;
  none?: InputMaybe<NewsletterSegmentWhereInput>;
  some?: InputMaybe<NewsletterSegmentWhereInput>;
};

export type NewsletterSegmentOrderByInput = {
  description?: InputMaybe<OrderDirection>;
  id?: InputMaybe<OrderDirection>;
  name?: InputMaybe<OrderDirection>;
};

export type NewsletterSegmentRelateToManyForCreateInput = {
  connect?: InputMaybe<Array<NewsletterSegmentWhereUniqueInput>>;
  create?: InputMaybe<Array<NewsletterSegmentCreateInput>>;
};

export type NewsletterSegmentRelateToManyForUpdateInput = {
  connect?: InputMaybe<Array<NewsletterSegmentWhereUniqueInput>>;
  create?: InputMaybe<Array<NewsletterSegmentCreateInput>>;
  disconnect?: InputMaybe<Array<NewsletterSegmentWhereUniqueInput>>;
  set?: InputMaybe<Array<NewsletterSegmentWhereUniqueInput>>;
};

export type NewsletterSegmentUpdateArgs = {
  data: NewsletterSegmentUpdateInput;
  where: NewsletterSegmentWhereUniqueInput;
};

export type NewsletterSegmentUpdateInput = {
  description?: InputMaybe<Scalars['String']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
  newsletterSubscribers?: InputMaybe<NewsletterSubscriberRelateToManyForUpdateInput>;
};

export type NewsletterSegmentWhereInput = {
  AND?: InputMaybe<Array<NewsletterSegmentWhereInput>>;
  NOT?: InputMaybe<Array<NewsletterSegmentWhereInput>>;
  OR?: InputMaybe<Array<NewsletterSegmentWhereInput>>;
  description?: InputMaybe<StringFilter>;
  id?: InputMaybe<IdFilter>;
  name?: InputMaybe<StringFilter>;
  newsletterSubscribers?: InputMaybe<NewsletterSubscriberManyRelationFilter>;
};

export type NewsletterSegmentWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']['input']>;
};

export type NewsletterSubscriber = {
  __typename?: 'NewsletterSubscriber';
  email?: Maybe<Scalars['String']['output']>;
  id: Scalars['ID']['output'];
  isActive?: Maybe<Scalars['Boolean']['output']>;
  name?: Maybe<Scalars['String']['output']>;
  segments?: Maybe<Array<NewsletterSegment>>;
  segmentsCount?: Maybe<Scalars['Int']['output']>;
  subscribedAt?: Maybe<Scalars['DateTime']['output']>;
  unsubscribedAt?: Maybe<Scalars['DateTime']['output']>;
};


export type NewsletterSubscriberSegmentsArgs = {
  cursor?: InputMaybe<NewsletterSegmentWhereUniqueInput>;
  orderBy?: Array<NewsletterSegmentOrderByInput>;
  skip?: Scalars['Int']['input'];
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: NewsletterSegmentWhereInput;
};


export type NewsletterSubscriberSegmentsCountArgs = {
  where?: NewsletterSegmentWhereInput;
};

export type NewsletterSubscriberCreateInput = {
  email?: InputMaybe<Scalars['String']['input']>;
  isActive?: InputMaybe<Scalars['Boolean']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
  segments?: InputMaybe<NewsletterSegmentRelateToManyForCreateInput>;
  subscribedAt?: InputMaybe<Scalars['DateTime']['input']>;
  unsubscribedAt?: InputMaybe<Scalars['DateTime']['input']>;
};

export type NewsletterSubscriberManyRelationFilter = {
  every?: InputMaybe<NewsletterSubscriberWhereInput>;
  none?: InputMaybe<NewsletterSubscriberWhereInput>;
  some?: InputMaybe<NewsletterSubscriberWhereInput>;
};

export type NewsletterSubscriberOrderByInput = {
  email?: InputMaybe<OrderDirection>;
  id?: InputMaybe<OrderDirection>;
  isActive?: InputMaybe<OrderDirection>;
  name?: InputMaybe<OrderDirection>;
  subscribedAt?: InputMaybe<OrderDirection>;
  unsubscribedAt?: InputMaybe<OrderDirection>;
};

export type NewsletterSubscriberRelateToManyForCreateInput = {
  connect?: InputMaybe<Array<NewsletterSubscriberWhereUniqueInput>>;
  create?: InputMaybe<Array<NewsletterSubscriberCreateInput>>;
};

export type NewsletterSubscriberRelateToManyForUpdateInput = {
  connect?: InputMaybe<Array<NewsletterSubscriberWhereUniqueInput>>;
  create?: InputMaybe<Array<NewsletterSubscriberCreateInput>>;
  disconnect?: InputMaybe<Array<NewsletterSubscriberWhereUniqueInput>>;
  set?: InputMaybe<Array<NewsletterSubscriberWhereUniqueInput>>;
};

export type NewsletterSubscriberUpdateArgs = {
  data: NewsletterSubscriberUpdateInput;
  where: NewsletterSubscriberWhereUniqueInput;
};

export type NewsletterSubscriberUpdateInput = {
  email?: InputMaybe<Scalars['String']['input']>;
  isActive?: InputMaybe<Scalars['Boolean']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
  segments?: InputMaybe<NewsletterSegmentRelateToManyForUpdateInput>;
  subscribedAt?: InputMaybe<Scalars['DateTime']['input']>;
  unsubscribedAt?: InputMaybe<Scalars['DateTime']['input']>;
};

export type NewsletterSubscriberWhereInput = {
  AND?: InputMaybe<Array<NewsletterSubscriberWhereInput>>;
  NOT?: InputMaybe<Array<NewsletterSubscriberWhereInput>>;
  OR?: InputMaybe<Array<NewsletterSubscriberWhereInput>>;
  email?: InputMaybe<StringFilter>;
  id?: InputMaybe<IdFilter>;
  isActive?: InputMaybe<BooleanFilter>;
  name?: InputMaybe<StringFilter>;
  segments?: InputMaybe<NewsletterSegmentManyRelationFilter>;
  subscribedAt?: InputMaybe<DateTimeNullableFilter>;
  unsubscribedAt?: InputMaybe<DateTimeNullableFilter>;
};

export type NewsletterSubscriberWhereUniqueInput = {
  email?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['ID']['input']>;
};

export type Operator = {
  __typename?: 'Operator';
  barnActivities?: Maybe<Array<BarnActivity>>;
  barnActivitiesCount?: Maybe<Scalars['Int']['output']>;
  certificates?: Maybe<Scalars['String']['output']>;
  createdAt?: Maybe<Scalars['DateTime']['output']>;
  email?: Maybe<Scalars['String']['output']>;
  farm?: Maybe<Farm>;
  feedDispenses?: Maybe<Array<FeedDispenseEvent>>;
  feedDispensesCount?: Maybe<Scalars['Int']['output']>;
  id: Scalars['ID']['output'];
  milkingEvents?: Maybe<Array<MilkingEvent>>;
  milkingEventsCount?: Maybe<Scalars['Int']['output']>;
  name?: Maybe<Scalars['String']['output']>;
  phone?: Maybe<Scalars['String']['output']>;
  qualification?: Maybe<Scalars['String']['output']>;
};


export type OperatorBarnActivitiesArgs = {
  cursor?: InputMaybe<BarnActivityWhereUniqueInput>;
  orderBy?: Array<BarnActivityOrderByInput>;
  skip?: Scalars['Int']['input'];
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: BarnActivityWhereInput;
};


export type OperatorBarnActivitiesCountArgs = {
  where?: BarnActivityWhereInput;
};


export type OperatorFeedDispensesArgs = {
  cursor?: InputMaybe<FeedDispenseEventWhereUniqueInput>;
  orderBy?: Array<FeedDispenseEventOrderByInput>;
  skip?: Scalars['Int']['input'];
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: FeedDispenseEventWhereInput;
};


export type OperatorFeedDispensesCountArgs = {
  where?: FeedDispenseEventWhereInput;
};


export type OperatorMilkingEventsArgs = {
  cursor?: InputMaybe<MilkingEventWhereUniqueInput>;
  orderBy?: Array<MilkingEventOrderByInput>;
  skip?: Scalars['Int']['input'];
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: MilkingEventWhereInput;
};


export type OperatorMilkingEventsCountArgs = {
  where?: MilkingEventWhereInput;
};

export type OperatorCreateInput = {
  barnActivities?: InputMaybe<BarnActivityRelateToManyForCreateInput>;
  certificates?: InputMaybe<Scalars['String']['input']>;
  createdAt?: InputMaybe<Scalars['DateTime']['input']>;
  email?: InputMaybe<Scalars['String']['input']>;
  farm?: InputMaybe<FarmRelateToOneForCreateInput>;
  feedDispenses?: InputMaybe<FeedDispenseEventRelateToManyForCreateInput>;
  milkingEvents?: InputMaybe<MilkingEventRelateToManyForCreateInput>;
  name?: InputMaybe<Scalars['String']['input']>;
  phone?: InputMaybe<Scalars['String']['input']>;
  qualification?: InputMaybe<Scalars['String']['input']>;
};

export type OperatorOrderByInput = {
  certificates?: InputMaybe<OrderDirection>;
  createdAt?: InputMaybe<OrderDirection>;
  email?: InputMaybe<OrderDirection>;
  id?: InputMaybe<OrderDirection>;
  name?: InputMaybe<OrderDirection>;
  phone?: InputMaybe<OrderDirection>;
  qualification?: InputMaybe<OrderDirection>;
};

export type OperatorRelateToOneForCreateInput = {
  connect?: InputMaybe<OperatorWhereUniqueInput>;
  create?: InputMaybe<OperatorCreateInput>;
};

export type OperatorRelateToOneForUpdateInput = {
  connect?: InputMaybe<OperatorWhereUniqueInput>;
  create?: InputMaybe<OperatorCreateInput>;
  disconnect?: InputMaybe<Scalars['Boolean']['input']>;
};

export type OperatorUpdateArgs = {
  data: OperatorUpdateInput;
  where: OperatorWhereUniqueInput;
};

export type OperatorUpdateInput = {
  barnActivities?: InputMaybe<BarnActivityRelateToManyForUpdateInput>;
  certificates?: InputMaybe<Scalars['String']['input']>;
  createdAt?: InputMaybe<Scalars['DateTime']['input']>;
  email?: InputMaybe<Scalars['String']['input']>;
  farm?: InputMaybe<FarmRelateToOneForUpdateInput>;
  feedDispenses?: InputMaybe<FeedDispenseEventRelateToManyForUpdateInput>;
  milkingEvents?: InputMaybe<MilkingEventRelateToManyForUpdateInput>;
  name?: InputMaybe<Scalars['String']['input']>;
  phone?: InputMaybe<Scalars['String']['input']>;
  qualification?: InputMaybe<Scalars['String']['input']>;
};

export type OperatorWhereInput = {
  AND?: InputMaybe<Array<OperatorWhereInput>>;
  NOT?: InputMaybe<Array<OperatorWhereInput>>;
  OR?: InputMaybe<Array<OperatorWhereInput>>;
  barnActivities?: InputMaybe<BarnActivityManyRelationFilter>;
  certificates?: InputMaybe<StringFilter>;
  createdAt?: InputMaybe<DateTimeNullableFilter>;
  email?: InputMaybe<StringFilter>;
  farm?: InputMaybe<FarmWhereInput>;
  feedDispenses?: InputMaybe<FeedDispenseEventManyRelationFilter>;
  id?: InputMaybe<IdFilter>;
  milkingEvents?: InputMaybe<MilkingEventManyRelationFilter>;
  name?: InputMaybe<StringFilter>;
  phone?: InputMaybe<StringFilter>;
  qualification?: InputMaybe<StringFilter>;
};

export type OperatorWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']['input']>;
};

export enum OrderDirection {
  Asc = 'asc',
  Desc = 'desc'
}

export type Organisation = {
  __typename?: 'Organisation';
  address?: Maybe<Scalars['String']['output']>;
  alerts?: Maybe<Array<Alert>>;
  alertsCount?: Maybe<Scalars['Int']['output']>;
  farms?: Maybe<Array<Farm>>;
  farmsCount?: Maybe<Scalars['Int']['output']>;
  id: Scalars['ID']['output'];
  name?: Maybe<Scalars['String']['output']>;
  pacCUAA?: Maybe<Scalars['String']['output']>;
  sianFascicoloId?: Maybe<Scalars['String']['output']>;
  stripeCustomerId?: Maybe<Scalars['String']['output']>;
  subscriptions?: Maybe<Array<Subscription>>;
  subscriptionsCount?: Maybe<Scalars['Int']['output']>;
  users?: Maybe<Array<User>>;
  usersCount?: Maybe<Scalars['Int']['output']>;
  vatCf?: Maybe<Scalars['String']['output']>;
};


export type OrganisationAlertsArgs = {
  cursor?: InputMaybe<AlertWhereUniqueInput>;
  orderBy?: Array<AlertOrderByInput>;
  skip?: Scalars['Int']['input'];
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: AlertWhereInput;
};


export type OrganisationAlertsCountArgs = {
  where?: AlertWhereInput;
};


export type OrganisationFarmsArgs = {
  cursor?: InputMaybe<FarmWhereUniqueInput>;
  orderBy?: Array<FarmOrderByInput>;
  skip?: Scalars['Int']['input'];
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: FarmWhereInput;
};


export type OrganisationFarmsCountArgs = {
  where?: FarmWhereInput;
};


export type OrganisationSubscriptionsArgs = {
  cursor?: InputMaybe<SubscriptionWhereUniqueInput>;
  orderBy?: Array<SubscriptionOrderByInput>;
  skip?: Scalars['Int']['input'];
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: SubscriptionWhereInput;
};


export type OrganisationSubscriptionsCountArgs = {
  where?: SubscriptionWhereInput;
};


export type OrganisationUsersArgs = {
  cursor?: InputMaybe<UserWhereUniqueInput>;
  orderBy?: Array<UserOrderByInput>;
  skip?: Scalars['Int']['input'];
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: UserWhereInput;
};


export type OrganisationUsersCountArgs = {
  where?: UserWhereInput;
};

export type OrganisationCreateInput = {
  address?: InputMaybe<Scalars['String']['input']>;
  alerts?: InputMaybe<AlertRelateToManyForCreateInput>;
  farms?: InputMaybe<FarmRelateToManyForCreateInput>;
  name?: InputMaybe<Scalars['String']['input']>;
  pacCUAA?: InputMaybe<Scalars['String']['input']>;
  sianFascicoloId?: InputMaybe<Scalars['String']['input']>;
  stripeCustomerId?: InputMaybe<Scalars['String']['input']>;
  subscriptions?: InputMaybe<SubscriptionRelateToManyForCreateInput>;
  users?: InputMaybe<UserRelateToManyForCreateInput>;
  vatCf?: InputMaybe<Scalars['String']['input']>;
};

export type OrganisationOrderByInput = {
  address?: InputMaybe<OrderDirection>;
  id?: InputMaybe<OrderDirection>;
  name?: InputMaybe<OrderDirection>;
  pacCUAA?: InputMaybe<OrderDirection>;
  sianFascicoloId?: InputMaybe<OrderDirection>;
  stripeCustomerId?: InputMaybe<OrderDirection>;
  vatCf?: InputMaybe<OrderDirection>;
};

export type OrganisationRelateToOneForCreateInput = {
  connect?: InputMaybe<OrganisationWhereUniqueInput>;
  create?: InputMaybe<OrganisationCreateInput>;
};

export type OrganisationRelateToOneForUpdateInput = {
  connect?: InputMaybe<OrganisationWhereUniqueInput>;
  create?: InputMaybe<OrganisationCreateInput>;
  disconnect?: InputMaybe<Scalars['Boolean']['input']>;
};

export type OrganisationUpdateArgs = {
  data: OrganisationUpdateInput;
  where: OrganisationWhereUniqueInput;
};

export type OrganisationUpdateInput = {
  address?: InputMaybe<Scalars['String']['input']>;
  alerts?: InputMaybe<AlertRelateToManyForUpdateInput>;
  farms?: InputMaybe<FarmRelateToManyForUpdateInput>;
  name?: InputMaybe<Scalars['String']['input']>;
  pacCUAA?: InputMaybe<Scalars['String']['input']>;
  sianFascicoloId?: InputMaybe<Scalars['String']['input']>;
  stripeCustomerId?: InputMaybe<Scalars['String']['input']>;
  subscriptions?: InputMaybe<SubscriptionRelateToManyForUpdateInput>;
  users?: InputMaybe<UserRelateToManyForUpdateInput>;
  vatCf?: InputMaybe<Scalars['String']['input']>;
};

export type OrganisationWhereInput = {
  AND?: InputMaybe<Array<OrganisationWhereInput>>;
  NOT?: InputMaybe<Array<OrganisationWhereInput>>;
  OR?: InputMaybe<Array<OrganisationWhereInput>>;
  address?: InputMaybe<StringFilter>;
  alerts?: InputMaybe<AlertManyRelationFilter>;
  farms?: InputMaybe<FarmManyRelationFilter>;
  id?: InputMaybe<IdFilter>;
  name?: InputMaybe<StringFilter>;
  pacCUAA?: InputMaybe<StringFilter>;
  sianFascicoloId?: InputMaybe<StringFilter>;
  stripeCustomerId?: InputMaybe<StringFilter>;
  subscriptions?: InputMaybe<SubscriptionManyRelationFilter>;
  users?: InputMaybe<UserManyRelationFilter>;
  vatCf?: InputMaybe<StringFilter>;
};

export type OrganisationWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']['input']>;
  stripeCustomerId?: InputMaybe<Scalars['String']['input']>;
};

export type PasswordFilter = {
  isSet: Scalars['Boolean']['input'];
};

export type PasswordState = {
  __typename?: 'PasswordState';
  isSet: Scalars['Boolean']['output'];
};

export type Plan = {
  __typename?: 'Plan';
  activePrice?: Maybe<PlanPrice>;
  features?: Maybe<Scalars['JSON']['output']>;
  id: Scalars['ID']['output'];
  key?: Maybe<Scalars['String']['output']>;
  label?: Maybe<Scalars['String']['output']>;
  prices?: Maybe<Array<PlanPrice>>;
  pricesCount?: Maybe<Scalars['Int']['output']>;
  subscriptions?: Maybe<Array<Subscription>>;
  subscriptionsCount?: Maybe<Scalars['Int']['output']>;
};


export type PlanPricesArgs = {
  cursor?: InputMaybe<PlanPriceWhereUniqueInput>;
  orderBy?: Array<PlanPriceOrderByInput>;
  skip?: Scalars['Int']['input'];
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: PlanPriceWhereInput;
};


export type PlanPricesCountArgs = {
  where?: PlanPriceWhereInput;
};


export type PlanSubscriptionsArgs = {
  cursor?: InputMaybe<SubscriptionWhereUniqueInput>;
  orderBy?: Array<SubscriptionOrderByInput>;
  skip?: Scalars['Int']['input'];
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: SubscriptionWhereInput;
};


export type PlanSubscriptionsCountArgs = {
  where?: SubscriptionWhereInput;
};

export type PlanCreateInput = {
  activePrice?: InputMaybe<PlanPriceRelateToOneForCreateInput>;
  features?: InputMaybe<Scalars['JSON']['input']>;
  key?: InputMaybe<Scalars['String']['input']>;
  label?: InputMaybe<Scalars['String']['input']>;
  prices?: InputMaybe<PlanPriceRelateToManyForCreateInput>;
  subscriptions?: InputMaybe<SubscriptionRelateToManyForCreateInput>;
};

export type PlanOrderByInput = {
  id?: InputMaybe<OrderDirection>;
  key?: InputMaybe<OrderDirection>;
  label?: InputMaybe<OrderDirection>;
};

export type PlanPrice = {
  __typename?: 'PlanPrice';
  amount?: Maybe<Scalars['Int']['output']>;
  currency?: Maybe<Scalars['String']['output']>;
  id: Scalars['ID']['output'];
  isActiveFor?: Maybe<Plan>;
  plan?: Maybe<Plan>;
  stripePriceId?: Maybe<Scalars['String']['output']>;
  validFrom?: Maybe<Scalars['DateTime']['output']>;
  validUntil?: Maybe<Scalars['DateTime']['output']>;
};

export type PlanPriceCreateInput = {
  amount?: InputMaybe<Scalars['Int']['input']>;
  currency?: InputMaybe<Scalars['String']['input']>;
  isActiveFor?: InputMaybe<PlanRelateToOneForCreateInput>;
  plan?: InputMaybe<PlanRelateToOneForCreateInput>;
  stripePriceId?: InputMaybe<Scalars['String']['input']>;
  validFrom?: InputMaybe<Scalars['DateTime']['input']>;
  validUntil?: InputMaybe<Scalars['DateTime']['input']>;
};

export type PlanPriceManyRelationFilter = {
  every?: InputMaybe<PlanPriceWhereInput>;
  none?: InputMaybe<PlanPriceWhereInput>;
  some?: InputMaybe<PlanPriceWhereInput>;
};

export type PlanPriceOrderByInput = {
  amount?: InputMaybe<OrderDirection>;
  currency?: InputMaybe<OrderDirection>;
  id?: InputMaybe<OrderDirection>;
  stripePriceId?: InputMaybe<OrderDirection>;
  validFrom?: InputMaybe<OrderDirection>;
  validUntil?: InputMaybe<OrderDirection>;
};

export type PlanPriceRelateToManyForCreateInput = {
  connect?: InputMaybe<Array<PlanPriceWhereUniqueInput>>;
  create?: InputMaybe<Array<PlanPriceCreateInput>>;
};

export type PlanPriceRelateToManyForUpdateInput = {
  connect?: InputMaybe<Array<PlanPriceWhereUniqueInput>>;
  create?: InputMaybe<Array<PlanPriceCreateInput>>;
  disconnect?: InputMaybe<Array<PlanPriceWhereUniqueInput>>;
  set?: InputMaybe<Array<PlanPriceWhereUniqueInput>>;
};

export type PlanPriceRelateToOneForCreateInput = {
  connect?: InputMaybe<PlanPriceWhereUniqueInput>;
  create?: InputMaybe<PlanPriceCreateInput>;
};

export type PlanPriceRelateToOneForUpdateInput = {
  connect?: InputMaybe<PlanPriceWhereUniqueInput>;
  create?: InputMaybe<PlanPriceCreateInput>;
  disconnect?: InputMaybe<Scalars['Boolean']['input']>;
};

export type PlanPriceUpdateArgs = {
  data: PlanPriceUpdateInput;
  where: PlanPriceWhereUniqueInput;
};

export type PlanPriceUpdateInput = {
  amount?: InputMaybe<Scalars['Int']['input']>;
  currency?: InputMaybe<Scalars['String']['input']>;
  isActiveFor?: InputMaybe<PlanRelateToOneForUpdateInput>;
  plan?: InputMaybe<PlanRelateToOneForUpdateInput>;
  stripePriceId?: InputMaybe<Scalars['String']['input']>;
  validFrom?: InputMaybe<Scalars['DateTime']['input']>;
  validUntil?: InputMaybe<Scalars['DateTime']['input']>;
};

export type PlanPriceWhereInput = {
  AND?: InputMaybe<Array<PlanPriceWhereInput>>;
  NOT?: InputMaybe<Array<PlanPriceWhereInput>>;
  OR?: InputMaybe<Array<PlanPriceWhereInput>>;
  amount?: InputMaybe<IntFilter>;
  currency?: InputMaybe<StringNullableFilter>;
  id?: InputMaybe<IdFilter>;
  isActiveFor?: InputMaybe<PlanWhereInput>;
  plan?: InputMaybe<PlanWhereInput>;
  stripePriceId?: InputMaybe<StringFilter>;
  validFrom?: InputMaybe<DateTimeFilter>;
  validUntil?: InputMaybe<DateTimeNullableFilter>;
};

export type PlanPriceWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']['input']>;
  stripePriceId?: InputMaybe<Scalars['String']['input']>;
};

export type PlanRelateToOneForCreateInput = {
  connect?: InputMaybe<PlanWhereUniqueInput>;
  create?: InputMaybe<PlanCreateInput>;
};

export type PlanRelateToOneForUpdateInput = {
  connect?: InputMaybe<PlanWhereUniqueInput>;
  create?: InputMaybe<PlanCreateInput>;
  disconnect?: InputMaybe<Scalars['Boolean']['input']>;
};

export type PlanUpdateArgs = {
  data: PlanUpdateInput;
  where: PlanWhereUniqueInput;
};

export type PlanUpdateInput = {
  activePrice?: InputMaybe<PlanPriceRelateToOneForUpdateInput>;
  features?: InputMaybe<Scalars['JSON']['input']>;
  key?: InputMaybe<Scalars['String']['input']>;
  label?: InputMaybe<Scalars['String']['input']>;
  prices?: InputMaybe<PlanPriceRelateToManyForUpdateInput>;
  subscriptions?: InputMaybe<SubscriptionRelateToManyForUpdateInput>;
};

export type PlanWhereInput = {
  AND?: InputMaybe<Array<PlanWhereInput>>;
  NOT?: InputMaybe<Array<PlanWhereInput>>;
  OR?: InputMaybe<Array<PlanWhereInput>>;
  activePrice?: InputMaybe<PlanPriceWhereInput>;
  id?: InputMaybe<IdFilter>;
  key?: InputMaybe<StringFilter>;
  label?: InputMaybe<StringFilter>;
  prices?: InputMaybe<PlanPriceManyRelationFilter>;
  subscriptions?: InputMaybe<SubscriptionManyRelationFilter>;
};

export type PlanWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']['input']>;
  key?: InputMaybe<Scalars['String']['input']>;
};

export type Post = {
  __typename?: 'Post';
  author?: Maybe<Author>;
  category?: Maybe<Category>;
  content?: Maybe<Scalars['String']['output']>;
  coverImage?: Maybe<ImageFieldOutput>;
  excerpt?: Maybe<Scalars['String']['output']>;
  featured?: Maybe<Scalars['Boolean']['output']>;
  id: Scalars['ID']['output'];
  publishedAt?: Maybe<Scalars['DateTime']['output']>;
  slug?: Maybe<Scalars['String']['output']>;
  status?: Maybe<Scalars['String']['output']>;
  tags?: Maybe<Array<Tag>>;
  tagsCount?: Maybe<Scalars['Int']['output']>;
  title?: Maybe<Scalars['String']['output']>;
  updatedAt?: Maybe<Scalars['DateTime']['output']>;
  viewCount?: Maybe<Scalars['Int']['output']>;
};


export type PostTagsArgs = {
  cursor?: InputMaybe<TagWhereUniqueInput>;
  orderBy?: Array<TagOrderByInput>;
  skip?: Scalars['Int']['input'];
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: TagWhereInput;
};


export type PostTagsCountArgs = {
  where?: TagWhereInput;
};

export type PostCreateInput = {
  author?: InputMaybe<AuthorRelateToOneForCreateInput>;
  category?: InputMaybe<CategoryRelateToOneForCreateInput>;
  content?: InputMaybe<Scalars['String']['input']>;
  coverImage?: InputMaybe<ImageFieldInput>;
  excerpt?: InputMaybe<Scalars['String']['input']>;
  featured?: InputMaybe<Scalars['Boolean']['input']>;
  publishedAt?: InputMaybe<Scalars['DateTime']['input']>;
  slug?: InputMaybe<Scalars['String']['input']>;
  status?: InputMaybe<Scalars['String']['input']>;
  tags?: InputMaybe<TagRelateToManyForCreateInput>;
  title?: InputMaybe<Scalars['String']['input']>;
  updatedAt?: InputMaybe<Scalars['DateTime']['input']>;
  viewCount?: InputMaybe<Scalars['Int']['input']>;
};

export type PostManyRelationFilter = {
  every?: InputMaybe<PostWhereInput>;
  none?: InputMaybe<PostWhereInput>;
  some?: InputMaybe<PostWhereInput>;
};

export type PostOrderByInput = {
  content?: InputMaybe<OrderDirection>;
  excerpt?: InputMaybe<OrderDirection>;
  featured?: InputMaybe<OrderDirection>;
  id?: InputMaybe<OrderDirection>;
  publishedAt?: InputMaybe<OrderDirection>;
  slug?: InputMaybe<OrderDirection>;
  status?: InputMaybe<OrderDirection>;
  title?: InputMaybe<OrderDirection>;
  updatedAt?: InputMaybe<OrderDirection>;
  viewCount?: InputMaybe<OrderDirection>;
};

export type PostRelateToManyForCreateInput = {
  connect?: InputMaybe<Array<PostWhereUniqueInput>>;
  create?: InputMaybe<Array<PostCreateInput>>;
};

export type PostRelateToManyForUpdateInput = {
  connect?: InputMaybe<Array<PostWhereUniqueInput>>;
  create?: InputMaybe<Array<PostCreateInput>>;
  disconnect?: InputMaybe<Array<PostWhereUniqueInput>>;
  set?: InputMaybe<Array<PostWhereUniqueInput>>;
};

export type PostUpdateArgs = {
  data: PostUpdateInput;
  where: PostWhereUniqueInput;
};

export type PostUpdateInput = {
  author?: InputMaybe<AuthorRelateToOneForUpdateInput>;
  category?: InputMaybe<CategoryRelateToOneForUpdateInput>;
  content?: InputMaybe<Scalars['String']['input']>;
  coverImage?: InputMaybe<ImageFieldInput>;
  excerpt?: InputMaybe<Scalars['String']['input']>;
  featured?: InputMaybe<Scalars['Boolean']['input']>;
  publishedAt?: InputMaybe<Scalars['DateTime']['input']>;
  slug?: InputMaybe<Scalars['String']['input']>;
  status?: InputMaybe<Scalars['String']['input']>;
  tags?: InputMaybe<TagRelateToManyForUpdateInput>;
  title?: InputMaybe<Scalars['String']['input']>;
  updatedAt?: InputMaybe<Scalars['DateTime']['input']>;
  viewCount?: InputMaybe<Scalars['Int']['input']>;
};

export type PostWhereInput = {
  AND?: InputMaybe<Array<PostWhereInput>>;
  NOT?: InputMaybe<Array<PostWhereInput>>;
  OR?: InputMaybe<Array<PostWhereInput>>;
  author?: InputMaybe<AuthorWhereInput>;
  category?: InputMaybe<CategoryWhereInput>;
  content?: InputMaybe<StringFilter>;
  excerpt?: InputMaybe<StringFilter>;
  featured?: InputMaybe<BooleanFilter>;
  id?: InputMaybe<IdFilter>;
  publishedAt?: InputMaybe<DateTimeNullableFilter>;
  slug?: InputMaybe<StringFilter>;
  status?: InputMaybe<StringNullableFilter>;
  tags?: InputMaybe<TagManyRelationFilter>;
  title?: InputMaybe<StringFilter>;
  updatedAt?: InputMaybe<DateTimeNullableFilter>;
  viewCount?: InputMaybe<IntNullableFilter>;
};

export type PostWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']['input']>;
  slug?: InputMaybe<Scalars['String']['input']>;
};

export type Product = {
  __typename?: 'Product';
  K_pct?: Maybe<Scalars['Float']['output']>;
  N_pct?: Maybe<Scalars['Float']['output']>;
  PFnPE?: Maybe<Scalars['String']['output']>;
  PFnPO?: Maybe<Scalars['String']['output']>;
  P_pct?: Maybe<Scalars['Float']['output']>;
  attivita?: Maybe<Scalars['String']['output']>;
  cap_sede_amministrativa?: Maybe<Scalars['String']['output']>;
  cap_sede_legale?: Maybe<Scalars['String']['output']>;
  codice_formulazione?: Maybe<Scalars['String']['output']>;
  composition_json?: Maybe<Scalars['JSON']['output']>;
  comune_sede_amministrativa?: Maybe<Scalars['String']['output']>;
  comune_sede_legale?: Maybe<Scalars['String']['output']>;
  contenuto_per_100g_di_prodotto?: Maybe<Scalars['String']['output']>;
  country?: Maybe<Scalars['String']['output']>;
  data_decorrenza_revoca?: Maybe<Scalars['DateTime']['output']>;
  data_decreto_revoca?: Maybe<Scalars['DateTime']['output']>;
  data_registrazione?: Maybe<Scalars['DateTime']['output']>;
  data_scadenza_autorizzazione?: Maybe<Scalars['DateTime']['output']>;
  descrizione_formulazione?: Maybe<Scalars['String']['output']>;
  hazard_class?: Maybe<Scalars['String']['output']>;
  id: Scalars['ID']['output'];
  importazione_parallela?: Maybe<Scalars['String']['output']>;
  indicazioni_di_pericolo?: Maybe<Scalars['String']['output']>;
  indirizzo_sede_amministrativa?: Maybe<Scalars['String']['output']>;
  indirizzo_sede_legale?: Maybe<Scalars['String']['output']>;
  motivo_della_revoca?: Maybe<Scalars['String']['output']>;
  name?: Maybe<Scalars['String']['output']>;
  product_type?: Maybe<Scalars['String']['output']>;
  provincia_sede_amministrativa?: Maybe<Scalars['String']['output']>;
  provincia_sede_legale?: Maybe<Scalars['String']['output']>;
  ragione_sociale?: Maybe<Scalars['String']['output']>;
  registration_no?: Maybe<Scalars['String']['output']>;
  sostanze_attive?: Maybe<Scalars['String']['output']>;
  stato_amministrativo?: Maybe<Scalars['String']['output']>;
  stockLots?: Maybe<Array<FeedLot>>;
  stockLotsCount?: Maybe<Scalars['Int']['output']>;
};


export type ProductStockLotsArgs = {
  cursor?: InputMaybe<FeedLotWhereUniqueInput>;
  orderBy?: Array<FeedLotOrderByInput>;
  skip?: Scalars['Int']['input'];
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: FeedLotWhereInput;
};


export type ProductStockLotsCountArgs = {
  where?: FeedLotWhereInput;
};

export type ProductCreateInput = {
  K_pct?: InputMaybe<Scalars['Float']['input']>;
  N_pct?: InputMaybe<Scalars['Float']['input']>;
  PFnPE?: InputMaybe<Scalars['String']['input']>;
  PFnPO?: InputMaybe<Scalars['String']['input']>;
  P_pct?: InputMaybe<Scalars['Float']['input']>;
  attivita?: InputMaybe<Scalars['String']['input']>;
  cap_sede_amministrativa?: InputMaybe<Scalars['String']['input']>;
  cap_sede_legale?: InputMaybe<Scalars['String']['input']>;
  codice_formulazione?: InputMaybe<Scalars['String']['input']>;
  composition_json?: InputMaybe<Scalars['JSON']['input']>;
  comune_sede_amministrativa?: InputMaybe<Scalars['String']['input']>;
  comune_sede_legale?: InputMaybe<Scalars['String']['input']>;
  contenuto_per_100g_di_prodotto?: InputMaybe<Scalars['String']['input']>;
  country?: InputMaybe<Scalars['String']['input']>;
  data_decorrenza_revoca?: InputMaybe<Scalars['DateTime']['input']>;
  data_decreto_revoca?: InputMaybe<Scalars['DateTime']['input']>;
  data_registrazione?: InputMaybe<Scalars['DateTime']['input']>;
  data_scadenza_autorizzazione?: InputMaybe<Scalars['DateTime']['input']>;
  descrizione_formulazione?: InputMaybe<Scalars['String']['input']>;
  hazard_class?: InputMaybe<Scalars['String']['input']>;
  importazione_parallela?: InputMaybe<Scalars['String']['input']>;
  indicazioni_di_pericolo?: InputMaybe<Scalars['String']['input']>;
  indirizzo_sede_amministrativa?: InputMaybe<Scalars['String']['input']>;
  indirizzo_sede_legale?: InputMaybe<Scalars['String']['input']>;
  motivo_della_revoca?: InputMaybe<Scalars['String']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
  product_type?: InputMaybe<Scalars['String']['input']>;
  provincia_sede_amministrativa?: InputMaybe<Scalars['String']['input']>;
  provincia_sede_legale?: InputMaybe<Scalars['String']['input']>;
  ragione_sociale?: InputMaybe<Scalars['String']['input']>;
  registration_no?: InputMaybe<Scalars['String']['input']>;
  sostanze_attive?: InputMaybe<Scalars['String']['input']>;
  stato_amministrativo?: InputMaybe<Scalars['String']['input']>;
  stockLots?: InputMaybe<FeedLotRelateToManyForCreateInput>;
};

export type ProductOrderByInput = {
  K_pct?: InputMaybe<OrderDirection>;
  N_pct?: InputMaybe<OrderDirection>;
  PFnPE?: InputMaybe<OrderDirection>;
  PFnPO?: InputMaybe<OrderDirection>;
  P_pct?: InputMaybe<OrderDirection>;
  attivita?: InputMaybe<OrderDirection>;
  cap_sede_amministrativa?: InputMaybe<OrderDirection>;
  cap_sede_legale?: InputMaybe<OrderDirection>;
  codice_formulazione?: InputMaybe<OrderDirection>;
  comune_sede_amministrativa?: InputMaybe<OrderDirection>;
  comune_sede_legale?: InputMaybe<OrderDirection>;
  contenuto_per_100g_di_prodotto?: InputMaybe<OrderDirection>;
  country?: InputMaybe<OrderDirection>;
  data_decorrenza_revoca?: InputMaybe<OrderDirection>;
  data_decreto_revoca?: InputMaybe<OrderDirection>;
  data_registrazione?: InputMaybe<OrderDirection>;
  data_scadenza_autorizzazione?: InputMaybe<OrderDirection>;
  descrizione_formulazione?: InputMaybe<OrderDirection>;
  hazard_class?: InputMaybe<OrderDirection>;
  id?: InputMaybe<OrderDirection>;
  importazione_parallela?: InputMaybe<OrderDirection>;
  indicazioni_di_pericolo?: InputMaybe<OrderDirection>;
  indirizzo_sede_amministrativa?: InputMaybe<OrderDirection>;
  indirizzo_sede_legale?: InputMaybe<OrderDirection>;
  motivo_della_revoca?: InputMaybe<OrderDirection>;
  name?: InputMaybe<OrderDirection>;
  product_type?: InputMaybe<OrderDirection>;
  provincia_sede_amministrativa?: InputMaybe<OrderDirection>;
  provincia_sede_legale?: InputMaybe<OrderDirection>;
  ragione_sociale?: InputMaybe<OrderDirection>;
  registration_no?: InputMaybe<OrderDirection>;
  sostanze_attive?: InputMaybe<OrderDirection>;
  stato_amministrativo?: InputMaybe<OrderDirection>;
};

export type ProductRelateToOneForCreateInput = {
  connect?: InputMaybe<ProductWhereUniqueInput>;
  create?: InputMaybe<ProductCreateInput>;
};

export type ProductRelateToOneForUpdateInput = {
  connect?: InputMaybe<ProductWhereUniqueInput>;
  create?: InputMaybe<ProductCreateInput>;
  disconnect?: InputMaybe<Scalars['Boolean']['input']>;
};

export type ProductUpdateArgs = {
  data: ProductUpdateInput;
  where: ProductWhereUniqueInput;
};

export type ProductUpdateInput = {
  K_pct?: InputMaybe<Scalars['Float']['input']>;
  N_pct?: InputMaybe<Scalars['Float']['input']>;
  PFnPE?: InputMaybe<Scalars['String']['input']>;
  PFnPO?: InputMaybe<Scalars['String']['input']>;
  P_pct?: InputMaybe<Scalars['Float']['input']>;
  attivita?: InputMaybe<Scalars['String']['input']>;
  cap_sede_amministrativa?: InputMaybe<Scalars['String']['input']>;
  cap_sede_legale?: InputMaybe<Scalars['String']['input']>;
  codice_formulazione?: InputMaybe<Scalars['String']['input']>;
  composition_json?: InputMaybe<Scalars['JSON']['input']>;
  comune_sede_amministrativa?: InputMaybe<Scalars['String']['input']>;
  comune_sede_legale?: InputMaybe<Scalars['String']['input']>;
  contenuto_per_100g_di_prodotto?: InputMaybe<Scalars['String']['input']>;
  country?: InputMaybe<Scalars['String']['input']>;
  data_decorrenza_revoca?: InputMaybe<Scalars['DateTime']['input']>;
  data_decreto_revoca?: InputMaybe<Scalars['DateTime']['input']>;
  data_registrazione?: InputMaybe<Scalars['DateTime']['input']>;
  data_scadenza_autorizzazione?: InputMaybe<Scalars['DateTime']['input']>;
  descrizione_formulazione?: InputMaybe<Scalars['String']['input']>;
  hazard_class?: InputMaybe<Scalars['String']['input']>;
  importazione_parallela?: InputMaybe<Scalars['String']['input']>;
  indicazioni_di_pericolo?: InputMaybe<Scalars['String']['input']>;
  indirizzo_sede_amministrativa?: InputMaybe<Scalars['String']['input']>;
  indirizzo_sede_legale?: InputMaybe<Scalars['String']['input']>;
  motivo_della_revoca?: InputMaybe<Scalars['String']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
  product_type?: InputMaybe<Scalars['String']['input']>;
  provincia_sede_amministrativa?: InputMaybe<Scalars['String']['input']>;
  provincia_sede_legale?: InputMaybe<Scalars['String']['input']>;
  ragione_sociale?: InputMaybe<Scalars['String']['input']>;
  registration_no?: InputMaybe<Scalars['String']['input']>;
  sostanze_attive?: InputMaybe<Scalars['String']['input']>;
  stato_amministrativo?: InputMaybe<Scalars['String']['input']>;
  stockLots?: InputMaybe<FeedLotRelateToManyForUpdateInput>;
};

export type ProductWhereInput = {
  AND?: InputMaybe<Array<ProductWhereInput>>;
  K_pct?: InputMaybe<FloatNullableFilter>;
  NOT?: InputMaybe<Array<ProductWhereInput>>;
  N_pct?: InputMaybe<FloatNullableFilter>;
  OR?: InputMaybe<Array<ProductWhereInput>>;
  PFnPE?: InputMaybe<StringFilter>;
  PFnPO?: InputMaybe<StringFilter>;
  P_pct?: InputMaybe<FloatNullableFilter>;
  attivita?: InputMaybe<StringFilter>;
  cap_sede_amministrativa?: InputMaybe<StringFilter>;
  cap_sede_legale?: InputMaybe<StringFilter>;
  codice_formulazione?: InputMaybe<StringFilter>;
  comune_sede_amministrativa?: InputMaybe<StringFilter>;
  comune_sede_legale?: InputMaybe<StringFilter>;
  contenuto_per_100g_di_prodotto?: InputMaybe<StringFilter>;
  country?: InputMaybe<StringFilter>;
  data_decorrenza_revoca?: InputMaybe<DateTimeNullableFilter>;
  data_decreto_revoca?: InputMaybe<DateTimeNullableFilter>;
  data_registrazione?: InputMaybe<DateTimeNullableFilter>;
  data_scadenza_autorizzazione?: InputMaybe<DateTimeNullableFilter>;
  descrizione_formulazione?: InputMaybe<StringFilter>;
  hazard_class?: InputMaybe<StringFilter>;
  id?: InputMaybe<IdFilter>;
  importazione_parallela?: InputMaybe<StringFilter>;
  indicazioni_di_pericolo?: InputMaybe<StringFilter>;
  indirizzo_sede_amministrativa?: InputMaybe<StringFilter>;
  indirizzo_sede_legale?: InputMaybe<StringFilter>;
  motivo_della_revoca?: InputMaybe<StringFilter>;
  name?: InputMaybe<StringFilter>;
  product_type?: InputMaybe<StringNullableFilter>;
  provincia_sede_amministrativa?: InputMaybe<StringFilter>;
  provincia_sede_legale?: InputMaybe<StringFilter>;
  ragione_sociale?: InputMaybe<StringFilter>;
  registration_no?: InputMaybe<StringFilter>;
  sostanze_attive?: InputMaybe<StringFilter>;
  stato_amministrativo?: InputMaybe<StringFilter>;
  stockLots?: InputMaybe<FeedLotManyRelationFilter>;
};

export type ProductWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']['input']>;
};

export type Query = {
  __typename?: 'Query';
  activities?: Maybe<Array<Activity>>;
  activitiesCount?: Maybe<Scalars['Int']['output']>;
  activity?: Maybe<Activity>;
  activityImpact?: Maybe<ActivityImpact>;
  activityImpacts?: Maybe<Array<ActivityImpact>>;
  activityImpactsCount?: Maybe<Scalars['Int']['output']>;
  alert?: Maybe<Alert>;
  alerts?: Maybe<Array<Alert>>;
  alertsCount?: Maybe<Scalars['Int']['output']>;
  animal?: Maybe<Animal>;
  animalEvent?: Maybe<AnimalEvent>;
  animalEvents?: Maybe<Array<AnimalEvent>>;
  animalEventsCount?: Maybe<Scalars['Int']['output']>;
  animals?: Maybe<Array<Animal>>;
  animalsCount?: Maybe<Scalars['Int']['output']>;
  application?: Maybe<Application>;
  applicationStatus?: Maybe<ApplicationStatus>;
  applicationStatuses?: Maybe<Array<ApplicationStatus>>;
  applicationStatusesCount?: Maybe<Scalars['Int']['output']>;
  applications?: Maybe<Array<Application>>;
  applicationsCount?: Maybe<Scalars['Int']['output']>;
  authenticatedItem?: Maybe<AuthenticatedItem>;
  author?: Maybe<Author>;
  authors?: Maybe<Array<Author>>;
  authorsCount?: Maybe<Scalars['Int']['output']>;
  barn?: Maybe<Barn>;
  barnActivities?: Maybe<Array<BarnActivity>>;
  barnActivitiesCount?: Maybe<Scalars['Int']['output']>;
  barnActivity?: Maybe<BarnActivity>;
  barns?: Maybe<Array<Barn>>;
  barnsCount?: Maybe<Scalars['Int']['output']>;
  box?: Maybe<Box>;
  boxes?: Maybe<Array<Box>>;
  boxesCount?: Maybe<Scalars['Int']['output']>;
  breed?: Maybe<Breed>;
  breeds?: Maybe<Array<Breed>>;
  breedsCount?: Maybe<Scalars['Int']['output']>;
  carbonOffsetFactor?: Maybe<CarbonOffsetFactor>;
  carbonOffsetFactors?: Maybe<Array<CarbonOffsetFactor>>;
  carbonOffsetFactorsCount?: Maybe<Scalars['Int']['output']>;
  categories?: Maybe<Array<Category>>;
  categoriesCount?: Maybe<Scalars['Int']['output']>;
  category?: Maybe<Category>;
  categoryKPI?: Maybe<CategoryKpi>;
  categoryKPIS?: Maybe<Array<CategoryKpi>>;
  categoryKPISCount?: Maybe<Scalars['Int']['output']>;
  chat?: Maybe<Chat>;
  chats?: Maybe<Array<Chat>>;
  chatsCount?: Maybe<Scalars['Int']['output']>;
  crop?: Maybe<Crop>;
  cropType?: Maybe<CropType>;
  cropTypes?: Maybe<Array<CropType>>;
  cropTypesCount?: Maybe<Scalars['Int']['output']>;
  crops?: Maybe<Array<Crop>>;
  cropsCount?: Maybe<Scalars['Int']['output']>;
  document?: Maybe<Document>;
  documents?: Maybe<Array<Document>>;
  documentsCount?: Maybe<Scalars['Int']['output']>;
  ecoScheme?: Maybe<EcoScheme>;
  ecoSchemes?: Maybe<Array<EcoScheme>>;
  ecoSchemesCount?: Maybe<Scalars['Int']['output']>;
  emissionScenario?: Maybe<EmissionScenario>;
  emissionScenarios?: Maybe<Array<EmissionScenario>>;
  emissionScenariosCount?: Maybe<Scalars['Int']['output']>;
  equipment?: Maybe<Equipment>;
  equipmentList?: Maybe<Array<Equipment>>;
  equipmentListCount?: Maybe<Scalars['Int']['output']>;
  farm?: Maybe<Farm>;
  farms?: Maybe<Array<Farm>>;
  farmsCount?: Maybe<Scalars['Int']['output']>;
  feedDispenseEvent?: Maybe<FeedDispenseEvent>;
  feedDispenseEvents?: Maybe<Array<FeedDispenseEvent>>;
  feedDispenseEventsCount?: Maybe<Scalars['Int']['output']>;
  feedLot?: Maybe<FeedLot>;
  feedLots?: Maybe<Array<FeedLot>>;
  feedLotsCount?: Maybe<Scalars['Int']['output']>;
  feedRationComponent?: Maybe<FeedRationComponent>;
  feedRationComponents?: Maybe<Array<FeedRationComponent>>;
  feedRationComponentsCount?: Maybe<Scalars['Int']['output']>;
  feedRationPlan?: Maybe<FeedRationPlan>;
  feedRationPlans?: Maybe<Array<FeedRationPlan>>;
  feedRationPlansCount?: Maybe<Scalars['Int']['output']>;
  feedSilo?: Maybe<FeedSilo>;
  feedSilos?: Maybe<Array<FeedSilo>>;
  feedSilosCount?: Maybe<Scalars['Int']['output']>;
  field?: Maybe<Field>;
  fieldImpactSummaries?: Maybe<Array<FieldImpactSummary>>;
  fieldImpactSummariesCount?: Maybe<Scalars['Int']['output']>;
  fieldImpactSummary?: Maybe<FieldImpactSummary>;
  fields?: Maybe<Array<Field>>;
  fieldsCount?: Maybe<Scalars['Int']['output']>;
  herdMetric?: Maybe<HerdMetric>;
  herdMetrics?: Maybe<Array<HerdMetric>>;
  herdMetricsCount?: Maybe<Scalars['Int']['output']>;
  interview?: Maybe<Interview>;
  interviewStage?: Maybe<InterviewStage>;
  interviewStages?: Maybe<Array<InterviewStage>>;
  interviewStagesCount?: Maybe<Scalars['Int']['output']>;
  interviews?: Maybe<Array<Interview>>;
  interviewsCount?: Maybe<Scalars['Int']['output']>;
  jobCandidate?: Maybe<JobCandidate>;
  jobCandidates?: Maybe<Array<JobCandidate>>;
  jobCandidatesCount?: Maybe<Scalars['Int']['output']>;
  jobOpening?: Maybe<JobOpening>;
  jobOpenings?: Maybe<Array<JobOpening>>;
  jobOpeningsCount?: Maybe<Scalars['Int']['output']>;
  kPI?: Maybe<Kpi>;
  kPIS?: Maybe<Array<Kpi>>;
  kPISCount?: Maybe<Scalars['Int']['output']>;
  keystone: KeystoneMeta;
  landCoverStatistic?: Maybe<LandCoverStatistic>;
  landCoverStatistics?: Maybe<Array<LandCoverStatistic>>;
  landCoverStatisticsCount?: Maybe<Scalars['Int']['output']>;
  membership?: Maybe<Membership>;
  memberships?: Maybe<Array<Membership>>;
  membershipsCount?: Maybe<Scalars['Int']['output']>;
  messageClick?: Maybe<MessageClick>;
  messageClicks?: Maybe<Array<MessageClick>>;
  messageClicksCount?: Maybe<Scalars['Int']['output']>;
  messageDeliveries?: Maybe<Array<MessageDelivery>>;
  messageDeliveriesCount?: Maybe<Scalars['Int']['output']>;
  messageDelivery?: Maybe<MessageDelivery>;
  messageTemplate?: Maybe<MessageTemplate>;
  messageTemplates?: Maybe<Array<MessageTemplate>>;
  messageTemplatesCount?: Maybe<Scalars['Int']['output']>;
  milkAnalyses?: Maybe<Array<MilkAnalysis>>;
  milkAnalysesCount?: Maybe<Scalars['Int']['output']>;
  milkAnalysis?: Maybe<MilkAnalysis>;
  milkingEvent?: Maybe<MilkingEvent>;
  milkingEvents?: Maybe<Array<MilkingEvent>>;
  milkingEventsCount?: Maybe<Scalars['Int']['output']>;
  nDVIAsset?: Maybe<NdviAsset>;
  nDVIAssets?: Maybe<Array<NdviAsset>>;
  nDVIAssetsCount?: Maybe<Scalars['Int']['output']>;
  netPrimaryProductivities?: Maybe<Array<NetPrimaryProductivity>>;
  netPrimaryProductivitiesCount?: Maybe<Scalars['Int']['output']>;
  netPrimaryProductivity?: Maybe<NetPrimaryProductivity>;
  newsletterSegment?: Maybe<NewsletterSegment>;
  newsletterSegments?: Maybe<Array<NewsletterSegment>>;
  newsletterSegmentsCount?: Maybe<Scalars['Int']['output']>;
  newsletterSubscriber?: Maybe<NewsletterSubscriber>;
  newsletterSubscribers?: Maybe<Array<NewsletterSubscriber>>;
  newsletterSubscribersCount?: Maybe<Scalars['Int']['output']>;
  operator?: Maybe<Operator>;
  operators?: Maybe<Array<Operator>>;
  operatorsCount?: Maybe<Scalars['Int']['output']>;
  organisation?: Maybe<Organisation>;
  organisations?: Maybe<Array<Organisation>>;
  organisationsCount?: Maybe<Scalars['Int']['output']>;
  plan?: Maybe<Plan>;
  planPrice?: Maybe<PlanPrice>;
  planPrices?: Maybe<Array<PlanPrice>>;
  planPricesCount?: Maybe<Scalars['Int']['output']>;
  plans?: Maybe<Array<Plan>>;
  plansCount?: Maybe<Scalars['Int']['output']>;
  post?: Maybe<Post>;
  posts?: Maybe<Array<Post>>;
  postsCount?: Maybe<Scalars['Int']['output']>;
  product?: Maybe<Product>;
  products?: Maybe<Array<Product>>;
  productsCount?: Maybe<Scalars['Int']['output']>;
  referralCampaign?: Maybe<ReferralCampaign>;
  referralCampaigns?: Maybe<Array<ReferralCampaign>>;
  referralCampaignsCount?: Maybe<Scalars['Int']['output']>;
  referralPartner?: Maybe<ReferralPartner>;
  referralPartners?: Maybe<Array<ReferralPartner>>;
  referralPartnersCount?: Maybe<Scalars['Int']['output']>;
  referralRedemption?: Maybe<ReferralRedemption>;
  referralRedemptions?: Maybe<Array<ReferralRedemption>>;
  referralRedemptionsCount?: Maybe<Scalars['Int']['output']>;
  regulatoryRule?: Maybe<RegulatoryRule>;
  regulatoryRules?: Maybe<Array<RegulatoryRule>>;
  regulatoryRulesCount?: Maybe<Scalars['Int']['output']>;
  soilMeasurement?: Maybe<SoilMeasurement>;
  soilMeasurements?: Maybe<Array<SoilMeasurement>>;
  soilMeasurementsCount?: Maybe<Scalars['Int']['output']>;
  soilMoistureObservation?: Maybe<SoilMoistureObservation>;
  soilMoistureObservations?: Maybe<Array<SoilMoistureObservation>>;
  soilMoistureObservationsCount?: Maybe<Scalars['Int']['output']>;
  soilOrganicCarbonStock?: Maybe<SoilOrganicCarbonStock>;
  soilOrganicCarbonStocks?: Maybe<Array<SoilOrganicCarbonStock>>;
  soilOrganicCarbonStocksCount?: Maybe<Scalars['Int']['output']>;
  subscription?: Maybe<Subscription>;
  subscriptions?: Maybe<Array<Subscription>>;
  subscriptionsCount?: Maybe<Scalars['Int']['output']>;
  sustainablePractice?: Maybe<SustainablePractice>;
  sustainablePracticeCategories?: Maybe<Array<SustainablePracticeCategory>>;
  sustainablePracticeCategoriesCount?: Maybe<Scalars['Int']['output']>;
  sustainablePracticeCategory?: Maybe<SustainablePracticeCategory>;
  sustainablePracticeEvent?: Maybe<SustainablePracticeEvent>;
  sustainablePracticeEvents?: Maybe<Array<SustainablePracticeEvent>>;
  sustainablePracticeEventsCount?: Maybe<Scalars['Int']['output']>;
  sustainablePractices?: Maybe<Array<SustainablePractice>>;
  sustainablePracticesCount?: Maybe<Scalars['Int']['output']>;
  tag?: Maybe<Tag>;
  tags?: Maybe<Array<Tag>>;
  tagsCount?: Maybe<Scalars['Int']['output']>;
  user?: Maybe<User>;
  users?: Maybe<Array<User>>;
  usersCount?: Maybe<Scalars['Int']['output']>;
  weatherRecord?: Maybe<WeatherRecord>;
  weatherRecords?: Maybe<Array<WeatherRecord>>;
  weatherRecordsCount?: Maybe<Scalars['Int']['output']>;
};


export type QueryActivitiesArgs = {
  cursor?: InputMaybe<ActivityWhereUniqueInput>;
  orderBy?: Array<ActivityOrderByInput>;
  skip?: Scalars['Int']['input'];
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: ActivityWhereInput;
};


export type QueryActivitiesCountArgs = {
  where?: ActivityWhereInput;
};


export type QueryActivityArgs = {
  where: ActivityWhereUniqueInput;
};


export type QueryActivityImpactArgs = {
  where: ActivityImpactWhereUniqueInput;
};


export type QueryActivityImpactsArgs = {
  cursor?: InputMaybe<ActivityImpactWhereUniqueInput>;
  orderBy?: Array<ActivityImpactOrderByInput>;
  skip?: Scalars['Int']['input'];
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: ActivityImpactWhereInput;
};


export type QueryActivityImpactsCountArgs = {
  where?: ActivityImpactWhereInput;
};


export type QueryAlertArgs = {
  where: AlertWhereUniqueInput;
};


export type QueryAlertsArgs = {
  cursor?: InputMaybe<AlertWhereUniqueInput>;
  orderBy?: Array<AlertOrderByInput>;
  skip?: Scalars['Int']['input'];
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: AlertWhereInput;
};


export type QueryAlertsCountArgs = {
  where?: AlertWhereInput;
};


export type QueryAnimalArgs = {
  where: AnimalWhereUniqueInput;
};


export type QueryAnimalEventArgs = {
  where: AnimalEventWhereUniqueInput;
};


export type QueryAnimalEventsArgs = {
  cursor?: InputMaybe<AnimalEventWhereUniqueInput>;
  orderBy?: Array<AnimalEventOrderByInput>;
  skip?: Scalars['Int']['input'];
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: AnimalEventWhereInput;
};


export type QueryAnimalEventsCountArgs = {
  where?: AnimalEventWhereInput;
};


export type QueryAnimalsArgs = {
  cursor?: InputMaybe<AnimalWhereUniqueInput>;
  orderBy?: Array<AnimalOrderByInput>;
  skip?: Scalars['Int']['input'];
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: AnimalWhereInput;
};


export type QueryAnimalsCountArgs = {
  where?: AnimalWhereInput;
};


export type QueryApplicationArgs = {
  where: ApplicationWhereUniqueInput;
};


export type QueryApplicationStatusArgs = {
  where: ApplicationStatusWhereUniqueInput;
};


export type QueryApplicationStatusesArgs = {
  cursor?: InputMaybe<ApplicationStatusWhereUniqueInput>;
  orderBy?: Array<ApplicationStatusOrderByInput>;
  skip?: Scalars['Int']['input'];
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: ApplicationStatusWhereInput;
};


export type QueryApplicationStatusesCountArgs = {
  where?: ApplicationStatusWhereInput;
};


export type QueryApplicationsArgs = {
  cursor?: InputMaybe<ApplicationWhereUniqueInput>;
  orderBy?: Array<ApplicationOrderByInput>;
  skip?: Scalars['Int']['input'];
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: ApplicationWhereInput;
};


export type QueryApplicationsCountArgs = {
  where?: ApplicationWhereInput;
};


export type QueryAuthorArgs = {
  where: AuthorWhereUniqueInput;
};


export type QueryAuthorsArgs = {
  cursor?: InputMaybe<AuthorWhereUniqueInput>;
  orderBy?: Array<AuthorOrderByInput>;
  skip?: Scalars['Int']['input'];
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: AuthorWhereInput;
};


export type QueryAuthorsCountArgs = {
  where?: AuthorWhereInput;
};


export type QueryBarnArgs = {
  where: BarnWhereUniqueInput;
};


export type QueryBarnActivitiesArgs = {
  cursor?: InputMaybe<BarnActivityWhereUniqueInput>;
  orderBy?: Array<BarnActivityOrderByInput>;
  skip?: Scalars['Int']['input'];
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: BarnActivityWhereInput;
};


export type QueryBarnActivitiesCountArgs = {
  where?: BarnActivityWhereInput;
};


export type QueryBarnActivityArgs = {
  where: BarnActivityWhereUniqueInput;
};


export type QueryBarnsArgs = {
  cursor?: InputMaybe<BarnWhereUniqueInput>;
  orderBy?: Array<BarnOrderByInput>;
  skip?: Scalars['Int']['input'];
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: BarnWhereInput;
};


export type QueryBarnsCountArgs = {
  where?: BarnWhereInput;
};


export type QueryBoxArgs = {
  where: BoxWhereUniqueInput;
};


export type QueryBoxesArgs = {
  cursor?: InputMaybe<BoxWhereUniqueInput>;
  orderBy?: Array<BoxOrderByInput>;
  skip?: Scalars['Int']['input'];
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: BoxWhereInput;
};


export type QueryBoxesCountArgs = {
  where?: BoxWhereInput;
};


export type QueryBreedArgs = {
  where: BreedWhereUniqueInput;
};


export type QueryBreedsArgs = {
  cursor?: InputMaybe<BreedWhereUniqueInput>;
  orderBy?: Array<BreedOrderByInput>;
  skip?: Scalars['Int']['input'];
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: BreedWhereInput;
};


export type QueryBreedsCountArgs = {
  where?: BreedWhereInput;
};


export type QueryCarbonOffsetFactorArgs = {
  where: CarbonOffsetFactorWhereUniqueInput;
};


export type QueryCarbonOffsetFactorsArgs = {
  cursor?: InputMaybe<CarbonOffsetFactorWhereUniqueInput>;
  orderBy?: Array<CarbonOffsetFactorOrderByInput>;
  skip?: Scalars['Int']['input'];
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: CarbonOffsetFactorWhereInput;
};


export type QueryCarbonOffsetFactorsCountArgs = {
  where?: CarbonOffsetFactorWhereInput;
};


export type QueryCategoriesArgs = {
  cursor?: InputMaybe<CategoryWhereUniqueInput>;
  orderBy?: Array<CategoryOrderByInput>;
  skip?: Scalars['Int']['input'];
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: CategoryWhereInput;
};


export type QueryCategoriesCountArgs = {
  where?: CategoryWhereInput;
};


export type QueryCategoryArgs = {
  where: CategoryWhereUniqueInput;
};


export type QueryCategoryKpiArgs = {
  where: CategoryKpiWhereUniqueInput;
};


export type QueryCategoryKpisArgs = {
  cursor?: InputMaybe<CategoryKpiWhereUniqueInput>;
  orderBy?: Array<CategoryKpiOrderByInput>;
  skip?: Scalars['Int']['input'];
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: CategoryKpiWhereInput;
};


export type QueryCategoryKpisCountArgs = {
  where?: CategoryKpiWhereInput;
};


export type QueryChatArgs = {
  where: ChatWhereUniqueInput;
};


export type QueryChatsArgs = {
  cursor?: InputMaybe<ChatWhereUniqueInput>;
  orderBy?: Array<ChatOrderByInput>;
  skip?: Scalars['Int']['input'];
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: ChatWhereInput;
};


export type QueryChatsCountArgs = {
  where?: ChatWhereInput;
};


export type QueryCropArgs = {
  where: CropWhereUniqueInput;
};


export type QueryCropTypeArgs = {
  where: CropTypeWhereUniqueInput;
};


export type QueryCropTypesArgs = {
  cursor?: InputMaybe<CropTypeWhereUniqueInput>;
  orderBy?: Array<CropTypeOrderByInput>;
  skip?: Scalars['Int']['input'];
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: CropTypeWhereInput;
};


export type QueryCropTypesCountArgs = {
  where?: CropTypeWhereInput;
};


export type QueryCropsArgs = {
  cursor?: InputMaybe<CropWhereUniqueInput>;
  orderBy?: Array<CropOrderByInput>;
  skip?: Scalars['Int']['input'];
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: CropWhereInput;
};


export type QueryCropsCountArgs = {
  where?: CropWhereInput;
};


export type QueryDocumentArgs = {
  where: DocumentWhereUniqueInput;
};


export type QueryDocumentsArgs = {
  cursor?: InputMaybe<DocumentWhereUniqueInput>;
  orderBy?: Array<DocumentOrderByInput>;
  skip?: Scalars['Int']['input'];
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: DocumentWhereInput;
};


export type QueryDocumentsCountArgs = {
  where?: DocumentWhereInput;
};


export type QueryEcoSchemeArgs = {
  where: EcoSchemeWhereUniqueInput;
};


export type QueryEcoSchemesArgs = {
  cursor?: InputMaybe<EcoSchemeWhereUniqueInput>;
  orderBy?: Array<EcoSchemeOrderByInput>;
  skip?: Scalars['Int']['input'];
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: EcoSchemeWhereInput;
};


export type QueryEcoSchemesCountArgs = {
  where?: EcoSchemeWhereInput;
};


export type QueryEmissionScenarioArgs = {
  where: EmissionScenarioWhereUniqueInput;
};


export type QueryEmissionScenariosArgs = {
  cursor?: InputMaybe<EmissionScenarioWhereUniqueInput>;
  orderBy?: Array<EmissionScenarioOrderByInput>;
  skip?: Scalars['Int']['input'];
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: EmissionScenarioWhereInput;
};


export type QueryEmissionScenariosCountArgs = {
  where?: EmissionScenarioWhereInput;
};


export type QueryEquipmentArgs = {
  where: EquipmentWhereUniqueInput;
};


export type QueryEquipmentListArgs = {
  cursor?: InputMaybe<EquipmentWhereUniqueInput>;
  orderBy?: Array<EquipmentOrderByInput>;
  skip?: Scalars['Int']['input'];
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: EquipmentWhereInput;
};


export type QueryEquipmentListCountArgs = {
  where?: EquipmentWhereInput;
};


export type QueryFarmArgs = {
  where: FarmWhereUniqueInput;
};


export type QueryFarmsArgs = {
  cursor?: InputMaybe<FarmWhereUniqueInput>;
  orderBy?: Array<FarmOrderByInput>;
  skip?: Scalars['Int']['input'];
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: FarmWhereInput;
};


export type QueryFarmsCountArgs = {
  where?: FarmWhereInput;
};


export type QueryFeedDispenseEventArgs = {
  where: FeedDispenseEventWhereUniqueInput;
};


export type QueryFeedDispenseEventsArgs = {
  cursor?: InputMaybe<FeedDispenseEventWhereUniqueInput>;
  orderBy?: Array<FeedDispenseEventOrderByInput>;
  skip?: Scalars['Int']['input'];
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: FeedDispenseEventWhereInput;
};


export type QueryFeedDispenseEventsCountArgs = {
  where?: FeedDispenseEventWhereInput;
};


export type QueryFeedLotArgs = {
  where: FeedLotWhereUniqueInput;
};


export type QueryFeedLotsArgs = {
  cursor?: InputMaybe<FeedLotWhereUniqueInput>;
  orderBy?: Array<FeedLotOrderByInput>;
  skip?: Scalars['Int']['input'];
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: FeedLotWhereInput;
};


export type QueryFeedLotsCountArgs = {
  where?: FeedLotWhereInput;
};


export type QueryFeedRationComponentArgs = {
  where: FeedRationComponentWhereUniqueInput;
};


export type QueryFeedRationComponentsArgs = {
  cursor?: InputMaybe<FeedRationComponentWhereUniqueInput>;
  orderBy?: Array<FeedRationComponentOrderByInput>;
  skip?: Scalars['Int']['input'];
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: FeedRationComponentWhereInput;
};


export type QueryFeedRationComponentsCountArgs = {
  where?: FeedRationComponentWhereInput;
};


export type QueryFeedRationPlanArgs = {
  where: FeedRationPlanWhereUniqueInput;
};


export type QueryFeedRationPlansArgs = {
  cursor?: InputMaybe<FeedRationPlanWhereUniqueInput>;
  orderBy?: Array<FeedRationPlanOrderByInput>;
  skip?: Scalars['Int']['input'];
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: FeedRationPlanWhereInput;
};


export type QueryFeedRationPlansCountArgs = {
  where?: FeedRationPlanWhereInput;
};


export type QueryFeedSiloArgs = {
  where: FeedSiloWhereUniqueInput;
};


export type QueryFeedSilosArgs = {
  cursor?: InputMaybe<FeedSiloWhereUniqueInput>;
  orderBy?: Array<FeedSiloOrderByInput>;
  skip?: Scalars['Int']['input'];
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: FeedSiloWhereInput;
};


export type QueryFeedSilosCountArgs = {
  where?: FeedSiloWhereInput;
};


export type QueryFieldArgs = {
  where: FieldWhereUniqueInput;
};


export type QueryFieldImpactSummariesArgs = {
  cursor?: InputMaybe<FieldImpactSummaryWhereUniqueInput>;
  orderBy?: Array<FieldImpactSummaryOrderByInput>;
  skip?: Scalars['Int']['input'];
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: FieldImpactSummaryWhereInput;
};


export type QueryFieldImpactSummariesCountArgs = {
  where?: FieldImpactSummaryWhereInput;
};


export type QueryFieldImpactSummaryArgs = {
  where: FieldImpactSummaryWhereUniqueInput;
};


export type QueryFieldsArgs = {
  cursor?: InputMaybe<FieldWhereUniqueInput>;
  orderBy?: Array<FieldOrderByInput>;
  skip?: Scalars['Int']['input'];
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: FieldWhereInput;
};


export type QueryFieldsCountArgs = {
  where?: FieldWhereInput;
};


export type QueryHerdMetricArgs = {
  where: HerdMetricWhereUniqueInput;
};


export type QueryHerdMetricsArgs = {
  cursor?: InputMaybe<HerdMetricWhereUniqueInput>;
  orderBy?: Array<HerdMetricOrderByInput>;
  skip?: Scalars['Int']['input'];
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: HerdMetricWhereInput;
};


export type QueryHerdMetricsCountArgs = {
  where?: HerdMetricWhereInput;
};


export type QueryInterviewArgs = {
  where: InterviewWhereUniqueInput;
};


export type QueryInterviewStageArgs = {
  where: InterviewStageWhereUniqueInput;
};


export type QueryInterviewStagesArgs = {
  cursor?: InputMaybe<InterviewStageWhereUniqueInput>;
  orderBy?: Array<InterviewStageOrderByInput>;
  skip?: Scalars['Int']['input'];
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InterviewStageWhereInput;
};


export type QueryInterviewStagesCountArgs = {
  where?: InterviewStageWhereInput;
};


export type QueryInterviewsArgs = {
  cursor?: InputMaybe<InterviewWhereUniqueInput>;
  orderBy?: Array<InterviewOrderByInput>;
  skip?: Scalars['Int']['input'];
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InterviewWhereInput;
};


export type QueryInterviewsCountArgs = {
  where?: InterviewWhereInput;
};


export type QueryJobCandidateArgs = {
  where: JobCandidateWhereUniqueInput;
};


export type QueryJobCandidatesArgs = {
  cursor?: InputMaybe<JobCandidateWhereUniqueInput>;
  orderBy?: Array<JobCandidateOrderByInput>;
  skip?: Scalars['Int']['input'];
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: JobCandidateWhereInput;
};


export type QueryJobCandidatesCountArgs = {
  where?: JobCandidateWhereInput;
};


export type QueryJobOpeningArgs = {
  where: JobOpeningWhereUniqueInput;
};


export type QueryJobOpeningsArgs = {
  cursor?: InputMaybe<JobOpeningWhereUniqueInput>;
  orderBy?: Array<JobOpeningOrderByInput>;
  skip?: Scalars['Int']['input'];
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: JobOpeningWhereInput;
};


export type QueryJobOpeningsCountArgs = {
  where?: JobOpeningWhereInput;
};


export type QueryKPiArgs = {
  where: KpiWhereUniqueInput;
};


export type QueryKPisArgs = {
  cursor?: InputMaybe<KpiWhereUniqueInput>;
  orderBy?: Array<KpiOrderByInput>;
  skip?: Scalars['Int']['input'];
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: KpiWhereInput;
};


export type QueryKPisCountArgs = {
  where?: KpiWhereInput;
};


export type QueryLandCoverStatisticArgs = {
  where: LandCoverStatisticWhereUniqueInput;
};


export type QueryLandCoverStatisticsArgs = {
  cursor?: InputMaybe<LandCoverStatisticWhereUniqueInput>;
  orderBy?: Array<LandCoverStatisticOrderByInput>;
  skip?: Scalars['Int']['input'];
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: LandCoverStatisticWhereInput;
};


export type QueryLandCoverStatisticsCountArgs = {
  where?: LandCoverStatisticWhereInput;
};


export type QueryMembershipArgs = {
  where: MembershipWhereUniqueInput;
};


export type QueryMembershipsArgs = {
  cursor?: InputMaybe<MembershipWhereUniqueInput>;
  orderBy?: Array<MembershipOrderByInput>;
  skip?: Scalars['Int']['input'];
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: MembershipWhereInput;
};


export type QueryMembershipsCountArgs = {
  where?: MembershipWhereInput;
};


export type QueryMessageClickArgs = {
  where: MessageClickWhereUniqueInput;
};


export type QueryMessageClicksArgs = {
  cursor?: InputMaybe<MessageClickWhereUniqueInput>;
  orderBy?: Array<MessageClickOrderByInput>;
  skip?: Scalars['Int']['input'];
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: MessageClickWhereInput;
};


export type QueryMessageClicksCountArgs = {
  where?: MessageClickWhereInput;
};


export type QueryMessageDeliveriesArgs = {
  cursor?: InputMaybe<MessageDeliveryWhereUniqueInput>;
  orderBy?: Array<MessageDeliveryOrderByInput>;
  skip?: Scalars['Int']['input'];
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: MessageDeliveryWhereInput;
};


export type QueryMessageDeliveriesCountArgs = {
  where?: MessageDeliveryWhereInput;
};


export type QueryMessageDeliveryArgs = {
  where: MessageDeliveryWhereUniqueInput;
};


export type QueryMessageTemplateArgs = {
  where: MessageTemplateWhereUniqueInput;
};


export type QueryMessageTemplatesArgs = {
  cursor?: InputMaybe<MessageTemplateWhereUniqueInput>;
  orderBy?: Array<MessageTemplateOrderByInput>;
  skip?: Scalars['Int']['input'];
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: MessageTemplateWhereInput;
};


export type QueryMessageTemplatesCountArgs = {
  where?: MessageTemplateWhereInput;
};


export type QueryMilkAnalysesArgs = {
  cursor?: InputMaybe<MilkAnalysisWhereUniqueInput>;
  orderBy?: Array<MilkAnalysisOrderByInput>;
  skip?: Scalars['Int']['input'];
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: MilkAnalysisWhereInput;
};


export type QueryMilkAnalysesCountArgs = {
  where?: MilkAnalysisWhereInput;
};


export type QueryMilkAnalysisArgs = {
  where: MilkAnalysisWhereUniqueInput;
};


export type QueryMilkingEventArgs = {
  where: MilkingEventWhereUniqueInput;
};


export type QueryMilkingEventsArgs = {
  cursor?: InputMaybe<MilkingEventWhereUniqueInput>;
  orderBy?: Array<MilkingEventOrderByInput>;
  skip?: Scalars['Int']['input'];
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: MilkingEventWhereInput;
};


export type QueryMilkingEventsCountArgs = {
  where?: MilkingEventWhereInput;
};


export type QueryNDviAssetArgs = {
  where: NdviAssetWhereUniqueInput;
};


export type QueryNDviAssetsArgs = {
  cursor?: InputMaybe<NdviAssetWhereUniqueInput>;
  orderBy?: Array<NdviAssetOrderByInput>;
  skip?: Scalars['Int']['input'];
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: NdviAssetWhereInput;
};


export type QueryNDviAssetsCountArgs = {
  where?: NdviAssetWhereInput;
};


export type QueryNetPrimaryProductivitiesArgs = {
  cursor?: InputMaybe<NetPrimaryProductivityWhereUniqueInput>;
  orderBy?: Array<NetPrimaryProductivityOrderByInput>;
  skip?: Scalars['Int']['input'];
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: NetPrimaryProductivityWhereInput;
};


export type QueryNetPrimaryProductivitiesCountArgs = {
  where?: NetPrimaryProductivityWhereInput;
};


export type QueryNetPrimaryProductivityArgs = {
  where: NetPrimaryProductivityWhereUniqueInput;
};


export type QueryNewsletterSegmentArgs = {
  where: NewsletterSegmentWhereUniqueInput;
};


export type QueryNewsletterSegmentsArgs = {
  cursor?: InputMaybe<NewsletterSegmentWhereUniqueInput>;
  orderBy?: Array<NewsletterSegmentOrderByInput>;
  skip?: Scalars['Int']['input'];
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: NewsletterSegmentWhereInput;
};


export type QueryNewsletterSegmentsCountArgs = {
  where?: NewsletterSegmentWhereInput;
};


export type QueryNewsletterSubscriberArgs = {
  where: NewsletterSubscriberWhereUniqueInput;
};


export type QueryNewsletterSubscribersArgs = {
  cursor?: InputMaybe<NewsletterSubscriberWhereUniqueInput>;
  orderBy?: Array<NewsletterSubscriberOrderByInput>;
  skip?: Scalars['Int']['input'];
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: NewsletterSubscriberWhereInput;
};


export type QueryNewsletterSubscribersCountArgs = {
  where?: NewsletterSubscriberWhereInput;
};


export type QueryOperatorArgs = {
  where: OperatorWhereUniqueInput;
};


export type QueryOperatorsArgs = {
  cursor?: InputMaybe<OperatorWhereUniqueInput>;
  orderBy?: Array<OperatorOrderByInput>;
  skip?: Scalars['Int']['input'];
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: OperatorWhereInput;
};


export type QueryOperatorsCountArgs = {
  where?: OperatorWhereInput;
};


export type QueryOrganisationArgs = {
  where: OrganisationWhereUniqueInput;
};


export type QueryOrganisationsArgs = {
  cursor?: InputMaybe<OrganisationWhereUniqueInput>;
  orderBy?: Array<OrganisationOrderByInput>;
  skip?: Scalars['Int']['input'];
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: OrganisationWhereInput;
};


export type QueryOrganisationsCountArgs = {
  where?: OrganisationWhereInput;
};


export type QueryPlanArgs = {
  where: PlanWhereUniqueInput;
};


export type QueryPlanPriceArgs = {
  where: PlanPriceWhereUniqueInput;
};


export type QueryPlanPricesArgs = {
  cursor?: InputMaybe<PlanPriceWhereUniqueInput>;
  orderBy?: Array<PlanPriceOrderByInput>;
  skip?: Scalars['Int']['input'];
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: PlanPriceWhereInput;
};


export type QueryPlanPricesCountArgs = {
  where?: PlanPriceWhereInput;
};


export type QueryPlansArgs = {
  cursor?: InputMaybe<PlanWhereUniqueInput>;
  orderBy?: Array<PlanOrderByInput>;
  skip?: Scalars['Int']['input'];
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: PlanWhereInput;
};


export type QueryPlansCountArgs = {
  where?: PlanWhereInput;
};


export type QueryPostArgs = {
  where: PostWhereUniqueInput;
};


export type QueryPostsArgs = {
  cursor?: InputMaybe<PostWhereUniqueInput>;
  orderBy?: Array<PostOrderByInput>;
  skip?: Scalars['Int']['input'];
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: PostWhereInput;
};


export type QueryPostsCountArgs = {
  where?: PostWhereInput;
};


export type QueryProductArgs = {
  where: ProductWhereUniqueInput;
};


export type QueryProductsArgs = {
  cursor?: InputMaybe<ProductWhereUniqueInput>;
  orderBy?: Array<ProductOrderByInput>;
  skip?: Scalars['Int']['input'];
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: ProductWhereInput;
};


export type QueryProductsCountArgs = {
  where?: ProductWhereInput;
};


export type QueryReferralCampaignArgs = {
  where: ReferralCampaignWhereUniqueInput;
};


export type QueryReferralCampaignsArgs = {
  cursor?: InputMaybe<ReferralCampaignWhereUniqueInput>;
  orderBy?: Array<ReferralCampaignOrderByInput>;
  skip?: Scalars['Int']['input'];
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: ReferralCampaignWhereInput;
};


export type QueryReferralCampaignsCountArgs = {
  where?: ReferralCampaignWhereInput;
};


export type QueryReferralPartnerArgs = {
  where: ReferralPartnerWhereUniqueInput;
};


export type QueryReferralPartnersArgs = {
  cursor?: InputMaybe<ReferralPartnerWhereUniqueInput>;
  orderBy?: Array<ReferralPartnerOrderByInput>;
  skip?: Scalars['Int']['input'];
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: ReferralPartnerWhereInput;
};


export type QueryReferralPartnersCountArgs = {
  where?: ReferralPartnerWhereInput;
};


export type QueryReferralRedemptionArgs = {
  where: ReferralRedemptionWhereUniqueInput;
};


export type QueryReferralRedemptionsArgs = {
  cursor?: InputMaybe<ReferralRedemptionWhereUniqueInput>;
  orderBy?: Array<ReferralRedemptionOrderByInput>;
  skip?: Scalars['Int']['input'];
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: ReferralRedemptionWhereInput;
};


export type QueryReferralRedemptionsCountArgs = {
  where?: ReferralRedemptionWhereInput;
};


export type QueryRegulatoryRuleArgs = {
  where: RegulatoryRuleWhereUniqueInput;
};


export type QueryRegulatoryRulesArgs = {
  cursor?: InputMaybe<RegulatoryRuleWhereUniqueInput>;
  orderBy?: Array<RegulatoryRuleOrderByInput>;
  skip?: Scalars['Int']['input'];
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: RegulatoryRuleWhereInput;
};


export type QueryRegulatoryRulesCountArgs = {
  where?: RegulatoryRuleWhereInput;
};


export type QuerySoilMeasurementArgs = {
  where: SoilMeasurementWhereUniqueInput;
};


export type QuerySoilMeasurementsArgs = {
  cursor?: InputMaybe<SoilMeasurementWhereUniqueInput>;
  orderBy?: Array<SoilMeasurementOrderByInput>;
  skip?: Scalars['Int']['input'];
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: SoilMeasurementWhereInput;
};


export type QuerySoilMeasurementsCountArgs = {
  where?: SoilMeasurementWhereInput;
};


export type QuerySoilMoistureObservationArgs = {
  where: SoilMoistureObservationWhereUniqueInput;
};


export type QuerySoilMoistureObservationsArgs = {
  cursor?: InputMaybe<SoilMoistureObservationWhereUniqueInput>;
  orderBy?: Array<SoilMoistureObservationOrderByInput>;
  skip?: Scalars['Int']['input'];
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: SoilMoistureObservationWhereInput;
};


export type QuerySoilMoistureObservationsCountArgs = {
  where?: SoilMoistureObservationWhereInput;
};


export type QuerySoilOrganicCarbonStockArgs = {
  where: SoilOrganicCarbonStockWhereUniqueInput;
};


export type QuerySoilOrganicCarbonStocksArgs = {
  cursor?: InputMaybe<SoilOrganicCarbonStockWhereUniqueInput>;
  orderBy?: Array<SoilOrganicCarbonStockOrderByInput>;
  skip?: Scalars['Int']['input'];
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: SoilOrganicCarbonStockWhereInput;
};


export type QuerySoilOrganicCarbonStocksCountArgs = {
  where?: SoilOrganicCarbonStockWhereInput;
};


export type QuerySubscriptionArgs = {
  where: SubscriptionWhereUniqueInput;
};


export type QuerySubscriptionsArgs = {
  cursor?: InputMaybe<SubscriptionWhereUniqueInput>;
  orderBy?: Array<SubscriptionOrderByInput>;
  skip?: Scalars['Int']['input'];
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: SubscriptionWhereInput;
};


export type QuerySubscriptionsCountArgs = {
  where?: SubscriptionWhereInput;
};


export type QuerySustainablePracticeArgs = {
  where: SustainablePracticeWhereUniqueInput;
};


export type QuerySustainablePracticeCategoriesArgs = {
  cursor?: InputMaybe<SustainablePracticeCategoryWhereUniqueInput>;
  orderBy?: Array<SustainablePracticeCategoryOrderByInput>;
  skip?: Scalars['Int']['input'];
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: SustainablePracticeCategoryWhereInput;
};


export type QuerySustainablePracticeCategoriesCountArgs = {
  where?: SustainablePracticeCategoryWhereInput;
};


export type QuerySustainablePracticeCategoryArgs = {
  where: SustainablePracticeCategoryWhereUniqueInput;
};


export type QuerySustainablePracticeEventArgs = {
  where: SustainablePracticeEventWhereUniqueInput;
};


export type QuerySustainablePracticeEventsArgs = {
  cursor?: InputMaybe<SustainablePracticeEventWhereUniqueInput>;
  orderBy?: Array<SustainablePracticeEventOrderByInput>;
  skip?: Scalars['Int']['input'];
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: SustainablePracticeEventWhereInput;
};


export type QuerySustainablePracticeEventsCountArgs = {
  where?: SustainablePracticeEventWhereInput;
};


export type QuerySustainablePracticesArgs = {
  cursor?: InputMaybe<SustainablePracticeWhereUniqueInput>;
  orderBy?: Array<SustainablePracticeOrderByInput>;
  skip?: Scalars['Int']['input'];
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: SustainablePracticeWhereInput;
};


export type QuerySustainablePracticesCountArgs = {
  where?: SustainablePracticeWhereInput;
};


export type QueryTagArgs = {
  where: TagWhereUniqueInput;
};


export type QueryTagsArgs = {
  cursor?: InputMaybe<TagWhereUniqueInput>;
  orderBy?: Array<TagOrderByInput>;
  skip?: Scalars['Int']['input'];
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: TagWhereInput;
};


export type QueryTagsCountArgs = {
  where?: TagWhereInput;
};


export type QueryUserArgs = {
  where: UserWhereUniqueInput;
};


export type QueryUsersArgs = {
  cursor?: InputMaybe<UserWhereUniqueInput>;
  orderBy?: Array<UserOrderByInput>;
  skip?: Scalars['Int']['input'];
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: UserWhereInput;
};


export type QueryUsersCountArgs = {
  where?: UserWhereInput;
};


export type QueryWeatherRecordArgs = {
  where: WeatherRecordWhereUniqueInput;
};


export type QueryWeatherRecordsArgs = {
  cursor?: InputMaybe<WeatherRecordWhereUniqueInput>;
  orderBy?: Array<WeatherRecordOrderByInput>;
  skip?: Scalars['Int']['input'];
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: WeatherRecordWhereInput;
};


export type QueryWeatherRecordsCountArgs = {
  where?: WeatherRecordWhereInput;
};

export enum QueryMode {
  Default = 'default',
  Insensitive = 'insensitive'
}

export type ReferralCampaign = {
  __typename?: 'ReferralCampaign';
  code?: Maybe<Scalars['String']['output']>;
  createdAt?: Maybe<Scalars['DateTime']['output']>;
  discount_pct?: Maybe<Scalars['Float']['output']>;
  endDate?: Maybe<Scalars['DateTime']['output']>;
  id: Scalars['ID']['output'];
  note?: Maybe<Scalars['String']['output']>;
  partner?: Maybe<ReferralPartner>;
  redemptions?: Maybe<Array<ReferralRedemption>>;
  redemptionsCount?: Maybe<Scalars['Int']['output']>;
  startDate?: Maybe<Scalars['DateTime']['output']>;
};


export type ReferralCampaignRedemptionsArgs = {
  cursor?: InputMaybe<ReferralRedemptionWhereUniqueInput>;
  orderBy?: Array<ReferralRedemptionOrderByInput>;
  skip?: Scalars['Int']['input'];
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: ReferralRedemptionWhereInput;
};


export type ReferralCampaignRedemptionsCountArgs = {
  where?: ReferralRedemptionWhereInput;
};

export type ReferralCampaignCreateInput = {
  code?: InputMaybe<Scalars['String']['input']>;
  createdAt?: InputMaybe<Scalars['DateTime']['input']>;
  discount_pct?: InputMaybe<Scalars['Float']['input']>;
  endDate?: InputMaybe<Scalars['DateTime']['input']>;
  note?: InputMaybe<Scalars['String']['input']>;
  partner?: InputMaybe<ReferralPartnerRelateToOneForCreateInput>;
  redemptions?: InputMaybe<ReferralRedemptionRelateToManyForCreateInput>;
  startDate?: InputMaybe<Scalars['DateTime']['input']>;
};

export type ReferralCampaignManyRelationFilter = {
  every?: InputMaybe<ReferralCampaignWhereInput>;
  none?: InputMaybe<ReferralCampaignWhereInput>;
  some?: InputMaybe<ReferralCampaignWhereInput>;
};

export type ReferralCampaignOrderByInput = {
  code?: InputMaybe<OrderDirection>;
  createdAt?: InputMaybe<OrderDirection>;
  discount_pct?: InputMaybe<OrderDirection>;
  endDate?: InputMaybe<OrderDirection>;
  id?: InputMaybe<OrderDirection>;
  note?: InputMaybe<OrderDirection>;
  startDate?: InputMaybe<OrderDirection>;
};

export type ReferralCampaignRelateToManyForCreateInput = {
  connect?: InputMaybe<Array<ReferralCampaignWhereUniqueInput>>;
  create?: InputMaybe<Array<ReferralCampaignCreateInput>>;
};

export type ReferralCampaignRelateToManyForUpdateInput = {
  connect?: InputMaybe<Array<ReferralCampaignWhereUniqueInput>>;
  create?: InputMaybe<Array<ReferralCampaignCreateInput>>;
  disconnect?: InputMaybe<Array<ReferralCampaignWhereUniqueInput>>;
  set?: InputMaybe<Array<ReferralCampaignWhereUniqueInput>>;
};

export type ReferralCampaignRelateToOneForCreateInput = {
  connect?: InputMaybe<ReferralCampaignWhereUniqueInput>;
  create?: InputMaybe<ReferralCampaignCreateInput>;
};

export type ReferralCampaignRelateToOneForUpdateInput = {
  connect?: InputMaybe<ReferralCampaignWhereUniqueInput>;
  create?: InputMaybe<ReferralCampaignCreateInput>;
  disconnect?: InputMaybe<Scalars['Boolean']['input']>;
};

export type ReferralCampaignUpdateArgs = {
  data: ReferralCampaignUpdateInput;
  where: ReferralCampaignWhereUniqueInput;
};

export type ReferralCampaignUpdateInput = {
  code?: InputMaybe<Scalars['String']['input']>;
  createdAt?: InputMaybe<Scalars['DateTime']['input']>;
  discount_pct?: InputMaybe<Scalars['Float']['input']>;
  endDate?: InputMaybe<Scalars['DateTime']['input']>;
  note?: InputMaybe<Scalars['String']['input']>;
  partner?: InputMaybe<ReferralPartnerRelateToOneForUpdateInput>;
  redemptions?: InputMaybe<ReferralRedemptionRelateToManyForUpdateInput>;
  startDate?: InputMaybe<Scalars['DateTime']['input']>;
};

export type ReferralCampaignWhereInput = {
  AND?: InputMaybe<Array<ReferralCampaignWhereInput>>;
  NOT?: InputMaybe<Array<ReferralCampaignWhereInput>>;
  OR?: InputMaybe<Array<ReferralCampaignWhereInput>>;
  code?: InputMaybe<StringFilter>;
  createdAt?: InputMaybe<DateTimeNullableFilter>;
  discount_pct?: InputMaybe<FloatNullableFilter>;
  endDate?: InputMaybe<DateTimeNullableFilter>;
  id?: InputMaybe<IdFilter>;
  note?: InputMaybe<StringFilter>;
  partner?: InputMaybe<ReferralPartnerWhereInput>;
  redemptions?: InputMaybe<ReferralRedemptionManyRelationFilter>;
  startDate?: InputMaybe<DateTimeNullableFilter>;
};

export type ReferralCampaignWhereUniqueInput = {
  code?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['ID']['input']>;
};

export type ReferralPartner = {
  __typename?: 'ReferralPartner';
  campaigns?: Maybe<Array<ReferralCampaign>>;
  campaignsCount?: Maybe<Scalars['Int']['output']>;
  commission_pct?: Maybe<Scalars['Float']['output']>;
  contactEmail?: Maybe<Scalars['String']['output']>;
  createdAt?: Maybe<Scalars['DateTime']['output']>;
  id: Scalars['ID']['output'];
  name?: Maybe<Scalars['String']['output']>;
  ownerUser?: Maybe<User>;
  type?: Maybe<Scalars['String']['output']>;
};


export type ReferralPartnerCampaignsArgs = {
  cursor?: InputMaybe<ReferralCampaignWhereUniqueInput>;
  orderBy?: Array<ReferralCampaignOrderByInput>;
  skip?: Scalars['Int']['input'];
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: ReferralCampaignWhereInput;
};


export type ReferralPartnerCampaignsCountArgs = {
  where?: ReferralCampaignWhereInput;
};

export type ReferralPartnerCreateInput = {
  campaigns?: InputMaybe<ReferralCampaignRelateToManyForCreateInput>;
  commission_pct?: InputMaybe<Scalars['Float']['input']>;
  contactEmail?: InputMaybe<Scalars['String']['input']>;
  createdAt?: InputMaybe<Scalars['DateTime']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
  ownerUser?: InputMaybe<UserRelateToOneForCreateInput>;
  type?: InputMaybe<Scalars['String']['input']>;
};

export type ReferralPartnerOrderByInput = {
  commission_pct?: InputMaybe<OrderDirection>;
  contactEmail?: InputMaybe<OrderDirection>;
  createdAt?: InputMaybe<OrderDirection>;
  id?: InputMaybe<OrderDirection>;
  name?: InputMaybe<OrderDirection>;
  type?: InputMaybe<OrderDirection>;
};

export type ReferralPartnerRelateToOneForCreateInput = {
  connect?: InputMaybe<ReferralPartnerWhereUniqueInput>;
  create?: InputMaybe<ReferralPartnerCreateInput>;
};

export type ReferralPartnerRelateToOneForUpdateInput = {
  connect?: InputMaybe<ReferralPartnerWhereUniqueInput>;
  create?: InputMaybe<ReferralPartnerCreateInput>;
  disconnect?: InputMaybe<Scalars['Boolean']['input']>;
};

export type ReferralPartnerUpdateArgs = {
  data: ReferralPartnerUpdateInput;
  where: ReferralPartnerWhereUniqueInput;
};

export type ReferralPartnerUpdateInput = {
  campaigns?: InputMaybe<ReferralCampaignRelateToManyForUpdateInput>;
  commission_pct?: InputMaybe<Scalars['Float']['input']>;
  contactEmail?: InputMaybe<Scalars['String']['input']>;
  createdAt?: InputMaybe<Scalars['DateTime']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
  ownerUser?: InputMaybe<UserRelateToOneForUpdateInput>;
  type?: InputMaybe<Scalars['String']['input']>;
};

export type ReferralPartnerWhereInput = {
  AND?: InputMaybe<Array<ReferralPartnerWhereInput>>;
  NOT?: InputMaybe<Array<ReferralPartnerWhereInput>>;
  OR?: InputMaybe<Array<ReferralPartnerWhereInput>>;
  campaigns?: InputMaybe<ReferralCampaignManyRelationFilter>;
  commission_pct?: InputMaybe<FloatNullableFilter>;
  contactEmail?: InputMaybe<StringFilter>;
  createdAt?: InputMaybe<DateTimeNullableFilter>;
  id?: InputMaybe<IdFilter>;
  name?: InputMaybe<StringFilter>;
  ownerUser?: InputMaybe<UserWhereInput>;
  type?: InputMaybe<StringFilter>;
};

export type ReferralPartnerWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']['input']>;
};

export type ReferralRedemption = {
  __typename?: 'ReferralRedemption';
  campaign?: Maybe<ReferralCampaign>;
  discountValue?: Maybe<Scalars['Float']['output']>;
  farmerUser?: Maybe<User>;
  id: Scalars['ID']['output'];
  signupDate?: Maybe<Scalars['DateTime']['output']>;
  subscription?: Maybe<Subscription>;
};

export type ReferralRedemptionCreateInput = {
  campaign?: InputMaybe<ReferralCampaignRelateToOneForCreateInput>;
  discountValue?: InputMaybe<Scalars['Float']['input']>;
  farmerUser?: InputMaybe<UserRelateToOneForCreateInput>;
  signupDate?: InputMaybe<Scalars['DateTime']['input']>;
  subscription?: InputMaybe<SubscriptionRelateToOneForCreateInput>;
};

export type ReferralRedemptionManyRelationFilter = {
  every?: InputMaybe<ReferralRedemptionWhereInput>;
  none?: InputMaybe<ReferralRedemptionWhereInput>;
  some?: InputMaybe<ReferralRedemptionWhereInput>;
};

export type ReferralRedemptionOrderByInput = {
  discountValue?: InputMaybe<OrderDirection>;
  id?: InputMaybe<OrderDirection>;
  signupDate?: InputMaybe<OrderDirection>;
};

export type ReferralRedemptionRelateToManyForCreateInput = {
  connect?: InputMaybe<Array<ReferralRedemptionWhereUniqueInput>>;
  create?: InputMaybe<Array<ReferralRedemptionCreateInput>>;
};

export type ReferralRedemptionRelateToManyForUpdateInput = {
  connect?: InputMaybe<Array<ReferralRedemptionWhereUniqueInput>>;
  create?: InputMaybe<Array<ReferralRedemptionCreateInput>>;
  disconnect?: InputMaybe<Array<ReferralRedemptionWhereUniqueInput>>;
  set?: InputMaybe<Array<ReferralRedemptionWhereUniqueInput>>;
};

export type ReferralRedemptionUpdateArgs = {
  data: ReferralRedemptionUpdateInput;
  where: ReferralRedemptionWhereUniqueInput;
};

export type ReferralRedemptionUpdateInput = {
  campaign?: InputMaybe<ReferralCampaignRelateToOneForUpdateInput>;
  discountValue?: InputMaybe<Scalars['Float']['input']>;
  farmerUser?: InputMaybe<UserRelateToOneForUpdateInput>;
  signupDate?: InputMaybe<Scalars['DateTime']['input']>;
  subscription?: InputMaybe<SubscriptionRelateToOneForUpdateInput>;
};

export type ReferralRedemptionWhereInput = {
  AND?: InputMaybe<Array<ReferralRedemptionWhereInput>>;
  NOT?: InputMaybe<Array<ReferralRedemptionWhereInput>>;
  OR?: InputMaybe<Array<ReferralRedemptionWhereInput>>;
  campaign?: InputMaybe<ReferralCampaignWhereInput>;
  discountValue?: InputMaybe<FloatNullableFilter>;
  farmerUser?: InputMaybe<UserWhereInput>;
  id?: InputMaybe<IdFilter>;
  signupDate?: InputMaybe<DateTimeNullableFilter>;
  subscription?: InputMaybe<SubscriptionWhereInput>;
};

export type ReferralRedemptionWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']['input']>;
};

export type RegulatoryRule = {
  __typename?: 'RegulatoryRule';
  alerts?: Maybe<Array<Alert>>;
  alertsCount?: Maybe<Scalars['Int']['output']>;
  code?: Maybe<Scalars['String']['output']>;
  description?: Maybe<Scalars['String']['output']>;
  effective_from?: Maybe<Scalars['DateTime']['output']>;
  effective_to?: Maybe<Scalars['DateTime']['output']>;
  id: Scalars['ID']['output'];
  jurisdiction?: Maybe<Scalars['String']['output']>;
};


export type RegulatoryRuleAlertsArgs = {
  cursor?: InputMaybe<AlertWhereUniqueInput>;
  orderBy?: Array<AlertOrderByInput>;
  skip?: Scalars['Int']['input'];
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: AlertWhereInput;
};


export type RegulatoryRuleAlertsCountArgs = {
  where?: AlertWhereInput;
};

export type RegulatoryRuleCreateInput = {
  alerts?: InputMaybe<AlertRelateToManyForCreateInput>;
  code?: InputMaybe<Scalars['String']['input']>;
  description?: InputMaybe<Scalars['String']['input']>;
  effective_from?: InputMaybe<Scalars['DateTime']['input']>;
  effective_to?: InputMaybe<Scalars['DateTime']['input']>;
  jurisdiction?: InputMaybe<Scalars['String']['input']>;
};

export type RegulatoryRuleOrderByInput = {
  code?: InputMaybe<OrderDirection>;
  description?: InputMaybe<OrderDirection>;
  effective_from?: InputMaybe<OrderDirection>;
  effective_to?: InputMaybe<OrderDirection>;
  id?: InputMaybe<OrderDirection>;
  jurisdiction?: InputMaybe<OrderDirection>;
};

export type RegulatoryRuleRelateToOneForCreateInput = {
  connect?: InputMaybe<RegulatoryRuleWhereUniqueInput>;
  create?: InputMaybe<RegulatoryRuleCreateInput>;
};

export type RegulatoryRuleRelateToOneForUpdateInput = {
  connect?: InputMaybe<RegulatoryRuleWhereUniqueInput>;
  create?: InputMaybe<RegulatoryRuleCreateInput>;
  disconnect?: InputMaybe<Scalars['Boolean']['input']>;
};

export type RegulatoryRuleUpdateArgs = {
  data: RegulatoryRuleUpdateInput;
  where: RegulatoryRuleWhereUniqueInput;
};

export type RegulatoryRuleUpdateInput = {
  alerts?: InputMaybe<AlertRelateToManyForUpdateInput>;
  code?: InputMaybe<Scalars['String']['input']>;
  description?: InputMaybe<Scalars['String']['input']>;
  effective_from?: InputMaybe<Scalars['DateTime']['input']>;
  effective_to?: InputMaybe<Scalars['DateTime']['input']>;
  jurisdiction?: InputMaybe<Scalars['String']['input']>;
};

export type RegulatoryRuleWhereInput = {
  AND?: InputMaybe<Array<RegulatoryRuleWhereInput>>;
  NOT?: InputMaybe<Array<RegulatoryRuleWhereInput>>;
  OR?: InputMaybe<Array<RegulatoryRuleWhereInput>>;
  alerts?: InputMaybe<AlertManyRelationFilter>;
  code?: InputMaybe<StringFilter>;
  description?: InputMaybe<StringFilter>;
  effective_from?: InputMaybe<DateTimeNullableFilter>;
  effective_to?: InputMaybe<DateTimeNullableFilter>;
  id?: InputMaybe<IdFilter>;
  jurisdiction?: InputMaybe<StringFilter>;
};

export type RegulatoryRuleWhereUniqueInput = {
  code?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['ID']['input']>;
};

export type SoilMeasurement = {
  __typename?: 'SoilMeasurement';
  depthOneLevelSOC?: Maybe<Scalars['Float']['output']>;
  depthThreeLevelSOC?: Maybe<Scalars['Float']['output']>;
  depthTwoLevelSOC?: Maybe<Scalars['Float']['output']>;
  field?: Maybe<Field>;
  id: Scalars['ID']['output'];
  measurementDate?: Maybe<Scalars['DateTime']['output']>;
  moisture?: Maybe<Scalars['Float']['output']>;
  nitrogen?: Maybe<Scalars['Float']['output']>;
  organicMatter?: Maybe<Scalars['Float']['output']>;
  ph?: Maybe<Scalars['Float']['output']>;
  sensorId?: Maybe<Scalars['String']['output']>;
  temperature?: Maybe<Scalars['Float']['output']>;
};

export type SoilMeasurementCreateInput = {
  depthOneLevelSOC?: InputMaybe<Scalars['Float']['input']>;
  depthThreeLevelSOC?: InputMaybe<Scalars['Float']['input']>;
  depthTwoLevelSOC?: InputMaybe<Scalars['Float']['input']>;
  field?: InputMaybe<FieldRelateToOneForCreateInput>;
  measurementDate?: InputMaybe<Scalars['DateTime']['input']>;
  moisture?: InputMaybe<Scalars['Float']['input']>;
  nitrogen?: InputMaybe<Scalars['Float']['input']>;
  organicMatter?: InputMaybe<Scalars['Float']['input']>;
  ph?: InputMaybe<Scalars['Float']['input']>;
  sensorId?: InputMaybe<Scalars['String']['input']>;
  temperature?: InputMaybe<Scalars['Float']['input']>;
};

export type SoilMeasurementManyRelationFilter = {
  every?: InputMaybe<SoilMeasurementWhereInput>;
  none?: InputMaybe<SoilMeasurementWhereInput>;
  some?: InputMaybe<SoilMeasurementWhereInput>;
};

export type SoilMeasurementOrderByInput = {
  depthOneLevelSOC?: InputMaybe<OrderDirection>;
  depthThreeLevelSOC?: InputMaybe<OrderDirection>;
  depthTwoLevelSOC?: InputMaybe<OrderDirection>;
  id?: InputMaybe<OrderDirection>;
  measurementDate?: InputMaybe<OrderDirection>;
  moisture?: InputMaybe<OrderDirection>;
  nitrogen?: InputMaybe<OrderDirection>;
  organicMatter?: InputMaybe<OrderDirection>;
  ph?: InputMaybe<OrderDirection>;
  sensorId?: InputMaybe<OrderDirection>;
  temperature?: InputMaybe<OrderDirection>;
};

export type SoilMeasurementRelateToManyForCreateInput = {
  connect?: InputMaybe<Array<SoilMeasurementWhereUniqueInput>>;
  create?: InputMaybe<Array<SoilMeasurementCreateInput>>;
};

export type SoilMeasurementRelateToManyForUpdateInput = {
  connect?: InputMaybe<Array<SoilMeasurementWhereUniqueInput>>;
  create?: InputMaybe<Array<SoilMeasurementCreateInput>>;
  disconnect?: InputMaybe<Array<SoilMeasurementWhereUniqueInput>>;
  set?: InputMaybe<Array<SoilMeasurementWhereUniqueInput>>;
};

export type SoilMeasurementUpdateArgs = {
  data: SoilMeasurementUpdateInput;
  where: SoilMeasurementWhereUniqueInput;
};

export type SoilMeasurementUpdateInput = {
  depthOneLevelSOC?: InputMaybe<Scalars['Float']['input']>;
  depthThreeLevelSOC?: InputMaybe<Scalars['Float']['input']>;
  depthTwoLevelSOC?: InputMaybe<Scalars['Float']['input']>;
  field?: InputMaybe<FieldRelateToOneForUpdateInput>;
  measurementDate?: InputMaybe<Scalars['DateTime']['input']>;
  moisture?: InputMaybe<Scalars['Float']['input']>;
  nitrogen?: InputMaybe<Scalars['Float']['input']>;
  organicMatter?: InputMaybe<Scalars['Float']['input']>;
  ph?: InputMaybe<Scalars['Float']['input']>;
  sensorId?: InputMaybe<Scalars['String']['input']>;
  temperature?: InputMaybe<Scalars['Float']['input']>;
};

export type SoilMeasurementWhereInput = {
  AND?: InputMaybe<Array<SoilMeasurementWhereInput>>;
  NOT?: InputMaybe<Array<SoilMeasurementWhereInput>>;
  OR?: InputMaybe<Array<SoilMeasurementWhereInput>>;
  depthOneLevelSOC?: InputMaybe<FloatNullableFilter>;
  depthThreeLevelSOC?: InputMaybe<FloatNullableFilter>;
  depthTwoLevelSOC?: InputMaybe<FloatNullableFilter>;
  field?: InputMaybe<FieldWhereInput>;
  id?: InputMaybe<IdFilter>;
  measurementDate?: InputMaybe<DateTimeNullableFilter>;
  moisture?: InputMaybe<FloatNullableFilter>;
  nitrogen?: InputMaybe<FloatNullableFilter>;
  organicMatter?: InputMaybe<FloatNullableFilter>;
  ph?: InputMaybe<FloatNullableFilter>;
  sensorId?: InputMaybe<StringFilter>;
  temperature?: InputMaybe<FloatNullableFilter>;
};

export type SoilMeasurementWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']['input']>;
};

export type SoilMoistureObservation = {
  __typename?: 'SoilMoistureObservation';
  date?: Maybe<Scalars['DateTime']['output']>;
  field?: Maybe<Field>;
  id: Scalars['ID']['output'];
  imageUrl?: Maybe<Scalars['String']['output']>;
  meanMoisture?: Maybe<Scalars['Float']['output']>;
  recordedAt?: Maybe<Scalars['DateTime']['output']>;
};

export type SoilMoistureObservationCreateInput = {
  date?: InputMaybe<Scalars['DateTime']['input']>;
  field?: InputMaybe<FieldRelateToOneForCreateInput>;
  imageUrl?: InputMaybe<Scalars['String']['input']>;
  meanMoisture?: InputMaybe<Scalars['Float']['input']>;
  recordedAt?: InputMaybe<Scalars['DateTime']['input']>;
};

export type SoilMoistureObservationManyRelationFilter = {
  every?: InputMaybe<SoilMoistureObservationWhereInput>;
  none?: InputMaybe<SoilMoistureObservationWhereInput>;
  some?: InputMaybe<SoilMoistureObservationWhereInput>;
};

export type SoilMoistureObservationOrderByInput = {
  date?: InputMaybe<OrderDirection>;
  id?: InputMaybe<OrderDirection>;
  imageUrl?: InputMaybe<OrderDirection>;
  meanMoisture?: InputMaybe<OrderDirection>;
  recordedAt?: InputMaybe<OrderDirection>;
};

export type SoilMoistureObservationRelateToManyForCreateInput = {
  connect?: InputMaybe<Array<SoilMoistureObservationWhereUniqueInput>>;
  create?: InputMaybe<Array<SoilMoistureObservationCreateInput>>;
};

export type SoilMoistureObservationRelateToManyForUpdateInput = {
  connect?: InputMaybe<Array<SoilMoistureObservationWhereUniqueInput>>;
  create?: InputMaybe<Array<SoilMoistureObservationCreateInput>>;
  disconnect?: InputMaybe<Array<SoilMoistureObservationWhereUniqueInput>>;
  set?: InputMaybe<Array<SoilMoistureObservationWhereUniqueInput>>;
};

export type SoilMoistureObservationUpdateArgs = {
  data: SoilMoistureObservationUpdateInput;
  where: SoilMoistureObservationWhereUniqueInput;
};

export type SoilMoistureObservationUpdateInput = {
  date?: InputMaybe<Scalars['DateTime']['input']>;
  field?: InputMaybe<FieldRelateToOneForUpdateInput>;
  imageUrl?: InputMaybe<Scalars['String']['input']>;
  meanMoisture?: InputMaybe<Scalars['Float']['input']>;
  recordedAt?: InputMaybe<Scalars['DateTime']['input']>;
};

export type SoilMoistureObservationWhereInput = {
  AND?: InputMaybe<Array<SoilMoistureObservationWhereInput>>;
  NOT?: InputMaybe<Array<SoilMoistureObservationWhereInput>>;
  OR?: InputMaybe<Array<SoilMoistureObservationWhereInput>>;
  date?: InputMaybe<DateTimeNullableFilter>;
  field?: InputMaybe<FieldWhereInput>;
  id?: InputMaybe<IdFilter>;
  imageUrl?: InputMaybe<StringFilter>;
  meanMoisture?: InputMaybe<FloatNullableFilter>;
  recordedAt?: InputMaybe<DateTimeNullableFilter>;
};

export type SoilMoistureObservationWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']['input']>;
};

export type SoilOrganicCarbonStock = {
  __typename?: 'SoilOrganicCarbonStock';
  field?: Maybe<Field>;
  id: Scalars['ID']['output'];
  imageUrl?: Maybe<Scalars['String']['output']>;
  meanSOC?: Maybe<Scalars['Float']['output']>;
  recordedAt?: Maybe<Scalars['DateTime']['output']>;
  totalSOC?: Maybe<Scalars['Float']['output']>;
  year?: Maybe<Scalars['Int']['output']>;
};

export type SoilOrganicCarbonStockCreateInput = {
  field?: InputMaybe<FieldRelateToOneForCreateInput>;
  imageUrl?: InputMaybe<Scalars['String']['input']>;
  meanSOC?: InputMaybe<Scalars['Float']['input']>;
  recordedAt?: InputMaybe<Scalars['DateTime']['input']>;
  totalSOC?: InputMaybe<Scalars['Float']['input']>;
  year?: InputMaybe<Scalars['Int']['input']>;
};

export type SoilOrganicCarbonStockManyRelationFilter = {
  every?: InputMaybe<SoilOrganicCarbonStockWhereInput>;
  none?: InputMaybe<SoilOrganicCarbonStockWhereInput>;
  some?: InputMaybe<SoilOrganicCarbonStockWhereInput>;
};

export type SoilOrganicCarbonStockOrderByInput = {
  id?: InputMaybe<OrderDirection>;
  imageUrl?: InputMaybe<OrderDirection>;
  meanSOC?: InputMaybe<OrderDirection>;
  recordedAt?: InputMaybe<OrderDirection>;
  totalSOC?: InputMaybe<OrderDirection>;
  year?: InputMaybe<OrderDirection>;
};

export type SoilOrganicCarbonStockRelateToManyForCreateInput = {
  connect?: InputMaybe<Array<SoilOrganicCarbonStockWhereUniqueInput>>;
  create?: InputMaybe<Array<SoilOrganicCarbonStockCreateInput>>;
};

export type SoilOrganicCarbonStockRelateToManyForUpdateInput = {
  connect?: InputMaybe<Array<SoilOrganicCarbonStockWhereUniqueInput>>;
  create?: InputMaybe<Array<SoilOrganicCarbonStockCreateInput>>;
  disconnect?: InputMaybe<Array<SoilOrganicCarbonStockWhereUniqueInput>>;
  set?: InputMaybe<Array<SoilOrganicCarbonStockWhereUniqueInput>>;
};

export type SoilOrganicCarbonStockUpdateArgs = {
  data: SoilOrganicCarbonStockUpdateInput;
  where: SoilOrganicCarbonStockWhereUniqueInput;
};

export type SoilOrganicCarbonStockUpdateInput = {
  field?: InputMaybe<FieldRelateToOneForUpdateInput>;
  imageUrl?: InputMaybe<Scalars['String']['input']>;
  meanSOC?: InputMaybe<Scalars['Float']['input']>;
  recordedAt?: InputMaybe<Scalars['DateTime']['input']>;
  totalSOC?: InputMaybe<Scalars['Float']['input']>;
  year?: InputMaybe<Scalars['Int']['input']>;
};

export type SoilOrganicCarbonStockWhereInput = {
  AND?: InputMaybe<Array<SoilOrganicCarbonStockWhereInput>>;
  NOT?: InputMaybe<Array<SoilOrganicCarbonStockWhereInput>>;
  OR?: InputMaybe<Array<SoilOrganicCarbonStockWhereInput>>;
  field?: InputMaybe<FieldWhereInput>;
  id?: InputMaybe<IdFilter>;
  imageUrl?: InputMaybe<StringFilter>;
  meanSOC?: InputMaybe<FloatNullableFilter>;
  recordedAt?: InputMaybe<DateTimeNullableFilter>;
  totalSOC?: InputMaybe<FloatNullableFilter>;
  year?: InputMaybe<IntNullableFilter>;
};

export type SoilOrganicCarbonStockWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']['input']>;
};

export type StringFilter = {
  contains?: InputMaybe<Scalars['String']['input']>;
  endsWith?: InputMaybe<Scalars['String']['input']>;
  equals?: InputMaybe<Scalars['String']['input']>;
  gt?: InputMaybe<Scalars['String']['input']>;
  gte?: InputMaybe<Scalars['String']['input']>;
  in?: InputMaybe<Array<Scalars['String']['input']>>;
  lt?: InputMaybe<Scalars['String']['input']>;
  lte?: InputMaybe<Scalars['String']['input']>;
  mode?: InputMaybe<QueryMode>;
  not?: InputMaybe<NestedStringFilter>;
  notIn?: InputMaybe<Array<Scalars['String']['input']>>;
  startsWith?: InputMaybe<Scalars['String']['input']>;
};

export type StringNullableFilter = {
  contains?: InputMaybe<Scalars['String']['input']>;
  endsWith?: InputMaybe<Scalars['String']['input']>;
  equals?: InputMaybe<Scalars['String']['input']>;
  gt?: InputMaybe<Scalars['String']['input']>;
  gte?: InputMaybe<Scalars['String']['input']>;
  in?: InputMaybe<Array<Scalars['String']['input']>>;
  lt?: InputMaybe<Scalars['String']['input']>;
  lte?: InputMaybe<Scalars['String']['input']>;
  mode?: InputMaybe<QueryMode>;
  not?: InputMaybe<StringNullableFilter>;
  notIn?: InputMaybe<Array<Scalars['String']['input']>>;
  startsWith?: InputMaybe<Scalars['String']['input']>;
};

export type Subscription = {
  __typename?: 'Subscription';
  currentPeriodEnd?: Maybe<Scalars['DateTime']['output']>;
  endDate?: Maybe<Scalars['DateTime']['output']>;
  id: Scalars['ID']['output'];
  organisation?: Maybe<Organisation>;
  plan?: Maybe<Plan>;
  price?: Maybe<PlanPrice>;
  referralRedemptions?: Maybe<Array<ReferralRedemption>>;
  referralRedemptionsCount?: Maybe<Scalars['Int']['output']>;
  seats?: Maybe<Scalars['Int']['output']>;
  startDate?: Maybe<Scalars['DateTime']['output']>;
  status?: Maybe<Scalars['String']['output']>;
  stripeSubscriptionId?: Maybe<Scalars['String']['output']>;
};


export type SubscriptionReferralRedemptionsArgs = {
  cursor?: InputMaybe<ReferralRedemptionWhereUniqueInput>;
  orderBy?: Array<ReferralRedemptionOrderByInput>;
  skip?: Scalars['Int']['input'];
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: ReferralRedemptionWhereInput;
};


export type SubscriptionReferralRedemptionsCountArgs = {
  where?: ReferralRedemptionWhereInput;
};

export type SubscriptionCreateInput = {
  currentPeriodEnd?: InputMaybe<Scalars['DateTime']['input']>;
  endDate?: InputMaybe<Scalars['DateTime']['input']>;
  organisation?: InputMaybe<OrganisationRelateToOneForCreateInput>;
  plan?: InputMaybe<PlanRelateToOneForCreateInput>;
  price?: InputMaybe<PlanPriceRelateToOneForCreateInput>;
  referralRedemptions?: InputMaybe<ReferralRedemptionRelateToManyForCreateInput>;
  seats?: InputMaybe<Scalars['Int']['input']>;
  startDate?: InputMaybe<Scalars['DateTime']['input']>;
  status?: InputMaybe<Scalars['String']['input']>;
  stripeSubscriptionId?: InputMaybe<Scalars['String']['input']>;
};

export type SubscriptionManyRelationFilter = {
  every?: InputMaybe<SubscriptionWhereInput>;
  none?: InputMaybe<SubscriptionWhereInput>;
  some?: InputMaybe<SubscriptionWhereInput>;
};

export type SubscriptionOrderByInput = {
  currentPeriodEnd?: InputMaybe<OrderDirection>;
  endDate?: InputMaybe<OrderDirection>;
  id?: InputMaybe<OrderDirection>;
  seats?: InputMaybe<OrderDirection>;
  startDate?: InputMaybe<OrderDirection>;
  status?: InputMaybe<OrderDirection>;
  stripeSubscriptionId?: InputMaybe<OrderDirection>;
};

export type SubscriptionRelateToManyForCreateInput = {
  connect?: InputMaybe<Array<SubscriptionWhereUniqueInput>>;
  create?: InputMaybe<Array<SubscriptionCreateInput>>;
};

export type SubscriptionRelateToManyForUpdateInput = {
  connect?: InputMaybe<Array<SubscriptionWhereUniqueInput>>;
  create?: InputMaybe<Array<SubscriptionCreateInput>>;
  disconnect?: InputMaybe<Array<SubscriptionWhereUniqueInput>>;
  set?: InputMaybe<Array<SubscriptionWhereUniqueInput>>;
};

export type SubscriptionRelateToOneForCreateInput = {
  connect?: InputMaybe<SubscriptionWhereUniqueInput>;
  create?: InputMaybe<SubscriptionCreateInput>;
};

export type SubscriptionRelateToOneForUpdateInput = {
  connect?: InputMaybe<SubscriptionWhereUniqueInput>;
  create?: InputMaybe<SubscriptionCreateInput>;
  disconnect?: InputMaybe<Scalars['Boolean']['input']>;
};

export type SubscriptionUpdateArgs = {
  data: SubscriptionUpdateInput;
  where: SubscriptionWhereUniqueInput;
};

export type SubscriptionUpdateInput = {
  currentPeriodEnd?: InputMaybe<Scalars['DateTime']['input']>;
  endDate?: InputMaybe<Scalars['DateTime']['input']>;
  organisation?: InputMaybe<OrganisationRelateToOneForUpdateInput>;
  plan?: InputMaybe<PlanRelateToOneForUpdateInput>;
  price?: InputMaybe<PlanPriceRelateToOneForUpdateInput>;
  referralRedemptions?: InputMaybe<ReferralRedemptionRelateToManyForUpdateInput>;
  seats?: InputMaybe<Scalars['Int']['input']>;
  startDate?: InputMaybe<Scalars['DateTime']['input']>;
  status?: InputMaybe<Scalars['String']['input']>;
  stripeSubscriptionId?: InputMaybe<Scalars['String']['input']>;
};

export type SubscriptionWhereInput = {
  AND?: InputMaybe<Array<SubscriptionWhereInput>>;
  NOT?: InputMaybe<Array<SubscriptionWhereInput>>;
  OR?: InputMaybe<Array<SubscriptionWhereInput>>;
  currentPeriodEnd?: InputMaybe<DateTimeNullableFilter>;
  endDate?: InputMaybe<DateTimeNullableFilter>;
  id?: InputMaybe<IdFilter>;
  organisation?: InputMaybe<OrganisationWhereInput>;
  plan?: InputMaybe<PlanWhereInput>;
  price?: InputMaybe<PlanPriceWhereInput>;
  referralRedemptions?: InputMaybe<ReferralRedemptionManyRelationFilter>;
  seats?: InputMaybe<IntNullableFilter>;
  startDate?: InputMaybe<DateTimeNullableFilter>;
  status?: InputMaybe<StringNullableFilter>;
  stripeSubscriptionId?: InputMaybe<StringFilter>;
};

export type SubscriptionWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']['input']>;
  stripeSubscriptionId?: InputMaybe<Scalars['String']['input']>;
};

export type SustainablePractice = {
  __typename?: 'SustainablePractice';
  carbonOffsetFactors?: Maybe<Array<CarbonOffsetFactor>>;
  carbonOffsetFactorsCount?: Maybe<Scalars['Int']['output']>;
  category?: Maybe<SustainablePracticeCategory>;
  createdAt?: Maybe<Scalars['DateTime']['output']>;
  description?: Maybe<Scalars['String']['output']>;
  events?: Maybe<Array<SustainablePracticeEvent>>;
  eventsCount?: Maybe<Scalars['Int']['output']>;
  id: Scalars['ID']['output'];
  name?: Maybe<Scalars['String']['output']>;
};


export type SustainablePracticeCarbonOffsetFactorsArgs = {
  cursor?: InputMaybe<CarbonOffsetFactorWhereUniqueInput>;
  orderBy?: Array<CarbonOffsetFactorOrderByInput>;
  skip?: Scalars['Int']['input'];
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: CarbonOffsetFactorWhereInput;
};


export type SustainablePracticeCarbonOffsetFactorsCountArgs = {
  where?: CarbonOffsetFactorWhereInput;
};


export type SustainablePracticeEventsArgs = {
  cursor?: InputMaybe<SustainablePracticeEventWhereUniqueInput>;
  orderBy?: Array<SustainablePracticeEventOrderByInput>;
  skip?: Scalars['Int']['input'];
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: SustainablePracticeEventWhereInput;
};


export type SustainablePracticeEventsCountArgs = {
  where?: SustainablePracticeEventWhereInput;
};

export type SustainablePracticeCategory = {
  __typename?: 'SustainablePracticeCategory';
  description?: Maybe<Scalars['String']['output']>;
  id: Scalars['ID']['output'];
  name?: Maybe<Scalars['String']['output']>;
  practices?: Maybe<Array<SustainablePractice>>;
  practicesCount?: Maybe<Scalars['Int']['output']>;
};


export type SustainablePracticeCategoryPracticesArgs = {
  cursor?: InputMaybe<SustainablePracticeWhereUniqueInput>;
  orderBy?: Array<SustainablePracticeOrderByInput>;
  skip?: Scalars['Int']['input'];
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: SustainablePracticeWhereInput;
};


export type SustainablePracticeCategoryPracticesCountArgs = {
  where?: SustainablePracticeWhereInput;
};

export type SustainablePracticeCategoryCreateInput = {
  description?: InputMaybe<Scalars['String']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
  practices?: InputMaybe<SustainablePracticeRelateToManyForCreateInput>;
};

export type SustainablePracticeCategoryOrderByInput = {
  description?: InputMaybe<OrderDirection>;
  id?: InputMaybe<OrderDirection>;
  name?: InputMaybe<OrderDirection>;
};

export type SustainablePracticeCategoryRelateToOneForCreateInput = {
  connect?: InputMaybe<SustainablePracticeCategoryWhereUniqueInput>;
  create?: InputMaybe<SustainablePracticeCategoryCreateInput>;
};

export type SustainablePracticeCategoryRelateToOneForUpdateInput = {
  connect?: InputMaybe<SustainablePracticeCategoryWhereUniqueInput>;
  create?: InputMaybe<SustainablePracticeCategoryCreateInput>;
  disconnect?: InputMaybe<Scalars['Boolean']['input']>;
};

export type SustainablePracticeCategoryUpdateArgs = {
  data: SustainablePracticeCategoryUpdateInput;
  where: SustainablePracticeCategoryWhereUniqueInput;
};

export type SustainablePracticeCategoryUpdateInput = {
  description?: InputMaybe<Scalars['String']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
  practices?: InputMaybe<SustainablePracticeRelateToManyForUpdateInput>;
};

export type SustainablePracticeCategoryWhereInput = {
  AND?: InputMaybe<Array<SustainablePracticeCategoryWhereInput>>;
  NOT?: InputMaybe<Array<SustainablePracticeCategoryWhereInput>>;
  OR?: InputMaybe<Array<SustainablePracticeCategoryWhereInput>>;
  description?: InputMaybe<StringFilter>;
  id?: InputMaybe<IdFilter>;
  name?: InputMaybe<StringFilter>;
  practices?: InputMaybe<SustainablePracticeManyRelationFilter>;
};

export type SustainablePracticeCategoryWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']['input']>;
};

export type SustainablePracticeCreateInput = {
  carbonOffsetFactors?: InputMaybe<CarbonOffsetFactorRelateToManyForCreateInput>;
  category?: InputMaybe<SustainablePracticeCategoryRelateToOneForCreateInput>;
  createdAt?: InputMaybe<Scalars['DateTime']['input']>;
  description?: InputMaybe<Scalars['String']['input']>;
  events?: InputMaybe<SustainablePracticeEventRelateToManyForCreateInput>;
  name?: InputMaybe<Scalars['String']['input']>;
};

export type SustainablePracticeEvent = {
  __typename?: 'SustainablePracticeEvent';
  appliedDate?: Maybe<Scalars['DateTime']['output']>;
  createdAt?: Maybe<Scalars['DateTime']['output']>;
  field?: Maybe<Field>;
  id: Scalars['ID']['output'];
  parameters?: Maybe<Scalars['JSON']['output']>;
  practice?: Maybe<SustainablePractice>;
  targetImpact?: Maybe<Scalars['Float']['output']>;
};

export type SustainablePracticeEventCreateInput = {
  appliedDate?: InputMaybe<Scalars['DateTime']['input']>;
  createdAt?: InputMaybe<Scalars['DateTime']['input']>;
  field?: InputMaybe<FieldRelateToOneForCreateInput>;
  parameters?: InputMaybe<Scalars['JSON']['input']>;
  practice?: InputMaybe<SustainablePracticeRelateToOneForCreateInput>;
  targetImpact?: InputMaybe<Scalars['Float']['input']>;
};

export type SustainablePracticeEventManyRelationFilter = {
  every?: InputMaybe<SustainablePracticeEventWhereInput>;
  none?: InputMaybe<SustainablePracticeEventWhereInput>;
  some?: InputMaybe<SustainablePracticeEventWhereInput>;
};

export type SustainablePracticeEventOrderByInput = {
  appliedDate?: InputMaybe<OrderDirection>;
  createdAt?: InputMaybe<OrderDirection>;
  id?: InputMaybe<OrderDirection>;
  targetImpact?: InputMaybe<OrderDirection>;
};

export type SustainablePracticeEventRelateToManyForCreateInput = {
  connect?: InputMaybe<Array<SustainablePracticeEventWhereUniqueInput>>;
  create?: InputMaybe<Array<SustainablePracticeEventCreateInput>>;
};

export type SustainablePracticeEventRelateToManyForUpdateInput = {
  connect?: InputMaybe<Array<SustainablePracticeEventWhereUniqueInput>>;
  create?: InputMaybe<Array<SustainablePracticeEventCreateInput>>;
  disconnect?: InputMaybe<Array<SustainablePracticeEventWhereUniqueInput>>;
  set?: InputMaybe<Array<SustainablePracticeEventWhereUniqueInput>>;
};

export type SustainablePracticeEventUpdateArgs = {
  data: SustainablePracticeEventUpdateInput;
  where: SustainablePracticeEventWhereUniqueInput;
};

export type SustainablePracticeEventUpdateInput = {
  appliedDate?: InputMaybe<Scalars['DateTime']['input']>;
  createdAt?: InputMaybe<Scalars['DateTime']['input']>;
  field?: InputMaybe<FieldRelateToOneForUpdateInput>;
  parameters?: InputMaybe<Scalars['JSON']['input']>;
  practice?: InputMaybe<SustainablePracticeRelateToOneForUpdateInput>;
  targetImpact?: InputMaybe<Scalars['Float']['input']>;
};

export type SustainablePracticeEventWhereInput = {
  AND?: InputMaybe<Array<SustainablePracticeEventWhereInput>>;
  NOT?: InputMaybe<Array<SustainablePracticeEventWhereInput>>;
  OR?: InputMaybe<Array<SustainablePracticeEventWhereInput>>;
  appliedDate?: InputMaybe<DateTimeNullableFilter>;
  createdAt?: InputMaybe<DateTimeNullableFilter>;
  field?: InputMaybe<FieldWhereInput>;
  id?: InputMaybe<IdFilter>;
  practice?: InputMaybe<SustainablePracticeWhereInput>;
  targetImpact?: InputMaybe<FloatNullableFilter>;
};

export type SustainablePracticeEventWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']['input']>;
};

export type SustainablePracticeManyRelationFilter = {
  every?: InputMaybe<SustainablePracticeWhereInput>;
  none?: InputMaybe<SustainablePracticeWhereInput>;
  some?: InputMaybe<SustainablePracticeWhereInput>;
};

export type SustainablePracticeOrderByInput = {
  createdAt?: InputMaybe<OrderDirection>;
  description?: InputMaybe<OrderDirection>;
  id?: InputMaybe<OrderDirection>;
  name?: InputMaybe<OrderDirection>;
};

export type SustainablePracticeRelateToManyForCreateInput = {
  connect?: InputMaybe<Array<SustainablePracticeWhereUniqueInput>>;
  create?: InputMaybe<Array<SustainablePracticeCreateInput>>;
};

export type SustainablePracticeRelateToManyForUpdateInput = {
  connect?: InputMaybe<Array<SustainablePracticeWhereUniqueInput>>;
  create?: InputMaybe<Array<SustainablePracticeCreateInput>>;
  disconnect?: InputMaybe<Array<SustainablePracticeWhereUniqueInput>>;
  set?: InputMaybe<Array<SustainablePracticeWhereUniqueInput>>;
};

export type SustainablePracticeRelateToOneForCreateInput = {
  connect?: InputMaybe<SustainablePracticeWhereUniqueInput>;
  create?: InputMaybe<SustainablePracticeCreateInput>;
};

export type SustainablePracticeRelateToOneForUpdateInput = {
  connect?: InputMaybe<SustainablePracticeWhereUniqueInput>;
  create?: InputMaybe<SustainablePracticeCreateInput>;
  disconnect?: InputMaybe<Scalars['Boolean']['input']>;
};

export type SustainablePracticeUpdateArgs = {
  data: SustainablePracticeUpdateInput;
  where: SustainablePracticeWhereUniqueInput;
};

export type SustainablePracticeUpdateInput = {
  carbonOffsetFactors?: InputMaybe<CarbonOffsetFactorRelateToManyForUpdateInput>;
  category?: InputMaybe<SustainablePracticeCategoryRelateToOneForUpdateInput>;
  createdAt?: InputMaybe<Scalars['DateTime']['input']>;
  description?: InputMaybe<Scalars['String']['input']>;
  events?: InputMaybe<SustainablePracticeEventRelateToManyForUpdateInput>;
  name?: InputMaybe<Scalars['String']['input']>;
};

export type SustainablePracticeWhereInput = {
  AND?: InputMaybe<Array<SustainablePracticeWhereInput>>;
  NOT?: InputMaybe<Array<SustainablePracticeWhereInput>>;
  OR?: InputMaybe<Array<SustainablePracticeWhereInput>>;
  carbonOffsetFactors?: InputMaybe<CarbonOffsetFactorManyRelationFilter>;
  category?: InputMaybe<SustainablePracticeCategoryWhereInput>;
  createdAt?: InputMaybe<DateTimeNullableFilter>;
  description?: InputMaybe<StringFilter>;
  events?: InputMaybe<SustainablePracticeEventManyRelationFilter>;
  id?: InputMaybe<IdFilter>;
  name?: InputMaybe<StringFilter>;
};

export type SustainablePracticeWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']['input']>;
};

export type Tag = {
  __typename?: 'Tag';
  id: Scalars['ID']['output'];
  name?: Maybe<Scalars['String']['output']>;
  posts?: Maybe<Array<Post>>;
  postsCount?: Maybe<Scalars['Int']['output']>;
  slug?: Maybe<Scalars['String']['output']>;
};


export type TagPostsArgs = {
  cursor?: InputMaybe<PostWhereUniqueInput>;
  orderBy?: Array<PostOrderByInput>;
  skip?: Scalars['Int']['input'];
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: PostWhereInput;
};


export type TagPostsCountArgs = {
  where?: PostWhereInput;
};

export type TagCreateInput = {
  name?: InputMaybe<Scalars['String']['input']>;
  posts?: InputMaybe<PostRelateToManyForCreateInput>;
  slug?: InputMaybe<Scalars['String']['input']>;
};

export type TagManyRelationFilter = {
  every?: InputMaybe<TagWhereInput>;
  none?: InputMaybe<TagWhereInput>;
  some?: InputMaybe<TagWhereInput>;
};

export type TagOrderByInput = {
  id?: InputMaybe<OrderDirection>;
  name?: InputMaybe<OrderDirection>;
  slug?: InputMaybe<OrderDirection>;
};

export type TagRelateToManyForCreateInput = {
  connect?: InputMaybe<Array<TagWhereUniqueInput>>;
  create?: InputMaybe<Array<TagCreateInput>>;
};

export type TagRelateToManyForUpdateInput = {
  connect?: InputMaybe<Array<TagWhereUniqueInput>>;
  create?: InputMaybe<Array<TagCreateInput>>;
  disconnect?: InputMaybe<Array<TagWhereUniqueInput>>;
  set?: InputMaybe<Array<TagWhereUniqueInput>>;
};

export type TagUpdateArgs = {
  data: TagUpdateInput;
  where: TagWhereUniqueInput;
};

export type TagUpdateInput = {
  name?: InputMaybe<Scalars['String']['input']>;
  posts?: InputMaybe<PostRelateToManyForUpdateInput>;
  slug?: InputMaybe<Scalars['String']['input']>;
};

export type TagWhereInput = {
  AND?: InputMaybe<Array<TagWhereInput>>;
  NOT?: InputMaybe<Array<TagWhereInput>>;
  OR?: InputMaybe<Array<TagWhereInput>>;
  id?: InputMaybe<IdFilter>;
  name?: InputMaybe<StringFilter>;
  posts?: InputMaybe<PostManyRelationFilter>;
  slug?: InputMaybe<StringFilter>;
};

export type TagWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']['input']>;
  slug?: InputMaybe<Scalars['String']['input']>;
};

export type User = {
  __typename?: 'User';
  chats?: Maybe<Array<Chat>>;
  chatsCount?: Maybe<Scalars['Int']['output']>;
  createdAt?: Maybe<Scalars['DateTime']['output']>;
  email?: Maybe<Scalars['String']['output']>;
  farms?: Maybe<Array<Farm>>;
  farmsCount?: Maybe<Scalars['Int']['output']>;
  id: Scalars['ID']['output'];
  isAdmin?: Maybe<Scalars['Boolean']['output']>;
  isReferralPartner?: Maybe<Scalars['Boolean']['output']>;
  memberships?: Maybe<Array<Membership>>;
  membershipsCount?: Maybe<Scalars['Int']['output']>;
  name?: Maybe<Scalars['String']['output']>;
  organisation?: Maybe<Organisation>;
  password?: Maybe<PasswordState>;
  redemptions?: Maybe<Array<ReferralRedemption>>;
  redemptionsCount?: Maybe<Scalars['Int']['output']>;
  referralPartner?: Maybe<ReferralPartner>;
};


export type UserChatsArgs = {
  cursor?: InputMaybe<ChatWhereUniqueInput>;
  orderBy?: Array<ChatOrderByInput>;
  skip?: Scalars['Int']['input'];
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: ChatWhereInput;
};


export type UserChatsCountArgs = {
  where?: ChatWhereInput;
};


export type UserFarmsArgs = {
  cursor?: InputMaybe<FarmWhereUniqueInput>;
  orderBy?: Array<FarmOrderByInput>;
  skip?: Scalars['Int']['input'];
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: FarmWhereInput;
};


export type UserFarmsCountArgs = {
  where?: FarmWhereInput;
};


export type UserMembershipsArgs = {
  cursor?: InputMaybe<MembershipWhereUniqueInput>;
  orderBy?: Array<MembershipOrderByInput>;
  skip?: Scalars['Int']['input'];
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: MembershipWhereInput;
};


export type UserMembershipsCountArgs = {
  where?: MembershipWhereInput;
};


export type UserRedemptionsArgs = {
  cursor?: InputMaybe<ReferralRedemptionWhereUniqueInput>;
  orderBy?: Array<ReferralRedemptionOrderByInput>;
  skip?: Scalars['Int']['input'];
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: ReferralRedemptionWhereInput;
};


export type UserRedemptionsCountArgs = {
  where?: ReferralRedemptionWhereInput;
};

export type UserAuthenticationWithPasswordFailure = {
  __typename?: 'UserAuthenticationWithPasswordFailure';
  message: Scalars['String']['output'];
};

export type UserAuthenticationWithPasswordResult = UserAuthenticationWithPasswordFailure | UserAuthenticationWithPasswordSuccess;

export type UserAuthenticationWithPasswordSuccess = {
  __typename?: 'UserAuthenticationWithPasswordSuccess';
  item: User;
  sessionToken: Scalars['String']['output'];
};

export type UserCreateInput = {
  chats?: InputMaybe<ChatRelateToManyForCreateInput>;
  createdAt?: InputMaybe<Scalars['DateTime']['input']>;
  email?: InputMaybe<Scalars['String']['input']>;
  farms?: InputMaybe<FarmRelateToManyForCreateInput>;
  isAdmin?: InputMaybe<Scalars['Boolean']['input']>;
  isReferralPartner?: InputMaybe<Scalars['Boolean']['input']>;
  memberships?: InputMaybe<MembershipRelateToManyForCreateInput>;
  name?: InputMaybe<Scalars['String']['input']>;
  organisation?: InputMaybe<OrganisationRelateToOneForCreateInput>;
  password?: InputMaybe<Scalars['String']['input']>;
  redemptions?: InputMaybe<ReferralRedemptionRelateToManyForCreateInput>;
  referralPartner?: InputMaybe<ReferralPartnerRelateToOneForCreateInput>;
};

export type UserManyRelationFilter = {
  every?: InputMaybe<UserWhereInput>;
  none?: InputMaybe<UserWhereInput>;
  some?: InputMaybe<UserWhereInput>;
};

export type UserOrderByInput = {
  createdAt?: InputMaybe<OrderDirection>;
  email?: InputMaybe<OrderDirection>;
  id?: InputMaybe<OrderDirection>;
  isAdmin?: InputMaybe<OrderDirection>;
  isReferralPartner?: InputMaybe<OrderDirection>;
  name?: InputMaybe<OrderDirection>;
};

export type UserRelateToManyForCreateInput = {
  connect?: InputMaybe<Array<UserWhereUniqueInput>>;
  create?: InputMaybe<Array<UserCreateInput>>;
};

export type UserRelateToManyForUpdateInput = {
  connect?: InputMaybe<Array<UserWhereUniqueInput>>;
  create?: InputMaybe<Array<UserCreateInput>>;
  disconnect?: InputMaybe<Array<UserWhereUniqueInput>>;
  set?: InputMaybe<Array<UserWhereUniqueInput>>;
};

export type UserRelateToOneForCreateInput = {
  connect?: InputMaybe<UserWhereUniqueInput>;
  create?: InputMaybe<UserCreateInput>;
};

export type UserRelateToOneForUpdateInput = {
  connect?: InputMaybe<UserWhereUniqueInput>;
  create?: InputMaybe<UserCreateInput>;
  disconnect?: InputMaybe<Scalars['Boolean']['input']>;
};

export type UserUpdateArgs = {
  data: UserUpdateInput;
  where: UserWhereUniqueInput;
};

export type UserUpdateInput = {
  chats?: InputMaybe<ChatRelateToManyForUpdateInput>;
  createdAt?: InputMaybe<Scalars['DateTime']['input']>;
  email?: InputMaybe<Scalars['String']['input']>;
  farms?: InputMaybe<FarmRelateToManyForUpdateInput>;
  isAdmin?: InputMaybe<Scalars['Boolean']['input']>;
  isReferralPartner?: InputMaybe<Scalars['Boolean']['input']>;
  memberships?: InputMaybe<MembershipRelateToManyForUpdateInput>;
  name?: InputMaybe<Scalars['String']['input']>;
  organisation?: InputMaybe<OrganisationRelateToOneForUpdateInput>;
  password?: InputMaybe<Scalars['String']['input']>;
  redemptions?: InputMaybe<ReferralRedemptionRelateToManyForUpdateInput>;
  referralPartner?: InputMaybe<ReferralPartnerRelateToOneForUpdateInput>;
};

export type UserWhereInput = {
  AND?: InputMaybe<Array<UserWhereInput>>;
  NOT?: InputMaybe<Array<UserWhereInput>>;
  OR?: InputMaybe<Array<UserWhereInput>>;
  chats?: InputMaybe<ChatManyRelationFilter>;
  createdAt?: InputMaybe<DateTimeNullableFilter>;
  email?: InputMaybe<StringFilter>;
  farms?: InputMaybe<FarmManyRelationFilter>;
  id?: InputMaybe<IdFilter>;
  isAdmin?: InputMaybe<BooleanFilter>;
  isReferralPartner?: InputMaybe<BooleanFilter>;
  memberships?: InputMaybe<MembershipManyRelationFilter>;
  name?: InputMaybe<StringFilter>;
  organisation?: InputMaybe<OrganisationWhereInput>;
  password?: InputMaybe<PasswordFilter>;
  redemptions?: InputMaybe<ReferralRedemptionManyRelationFilter>;
  referralPartner?: InputMaybe<ReferralPartnerWhereInput>;
};

export type UserWhereUniqueInput = {
  email?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['ID']['input']>;
};

export type WeatherRecord = {
  __typename?: 'WeatherRecord';
  date?: Maybe<Scalars['DateTime']['output']>;
  field?: Maybe<Field>;
  humidity?: Maybe<Scalars['Float']['output']>;
  id: Scalars['ID']['output'];
  precipitationMm?: Maybe<Scalars['Float']['output']>;
  temperature?: Maybe<Scalars['Float']['output']>;
};

export type WeatherRecordCreateInput = {
  date?: InputMaybe<Scalars['DateTime']['input']>;
  field?: InputMaybe<FieldRelateToOneForCreateInput>;
  humidity?: InputMaybe<Scalars['Float']['input']>;
  precipitationMm?: InputMaybe<Scalars['Float']['input']>;
  temperature?: InputMaybe<Scalars['Float']['input']>;
};

export type WeatherRecordManyRelationFilter = {
  every?: InputMaybe<WeatherRecordWhereInput>;
  none?: InputMaybe<WeatherRecordWhereInput>;
  some?: InputMaybe<WeatherRecordWhereInput>;
};

export type WeatherRecordOrderByInput = {
  date?: InputMaybe<OrderDirection>;
  humidity?: InputMaybe<OrderDirection>;
  id?: InputMaybe<OrderDirection>;
  precipitationMm?: InputMaybe<OrderDirection>;
  temperature?: InputMaybe<OrderDirection>;
};

export type WeatherRecordRelateToManyForCreateInput = {
  connect?: InputMaybe<Array<WeatherRecordWhereUniqueInput>>;
  create?: InputMaybe<Array<WeatherRecordCreateInput>>;
};

export type WeatherRecordRelateToManyForUpdateInput = {
  connect?: InputMaybe<Array<WeatherRecordWhereUniqueInput>>;
  create?: InputMaybe<Array<WeatherRecordCreateInput>>;
  disconnect?: InputMaybe<Array<WeatherRecordWhereUniqueInput>>;
  set?: InputMaybe<Array<WeatherRecordWhereUniqueInput>>;
};

export type WeatherRecordUpdateArgs = {
  data: WeatherRecordUpdateInput;
  where: WeatherRecordWhereUniqueInput;
};

export type WeatherRecordUpdateInput = {
  date?: InputMaybe<Scalars['DateTime']['input']>;
  field?: InputMaybe<FieldRelateToOneForUpdateInput>;
  humidity?: InputMaybe<Scalars['Float']['input']>;
  precipitationMm?: InputMaybe<Scalars['Float']['input']>;
  temperature?: InputMaybe<Scalars['Float']['input']>;
};

export type WeatherRecordWhereInput = {
  AND?: InputMaybe<Array<WeatherRecordWhereInput>>;
  NOT?: InputMaybe<Array<WeatherRecordWhereInput>>;
  OR?: InputMaybe<Array<WeatherRecordWhereInput>>;
  date?: InputMaybe<DateTimeFilter>;
  field?: InputMaybe<FieldWhereInput>;
  humidity?: InputMaybe<FloatNullableFilter>;
  id?: InputMaybe<IdFilter>;
  precipitationMm?: InputMaybe<FloatNullableFilter>;
  temperature?: InputMaybe<FloatNullableFilter>;
};

export type WeatherRecordWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']['input']>;
};

export type GetProductsQueryVariables = Exact<{
  where?: InputMaybe<ProductWhereInput>;
  orderBy?: InputMaybe<Array<ProductOrderByInput> | ProductOrderByInput>;
  take?: InputMaybe<Scalars['Int']['input']>;
  skip?: InputMaybe<Scalars['Int']['input']>;
}>;


export type GetProductsQuery = { __typename?: 'Query', productsCount?: number | null, products?: Array<{ __typename?: 'Product', id: string, name?: string | null, registration_no?: string | null, product_type?: string | null, hazard_class?: string | null, country?: string | null, stato_amministrativo?: string | null }> | null };

export type GetCategoryKpiQueryVariables = Exact<{
  id: Scalars['ID']['input'];
}>;


export type GetCategoryKpiQuery = { __typename?: 'Query', categoryKPI?: { __typename?: 'CategoryKPI', id: string, name?: string | null, kpis?: Array<{ __typename?: 'KPI', id: string, title?: string | null, currentValue?: number | null, target?: number | null, description?: string | null }> | null } | null };

export type GetVisibleKpIsQueryVariables = Exact<{ [key: string]: never; }>;


export type GetVisibleKpIsQuery = { __typename?: 'Query', kPIS?: Array<{ __typename?: 'KPI', id: string, title?: string | null, currentValue?: number | null, target?: number | null, category?: { __typename?: 'CategoryKPI', id: string, name?: string | null } | null }> | null };

export type UpsertUserMutationVariables = Exact<{
  email: Scalars['String']['input'];
  name: Scalars['String']['input'];
}>;


export type UpsertUserMutation = { __typename?: 'Mutation', createUser?: { __typename?: 'User', id: string } | null };

export type AuthenticateMutationVariables = Exact<{
  email: Scalars['String']['input'];
  password: Scalars['String']['input'];
}>;


export type AuthenticateMutation = { __typename?: 'Mutation', authenticateUserWithPassword?: { __typename?: 'UserAuthenticationWithPasswordFailure', message: string } | { __typename?: 'UserAuthenticationWithPasswordSuccess', sessionToken: string, item: { __typename?: 'User', id: string, name?: string | null, email?: string | null, isAdmin?: boolean | null } } | null };

export type FindUserQueryVariables = Exact<{
  email: Scalars['String']['input'];
}>;


export type FindUserQuery = { __typename?: 'Query', users?: Array<{ __typename?: 'User', id: string, name?: string | null, email?: string | null, isAdmin?: boolean | null }> | null };

export type CreateUserMutationVariables = Exact<{
  email: Scalars['String']['input'];
  name: Scalars['String']['input'];
}>;


export type CreateUserMutation = { __typename?: 'Mutation', createUser?: { __typename?: 'User', id: string, name?: string | null, email?: string | null, isAdmin?: boolean | null } | null };

export type CreateFarmMutationVariables = Exact<{
  name: Scalars['String']['input'];
  createdById: Scalars['ID']['input'];
  location: Scalars['JSON']['input'];
}>;


export type CreateFarmMutation = { __typename?: 'Mutation', createFarm?: { __typename?: 'Farm', id: string, name?: string | null, location?: any | null } | null };

export type GetFarmsQueryVariables = Exact<{ [key: string]: never; }>;


export type GetFarmsQuery = { __typename?: 'Query', farms?: Array<{ __typename?: 'Farm', id: string, name?: string | null, location?: any | null, isDefault?: boolean | null, fields?: Array<{ __typename?: 'Field', id: string, name?: string | null, areaHectares?: number | null }> | null }> | null };

export type GetFarmQueryVariables = Exact<{
  id: Scalars['ID']['input'];
}>;


export type GetFarmQuery = { __typename?: 'Query', farm?: { __typename?: 'Farm', id: string, name?: string | null, location?: any | null, isDefault?: boolean | null, fields?: Array<{ __typename?: 'Field', id: string, name?: string | null, areaHectares?: number | null }> | null } | null };

export type UpdateFarmMutationVariables = Exact<{
  id: Scalars['ID']['input'];
  name: Scalars['String']['input'];
  location: Scalars['JSON']['input'];
}>;


export type UpdateFarmMutation = { __typename?: 'Mutation', updateFarm?: { __typename?: 'Farm', id: string, name?: string | null, location?: any | null } | null };

export type DeleteFarmMutationVariables = Exact<{
  id: Scalars['ID']['input'];
}>;


export type DeleteFarmMutation = { __typename?: 'Mutation', deleteFarm?: { __typename?: 'Farm', id: string } | null };

export type GetFieldsQueryVariables = Exact<{
  farmId: Scalars['ID']['input'];
}>;


export type GetFieldsQuery = { __typename?: 'Query', fields?: Array<{ __typename?: 'Field', id: string, name?: string | null, areaHectares?: number | null, location?: any | null, boundary?: any | null }> | null };

export type GetUserFieldsQueryVariables = Exact<{
  userId: Scalars['ID']['input'];
}>;


export type GetUserFieldsQuery = { __typename?: 'Query', fields?: Array<{ __typename?: 'Field', id: string, name?: string | null, areaHectares?: number | null, location?: any | null, boundary?: any | null, farm?: { __typename?: 'Farm', id: string, name?: string | null } | null }> | null };

export type GetUserFieldsFilteredQueryVariables = Exact<{
  userId: Scalars['ID']['input'];
  farmId?: InputMaybe<Scalars['ID']['input']>;
}>;


export type GetUserFieldsFilteredQuery = { __typename?: 'Query', fields?: Array<{ __typename?: 'Field', id: string, name?: string | null, areaHectares?: number | null, boundary?: any | null, farm?: { __typename?: 'Farm', id: string, name?: string | null } | null }> | null };

export type GetAllFieldsQueryVariables = Exact<{ [key: string]: never; }>;


export type GetAllFieldsQuery = { __typename?: 'Query', fields?: Array<{ __typename?: 'Field', id: string, name?: string | null }> | null };

export type GetFieldQueryVariables = Exact<{
  id: Scalars['ID']['input'];
}>;


export type GetFieldQuery = { __typename?: 'Query', field?: { __typename?: 'Field', id: string, name?: string | null, areaHectares?: number | null, location?: any | null, boundary?: any | null, farm?: { __typename?: 'Farm', id: string, name?: string | null } | null } | null };

export type GetFieldAreaQueryVariables = Exact<{
  id: Scalars['ID']['input'];
}>;


export type GetFieldAreaQuery = { __typename?: 'Query', field?: { __typename?: 'Field', id: string, areaHectares?: number | null } | null };

export type CreateFieldMutationVariables = Exact<{
  farmId: Scalars['ID']['input'];
  name: Scalars['String']['input'];
  areaHectares: Scalars['Float']['input'];
  location: Scalars['JSON']['input'];
  boundary?: InputMaybe<Scalars['JSON']['input']>;
}>;


export type CreateFieldMutation = { __typename?: 'Mutation', createField?: { __typename?: 'Field', id: string, name?: string | null, areaHectares?: number | null, location?: any | null, boundary?: any | null } | null };

export type UpdateFieldMutationVariables = Exact<{
  id: Scalars['ID']['input'];
  farmId: Scalars['ID']['input'];
  name: Scalars['String']['input'];
  areaHectares: Scalars['Float']['input'];
  location: Scalars['JSON']['input'];
  boundary?: InputMaybe<Scalars['JSON']['input']>;
}>;


export type UpdateFieldMutation = { __typename?: 'Mutation', updateField?: { __typename?: 'Field', id: string, name?: string | null, areaHectares?: number | null, location?: any | null, boundary?: any | null, farm?: { __typename?: 'Farm', id: string, name?: string | null } | null } | null };

export type DeleteFieldMutationVariables = Exact<{
  id: Scalars['ID']['input'];
}>;


export type DeleteFieldMutation = { __typename?: 'Mutation', deleteField?: { __typename?: 'Field', id: string } | null };

export type GetCropTypesQueryVariables = Exact<{ [key: string]: never; }>;


export type GetCropTypesQuery = { __typename?: 'Query', cropTypes?: Array<{ __typename?: 'CropType', id: string, name?: string | null }> | null };

export type GetCropsQueryVariables = Exact<{
  fieldId: Scalars['ID']['input'];
}>;


export type GetCropsQuery = { __typename?: 'Query', crops?: Array<{ __typename?: 'Crop', id: string, cropAreaHectares?: number | null, boundary?: any | null, cropType?: { __typename?: 'CropType', id: string, name?: string | null } | null }> | null };

export type GetCropQueryVariables = Exact<{
  id: Scalars['ID']['input'];
}>;


export type GetCropQuery = { __typename?: 'Query', crop?: { __typename?: 'Crop', id: string, cropAreaHectares?: number | null, boundary?: any | null, cropType?: { __typename?: 'CropType', id: string, name?: string | null } | null } | null };

export type CreateCropMutationVariables = Exact<{
  landId: Scalars['ID']['input'];
  cropTypeId: Scalars['ID']['input'];
  cropAreaHectares: Scalars['Float']['input'];
  boundary?: InputMaybe<Scalars['JSON']['input']>;
}>;


export type CreateCropMutation = { __typename?: 'Mutation', createCrop?: { __typename?: 'Crop', id: string, cropAreaHectares?: number | null, boundary?: any | null, cropType?: { __typename?: 'CropType', id: string, name?: string | null } | null } | null };

export type UpdateCropMutationVariables = Exact<{
  id: Scalars['ID']['input'];
  cropTypeId: Scalars['ID']['input'];
  cropAreaHectares: Scalars['Float']['input'];
  boundary?: InputMaybe<Scalars['JSON']['input']>;
}>;


export type UpdateCropMutation = { __typename?: 'Mutation', updateCrop?: { __typename?: 'Crop', id: string, cropAreaHectares?: number | null, boundary?: any | null, cropType?: { __typename?: 'CropType', id: string, name?: string | null } | null } | null };

export type DeleteCropMutationVariables = Exact<{
  id: Scalars['ID']['input'];
}>;


export type DeleteCropMutation = { __typename?: 'Mutation', deleteCrop?: { __typename?: 'Crop', id: string } | null };

export type GetDashboardQueryVariables = Exact<{
  where?: InputMaybe<FarmWhereInput>;
}>;


export type GetDashboardQuery = { __typename?: 'Query', farms?: Array<{ __typename?: 'Farm', id: string, name?: string | null, fields?: Array<{ __typename?: 'Field', areaHectares?: number | null, crops?: Array<{ __typename?: 'Crop', cropAreaHectares?: number | null, cropType?: { __typename?: 'CropType', name?: string | null } | null }> | null }> | null }> | null };

export type WeatherRecordsQueryVariables = Exact<{
  fieldId: Scalars['ID']['input'];
  start: Scalars['DateTime']['input'];
  end: Scalars['DateTime']['input'];
}>;


export type WeatherRecordsQuery = { __typename?: 'Query', weatherRecords?: Array<{ __typename?: 'WeatherRecord', id: string, date?: any | null, temperature?: number | null, humidity?: number | null, precipitationMm?: number | null }> | null };

export type CreateWeatherRecordsMutationVariables = Exact<{
  data: Array<WeatherRecordCreateInput> | WeatherRecordCreateInput;
}>;


export type CreateWeatherRecordsMutation = { __typename?: 'Mutation', createWeatherRecords?: Array<{ __typename?: 'WeatherRecord', id: string } | null> | null };

export type GetSoilMeasurementsQueryVariables = Exact<{
  fieldIds: Array<Scalars['ID']['input']> | Scalars['ID']['input'];
  dateFrom?: InputMaybe<Scalars['DateTime']['input']>;
  dateTo?: InputMaybe<Scalars['DateTime']['input']>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
}>;


export type GetSoilMeasurementsQuery = { __typename?: 'Query', soilMeasurements?: Array<{ __typename?: 'SoilMeasurement', id: string, measurementDate?: any | null, sensorId?: string | null, ph?: number | null, organicMatter?: number | null, nitrogen?: number | null, moisture?: number | null, temperature?: number | null, field?: { __typename?: 'Field', id: string, name?: string | null } | null }> | null };

export type GetNppBaselinesQueryVariables = Exact<{
  fieldId: Scalars['ID']['input'];
  yearGte?: InputMaybe<Scalars['Int']['input']>;
  yearLte?: InputMaybe<Scalars['Int']['input']>;
  skip: Scalars['Int']['input'];
  take: Scalars['Int']['input'];
}>;


export type GetNppBaselinesQuery = { __typename?: 'Query', netPrimaryProductivities?: Array<{ __typename?: 'NetPrimaryProductivity', id: string, year?: number | null, meanNPP?: number | null, totalNPP?: number | null, co2e?: number | null, recordedAt?: any | null }> | null };

export type GetLandCoverStatsQueryVariables = Exact<{
  fieldId: Scalars['ID']['input'];
  yearGte?: InputMaybe<Scalars['Int']['input']>;
  yearLte?: InputMaybe<Scalars['Int']['input']>;
  skip: Scalars['Int']['input'];
  take: Scalars['Int']['input'];
}>;


export type GetLandCoverStatsQuery = { __typename?: 'Query', landCoverStatistics?: Array<{ __typename?: 'LandCoverStatistic', id: string, year?: number | null, breakdown?: any | null, imageUrl?: string | null, recordedAt?: any | null }> | null };

export type GetSoilCarbonStocksQueryVariables = Exact<{
  fieldId: Scalars['ID']['input'];
  yearGte?: InputMaybe<Scalars['Int']['input']>;
  yearLte?: InputMaybe<Scalars['Int']['input']>;
  skip: Scalars['Int']['input'];
  take: Scalars['Int']['input'];
}>;


export type GetSoilCarbonStocksQuery = { __typename?: 'Query', soilOrganicCarbonStocks?: Array<{ __typename?: 'SoilOrganicCarbonStock', id: string, year?: number | null, meanSOC?: number | null, totalSOC?: number | null, imageUrl?: string | null, recordedAt?: any | null }> | null };

export type GetSoilMoistureQueryVariables = Exact<{
  fieldId: Scalars['ID']['input'];
  dateFrom?: InputMaybe<Scalars['DateTime']['input']>;
  dateTo?: InputMaybe<Scalars['DateTime']['input']>;
  skip: Scalars['Int']['input'];
  take: Scalars['Int']['input'];
}>;


export type GetSoilMoistureQuery = { __typename?: 'Query', soilMoistureObservations?: Array<{ __typename?: 'SoilMoistureObservation', id: string, date?: any | null, meanMoisture?: number | null, imageUrl?: string | null, recordedAt?: any | null }> | null };

export type GetLandPracticesQueryVariables = Exact<{
  fieldId: Scalars['ID']['input'];
}>;


export type GetLandPracticesQuery = { __typename?: 'Query', sustainablePractices?: Array<{ __typename?: 'SustainablePractice', id: string, name?: string | null, description?: string | null, category?: { __typename?: 'SustainablePracticeCategory', name?: string | null } | null }> | null };

export type GetPracticeEventsQueryVariables = Exact<{
  fieldId: Scalars['ID']['input'];
}>;


export type GetPracticeEventsQuery = { __typename?: 'Query', sustainablePracticeEvents?: Array<{ __typename?: 'SustainablePracticeEvent', appliedDate?: any | null, parameters?: any | null, practice?: { __typename?: 'SustainablePractice', id: string, name?: string | null } | null }> | null };

export type GetSustainablePracticesQueryVariables = Exact<{ [key: string]: never; }>;


export type GetSustainablePracticesQuery = { __typename?: 'Query', sustainablePractices?: Array<{ __typename?: 'SustainablePractice', id: string, name?: string | null, description?: string | null }> | null };

export type CreateSustainablePracticeEventMutationVariables = Exact<{
  practiceId: Scalars['ID']['input'];
  fieldId: Scalars['ID']['input'];
  parameters?: InputMaybe<Scalars['JSON']['input']>;
  targetImpact?: InputMaybe<Scalars['Float']['input']>;
  appliedDate: Scalars['DateTime']['input'];
}>;


export type CreateSustainablePracticeEventMutation = { __typename?: 'Mutation', createSustainablePracticeEvent?: { __typename?: 'SustainablePracticeEvent', id: string, parameters?: any | null, appliedDate?: any | null, field?: { __typename?: 'Field', id: string, name?: string | null } | null, practice?: { __typename?: 'SustainablePractice', id: string, name?: string | null } | null } | null };

export type GetPracticeEventsForPracticeQueryVariables = Exact<{
  fieldId: Scalars['ID']['input'];
  practiceId: Scalars['ID']['input'];
  dateFrom?: InputMaybe<Scalars['DateTime']['input']>;
  dateTo?: InputMaybe<Scalars['DateTime']['input']>;
}>;


export type GetPracticeEventsForPracticeQuery = { __typename?: 'Query', sustainablePracticeEvents?: Array<{ __typename?: 'SustainablePracticeEvent', id: string, parameters?: any | null, targetImpact?: number | null, appliedDate?: any | null, createdAt?: any | null }> | null };

export type GetOffsetsForPracticesQueryVariables = Exact<{
  practiceIds: Array<Scalars['ID']['input']> | Scalars['ID']['input'];
}>;


export type GetOffsetsForPracticesQuery = { __typename?: 'Query', carbonOffsetFactors?: Array<{ __typename?: 'CarbonOffsetFactor', id: string, min?: number | null, max?: number | null, cropType?: { __typename?: 'CropType', id: string, name?: string | null } | null, sustainablePractice?: { __typename?: 'SustainablePractice', id: string } | null }> | null };

export type GetPostsQueryVariables = Exact<{ [key: string]: never; }>;


export type GetPostsQuery = { __typename?: 'Query', posts?: Array<{ __typename?: 'Post', id: string, title?: string | null, slug?: string | null, excerpt?: string | null, publishedAt?: any | null, coverImage?: { __typename?: 'ImageFieldOutput', url: string } | null, author?: { __typename?: 'Author', name?: string | null, avatar?: { __typename?: 'ImageFieldOutput', url: string } | null } | null }> | null };

export type GetPostBySlugQueryVariables = Exact<{
  slug: Scalars['String']['input'];
}>;


export type GetPostBySlugQuery = { __typename?: 'Query', posts?: Array<{ __typename?: 'Post', id: string, title?: string | null, content?: string | null, publishedAt?: any | null, coverImage?: { __typename?: 'ImageFieldOutput', url: string } | null, author?: { __typename?: 'Author', name?: string | null, avatar?: { __typename?: 'ImageFieldOutput', url: string } | null } | null, tags?: Array<{ __typename?: 'Tag', name?: string | null, slug?: string | null }> | null, category?: { __typename?: 'Category', name?: string | null } | null }> | null };

export type CreateSubscriberMutationVariables = Exact<{
  email: Scalars['String']['input'];
}>;


export type CreateSubscriberMutation = { __typename?: 'Mutation', createNewsletterSubscriber?: { __typename?: 'NewsletterSubscriber', id: string, email?: string | null, subscribedAt?: any | null } | null };

export type SubscriberByEmailQueryVariables = Exact<{
  email: Scalars['String']['input'];
}>;


export type SubscriberByEmailQuery = { __typename?: 'Query', newsletterSubscribers?: Array<{ __typename?: 'NewsletterSubscriber', id: string, email?: string | null, isActive?: boolean | null }> | null };

export type UpdateSubscriberMutationVariables = Exact<{
  id: Scalars['ID']['input'];
  isActive: Scalars['Boolean']['input'];
}>;


export type UpdateSubscriberMutation = { __typename?: 'Mutation', updateNewsletterSubscriber?: { __typename?: 'NewsletterSubscriber', id: string, isActive?: boolean | null } | null };

export type GetJobOpeningsQueryVariables = Exact<{ [key: string]: never; }>;


export type GetJobOpeningsQuery = { __typename?: 'Query', jobOpenings?: Array<{ __typename?: 'JobOpening', id: string, title?: string | null, department?: string | null, location?: string | null, employmentType?: string | null, seniority?: string | null }> | null };

export type GetJobOpeningQueryVariables = Exact<{
  where: JobOpeningWhereUniqueInput;
}>;


export type GetJobOpeningQuery = { __typename?: 'Query', jobOpening?: { __typename?: 'JobOpening', id: string, title?: string | null, department?: string | null, location?: string | null, employmentType?: string | null, seniority?: string | null, description?: string | null } | null };

export type ApplyJobMutationVariables = Exact<{
  data: JobCandidateCreateInput;
}>;


export type ApplyJobMutation = { __typename?: 'Mutation', createJobCandidate?: { __typename?: 'JobCandidate', id: string } | null };

export type GetReferralPartnersQueryVariables = Exact<{ [key: string]: never; }>;


export type GetReferralPartnersQuery = { __typename?: 'Query', referralPartners?: Array<{ __typename?: 'ReferralPartner', id: string, name?: string | null, type?: string | null, commission_pct?: number | null, contactEmail?: string | null, ownerUser?: { __typename?: 'User', id: string } | null }> | null };

export type CreateReferralPartnerMutationVariables = Exact<{
  name: Scalars['String']['input'];
  type: Scalars['String']['input'];
  contactEmail: Scalars['String']['input'];
  commissionPct: Scalars['Float']['input'];
}>;


export type CreateReferralPartnerMutation = { __typename?: 'Mutation', createReferralPartner?: { __typename?: 'ReferralPartner', id: string, name?: string | null } | null };

export type CreateReferralPartnerForUserMutationVariables = Exact<{
  name: Scalars['String']['input'];
  type: Scalars['String']['input'];
  contactEmail: Scalars['String']['input'];
  commissionPct: Scalars['Float']['input'];
  ownerUserId: Scalars['ID']['input'];
}>;


export type CreateReferralPartnerForUserMutation = { __typename?: 'Mutation', createReferralPartner?: { __typename?: 'ReferralPartner', id: string } | null };

export type SearchUsersQueryVariables = Exact<{
  query: Scalars['String']['input'];
}>;


export type SearchUsersQuery = { __typename?: 'Query', users?: Array<{ __typename?: 'User', id: string, name?: string | null, email?: string | null }> | null };

export type GetPartnerMembershipsQueryVariables = Exact<{ [key: string]: never; }>;


export type GetPartnerMembershipsQuery = { __typename?: 'Query', memberships?: Array<{ __typename?: 'Membership', id: string, user?: { __typename?: 'User', id: string, name?: string | null, email?: string | null } | null }> | null };

export type AddPartnerMembershipMutationVariables = Exact<{
  userId: Scalars['ID']['input'];
}>;


export type AddPartnerMembershipMutation = { __typename?: 'Mutation', createMembership?: { __typename?: 'Membership', id: string } | null };

export type RemovePartnerMembershipMutationVariables = Exact<{
  id: Scalars['ID']['input'];
}>;


export type RemovePartnerMembershipMutation = { __typename?: 'Mutation', deleteMembership?: { __typename?: 'Membership', id: string } | null };

export type GetReferralCampaignsQueryVariables = Exact<{ [key: string]: never; }>;


export type GetReferralCampaignsQuery = { __typename?: 'Query', referralCampaigns?: Array<{ __typename?: 'ReferralCampaign', id: string, code?: string | null, discount_pct?: number | null, startDate?: any | null, endDate?: any | null, partner?: { __typename?: 'ReferralPartner', id: string, name?: string | null } | null }> | null };

export type CreateReferralCampaignMutationVariables = Exact<{
  partnerId: Scalars['ID']['input'];
  code: Scalars['String']['input'];
  discountPct: Scalars['Float']['input'];
  startDate?: InputMaybe<Scalars['DateTime']['input']>;
  endDate?: InputMaybe<Scalars['DateTime']['input']>;
}>;


export type CreateReferralCampaignMutation = { __typename?: 'Mutation', createReferralCampaign?: { __typename?: 'ReferralCampaign', id: string, code?: string | null } | null };

export type FindActiveReferralCampaignQueryVariables = Exact<{
  code: Scalars['String']['input'];
  now: Scalars['DateTime']['input'];
}>;


export type FindActiveReferralCampaignQuery = { __typename?: 'Query', referralCampaigns?: Array<{ __typename?: 'ReferralCampaign', id: string, discount_pct?: number | null }> | null };

export type UpdateReferralPartnerMutationVariables = Exact<{
  id: Scalars['ID']['input'];
  commissionPct: Scalars['Float']['input'];
}>;


export type UpdateReferralPartnerMutation = { __typename?: 'Mutation', updateReferralPartner?: { __typename?: 'ReferralPartner', id: string, commission_pct?: number | null } | null };

export type CreateReferralRedemptionMutationVariables = Exact<{
  campaignId: Scalars['ID']['input'];
  userId: Scalars['ID']['input'];
  signup: Scalars['DateTime']['input'];
  discountValue: Scalars['Float']['input'];
}>;


export type CreateReferralRedemptionMutation = { __typename?: 'Mutation', createReferralRedemption?: { __typename?: 'ReferralRedemption', id: string } | null };

export type DeleteReferralCampaignMutationVariables = Exact<{
  id: Scalars['ID']['input'];
}>;


export type DeleteReferralCampaignMutation = { __typename?: 'Mutation', deleteReferralCampaign?: { __typename?: 'ReferralCampaign', id: string } | null };

export type CheckPartnerMembershipQueryVariables = Exact<{
  userId: Scalars['ID']['input'];
}>;


export type CheckPartnerMembershipQuery = { __typename?: 'Query', memberships?: Array<{ __typename?: 'Membership', id: string }> | null };

export type GetPartnerDashboardQueryVariables = Exact<{
  userId: Scalars['ID']['input'];
}>;


export type GetPartnerDashboardQuery = { __typename?: 'Query', referralPartners?: Array<{ __typename?: 'ReferralPartner', id: string, name?: string | null, commission_pct?: number | null, campaigns?: Array<{ __typename?: 'ReferralCampaign', id: string, code?: string | null, discount_pct?: number | null, startDate?: any | null, endDate?: any | null, redemptions?: Array<{ __typename?: 'ReferralRedemption', id: string, discountValue?: number | null, signupDate?: any | null, farmerUser?: { __typename?: 'User', id: string, name?: string | null } | null, subscription?: { __typename?: 'Subscription', id: string, status?: string | null } | null }> | null }> | null }> | null };

export type GetMessageTemplatesQueryVariables = Exact<{ [key: string]: never; }>;


export type GetMessageTemplatesQuery = { __typename?: 'Query', messageTemplates?: Array<{ __typename?: 'MessageTemplate', id: string, title?: string | null, bodyMarkdown?: string | null, type?: string | null, urgency?: string | null, mediaId?: string | null, ctaLabel?: string | null, channelMask?: any | null, createdAt?: any | null }> | null };

export type CreateMessageTemplateMutationVariables = Exact<{
  title: Scalars['String']['input'];
  bodyMarkdown?: InputMaybe<Scalars['String']['input']>;
  type: Scalars['String']['input'];
  urgency: Scalars['String']['input'];
  mediaId?: InputMaybe<Scalars['String']['input']>;
  ctaLabel?: InputMaybe<Scalars['String']['input']>;
  ctaLink?: InputMaybe<Scalars['String']['input']>;
  channelMask?: InputMaybe<Scalars['JSON']['input']>;
  requireAcknowledgement?: InputMaybe<Scalars['Boolean']['input']>;
  maxViews?: InputMaybe<Scalars['Int']['input']>;
  startAt?: InputMaybe<Scalars['DateTime']['input']>;
  endAt?: InputMaybe<Scalars['DateTime']['input']>;
}>;


export type CreateMessageTemplateMutation = { __typename?: 'Mutation', createMessageTemplate?: { __typename?: 'MessageTemplate', id: string } | null };

export type DeleteMessageTemplateMutationVariables = Exact<{
  id: Scalars['ID']['input'];
}>;


export type DeleteMessageTemplateMutation = { __typename?: 'Mutation', deleteMessageTemplate?: { __typename?: 'MessageTemplate', id: string } | null };

export type GetMessageDeliveriesQueryVariables = Exact<{
  where?: InputMaybe<MessageDeliveryWhereInput>;
  take: Scalars['Int']['input'];
  skip: Scalars['Int']['input'];
}>;


export type GetMessageDeliveriesQuery = { __typename?: 'Query', messageDeliveries?: Array<{ __typename?: 'MessageDelivery', id: string, status?: string | null, urgency?: string | null, views?: number | null, lastShownAt?: any | null, createdAt?: any | null, user?: { __typename?: 'User', email?: string | null } | null, template?: { __typename?: 'MessageTemplate', title?: string | null, type?: string | null } | null, clicks?: Array<{ __typename?: 'MessageClick', id: string }> | null }> | null };

export type GetMessageStatsQueryVariables = Exact<{ [key: string]: never; }>;


export type GetMessageStatsQuery = { __typename?: 'Query', sent?: number | null, read?: number | null, dismissed?: number | null };

export type GetMessageDetailQueryVariables = Exact<{
  id: Scalars['ID']['input'];
}>;


export type GetMessageDetailQuery = { __typename?: 'Query', messageDelivery?: { __typename?: 'MessageDelivery', id: string, status?: string | null, createdAt?: any | null, template?: { __typename?: 'MessageTemplate', title?: string | null, bodyMarkdown?: string | null, mediaId?: string | null, ctaLabel?: string | null, ctaLink?: string | null } | null } | null };

export type GetUnreadCountQueryVariables = Exact<{ [key: string]: never; }>;


export type GetUnreadCountQuery = { __typename?: 'Query', deliveriesUnread?: number | null, alertsUnread?: number | null };

export type GetInboxQueryVariables = Exact<{ [key: string]: never; }>;


export type GetInboxQuery = { __typename?: 'Query', alerts?: Array<{ __typename?: 'Alert', id: string, message?: string | null, createdAt?: any | null }> | null, messageDeliveries?: Array<{ __typename?: 'MessageDelivery', id: string, createdAt?: any | null, template?: { __typename?: 'MessageTemplate', title?: string | null } | null }> | null };

export type MarkDeliveryReadModalMutationVariables = Exact<{
  id: Scalars['ID']['input'];
}>;


export type MarkDeliveryReadModalMutation = { __typename?: 'Mutation', updateMessageDelivery?: { __typename?: 'MessageDelivery', id: string } | null };

export type MarkDeliveryRemindMutationVariables = Exact<{
  id: Scalars['ID']['input'];
  ts: Scalars['DateTime']['input'];
}>;


export type MarkDeliveryRemindMutation = { __typename?: 'Mutation', updateMessageDelivery?: { __typename?: 'MessageDelivery', id: string } | null };

export type MarkAlertReadMutationVariables = Exact<{
  id: Scalars['ID']['input'];
}>;


export type MarkAlertReadMutation = { __typename?: 'Mutation', updateAlert?: { __typename?: 'Alert', id: string } | null };

export type UpdateMessageDeliveryMutationVariables = Exact<{
  id: Scalars['ID']['input'];
  data: MessageDeliveryUpdateInput;
}>;


export type UpdateMessageDeliveryMutation = { __typename?: 'Mutation', updateMessageDelivery?: { __typename?: 'MessageDelivery', id: string } | null };

export type CreateMessageDeliveryMutationVariables = Exact<{
  templateId: Scalars['ID']['input'];
  userId: Scalars['ID']['input'];
}>;


export type CreateMessageDeliveryMutation = { __typename?: 'Mutation', createMessageDelivery?: { __typename?: 'MessageDelivery', id: string } | null };

export type GetReceivedMessagesQueryVariables = Exact<{
  where: MessageDeliveryWhereInput;
  take: Scalars['Int']['input'];
  skip: Scalars['Int']['input'];
  search?: InputMaybe<Scalars['String']['input']>;
}>;


export type GetReceivedMessagesQuery = { __typename?: 'Query', messageDeliveriesCount?: number | null, messageDeliveries?: Array<{ __typename?: 'MessageDelivery', id: string, status?: string | null, views?: number | null, lastShownAt?: any | null, createdAt?: any | null, template?: { __typename?: 'MessageTemplate', id: string, title?: string | null, mediaId?: string | null } | null }> | null };

export type GetSentMessagesQueryVariables = Exact<{
  where: MessageTemplateWhereInput;
  take: Scalars['Int']['input'];
  skip: Scalars['Int']['input'];
  search?: InputMaybe<Scalars['String']['input']>;
}>;


export type GetSentMessagesQuery = { __typename?: 'Query', messageTemplatesCount?: number | null, messageTemplates?: Array<{ __typename?: 'MessageTemplate', id: string, title?: string | null, type?: string | null, urgency?: string | null, createdAt?: any | null }> | null };

export type GetAlertsQueryVariables = Exact<{
  where: AlertWhereInput;
  take: Scalars['Int']['input'];
  skip: Scalars['Int']['input'];
  search?: InputMaybe<Scalars['String']['input']>;
}>;


export type GetAlertsQuery = { __typename?: 'Query', alertsCount?: number | null, alerts?: Array<{ __typename?: 'Alert', id: string, message?: string | null, urgency?: string | null, status?: string | null, createdAt?: any | null }> | null };

export type GetAlertDetailQueryVariables = Exact<{
  id: Scalars['ID']['input'];
}>;


export type GetAlertDetailQuery = { __typename?: 'Query', alert?: { __typename?: 'Alert', id: string, message?: string | null, urgency?: string | null, status?: string | null, due_date?: any | null, createdAt?: any | null } | null };

export type GetUsersByRoleQueryVariables = Exact<{
  role: Scalars['String']['input'];
}>;


export type GetUsersByRoleQuery = { __typename?: 'Query', memberships?: Array<{ __typename?: 'Membership', user?: { __typename?: 'User', id: string, email?: string | null, name?: string | null } | null }> | null };

export type OrgByUserQueryVariables = Exact<{
  userId: Scalars['ID']['input'];
}>;


export type OrgByUserQuery = { __typename?: 'Query', user?: { __typename?: 'User', memberships?: Array<{ __typename?: 'Membership', organisation?: { __typename?: 'Organisation', id: string, name?: string | null, stripeCustomerId?: string | null } | null }> | null } | null };

export type SetOrgCustMutationVariables = Exact<{
  orgId: Scalars['ID']['input'];
  custId: Scalars['String']['input'];
}>;


export type SetOrgCustMutation = { __typename?: 'Mutation', updateOrganisation?: { __typename?: 'Organisation', id: string } | null };

export type CreateSubscriptionMutationVariables = Exact<{
  data: SubscriptionCreateInput;
}>;


export type CreateSubscriptionMutation = { __typename?: 'Mutation', createSubscription?: { __typename?: 'Subscription', id: string } | null };

export type UpdateSubMutationVariables = Exact<{
  orgId: Scalars['ID']['input'];
  stripeSubId: Scalars['String']['input'];
  stripePriceId: Scalars['String']['input'];
  status: Scalars['String']['input'];
  start: Scalars['DateTime']['input'];
  end: Scalars['DateTime']['input'];
}>;


export type UpdateSubMutation = { __typename?: 'Mutation', updateSubscription?: { __typename?: 'Subscription', id: string, status?: string | null } | null };

export type GetPlansQueryVariables = Exact<{ [key: string]: never; }>;


export type GetPlansQuery = { __typename?: 'Query', plans?: Array<{ __typename?: 'Plan', id: string, key?: string | null, label?: string | null, features?: any | null, activePrice?: { __typename?: 'PlanPrice', id: string, amount?: number | null, currency?: string | null } | null }> | null };

export type FindActivePriceQueryVariables = Exact<{
  key: Scalars['String']['input'];
}>;


export type FindActivePriceQuery = { __typename?: 'Query', plan?: { __typename?: 'Plan', id: string, activePrice?: { __typename?: 'PlanPrice', id: string, stripePriceId?: string | null } | null } | null };


export const GetProductsDocument = gql`
    query GetProducts($where: ProductWhereInput, $orderBy: [ProductOrderByInput!], $take: Int, $skip: Int) {
  products(where: $where, orderBy: $orderBy, take: $take, skip: $skip) {
    id
    name
    registration_no
    product_type
    hazard_class
    country
    stato_amministrativo
  }
  productsCount(where: $where)
}
    `;

/**
 * __useGetProductsQuery__
 *
 * To run a query within a React component, call `useGetProductsQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetProductsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetProductsQuery({
 *   variables: {
 *      where: // value for 'where'
 *      orderBy: // value for 'orderBy'
 *      take: // value for 'take'
 *      skip: // value for 'skip'
 *   },
 * });
 */
export function useGetProductsQuery(baseOptions?: Apollo.QueryHookOptions<GetProductsQuery, GetProductsQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetProductsQuery, GetProductsQueryVariables>(GetProductsDocument, options);
      }
export function useGetProductsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetProductsQuery, GetProductsQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetProductsQuery, GetProductsQueryVariables>(GetProductsDocument, options);
        }
export function useGetProductsSuspenseQuery(baseOptions?: Apollo.SkipToken | Apollo.SuspenseQueryHookOptions<GetProductsQuery, GetProductsQueryVariables>) {
          const options = baseOptions === Apollo.skipToken ? baseOptions : {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<GetProductsQuery, GetProductsQueryVariables>(GetProductsDocument, options);
        }
export type GetProductsQueryHookResult = ReturnType<typeof useGetProductsQuery>;
export type GetProductsLazyQueryHookResult = ReturnType<typeof useGetProductsLazyQuery>;
export type GetProductsSuspenseQueryHookResult = ReturnType<typeof useGetProductsSuspenseQuery>;
export type GetProductsQueryResult = Apollo.QueryResult<GetProductsQuery, GetProductsQueryVariables>;
export const GetCategoryKpiDocument = gql`
    query GetCategoryKPI($id: ID!) {
  categoryKPI(where: {id: $id}) {
    id
    name
    kpis(where: {visible: {equals: true}}) {
      id
      title
      currentValue
      target
      description
    }
  }
}
    `;

/**
 * __useGetCategoryKpiQuery__
 *
 * To run a query within a React component, call `useGetCategoryKpiQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetCategoryKpiQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetCategoryKpiQuery({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useGetCategoryKpiQuery(baseOptions: Apollo.QueryHookOptions<GetCategoryKpiQuery, GetCategoryKpiQueryVariables> & ({ variables: GetCategoryKpiQueryVariables; skip?: boolean; } | { skip: boolean; }) ) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetCategoryKpiQuery, GetCategoryKpiQueryVariables>(GetCategoryKpiDocument, options);
      }
export function useGetCategoryKpiLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetCategoryKpiQuery, GetCategoryKpiQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetCategoryKpiQuery, GetCategoryKpiQueryVariables>(GetCategoryKpiDocument, options);
        }
export function useGetCategoryKpiSuspenseQuery(baseOptions?: Apollo.SkipToken | Apollo.SuspenseQueryHookOptions<GetCategoryKpiQuery, GetCategoryKpiQueryVariables>) {
          const options = baseOptions === Apollo.skipToken ? baseOptions : {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<GetCategoryKpiQuery, GetCategoryKpiQueryVariables>(GetCategoryKpiDocument, options);
        }
export type GetCategoryKpiQueryHookResult = ReturnType<typeof useGetCategoryKpiQuery>;
export type GetCategoryKpiLazyQueryHookResult = ReturnType<typeof useGetCategoryKpiLazyQuery>;
export type GetCategoryKpiSuspenseQueryHookResult = ReturnType<typeof useGetCategoryKpiSuspenseQuery>;
export type GetCategoryKpiQueryResult = Apollo.QueryResult<GetCategoryKpiQuery, GetCategoryKpiQueryVariables>;
export const GetVisibleKpIsDocument = gql`
    query GetVisibleKPIs {
  kPIS(where: {visible: {equals: true}}, orderBy: {createdAt: desc}) {
    id
    title
    currentValue
    target
    category {
      id
      name
    }
  }
}
    `;

/**
 * __useGetVisibleKpIsQuery__
 *
 * To run a query within a React component, call `useGetVisibleKpIsQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetVisibleKpIsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetVisibleKpIsQuery({
 *   variables: {
 *   },
 * });
 */
export function useGetVisibleKpIsQuery(baseOptions?: Apollo.QueryHookOptions<GetVisibleKpIsQuery, GetVisibleKpIsQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetVisibleKpIsQuery, GetVisibleKpIsQueryVariables>(GetVisibleKpIsDocument, options);
      }
export function useGetVisibleKpIsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetVisibleKpIsQuery, GetVisibleKpIsQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetVisibleKpIsQuery, GetVisibleKpIsQueryVariables>(GetVisibleKpIsDocument, options);
        }
export function useGetVisibleKpIsSuspenseQuery(baseOptions?: Apollo.SkipToken | Apollo.SuspenseQueryHookOptions<GetVisibleKpIsQuery, GetVisibleKpIsQueryVariables>) {
          const options = baseOptions === Apollo.skipToken ? baseOptions : {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<GetVisibleKpIsQuery, GetVisibleKpIsQueryVariables>(GetVisibleKpIsDocument, options);
        }
export type GetVisibleKpIsQueryHookResult = ReturnType<typeof useGetVisibleKpIsQuery>;
export type GetVisibleKpIsLazyQueryHookResult = ReturnType<typeof useGetVisibleKpIsLazyQuery>;
export type GetVisibleKpIsSuspenseQueryHookResult = ReturnType<typeof useGetVisibleKpIsSuspenseQuery>;
export type GetVisibleKpIsQueryResult = Apollo.QueryResult<GetVisibleKpIsQuery, GetVisibleKpIsQueryVariables>;
export const UpsertUserDocument = gql`
    mutation UpsertUser($email: String!, $name: String!) {
  createUser(data: {email: $email, name: $name}) {
    id
  }
}
    `;
export type UpsertUserMutationFn = Apollo.MutationFunction<UpsertUserMutation, UpsertUserMutationVariables>;

/**
 * __useUpsertUserMutation__
 *
 * To run a mutation, you first call `useUpsertUserMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpsertUserMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [upsertUserMutation, { data, loading, error }] = useUpsertUserMutation({
 *   variables: {
 *      email: // value for 'email'
 *      name: // value for 'name'
 *   },
 * });
 */
export function useUpsertUserMutation(baseOptions?: Apollo.MutationHookOptions<UpsertUserMutation, UpsertUserMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<UpsertUserMutation, UpsertUserMutationVariables>(UpsertUserDocument, options);
      }
export type UpsertUserMutationHookResult = ReturnType<typeof useUpsertUserMutation>;
export type UpsertUserMutationResult = Apollo.MutationResult<UpsertUserMutation>;
export type UpsertUserMutationOptions = Apollo.BaseMutationOptions<UpsertUserMutation, UpsertUserMutationVariables>;
export const AuthenticateDocument = gql`
    mutation Authenticate($email: String!, $password: String!) {
  authenticateUserWithPassword(email: $email, password: $password) {
    ... on UserAuthenticationWithPasswordSuccess {
      sessionToken
      item {
        id
        name
        email
        isAdmin
      }
    }
    ... on UserAuthenticationWithPasswordFailure {
      message
    }
  }
}
    `;
export type AuthenticateMutationFn = Apollo.MutationFunction<AuthenticateMutation, AuthenticateMutationVariables>;

/**
 * __useAuthenticateMutation__
 *
 * To run a mutation, you first call `useAuthenticateMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useAuthenticateMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [authenticateMutation, { data, loading, error }] = useAuthenticateMutation({
 *   variables: {
 *      email: // value for 'email'
 *      password: // value for 'password'
 *   },
 * });
 */
export function useAuthenticateMutation(baseOptions?: Apollo.MutationHookOptions<AuthenticateMutation, AuthenticateMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<AuthenticateMutation, AuthenticateMutationVariables>(AuthenticateDocument, options);
      }
export type AuthenticateMutationHookResult = ReturnType<typeof useAuthenticateMutation>;
export type AuthenticateMutationResult = Apollo.MutationResult<AuthenticateMutation>;
export type AuthenticateMutationOptions = Apollo.BaseMutationOptions<AuthenticateMutation, AuthenticateMutationVariables>;
export const FindUserDocument = gql`
    query FindUser($email: String!) {
  users(where: {email: {equals: $email}}) {
    id
    name
    email
    isAdmin
  }
}
    `;

/**
 * __useFindUserQuery__
 *
 * To run a query within a React component, call `useFindUserQuery` and pass it any options that fit your needs.
 * When your component renders, `useFindUserQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useFindUserQuery({
 *   variables: {
 *      email: // value for 'email'
 *   },
 * });
 */
export function useFindUserQuery(baseOptions: Apollo.QueryHookOptions<FindUserQuery, FindUserQueryVariables> & ({ variables: FindUserQueryVariables; skip?: boolean; } | { skip: boolean; }) ) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<FindUserQuery, FindUserQueryVariables>(FindUserDocument, options);
      }
export function useFindUserLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<FindUserQuery, FindUserQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<FindUserQuery, FindUserQueryVariables>(FindUserDocument, options);
        }
export function useFindUserSuspenseQuery(baseOptions?: Apollo.SkipToken | Apollo.SuspenseQueryHookOptions<FindUserQuery, FindUserQueryVariables>) {
          const options = baseOptions === Apollo.skipToken ? baseOptions : {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<FindUserQuery, FindUserQueryVariables>(FindUserDocument, options);
        }
export type FindUserQueryHookResult = ReturnType<typeof useFindUserQuery>;
export type FindUserLazyQueryHookResult = ReturnType<typeof useFindUserLazyQuery>;
export type FindUserSuspenseQueryHookResult = ReturnType<typeof useFindUserSuspenseQuery>;
export type FindUserQueryResult = Apollo.QueryResult<FindUserQuery, FindUserQueryVariables>;
export const CreateUserDocument = gql`
    mutation CreateUser($email: String!, $name: String!) {
  createUser(data: {email: $email, name: $name}) {
    id
    name
    email
    isAdmin
  }
}
    `;
export type CreateUserMutationFn = Apollo.MutationFunction<CreateUserMutation, CreateUserMutationVariables>;

/**
 * __useCreateUserMutation__
 *
 * To run a mutation, you first call `useCreateUserMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCreateUserMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [createUserMutation, { data, loading, error }] = useCreateUserMutation({
 *   variables: {
 *      email: // value for 'email'
 *      name: // value for 'name'
 *   },
 * });
 */
export function useCreateUserMutation(baseOptions?: Apollo.MutationHookOptions<CreateUserMutation, CreateUserMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<CreateUserMutation, CreateUserMutationVariables>(CreateUserDocument, options);
      }
export type CreateUserMutationHookResult = ReturnType<typeof useCreateUserMutation>;
export type CreateUserMutationResult = Apollo.MutationResult<CreateUserMutation>;
export type CreateUserMutationOptions = Apollo.BaseMutationOptions<CreateUserMutation, CreateUserMutationVariables>;
export const CreateFarmDocument = gql`
    mutation CreateFarm($name: String!, $createdById: ID!, $location: JSON!) {
  createFarm(
    data: {name: $name, createdBy: {connect: {id: $createdById}}, location: $location}
  ) {
    id
    name
    location
  }
}
    `;
export type CreateFarmMutationFn = Apollo.MutationFunction<CreateFarmMutation, CreateFarmMutationVariables>;

/**
 * __useCreateFarmMutation__
 *
 * To run a mutation, you first call `useCreateFarmMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCreateFarmMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [createFarmMutation, { data, loading, error }] = useCreateFarmMutation({
 *   variables: {
 *      name: // value for 'name'
 *      createdById: // value for 'createdById'
 *      location: // value for 'location'
 *   },
 * });
 */
export function useCreateFarmMutation(baseOptions?: Apollo.MutationHookOptions<CreateFarmMutation, CreateFarmMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<CreateFarmMutation, CreateFarmMutationVariables>(CreateFarmDocument, options);
      }
export type CreateFarmMutationHookResult = ReturnType<typeof useCreateFarmMutation>;
export type CreateFarmMutationResult = Apollo.MutationResult<CreateFarmMutation>;
export type CreateFarmMutationOptions = Apollo.BaseMutationOptions<CreateFarmMutation, CreateFarmMutationVariables>;
export const GetFarmsDocument = gql`
    query GetFarms {
  farms {
    id
    name
    location
    isDefault
    fields {
      id
      name
      areaHectares
    }
  }
}
    `;

/**
 * __useGetFarmsQuery__
 *
 * To run a query within a React component, call `useGetFarmsQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetFarmsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetFarmsQuery({
 *   variables: {
 *   },
 * });
 */
export function useGetFarmsQuery(baseOptions?: Apollo.QueryHookOptions<GetFarmsQuery, GetFarmsQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetFarmsQuery, GetFarmsQueryVariables>(GetFarmsDocument, options);
      }
export function useGetFarmsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetFarmsQuery, GetFarmsQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetFarmsQuery, GetFarmsQueryVariables>(GetFarmsDocument, options);
        }
export function useGetFarmsSuspenseQuery(baseOptions?: Apollo.SkipToken | Apollo.SuspenseQueryHookOptions<GetFarmsQuery, GetFarmsQueryVariables>) {
          const options = baseOptions === Apollo.skipToken ? baseOptions : {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<GetFarmsQuery, GetFarmsQueryVariables>(GetFarmsDocument, options);
        }
export type GetFarmsQueryHookResult = ReturnType<typeof useGetFarmsQuery>;
export type GetFarmsLazyQueryHookResult = ReturnType<typeof useGetFarmsLazyQuery>;
export type GetFarmsSuspenseQueryHookResult = ReturnType<typeof useGetFarmsSuspenseQuery>;
export type GetFarmsQueryResult = Apollo.QueryResult<GetFarmsQuery, GetFarmsQueryVariables>;
export const GetFarmDocument = gql`
    query GetFarm($id: ID!) {
  farm(where: {id: $id}) {
    id
    name
    location
    isDefault
    fields {
      id
      name
      areaHectares
    }
  }
}
    `;

/**
 * __useGetFarmQuery__
 *
 * To run a query within a React component, call `useGetFarmQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetFarmQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetFarmQuery({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useGetFarmQuery(baseOptions: Apollo.QueryHookOptions<GetFarmQuery, GetFarmQueryVariables> & ({ variables: GetFarmQueryVariables; skip?: boolean; } | { skip: boolean; }) ) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetFarmQuery, GetFarmQueryVariables>(GetFarmDocument, options);
      }
export function useGetFarmLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetFarmQuery, GetFarmQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetFarmQuery, GetFarmQueryVariables>(GetFarmDocument, options);
        }
export function useGetFarmSuspenseQuery(baseOptions?: Apollo.SkipToken | Apollo.SuspenseQueryHookOptions<GetFarmQuery, GetFarmQueryVariables>) {
          const options = baseOptions === Apollo.skipToken ? baseOptions : {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<GetFarmQuery, GetFarmQueryVariables>(GetFarmDocument, options);
        }
export type GetFarmQueryHookResult = ReturnType<typeof useGetFarmQuery>;
export type GetFarmLazyQueryHookResult = ReturnType<typeof useGetFarmLazyQuery>;
export type GetFarmSuspenseQueryHookResult = ReturnType<typeof useGetFarmSuspenseQuery>;
export type GetFarmQueryResult = Apollo.QueryResult<GetFarmQuery, GetFarmQueryVariables>;
export const UpdateFarmDocument = gql`
    mutation UpdateFarm($id: ID!, $name: String!, $location: JSON!) {
  updateFarm(where: {id: $id}, data: {name: $name, location: $location}) {
    id
    name
    location
  }
}
    `;
export type UpdateFarmMutationFn = Apollo.MutationFunction<UpdateFarmMutation, UpdateFarmMutationVariables>;

/**
 * __useUpdateFarmMutation__
 *
 * To run a mutation, you first call `useUpdateFarmMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateFarmMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateFarmMutation, { data, loading, error }] = useUpdateFarmMutation({
 *   variables: {
 *      id: // value for 'id'
 *      name: // value for 'name'
 *      location: // value for 'location'
 *   },
 * });
 */
export function useUpdateFarmMutation(baseOptions?: Apollo.MutationHookOptions<UpdateFarmMutation, UpdateFarmMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<UpdateFarmMutation, UpdateFarmMutationVariables>(UpdateFarmDocument, options);
      }
export type UpdateFarmMutationHookResult = ReturnType<typeof useUpdateFarmMutation>;
export type UpdateFarmMutationResult = Apollo.MutationResult<UpdateFarmMutation>;
export type UpdateFarmMutationOptions = Apollo.BaseMutationOptions<UpdateFarmMutation, UpdateFarmMutationVariables>;
export const DeleteFarmDocument = gql`
    mutation DeleteFarm($id: ID!) {
  deleteFarm(where: {id: $id}) {
    id
  }
}
    `;
export type DeleteFarmMutationFn = Apollo.MutationFunction<DeleteFarmMutation, DeleteFarmMutationVariables>;

/**
 * __useDeleteFarmMutation__
 *
 * To run a mutation, you first call `useDeleteFarmMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useDeleteFarmMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [deleteFarmMutation, { data, loading, error }] = useDeleteFarmMutation({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useDeleteFarmMutation(baseOptions?: Apollo.MutationHookOptions<DeleteFarmMutation, DeleteFarmMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<DeleteFarmMutation, DeleteFarmMutationVariables>(DeleteFarmDocument, options);
      }
export type DeleteFarmMutationHookResult = ReturnType<typeof useDeleteFarmMutation>;
export type DeleteFarmMutationResult = Apollo.MutationResult<DeleteFarmMutation>;
export type DeleteFarmMutationOptions = Apollo.BaseMutationOptions<DeleteFarmMutation, DeleteFarmMutationVariables>;
export const GetFieldsDocument = gql`
    query GetFields($farmId: ID!) {
  fields(where: {farm: {id: {equals: $farmId}}}) {
    id
    name
    areaHectares
    location
    boundary
  }
}
    `;

/**
 * __useGetFieldsQuery__
 *
 * To run a query within a React component, call `useGetFieldsQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetFieldsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetFieldsQuery({
 *   variables: {
 *      farmId: // value for 'farmId'
 *   },
 * });
 */
export function useGetFieldsQuery(baseOptions: Apollo.QueryHookOptions<GetFieldsQuery, GetFieldsQueryVariables> & ({ variables: GetFieldsQueryVariables; skip?: boolean; } | { skip: boolean; }) ) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetFieldsQuery, GetFieldsQueryVariables>(GetFieldsDocument, options);
      }
export function useGetFieldsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetFieldsQuery, GetFieldsQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetFieldsQuery, GetFieldsQueryVariables>(GetFieldsDocument, options);
        }
export function useGetFieldsSuspenseQuery(baseOptions?: Apollo.SkipToken | Apollo.SuspenseQueryHookOptions<GetFieldsQuery, GetFieldsQueryVariables>) {
          const options = baseOptions === Apollo.skipToken ? baseOptions : {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<GetFieldsQuery, GetFieldsQueryVariables>(GetFieldsDocument, options);
        }
export type GetFieldsQueryHookResult = ReturnType<typeof useGetFieldsQuery>;
export type GetFieldsLazyQueryHookResult = ReturnType<typeof useGetFieldsLazyQuery>;
export type GetFieldsSuspenseQueryHookResult = ReturnType<typeof useGetFieldsSuspenseQuery>;
export type GetFieldsQueryResult = Apollo.QueryResult<GetFieldsQuery, GetFieldsQueryVariables>;
export const GetUserFieldsDocument = gql`
    query GetUserFields($userId: ID!) {
  fields(
    where: {farm: {createdBy: {id: {equals: $userId}}}}
    orderBy: {name: asc}
  ) {
    id
    name
    areaHectares
    location
    boundary
    farm {
      id
      name
    }
  }
}
    `;

/**
 * __useGetUserFieldsQuery__
 *
 * To run a query within a React component, call `useGetUserFieldsQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetUserFieldsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetUserFieldsQuery({
 *   variables: {
 *      userId: // value for 'userId'
 *   },
 * });
 */
export function useGetUserFieldsQuery(baseOptions: Apollo.QueryHookOptions<GetUserFieldsQuery, GetUserFieldsQueryVariables> & ({ variables: GetUserFieldsQueryVariables; skip?: boolean; } | { skip: boolean; }) ) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetUserFieldsQuery, GetUserFieldsQueryVariables>(GetUserFieldsDocument, options);
      }
export function useGetUserFieldsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetUserFieldsQuery, GetUserFieldsQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetUserFieldsQuery, GetUserFieldsQueryVariables>(GetUserFieldsDocument, options);
        }
export function useGetUserFieldsSuspenseQuery(baseOptions?: Apollo.SkipToken | Apollo.SuspenseQueryHookOptions<GetUserFieldsQuery, GetUserFieldsQueryVariables>) {
          const options = baseOptions === Apollo.skipToken ? baseOptions : {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<GetUserFieldsQuery, GetUserFieldsQueryVariables>(GetUserFieldsDocument, options);
        }
export type GetUserFieldsQueryHookResult = ReturnType<typeof useGetUserFieldsQuery>;
export type GetUserFieldsLazyQueryHookResult = ReturnType<typeof useGetUserFieldsLazyQuery>;
export type GetUserFieldsSuspenseQueryHookResult = ReturnType<typeof useGetUserFieldsSuspenseQuery>;
export type GetUserFieldsQueryResult = Apollo.QueryResult<GetUserFieldsQuery, GetUserFieldsQueryVariables>;
export const GetUserFieldsFilteredDocument = gql`
    query GetUserFieldsFiltered($userId: ID!, $farmId: ID) {
  fields(
    where: {farm: {createdBy: {id: {equals: $userId}}, id: {equals: $farmId}}}
    orderBy: {name: asc}
  ) {
    id
    name
    areaHectares
    boundary
    farm {
      id
      name
    }
  }
}
    `;

/**
 * __useGetUserFieldsFilteredQuery__
 *
 * To run a query within a React component, call `useGetUserFieldsFilteredQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetUserFieldsFilteredQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetUserFieldsFilteredQuery({
 *   variables: {
 *      userId: // value for 'userId'
 *      farmId: // value for 'farmId'
 *   },
 * });
 */
export function useGetUserFieldsFilteredQuery(baseOptions: Apollo.QueryHookOptions<GetUserFieldsFilteredQuery, GetUserFieldsFilteredQueryVariables> & ({ variables: GetUserFieldsFilteredQueryVariables; skip?: boolean; } | { skip: boolean; }) ) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetUserFieldsFilteredQuery, GetUserFieldsFilteredQueryVariables>(GetUserFieldsFilteredDocument, options);
      }
export function useGetUserFieldsFilteredLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetUserFieldsFilteredQuery, GetUserFieldsFilteredQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetUserFieldsFilteredQuery, GetUserFieldsFilteredQueryVariables>(GetUserFieldsFilteredDocument, options);
        }
export function useGetUserFieldsFilteredSuspenseQuery(baseOptions?: Apollo.SkipToken | Apollo.SuspenseQueryHookOptions<GetUserFieldsFilteredQuery, GetUserFieldsFilteredQueryVariables>) {
          const options = baseOptions === Apollo.skipToken ? baseOptions : {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<GetUserFieldsFilteredQuery, GetUserFieldsFilteredQueryVariables>(GetUserFieldsFilteredDocument, options);
        }
export type GetUserFieldsFilteredQueryHookResult = ReturnType<typeof useGetUserFieldsFilteredQuery>;
export type GetUserFieldsFilteredLazyQueryHookResult = ReturnType<typeof useGetUserFieldsFilteredLazyQuery>;
export type GetUserFieldsFilteredSuspenseQueryHookResult = ReturnType<typeof useGetUserFieldsFilteredSuspenseQuery>;
export type GetUserFieldsFilteredQueryResult = Apollo.QueryResult<GetUserFieldsFilteredQuery, GetUserFieldsFilteredQueryVariables>;
export const GetAllFieldsDocument = gql`
    query GetAllFields {
  fields {
    id
    name
  }
}
    `;

/**
 * __useGetAllFieldsQuery__
 *
 * To run a query within a React component, call `useGetAllFieldsQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetAllFieldsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetAllFieldsQuery({
 *   variables: {
 *   },
 * });
 */
export function useGetAllFieldsQuery(baseOptions?: Apollo.QueryHookOptions<GetAllFieldsQuery, GetAllFieldsQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetAllFieldsQuery, GetAllFieldsQueryVariables>(GetAllFieldsDocument, options);
      }
export function useGetAllFieldsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetAllFieldsQuery, GetAllFieldsQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetAllFieldsQuery, GetAllFieldsQueryVariables>(GetAllFieldsDocument, options);
        }
export function useGetAllFieldsSuspenseQuery(baseOptions?: Apollo.SkipToken | Apollo.SuspenseQueryHookOptions<GetAllFieldsQuery, GetAllFieldsQueryVariables>) {
          const options = baseOptions === Apollo.skipToken ? baseOptions : {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<GetAllFieldsQuery, GetAllFieldsQueryVariables>(GetAllFieldsDocument, options);
        }
export type GetAllFieldsQueryHookResult = ReturnType<typeof useGetAllFieldsQuery>;
export type GetAllFieldsLazyQueryHookResult = ReturnType<typeof useGetAllFieldsLazyQuery>;
export type GetAllFieldsSuspenseQueryHookResult = ReturnType<typeof useGetAllFieldsSuspenseQuery>;
export type GetAllFieldsQueryResult = Apollo.QueryResult<GetAllFieldsQuery, GetAllFieldsQueryVariables>;
export const GetFieldDocument = gql`
    query GetField($id: ID!) {
  field(where: {id: $id}) {
    id
    name
    areaHectares
    location
    boundary
    farm {
      id
      name
    }
  }
}
    `;

/**
 * __useGetFieldQuery__
 *
 * To run a query within a React component, call `useGetFieldQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetFieldQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetFieldQuery({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useGetFieldQuery(baseOptions: Apollo.QueryHookOptions<GetFieldQuery, GetFieldQueryVariables> & ({ variables: GetFieldQueryVariables; skip?: boolean; } | { skip: boolean; }) ) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetFieldQuery, GetFieldQueryVariables>(GetFieldDocument, options);
      }
export function useGetFieldLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetFieldQuery, GetFieldQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetFieldQuery, GetFieldQueryVariables>(GetFieldDocument, options);
        }
export function useGetFieldSuspenseQuery(baseOptions?: Apollo.SkipToken | Apollo.SuspenseQueryHookOptions<GetFieldQuery, GetFieldQueryVariables>) {
          const options = baseOptions === Apollo.skipToken ? baseOptions : {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<GetFieldQuery, GetFieldQueryVariables>(GetFieldDocument, options);
        }
export type GetFieldQueryHookResult = ReturnType<typeof useGetFieldQuery>;
export type GetFieldLazyQueryHookResult = ReturnType<typeof useGetFieldLazyQuery>;
export type GetFieldSuspenseQueryHookResult = ReturnType<typeof useGetFieldSuspenseQuery>;
export type GetFieldQueryResult = Apollo.QueryResult<GetFieldQuery, GetFieldQueryVariables>;
export const GetFieldAreaDocument = gql`
    query GetFieldArea($id: ID!) {
  field(where: {id: $id}) {
    id
    areaHectares
  }
}
    `;

/**
 * __useGetFieldAreaQuery__
 *
 * To run a query within a React component, call `useGetFieldAreaQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetFieldAreaQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetFieldAreaQuery({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useGetFieldAreaQuery(baseOptions: Apollo.QueryHookOptions<GetFieldAreaQuery, GetFieldAreaQueryVariables> & ({ variables: GetFieldAreaQueryVariables; skip?: boolean; } | { skip: boolean; }) ) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetFieldAreaQuery, GetFieldAreaQueryVariables>(GetFieldAreaDocument, options);
      }
export function useGetFieldAreaLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetFieldAreaQuery, GetFieldAreaQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetFieldAreaQuery, GetFieldAreaQueryVariables>(GetFieldAreaDocument, options);
        }
export function useGetFieldAreaSuspenseQuery(baseOptions?: Apollo.SkipToken | Apollo.SuspenseQueryHookOptions<GetFieldAreaQuery, GetFieldAreaQueryVariables>) {
          const options = baseOptions === Apollo.skipToken ? baseOptions : {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<GetFieldAreaQuery, GetFieldAreaQueryVariables>(GetFieldAreaDocument, options);
        }
export type GetFieldAreaQueryHookResult = ReturnType<typeof useGetFieldAreaQuery>;
export type GetFieldAreaLazyQueryHookResult = ReturnType<typeof useGetFieldAreaLazyQuery>;
export type GetFieldAreaSuspenseQueryHookResult = ReturnType<typeof useGetFieldAreaSuspenseQuery>;
export type GetFieldAreaQueryResult = Apollo.QueryResult<GetFieldAreaQuery, GetFieldAreaQueryVariables>;
export const CreateFieldDocument = gql`
    mutation CreateField($farmId: ID!, $name: String!, $areaHectares: Float!, $location: JSON!, $boundary: JSON) {
  createField(
    data: {farm: {connect: {id: $farmId}}, name: $name, areaHectares: $areaHectares, location: $location, boundary: $boundary}
  ) {
    id
    name
    areaHectares
    location
    boundary
  }
}
    `;
export type CreateFieldMutationFn = Apollo.MutationFunction<CreateFieldMutation, CreateFieldMutationVariables>;

/**
 * __useCreateFieldMutation__
 *
 * To run a mutation, you first call `useCreateFieldMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCreateFieldMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [createFieldMutation, { data, loading, error }] = useCreateFieldMutation({
 *   variables: {
 *      farmId: // value for 'farmId'
 *      name: // value for 'name'
 *      areaHectares: // value for 'areaHectares'
 *      location: // value for 'location'
 *      boundary: // value for 'boundary'
 *   },
 * });
 */
export function useCreateFieldMutation(baseOptions?: Apollo.MutationHookOptions<CreateFieldMutation, CreateFieldMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<CreateFieldMutation, CreateFieldMutationVariables>(CreateFieldDocument, options);
      }
export type CreateFieldMutationHookResult = ReturnType<typeof useCreateFieldMutation>;
export type CreateFieldMutationResult = Apollo.MutationResult<CreateFieldMutation>;
export type CreateFieldMutationOptions = Apollo.BaseMutationOptions<CreateFieldMutation, CreateFieldMutationVariables>;
export const UpdateFieldDocument = gql`
    mutation UpdateField($id: ID!, $farmId: ID!, $name: String!, $areaHectares: Float!, $location: JSON!, $boundary: JSON) {
  updateField(
    where: {id: $id}
    data: {farm: {connect: {id: $farmId}}, name: $name, areaHectares: $areaHectares, location: $location, boundary: $boundary}
  ) {
    id
    name
    areaHectares
    location
    boundary
    farm {
      id
      name
    }
  }
}
    `;
export type UpdateFieldMutationFn = Apollo.MutationFunction<UpdateFieldMutation, UpdateFieldMutationVariables>;

/**
 * __useUpdateFieldMutation__
 *
 * To run a mutation, you first call `useUpdateFieldMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateFieldMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateFieldMutation, { data, loading, error }] = useUpdateFieldMutation({
 *   variables: {
 *      id: // value for 'id'
 *      farmId: // value for 'farmId'
 *      name: // value for 'name'
 *      areaHectares: // value for 'areaHectares'
 *      location: // value for 'location'
 *      boundary: // value for 'boundary'
 *   },
 * });
 */
export function useUpdateFieldMutation(baseOptions?: Apollo.MutationHookOptions<UpdateFieldMutation, UpdateFieldMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<UpdateFieldMutation, UpdateFieldMutationVariables>(UpdateFieldDocument, options);
      }
export type UpdateFieldMutationHookResult = ReturnType<typeof useUpdateFieldMutation>;
export type UpdateFieldMutationResult = Apollo.MutationResult<UpdateFieldMutation>;
export type UpdateFieldMutationOptions = Apollo.BaseMutationOptions<UpdateFieldMutation, UpdateFieldMutationVariables>;
export const DeleteFieldDocument = gql`
    mutation DeleteField($id: ID!) {
  deleteField(where: {id: $id}) {
    id
  }
}
    `;
export type DeleteFieldMutationFn = Apollo.MutationFunction<DeleteFieldMutation, DeleteFieldMutationVariables>;

/**
 * __useDeleteFieldMutation__
 *
 * To run a mutation, you first call `useDeleteFieldMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useDeleteFieldMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [deleteFieldMutation, { data, loading, error }] = useDeleteFieldMutation({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useDeleteFieldMutation(baseOptions?: Apollo.MutationHookOptions<DeleteFieldMutation, DeleteFieldMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<DeleteFieldMutation, DeleteFieldMutationVariables>(DeleteFieldDocument, options);
      }
export type DeleteFieldMutationHookResult = ReturnType<typeof useDeleteFieldMutation>;
export type DeleteFieldMutationResult = Apollo.MutationResult<DeleteFieldMutation>;
export type DeleteFieldMutationOptions = Apollo.BaseMutationOptions<DeleteFieldMutation, DeleteFieldMutationVariables>;
export const GetCropTypesDocument = gql`
    query GetCropTypes {
  cropTypes {
    id
    name
  }
}
    `;

/**
 * __useGetCropTypesQuery__
 *
 * To run a query within a React component, call `useGetCropTypesQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetCropTypesQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetCropTypesQuery({
 *   variables: {
 *   },
 * });
 */
export function useGetCropTypesQuery(baseOptions?: Apollo.QueryHookOptions<GetCropTypesQuery, GetCropTypesQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetCropTypesQuery, GetCropTypesQueryVariables>(GetCropTypesDocument, options);
      }
export function useGetCropTypesLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetCropTypesQuery, GetCropTypesQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetCropTypesQuery, GetCropTypesQueryVariables>(GetCropTypesDocument, options);
        }
export function useGetCropTypesSuspenseQuery(baseOptions?: Apollo.SkipToken | Apollo.SuspenseQueryHookOptions<GetCropTypesQuery, GetCropTypesQueryVariables>) {
          const options = baseOptions === Apollo.skipToken ? baseOptions : {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<GetCropTypesQuery, GetCropTypesQueryVariables>(GetCropTypesDocument, options);
        }
export type GetCropTypesQueryHookResult = ReturnType<typeof useGetCropTypesQuery>;
export type GetCropTypesLazyQueryHookResult = ReturnType<typeof useGetCropTypesLazyQuery>;
export type GetCropTypesSuspenseQueryHookResult = ReturnType<typeof useGetCropTypesSuspenseQuery>;
export type GetCropTypesQueryResult = Apollo.QueryResult<GetCropTypesQuery, GetCropTypesQueryVariables>;
export const GetCropsDocument = gql`
    query GetCrops($fieldId: ID!) {
  crops(where: {field: {id: {equals: $fieldId}}}) {
    id
    cropAreaHectares
    boundary
    cropType {
      id
      name
    }
  }
}
    `;

/**
 * __useGetCropsQuery__
 *
 * To run a query within a React component, call `useGetCropsQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetCropsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetCropsQuery({
 *   variables: {
 *      fieldId: // value for 'fieldId'
 *   },
 * });
 */
export function useGetCropsQuery(baseOptions: Apollo.QueryHookOptions<GetCropsQuery, GetCropsQueryVariables> & ({ variables: GetCropsQueryVariables; skip?: boolean; } | { skip: boolean; }) ) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetCropsQuery, GetCropsQueryVariables>(GetCropsDocument, options);
      }
export function useGetCropsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetCropsQuery, GetCropsQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetCropsQuery, GetCropsQueryVariables>(GetCropsDocument, options);
        }
export function useGetCropsSuspenseQuery(baseOptions?: Apollo.SkipToken | Apollo.SuspenseQueryHookOptions<GetCropsQuery, GetCropsQueryVariables>) {
          const options = baseOptions === Apollo.skipToken ? baseOptions : {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<GetCropsQuery, GetCropsQueryVariables>(GetCropsDocument, options);
        }
export type GetCropsQueryHookResult = ReturnType<typeof useGetCropsQuery>;
export type GetCropsLazyQueryHookResult = ReturnType<typeof useGetCropsLazyQuery>;
export type GetCropsSuspenseQueryHookResult = ReturnType<typeof useGetCropsSuspenseQuery>;
export type GetCropsQueryResult = Apollo.QueryResult<GetCropsQuery, GetCropsQueryVariables>;
export const GetCropDocument = gql`
    query GetCrop($id: ID!) {
  crop(where: {id: $id}) {
    id
    cropAreaHectares
    boundary
    cropType {
      id
      name
    }
  }
}
    `;

/**
 * __useGetCropQuery__
 *
 * To run a query within a React component, call `useGetCropQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetCropQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetCropQuery({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useGetCropQuery(baseOptions: Apollo.QueryHookOptions<GetCropQuery, GetCropQueryVariables> & ({ variables: GetCropQueryVariables; skip?: boolean; } | { skip: boolean; }) ) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetCropQuery, GetCropQueryVariables>(GetCropDocument, options);
      }
export function useGetCropLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetCropQuery, GetCropQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetCropQuery, GetCropQueryVariables>(GetCropDocument, options);
        }
export function useGetCropSuspenseQuery(baseOptions?: Apollo.SkipToken | Apollo.SuspenseQueryHookOptions<GetCropQuery, GetCropQueryVariables>) {
          const options = baseOptions === Apollo.skipToken ? baseOptions : {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<GetCropQuery, GetCropQueryVariables>(GetCropDocument, options);
        }
export type GetCropQueryHookResult = ReturnType<typeof useGetCropQuery>;
export type GetCropLazyQueryHookResult = ReturnType<typeof useGetCropLazyQuery>;
export type GetCropSuspenseQueryHookResult = ReturnType<typeof useGetCropSuspenseQuery>;
export type GetCropQueryResult = Apollo.QueryResult<GetCropQuery, GetCropQueryVariables>;
export const CreateCropDocument = gql`
    mutation CreateCrop($landId: ID!, $cropTypeId: ID!, $cropAreaHectares: Float!, $boundary: JSON) {
  createCrop(
    data: {field: {connect: {id: $landId}}, cropType: {connect: {id: $cropTypeId}}, cropAreaHectares: $cropAreaHectares, boundary: $boundary}
  ) {
    id
    cropAreaHectares
    cropType {
      id
      name
    }
    boundary
  }
}
    `;
export type CreateCropMutationFn = Apollo.MutationFunction<CreateCropMutation, CreateCropMutationVariables>;

/**
 * __useCreateCropMutation__
 *
 * To run a mutation, you first call `useCreateCropMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCreateCropMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [createCropMutation, { data, loading, error }] = useCreateCropMutation({
 *   variables: {
 *      landId: // value for 'landId'
 *      cropTypeId: // value for 'cropTypeId'
 *      cropAreaHectares: // value for 'cropAreaHectares'
 *      boundary: // value for 'boundary'
 *   },
 * });
 */
export function useCreateCropMutation(baseOptions?: Apollo.MutationHookOptions<CreateCropMutation, CreateCropMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<CreateCropMutation, CreateCropMutationVariables>(CreateCropDocument, options);
      }
export type CreateCropMutationHookResult = ReturnType<typeof useCreateCropMutation>;
export type CreateCropMutationResult = Apollo.MutationResult<CreateCropMutation>;
export type CreateCropMutationOptions = Apollo.BaseMutationOptions<CreateCropMutation, CreateCropMutationVariables>;
export const UpdateCropDocument = gql`
    mutation UpdateCrop($id: ID!, $cropTypeId: ID!, $cropAreaHectares: Float!, $boundary: JSON) {
  updateCrop(
    where: {id: $id}
    data: {cropType: {connect: {id: $cropTypeId}}, cropAreaHectares: $cropAreaHectares, boundary: $boundary}
  ) {
    id
    cropAreaHectares
    cropType {
      id
      name
    }
    boundary
  }
}
    `;
export type UpdateCropMutationFn = Apollo.MutationFunction<UpdateCropMutation, UpdateCropMutationVariables>;

/**
 * __useUpdateCropMutation__
 *
 * To run a mutation, you first call `useUpdateCropMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateCropMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateCropMutation, { data, loading, error }] = useUpdateCropMutation({
 *   variables: {
 *      id: // value for 'id'
 *      cropTypeId: // value for 'cropTypeId'
 *      cropAreaHectares: // value for 'cropAreaHectares'
 *      boundary: // value for 'boundary'
 *   },
 * });
 */
export function useUpdateCropMutation(baseOptions?: Apollo.MutationHookOptions<UpdateCropMutation, UpdateCropMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<UpdateCropMutation, UpdateCropMutationVariables>(UpdateCropDocument, options);
      }
export type UpdateCropMutationHookResult = ReturnType<typeof useUpdateCropMutation>;
export type UpdateCropMutationResult = Apollo.MutationResult<UpdateCropMutation>;
export type UpdateCropMutationOptions = Apollo.BaseMutationOptions<UpdateCropMutation, UpdateCropMutationVariables>;
export const DeleteCropDocument = gql`
    mutation DeleteCrop($id: ID!) {
  deleteCrop(where: {id: $id}) {
    id
  }
}
    `;
export type DeleteCropMutationFn = Apollo.MutationFunction<DeleteCropMutation, DeleteCropMutationVariables>;

/**
 * __useDeleteCropMutation__
 *
 * To run a mutation, you first call `useDeleteCropMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useDeleteCropMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [deleteCropMutation, { data, loading, error }] = useDeleteCropMutation({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useDeleteCropMutation(baseOptions?: Apollo.MutationHookOptions<DeleteCropMutation, DeleteCropMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<DeleteCropMutation, DeleteCropMutationVariables>(DeleteCropDocument, options);
      }
export type DeleteCropMutationHookResult = ReturnType<typeof useDeleteCropMutation>;
export type DeleteCropMutationResult = Apollo.MutationResult<DeleteCropMutation>;
export type DeleteCropMutationOptions = Apollo.BaseMutationOptions<DeleteCropMutation, DeleteCropMutationVariables>;
export const GetDashboardDocument = gql`
    query GetDashboard($where: FarmWhereInput) {
  farms(where: $where) {
    id
    name
    fields {
      areaHectares
      crops {
        cropAreaHectares
        cropType {
          name
        }
      }
    }
  }
}
    `;

/**
 * __useGetDashboardQuery__
 *
 * To run a query within a React component, call `useGetDashboardQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetDashboardQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetDashboardQuery({
 *   variables: {
 *      where: // value for 'where'
 *   },
 * });
 */
export function useGetDashboardQuery(baseOptions?: Apollo.QueryHookOptions<GetDashboardQuery, GetDashboardQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetDashboardQuery, GetDashboardQueryVariables>(GetDashboardDocument, options);
      }
export function useGetDashboardLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetDashboardQuery, GetDashboardQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetDashboardQuery, GetDashboardQueryVariables>(GetDashboardDocument, options);
        }
export function useGetDashboardSuspenseQuery(baseOptions?: Apollo.SkipToken | Apollo.SuspenseQueryHookOptions<GetDashboardQuery, GetDashboardQueryVariables>) {
          const options = baseOptions === Apollo.skipToken ? baseOptions : {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<GetDashboardQuery, GetDashboardQueryVariables>(GetDashboardDocument, options);
        }
export type GetDashboardQueryHookResult = ReturnType<typeof useGetDashboardQuery>;
export type GetDashboardLazyQueryHookResult = ReturnType<typeof useGetDashboardLazyQuery>;
export type GetDashboardSuspenseQueryHookResult = ReturnType<typeof useGetDashboardSuspenseQuery>;
export type GetDashboardQueryResult = Apollo.QueryResult<GetDashboardQuery, GetDashboardQueryVariables>;
export const WeatherRecordsDocument = gql`
    query WeatherRecords($fieldId: ID!, $start: DateTime!, $end: DateTime!) {
  weatherRecords(
    where: {field: {id: {equals: $fieldId}}, date: {gte: $start, lte: $end}}
    take: 1000
  ) {
    id
    date
    temperature
    humidity
    precipitationMm
  }
}
    `;

/**
 * __useWeatherRecordsQuery__
 *
 * To run a query within a React component, call `useWeatherRecordsQuery` and pass it any options that fit your needs.
 * When your component renders, `useWeatherRecordsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useWeatherRecordsQuery({
 *   variables: {
 *      fieldId: // value for 'fieldId'
 *      start: // value for 'start'
 *      end: // value for 'end'
 *   },
 * });
 */
export function useWeatherRecordsQuery(baseOptions: Apollo.QueryHookOptions<WeatherRecordsQuery, WeatherRecordsQueryVariables> & ({ variables: WeatherRecordsQueryVariables; skip?: boolean; } | { skip: boolean; }) ) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<WeatherRecordsQuery, WeatherRecordsQueryVariables>(WeatherRecordsDocument, options);
      }
export function useWeatherRecordsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<WeatherRecordsQuery, WeatherRecordsQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<WeatherRecordsQuery, WeatherRecordsQueryVariables>(WeatherRecordsDocument, options);
        }
export function useWeatherRecordsSuspenseQuery(baseOptions?: Apollo.SkipToken | Apollo.SuspenseQueryHookOptions<WeatherRecordsQuery, WeatherRecordsQueryVariables>) {
          const options = baseOptions === Apollo.skipToken ? baseOptions : {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<WeatherRecordsQuery, WeatherRecordsQueryVariables>(WeatherRecordsDocument, options);
        }
export type WeatherRecordsQueryHookResult = ReturnType<typeof useWeatherRecordsQuery>;
export type WeatherRecordsLazyQueryHookResult = ReturnType<typeof useWeatherRecordsLazyQuery>;
export type WeatherRecordsSuspenseQueryHookResult = ReturnType<typeof useWeatherRecordsSuspenseQuery>;
export type WeatherRecordsQueryResult = Apollo.QueryResult<WeatherRecordsQuery, WeatherRecordsQueryVariables>;
export const CreateWeatherRecordsDocument = gql`
    mutation CreateWeatherRecords($data: [WeatherRecordCreateInput!]!) {
  createWeatherRecords(data: $data) {
    id
  }
}
    `;
export type CreateWeatherRecordsMutationFn = Apollo.MutationFunction<CreateWeatherRecordsMutation, CreateWeatherRecordsMutationVariables>;

/**
 * __useCreateWeatherRecordsMutation__
 *
 * To run a mutation, you first call `useCreateWeatherRecordsMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCreateWeatherRecordsMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [createWeatherRecordsMutation, { data, loading, error }] = useCreateWeatherRecordsMutation({
 *   variables: {
 *      data: // value for 'data'
 *   },
 * });
 */
export function useCreateWeatherRecordsMutation(baseOptions?: Apollo.MutationHookOptions<CreateWeatherRecordsMutation, CreateWeatherRecordsMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<CreateWeatherRecordsMutation, CreateWeatherRecordsMutationVariables>(CreateWeatherRecordsDocument, options);
      }
export type CreateWeatherRecordsMutationHookResult = ReturnType<typeof useCreateWeatherRecordsMutation>;
export type CreateWeatherRecordsMutationResult = Apollo.MutationResult<CreateWeatherRecordsMutation>;
export type CreateWeatherRecordsMutationOptions = Apollo.BaseMutationOptions<CreateWeatherRecordsMutation, CreateWeatherRecordsMutationVariables>;
export const GetSoilMeasurementsDocument = gql`
    query GetSoilMeasurements($fieldIds: [ID!]!, $dateFrom: DateTime, $dateTo: DateTime, $skip: Int = 0, $take: Int = 50) {
  soilMeasurements(
    where: {field: {id: {in: $fieldIds}}, measurementDate: {gte: $dateFrom, lte: $dateTo}}
    orderBy: [{measurementDate: desc}]
    skip: $skip
    take: $take
  ) {
    id
    measurementDate
    sensorId
    ph
    organicMatter
    nitrogen
    moisture
    temperature
    field {
      id
      name
    }
  }
}
    `;

/**
 * __useGetSoilMeasurementsQuery__
 *
 * To run a query within a React component, call `useGetSoilMeasurementsQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetSoilMeasurementsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetSoilMeasurementsQuery({
 *   variables: {
 *      fieldIds: // value for 'fieldIds'
 *      dateFrom: // value for 'dateFrom'
 *      dateTo: // value for 'dateTo'
 *      skip: // value for 'skip'
 *      take: // value for 'take'
 *   },
 * });
 */
export function useGetSoilMeasurementsQuery(baseOptions: Apollo.QueryHookOptions<GetSoilMeasurementsQuery, GetSoilMeasurementsQueryVariables> & ({ variables: GetSoilMeasurementsQueryVariables; skip?: boolean; } | { skip: boolean; }) ) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetSoilMeasurementsQuery, GetSoilMeasurementsQueryVariables>(GetSoilMeasurementsDocument, options);
      }
export function useGetSoilMeasurementsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetSoilMeasurementsQuery, GetSoilMeasurementsQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetSoilMeasurementsQuery, GetSoilMeasurementsQueryVariables>(GetSoilMeasurementsDocument, options);
        }
export function useGetSoilMeasurementsSuspenseQuery(baseOptions?: Apollo.SkipToken | Apollo.SuspenseQueryHookOptions<GetSoilMeasurementsQuery, GetSoilMeasurementsQueryVariables>) {
          const options = baseOptions === Apollo.skipToken ? baseOptions : {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<GetSoilMeasurementsQuery, GetSoilMeasurementsQueryVariables>(GetSoilMeasurementsDocument, options);
        }
export type GetSoilMeasurementsQueryHookResult = ReturnType<typeof useGetSoilMeasurementsQuery>;
export type GetSoilMeasurementsLazyQueryHookResult = ReturnType<typeof useGetSoilMeasurementsLazyQuery>;
export type GetSoilMeasurementsSuspenseQueryHookResult = ReturnType<typeof useGetSoilMeasurementsSuspenseQuery>;
export type GetSoilMeasurementsQueryResult = Apollo.QueryResult<GetSoilMeasurementsQuery, GetSoilMeasurementsQueryVariables>;
export const GetNppBaselinesDocument = gql`
    query GetNPPBaselines($fieldId: ID!, $yearGte: Int, $yearLte: Int, $skip: Int!, $take: Int!) {
  netPrimaryProductivities(
    where: {field: {id: {equals: $fieldId}}, year: {gte: $yearGte, lte: $yearLte}}
    orderBy: {year: desc}
    skip: $skip
    take: $take
  ) {
    id
    year
    meanNPP
    totalNPP
    co2e
    recordedAt
  }
}
    `;

/**
 * __useGetNppBaselinesQuery__
 *
 * To run a query within a React component, call `useGetNppBaselinesQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetNppBaselinesQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetNppBaselinesQuery({
 *   variables: {
 *      fieldId: // value for 'fieldId'
 *      yearGte: // value for 'yearGte'
 *      yearLte: // value for 'yearLte'
 *      skip: // value for 'skip'
 *      take: // value for 'take'
 *   },
 * });
 */
export function useGetNppBaselinesQuery(baseOptions: Apollo.QueryHookOptions<GetNppBaselinesQuery, GetNppBaselinesQueryVariables> & ({ variables: GetNppBaselinesQueryVariables; skip?: boolean; } | { skip: boolean; }) ) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetNppBaselinesQuery, GetNppBaselinesQueryVariables>(GetNppBaselinesDocument, options);
      }
export function useGetNppBaselinesLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetNppBaselinesQuery, GetNppBaselinesQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetNppBaselinesQuery, GetNppBaselinesQueryVariables>(GetNppBaselinesDocument, options);
        }
export function useGetNppBaselinesSuspenseQuery(baseOptions?: Apollo.SkipToken | Apollo.SuspenseQueryHookOptions<GetNppBaselinesQuery, GetNppBaselinesQueryVariables>) {
          const options = baseOptions === Apollo.skipToken ? baseOptions : {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<GetNppBaselinesQuery, GetNppBaselinesQueryVariables>(GetNppBaselinesDocument, options);
        }
export type GetNppBaselinesQueryHookResult = ReturnType<typeof useGetNppBaselinesQuery>;
export type GetNppBaselinesLazyQueryHookResult = ReturnType<typeof useGetNppBaselinesLazyQuery>;
export type GetNppBaselinesSuspenseQueryHookResult = ReturnType<typeof useGetNppBaselinesSuspenseQuery>;
export type GetNppBaselinesQueryResult = Apollo.QueryResult<GetNppBaselinesQuery, GetNppBaselinesQueryVariables>;
export const GetLandCoverStatsDocument = gql`
    query GetLandCoverStats($fieldId: ID!, $yearGte: Int, $yearLte: Int, $skip: Int!, $take: Int!) {
  landCoverStatistics(
    where: {field: {id: {equals: $fieldId}}, year: {gte: $yearGte, lte: $yearLte}}
    orderBy: {year: desc}
    skip: $skip
    take: $take
  ) {
    id
    year
    breakdown
    imageUrl
    recordedAt
  }
}
    `;

/**
 * __useGetLandCoverStatsQuery__
 *
 * To run a query within a React component, call `useGetLandCoverStatsQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetLandCoverStatsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetLandCoverStatsQuery({
 *   variables: {
 *      fieldId: // value for 'fieldId'
 *      yearGte: // value for 'yearGte'
 *      yearLte: // value for 'yearLte'
 *      skip: // value for 'skip'
 *      take: // value for 'take'
 *   },
 * });
 */
export function useGetLandCoverStatsQuery(baseOptions: Apollo.QueryHookOptions<GetLandCoverStatsQuery, GetLandCoverStatsQueryVariables> & ({ variables: GetLandCoverStatsQueryVariables; skip?: boolean; } | { skip: boolean; }) ) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetLandCoverStatsQuery, GetLandCoverStatsQueryVariables>(GetLandCoverStatsDocument, options);
      }
export function useGetLandCoverStatsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetLandCoverStatsQuery, GetLandCoverStatsQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetLandCoverStatsQuery, GetLandCoverStatsQueryVariables>(GetLandCoverStatsDocument, options);
        }
export function useGetLandCoverStatsSuspenseQuery(baseOptions?: Apollo.SkipToken | Apollo.SuspenseQueryHookOptions<GetLandCoverStatsQuery, GetLandCoverStatsQueryVariables>) {
          const options = baseOptions === Apollo.skipToken ? baseOptions : {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<GetLandCoverStatsQuery, GetLandCoverStatsQueryVariables>(GetLandCoverStatsDocument, options);
        }
export type GetLandCoverStatsQueryHookResult = ReturnType<typeof useGetLandCoverStatsQuery>;
export type GetLandCoverStatsLazyQueryHookResult = ReturnType<typeof useGetLandCoverStatsLazyQuery>;
export type GetLandCoverStatsSuspenseQueryHookResult = ReturnType<typeof useGetLandCoverStatsSuspenseQuery>;
export type GetLandCoverStatsQueryResult = Apollo.QueryResult<GetLandCoverStatsQuery, GetLandCoverStatsQueryVariables>;
export const GetSoilCarbonStocksDocument = gql`
    query GetSoilCarbonStocks($fieldId: ID!, $yearGte: Int, $yearLte: Int, $skip: Int!, $take: Int!) {
  soilOrganicCarbonStocks(
    where: {field: {id: {equals: $fieldId}}, year: {gte: $yearGte, lte: $yearLte}}
    orderBy: {year: desc}
    skip: $skip
    take: $take
  ) {
    id
    year
    meanSOC
    totalSOC
    imageUrl
    recordedAt
  }
}
    `;

/**
 * __useGetSoilCarbonStocksQuery__
 *
 * To run a query within a React component, call `useGetSoilCarbonStocksQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetSoilCarbonStocksQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetSoilCarbonStocksQuery({
 *   variables: {
 *      fieldId: // value for 'fieldId'
 *      yearGte: // value for 'yearGte'
 *      yearLte: // value for 'yearLte'
 *      skip: // value for 'skip'
 *      take: // value for 'take'
 *   },
 * });
 */
export function useGetSoilCarbonStocksQuery(baseOptions: Apollo.QueryHookOptions<GetSoilCarbonStocksQuery, GetSoilCarbonStocksQueryVariables> & ({ variables: GetSoilCarbonStocksQueryVariables; skip?: boolean; } | { skip: boolean; }) ) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetSoilCarbonStocksQuery, GetSoilCarbonStocksQueryVariables>(GetSoilCarbonStocksDocument, options);
      }
export function useGetSoilCarbonStocksLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetSoilCarbonStocksQuery, GetSoilCarbonStocksQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetSoilCarbonStocksQuery, GetSoilCarbonStocksQueryVariables>(GetSoilCarbonStocksDocument, options);
        }
export function useGetSoilCarbonStocksSuspenseQuery(baseOptions?: Apollo.SkipToken | Apollo.SuspenseQueryHookOptions<GetSoilCarbonStocksQuery, GetSoilCarbonStocksQueryVariables>) {
          const options = baseOptions === Apollo.skipToken ? baseOptions : {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<GetSoilCarbonStocksQuery, GetSoilCarbonStocksQueryVariables>(GetSoilCarbonStocksDocument, options);
        }
export type GetSoilCarbonStocksQueryHookResult = ReturnType<typeof useGetSoilCarbonStocksQuery>;
export type GetSoilCarbonStocksLazyQueryHookResult = ReturnType<typeof useGetSoilCarbonStocksLazyQuery>;
export type GetSoilCarbonStocksSuspenseQueryHookResult = ReturnType<typeof useGetSoilCarbonStocksSuspenseQuery>;
export type GetSoilCarbonStocksQueryResult = Apollo.QueryResult<GetSoilCarbonStocksQuery, GetSoilCarbonStocksQueryVariables>;
export const GetSoilMoistureDocument = gql`
    query GetSoilMoisture($fieldId: ID!, $dateFrom: DateTime, $dateTo: DateTime, $skip: Int!, $take: Int!) {
  soilMoistureObservations(
    where: {field: {id: {equals: $fieldId}}, date: {gte: $dateFrom, lte: $dateTo}}
    orderBy: {date: asc}
    skip: $skip
    take: $take
  ) {
    id
    date
    meanMoisture
    imageUrl
    recordedAt
  }
}
    `;

/**
 * __useGetSoilMoistureQuery__
 *
 * To run a query within a React component, call `useGetSoilMoistureQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetSoilMoistureQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetSoilMoistureQuery({
 *   variables: {
 *      fieldId: // value for 'fieldId'
 *      dateFrom: // value for 'dateFrom'
 *      dateTo: // value for 'dateTo'
 *      skip: // value for 'skip'
 *      take: // value for 'take'
 *   },
 * });
 */
export function useGetSoilMoistureQuery(baseOptions: Apollo.QueryHookOptions<GetSoilMoistureQuery, GetSoilMoistureQueryVariables> & ({ variables: GetSoilMoistureQueryVariables; skip?: boolean; } | { skip: boolean; }) ) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetSoilMoistureQuery, GetSoilMoistureQueryVariables>(GetSoilMoistureDocument, options);
      }
export function useGetSoilMoistureLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetSoilMoistureQuery, GetSoilMoistureQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetSoilMoistureQuery, GetSoilMoistureQueryVariables>(GetSoilMoistureDocument, options);
        }
export function useGetSoilMoistureSuspenseQuery(baseOptions?: Apollo.SkipToken | Apollo.SuspenseQueryHookOptions<GetSoilMoistureQuery, GetSoilMoistureQueryVariables>) {
          const options = baseOptions === Apollo.skipToken ? baseOptions : {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<GetSoilMoistureQuery, GetSoilMoistureQueryVariables>(GetSoilMoistureDocument, options);
        }
export type GetSoilMoistureQueryHookResult = ReturnType<typeof useGetSoilMoistureQuery>;
export type GetSoilMoistureLazyQueryHookResult = ReturnType<typeof useGetSoilMoistureLazyQuery>;
export type GetSoilMoistureSuspenseQueryHookResult = ReturnType<typeof useGetSoilMoistureSuspenseQuery>;
export type GetSoilMoistureQueryResult = Apollo.QueryResult<GetSoilMoistureQuery, GetSoilMoistureQueryVariables>;
export const GetLandPracticesDocument = gql`
    query GetLandPractices($fieldId: ID!) {
  sustainablePractices(
    where: {events: {some: {field: {id: {equals: $fieldId}}}}}
    orderBy: {name: asc}
  ) {
    id
    name
    category {
      name
    }
    description
  }
}
    `;

/**
 * __useGetLandPracticesQuery__
 *
 * To run a query within a React component, call `useGetLandPracticesQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetLandPracticesQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetLandPracticesQuery({
 *   variables: {
 *      fieldId: // value for 'fieldId'
 *   },
 * });
 */
export function useGetLandPracticesQuery(baseOptions: Apollo.QueryHookOptions<GetLandPracticesQuery, GetLandPracticesQueryVariables> & ({ variables: GetLandPracticesQueryVariables; skip?: boolean; } | { skip: boolean; }) ) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetLandPracticesQuery, GetLandPracticesQueryVariables>(GetLandPracticesDocument, options);
      }
export function useGetLandPracticesLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetLandPracticesQuery, GetLandPracticesQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetLandPracticesQuery, GetLandPracticesQueryVariables>(GetLandPracticesDocument, options);
        }
export function useGetLandPracticesSuspenseQuery(baseOptions?: Apollo.SkipToken | Apollo.SuspenseQueryHookOptions<GetLandPracticesQuery, GetLandPracticesQueryVariables>) {
          const options = baseOptions === Apollo.skipToken ? baseOptions : {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<GetLandPracticesQuery, GetLandPracticesQueryVariables>(GetLandPracticesDocument, options);
        }
export type GetLandPracticesQueryHookResult = ReturnType<typeof useGetLandPracticesQuery>;
export type GetLandPracticesLazyQueryHookResult = ReturnType<typeof useGetLandPracticesLazyQuery>;
export type GetLandPracticesSuspenseQueryHookResult = ReturnType<typeof useGetLandPracticesSuspenseQuery>;
export type GetLandPracticesQueryResult = Apollo.QueryResult<GetLandPracticesQuery, GetLandPracticesQueryVariables>;
export const GetPracticeEventsDocument = gql`
    query GetPracticeEvents($fieldId: ID!) {
  sustainablePracticeEvents(
    where: {field: {id: {equals: $fieldId}}}
    orderBy: {appliedDate: asc}
  ) {
    practice {
      id
      name
    }
    appliedDate
    parameters
  }
}
    `;

/**
 * __useGetPracticeEventsQuery__
 *
 * To run a query within a React component, call `useGetPracticeEventsQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetPracticeEventsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetPracticeEventsQuery({
 *   variables: {
 *      fieldId: // value for 'fieldId'
 *   },
 * });
 */
export function useGetPracticeEventsQuery(baseOptions: Apollo.QueryHookOptions<GetPracticeEventsQuery, GetPracticeEventsQueryVariables> & ({ variables: GetPracticeEventsQueryVariables; skip?: boolean; } | { skip: boolean; }) ) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetPracticeEventsQuery, GetPracticeEventsQueryVariables>(GetPracticeEventsDocument, options);
      }
export function useGetPracticeEventsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetPracticeEventsQuery, GetPracticeEventsQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetPracticeEventsQuery, GetPracticeEventsQueryVariables>(GetPracticeEventsDocument, options);
        }
export function useGetPracticeEventsSuspenseQuery(baseOptions?: Apollo.SkipToken | Apollo.SuspenseQueryHookOptions<GetPracticeEventsQuery, GetPracticeEventsQueryVariables>) {
          const options = baseOptions === Apollo.skipToken ? baseOptions : {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<GetPracticeEventsQuery, GetPracticeEventsQueryVariables>(GetPracticeEventsDocument, options);
        }
export type GetPracticeEventsQueryHookResult = ReturnType<typeof useGetPracticeEventsQuery>;
export type GetPracticeEventsLazyQueryHookResult = ReturnType<typeof useGetPracticeEventsLazyQuery>;
export type GetPracticeEventsSuspenseQueryHookResult = ReturnType<typeof useGetPracticeEventsSuspenseQuery>;
export type GetPracticeEventsQueryResult = Apollo.QueryResult<GetPracticeEventsQuery, GetPracticeEventsQueryVariables>;
export const GetSustainablePracticesDocument = gql`
    query GetSustainablePractices {
  sustainablePractices(orderBy: {name: asc}) {
    id
    name
    description
  }
}
    `;

/**
 * __useGetSustainablePracticesQuery__
 *
 * To run a query within a React component, call `useGetSustainablePracticesQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetSustainablePracticesQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetSustainablePracticesQuery({
 *   variables: {
 *   },
 * });
 */
export function useGetSustainablePracticesQuery(baseOptions?: Apollo.QueryHookOptions<GetSustainablePracticesQuery, GetSustainablePracticesQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetSustainablePracticesQuery, GetSustainablePracticesQueryVariables>(GetSustainablePracticesDocument, options);
      }
export function useGetSustainablePracticesLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetSustainablePracticesQuery, GetSustainablePracticesQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetSustainablePracticesQuery, GetSustainablePracticesQueryVariables>(GetSustainablePracticesDocument, options);
        }
export function useGetSustainablePracticesSuspenseQuery(baseOptions?: Apollo.SkipToken | Apollo.SuspenseQueryHookOptions<GetSustainablePracticesQuery, GetSustainablePracticesQueryVariables>) {
          const options = baseOptions === Apollo.skipToken ? baseOptions : {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<GetSustainablePracticesQuery, GetSustainablePracticesQueryVariables>(GetSustainablePracticesDocument, options);
        }
export type GetSustainablePracticesQueryHookResult = ReturnType<typeof useGetSustainablePracticesQuery>;
export type GetSustainablePracticesLazyQueryHookResult = ReturnType<typeof useGetSustainablePracticesLazyQuery>;
export type GetSustainablePracticesSuspenseQueryHookResult = ReturnType<typeof useGetSustainablePracticesSuspenseQuery>;
export type GetSustainablePracticesQueryResult = Apollo.QueryResult<GetSustainablePracticesQuery, GetSustainablePracticesQueryVariables>;
export const CreateSustainablePracticeEventDocument = gql`
    mutation CreateSustainablePracticeEvent($practiceId: ID!, $fieldId: ID!, $parameters: JSON, $targetImpact: Float, $appliedDate: DateTime!) {
  createSustainablePracticeEvent(
    data: {practice: {connect: {id: $practiceId}}, field: {connect: {id: $fieldId}}, parameters: $parameters, targetImpact: $targetImpact, appliedDate: $appliedDate}
  ) {
    id
    field {
      id
      name
    }
    practice {
      id
      name
    }
    parameters
    appliedDate
  }
}
    `;
export type CreateSustainablePracticeEventMutationFn = Apollo.MutationFunction<CreateSustainablePracticeEventMutation, CreateSustainablePracticeEventMutationVariables>;

/**
 * __useCreateSustainablePracticeEventMutation__
 *
 * To run a mutation, you first call `useCreateSustainablePracticeEventMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCreateSustainablePracticeEventMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [createSustainablePracticeEventMutation, { data, loading, error }] = useCreateSustainablePracticeEventMutation({
 *   variables: {
 *      practiceId: // value for 'practiceId'
 *      fieldId: // value for 'fieldId'
 *      parameters: // value for 'parameters'
 *      targetImpact: // value for 'targetImpact'
 *      appliedDate: // value for 'appliedDate'
 *   },
 * });
 */
export function useCreateSustainablePracticeEventMutation(baseOptions?: Apollo.MutationHookOptions<CreateSustainablePracticeEventMutation, CreateSustainablePracticeEventMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<CreateSustainablePracticeEventMutation, CreateSustainablePracticeEventMutationVariables>(CreateSustainablePracticeEventDocument, options);
      }
export type CreateSustainablePracticeEventMutationHookResult = ReturnType<typeof useCreateSustainablePracticeEventMutation>;
export type CreateSustainablePracticeEventMutationResult = Apollo.MutationResult<CreateSustainablePracticeEventMutation>;
export type CreateSustainablePracticeEventMutationOptions = Apollo.BaseMutationOptions<CreateSustainablePracticeEventMutation, CreateSustainablePracticeEventMutationVariables>;
export const GetPracticeEventsForPracticeDocument = gql`
    query GetPracticeEventsForPractice($fieldId: ID!, $practiceId: ID!, $dateFrom: DateTime, $dateTo: DateTime) {
  sustainablePracticeEvents(
    where: {field: {id: {equals: $fieldId}}, practice: {id: {equals: $practiceId}}, appliedDate: {gte: $dateFrom, lte: $dateTo}}
    orderBy: {appliedDate: desc}
  ) {
    id
    parameters
    targetImpact
    appliedDate
    createdAt
  }
}
    `;

/**
 * __useGetPracticeEventsForPracticeQuery__
 *
 * To run a query within a React component, call `useGetPracticeEventsForPracticeQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetPracticeEventsForPracticeQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetPracticeEventsForPracticeQuery({
 *   variables: {
 *      fieldId: // value for 'fieldId'
 *      practiceId: // value for 'practiceId'
 *      dateFrom: // value for 'dateFrom'
 *      dateTo: // value for 'dateTo'
 *   },
 * });
 */
export function useGetPracticeEventsForPracticeQuery(baseOptions: Apollo.QueryHookOptions<GetPracticeEventsForPracticeQuery, GetPracticeEventsForPracticeQueryVariables> & ({ variables: GetPracticeEventsForPracticeQueryVariables; skip?: boolean; } | { skip: boolean; }) ) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetPracticeEventsForPracticeQuery, GetPracticeEventsForPracticeQueryVariables>(GetPracticeEventsForPracticeDocument, options);
      }
export function useGetPracticeEventsForPracticeLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetPracticeEventsForPracticeQuery, GetPracticeEventsForPracticeQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetPracticeEventsForPracticeQuery, GetPracticeEventsForPracticeQueryVariables>(GetPracticeEventsForPracticeDocument, options);
        }
export function useGetPracticeEventsForPracticeSuspenseQuery(baseOptions?: Apollo.SkipToken | Apollo.SuspenseQueryHookOptions<GetPracticeEventsForPracticeQuery, GetPracticeEventsForPracticeQueryVariables>) {
          const options = baseOptions === Apollo.skipToken ? baseOptions : {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<GetPracticeEventsForPracticeQuery, GetPracticeEventsForPracticeQueryVariables>(GetPracticeEventsForPracticeDocument, options);
        }
export type GetPracticeEventsForPracticeQueryHookResult = ReturnType<typeof useGetPracticeEventsForPracticeQuery>;
export type GetPracticeEventsForPracticeLazyQueryHookResult = ReturnType<typeof useGetPracticeEventsForPracticeLazyQuery>;
export type GetPracticeEventsForPracticeSuspenseQueryHookResult = ReturnType<typeof useGetPracticeEventsForPracticeSuspenseQuery>;
export type GetPracticeEventsForPracticeQueryResult = Apollo.QueryResult<GetPracticeEventsForPracticeQuery, GetPracticeEventsForPracticeQueryVariables>;
export const GetOffsetsForPracticesDocument = gql`
    query GetOffsetsForPractices($practiceIds: [ID!]!) {
  carbonOffsetFactors(where: {sustainablePractice: {id: {in: $practiceIds}}}) {
    id
    min
    max
    cropType {
      id
      name
    }
    sustainablePractice {
      id
    }
  }
}
    `;

/**
 * __useGetOffsetsForPracticesQuery__
 *
 * To run a query within a React component, call `useGetOffsetsForPracticesQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetOffsetsForPracticesQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetOffsetsForPracticesQuery({
 *   variables: {
 *      practiceIds: // value for 'practiceIds'
 *   },
 * });
 */
export function useGetOffsetsForPracticesQuery(baseOptions: Apollo.QueryHookOptions<GetOffsetsForPracticesQuery, GetOffsetsForPracticesQueryVariables> & ({ variables: GetOffsetsForPracticesQueryVariables; skip?: boolean; } | { skip: boolean; }) ) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetOffsetsForPracticesQuery, GetOffsetsForPracticesQueryVariables>(GetOffsetsForPracticesDocument, options);
      }
export function useGetOffsetsForPracticesLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetOffsetsForPracticesQuery, GetOffsetsForPracticesQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetOffsetsForPracticesQuery, GetOffsetsForPracticesQueryVariables>(GetOffsetsForPracticesDocument, options);
        }
export function useGetOffsetsForPracticesSuspenseQuery(baseOptions?: Apollo.SkipToken | Apollo.SuspenseQueryHookOptions<GetOffsetsForPracticesQuery, GetOffsetsForPracticesQueryVariables>) {
          const options = baseOptions === Apollo.skipToken ? baseOptions : {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<GetOffsetsForPracticesQuery, GetOffsetsForPracticesQueryVariables>(GetOffsetsForPracticesDocument, options);
        }
export type GetOffsetsForPracticesQueryHookResult = ReturnType<typeof useGetOffsetsForPracticesQuery>;
export type GetOffsetsForPracticesLazyQueryHookResult = ReturnType<typeof useGetOffsetsForPracticesLazyQuery>;
export type GetOffsetsForPracticesSuspenseQueryHookResult = ReturnType<typeof useGetOffsetsForPracticesSuspenseQuery>;
export type GetOffsetsForPracticesQueryResult = Apollo.QueryResult<GetOffsetsForPracticesQuery, GetOffsetsForPracticesQueryVariables>;
export const GetPostsDocument = gql`
    query GetPosts {
  posts(where: {status: {equals: "published"}}, orderBy: {publishedAt: desc}) {
    id
    title
    slug
    excerpt
    coverImage {
      url
    }
    publishedAt
    author {
      name
      avatar {
        url
      }
    }
  }
}
    `;

/**
 * __useGetPostsQuery__
 *
 * To run a query within a React component, call `useGetPostsQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetPostsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetPostsQuery({
 *   variables: {
 *   },
 * });
 */
export function useGetPostsQuery(baseOptions?: Apollo.QueryHookOptions<GetPostsQuery, GetPostsQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetPostsQuery, GetPostsQueryVariables>(GetPostsDocument, options);
      }
export function useGetPostsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetPostsQuery, GetPostsQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetPostsQuery, GetPostsQueryVariables>(GetPostsDocument, options);
        }
export function useGetPostsSuspenseQuery(baseOptions?: Apollo.SkipToken | Apollo.SuspenseQueryHookOptions<GetPostsQuery, GetPostsQueryVariables>) {
          const options = baseOptions === Apollo.skipToken ? baseOptions : {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<GetPostsQuery, GetPostsQueryVariables>(GetPostsDocument, options);
        }
export type GetPostsQueryHookResult = ReturnType<typeof useGetPostsQuery>;
export type GetPostsLazyQueryHookResult = ReturnType<typeof useGetPostsLazyQuery>;
export type GetPostsSuspenseQueryHookResult = ReturnType<typeof useGetPostsSuspenseQuery>;
export type GetPostsQueryResult = Apollo.QueryResult<GetPostsQuery, GetPostsQueryVariables>;
export const GetPostBySlugDocument = gql`
    query GetPostBySlug($slug: String!) {
  posts(where: {slug: {equals: $slug}}) {
    id
    title
    content
    coverImage {
      url
    }
    publishedAt
    author {
      name
      avatar {
        url
      }
    }
    tags {
      name
      slug
    }
    category {
      name
    }
  }
}
    `;

/**
 * __useGetPostBySlugQuery__
 *
 * To run a query within a React component, call `useGetPostBySlugQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetPostBySlugQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetPostBySlugQuery({
 *   variables: {
 *      slug: // value for 'slug'
 *   },
 * });
 */
export function useGetPostBySlugQuery(baseOptions: Apollo.QueryHookOptions<GetPostBySlugQuery, GetPostBySlugQueryVariables> & ({ variables: GetPostBySlugQueryVariables; skip?: boolean; } | { skip: boolean; }) ) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetPostBySlugQuery, GetPostBySlugQueryVariables>(GetPostBySlugDocument, options);
      }
export function useGetPostBySlugLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetPostBySlugQuery, GetPostBySlugQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetPostBySlugQuery, GetPostBySlugQueryVariables>(GetPostBySlugDocument, options);
        }
export function useGetPostBySlugSuspenseQuery(baseOptions?: Apollo.SkipToken | Apollo.SuspenseQueryHookOptions<GetPostBySlugQuery, GetPostBySlugQueryVariables>) {
          const options = baseOptions === Apollo.skipToken ? baseOptions : {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<GetPostBySlugQuery, GetPostBySlugQueryVariables>(GetPostBySlugDocument, options);
        }
export type GetPostBySlugQueryHookResult = ReturnType<typeof useGetPostBySlugQuery>;
export type GetPostBySlugLazyQueryHookResult = ReturnType<typeof useGetPostBySlugLazyQuery>;
export type GetPostBySlugSuspenseQueryHookResult = ReturnType<typeof useGetPostBySlugSuspenseQuery>;
export type GetPostBySlugQueryResult = Apollo.QueryResult<GetPostBySlugQuery, GetPostBySlugQueryVariables>;
export const CreateSubscriberDocument = gql`
    mutation CreateSubscriber($email: String!) {
  createNewsletterSubscriber(data: {email: $email}) {
    id
    email
    subscribedAt
  }
}
    `;
export type CreateSubscriberMutationFn = Apollo.MutationFunction<CreateSubscriberMutation, CreateSubscriberMutationVariables>;

/**
 * __useCreateSubscriberMutation__
 *
 * To run a mutation, you first call `useCreateSubscriberMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCreateSubscriberMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [createSubscriberMutation, { data, loading, error }] = useCreateSubscriberMutation({
 *   variables: {
 *      email: // value for 'email'
 *   },
 * });
 */
export function useCreateSubscriberMutation(baseOptions?: Apollo.MutationHookOptions<CreateSubscriberMutation, CreateSubscriberMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<CreateSubscriberMutation, CreateSubscriberMutationVariables>(CreateSubscriberDocument, options);
      }
export type CreateSubscriberMutationHookResult = ReturnType<typeof useCreateSubscriberMutation>;
export type CreateSubscriberMutationResult = Apollo.MutationResult<CreateSubscriberMutation>;
export type CreateSubscriberMutationOptions = Apollo.BaseMutationOptions<CreateSubscriberMutation, CreateSubscriberMutationVariables>;
export const SubscriberByEmailDocument = gql`
    query SubscriberByEmail($email: String!) {
  newsletterSubscribers(where: {email: {equals: $email}}) {
    id
    email
    isActive
  }
}
    `;

/**
 * __useSubscriberByEmailQuery__
 *
 * To run a query within a React component, call `useSubscriberByEmailQuery` and pass it any options that fit your needs.
 * When your component renders, `useSubscriberByEmailQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useSubscriberByEmailQuery({
 *   variables: {
 *      email: // value for 'email'
 *   },
 * });
 */
export function useSubscriberByEmailQuery(baseOptions: Apollo.QueryHookOptions<SubscriberByEmailQuery, SubscriberByEmailQueryVariables> & ({ variables: SubscriberByEmailQueryVariables; skip?: boolean; } | { skip: boolean; }) ) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<SubscriberByEmailQuery, SubscriberByEmailQueryVariables>(SubscriberByEmailDocument, options);
      }
export function useSubscriberByEmailLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<SubscriberByEmailQuery, SubscriberByEmailQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<SubscriberByEmailQuery, SubscriberByEmailQueryVariables>(SubscriberByEmailDocument, options);
        }
export function useSubscriberByEmailSuspenseQuery(baseOptions?: Apollo.SkipToken | Apollo.SuspenseQueryHookOptions<SubscriberByEmailQuery, SubscriberByEmailQueryVariables>) {
          const options = baseOptions === Apollo.skipToken ? baseOptions : {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<SubscriberByEmailQuery, SubscriberByEmailQueryVariables>(SubscriberByEmailDocument, options);
        }
export type SubscriberByEmailQueryHookResult = ReturnType<typeof useSubscriberByEmailQuery>;
export type SubscriberByEmailLazyQueryHookResult = ReturnType<typeof useSubscriberByEmailLazyQuery>;
export type SubscriberByEmailSuspenseQueryHookResult = ReturnType<typeof useSubscriberByEmailSuspenseQuery>;
export type SubscriberByEmailQueryResult = Apollo.QueryResult<SubscriberByEmailQuery, SubscriberByEmailQueryVariables>;
export const UpdateSubscriberDocument = gql`
    mutation UpdateSubscriber($id: ID!, $isActive: Boolean!) {
  updateNewsletterSubscriber(where: {id: $id}, data: {isActive: $isActive}) {
    id
    isActive
  }
}
    `;
export type UpdateSubscriberMutationFn = Apollo.MutationFunction<UpdateSubscriberMutation, UpdateSubscriberMutationVariables>;

/**
 * __useUpdateSubscriberMutation__
 *
 * To run a mutation, you first call `useUpdateSubscriberMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateSubscriberMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateSubscriberMutation, { data, loading, error }] = useUpdateSubscriberMutation({
 *   variables: {
 *      id: // value for 'id'
 *      isActive: // value for 'isActive'
 *   },
 * });
 */
export function useUpdateSubscriberMutation(baseOptions?: Apollo.MutationHookOptions<UpdateSubscriberMutation, UpdateSubscriberMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<UpdateSubscriberMutation, UpdateSubscriberMutationVariables>(UpdateSubscriberDocument, options);
      }
export type UpdateSubscriberMutationHookResult = ReturnType<typeof useUpdateSubscriberMutation>;
export type UpdateSubscriberMutationResult = Apollo.MutationResult<UpdateSubscriberMutation>;
export type UpdateSubscriberMutationOptions = Apollo.BaseMutationOptions<UpdateSubscriberMutation, UpdateSubscriberMutationVariables>;
export const GetJobOpeningsDocument = gql`
    query GetJobOpenings {
  jobOpenings {
    id
    title
    department
    location
    employmentType
    seniority
  }
}
    `;

/**
 * __useGetJobOpeningsQuery__
 *
 * To run a query within a React component, call `useGetJobOpeningsQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetJobOpeningsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetJobOpeningsQuery({
 *   variables: {
 *   },
 * });
 */
export function useGetJobOpeningsQuery(baseOptions?: Apollo.QueryHookOptions<GetJobOpeningsQuery, GetJobOpeningsQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetJobOpeningsQuery, GetJobOpeningsQueryVariables>(GetJobOpeningsDocument, options);
      }
export function useGetJobOpeningsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetJobOpeningsQuery, GetJobOpeningsQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetJobOpeningsQuery, GetJobOpeningsQueryVariables>(GetJobOpeningsDocument, options);
        }
export function useGetJobOpeningsSuspenseQuery(baseOptions?: Apollo.SkipToken | Apollo.SuspenseQueryHookOptions<GetJobOpeningsQuery, GetJobOpeningsQueryVariables>) {
          const options = baseOptions === Apollo.skipToken ? baseOptions : {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<GetJobOpeningsQuery, GetJobOpeningsQueryVariables>(GetJobOpeningsDocument, options);
        }
export type GetJobOpeningsQueryHookResult = ReturnType<typeof useGetJobOpeningsQuery>;
export type GetJobOpeningsLazyQueryHookResult = ReturnType<typeof useGetJobOpeningsLazyQuery>;
export type GetJobOpeningsSuspenseQueryHookResult = ReturnType<typeof useGetJobOpeningsSuspenseQuery>;
export type GetJobOpeningsQueryResult = Apollo.QueryResult<GetJobOpeningsQuery, GetJobOpeningsQueryVariables>;
export const GetJobOpeningDocument = gql`
    query GetJobOpening($where: JobOpeningWhereUniqueInput!) {
  jobOpening(where: $where) {
    id
    title
    department
    location
    employmentType
    seniority
    description
  }
}
    `;

/**
 * __useGetJobOpeningQuery__
 *
 * To run a query within a React component, call `useGetJobOpeningQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetJobOpeningQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetJobOpeningQuery({
 *   variables: {
 *      where: // value for 'where'
 *   },
 * });
 */
export function useGetJobOpeningQuery(baseOptions: Apollo.QueryHookOptions<GetJobOpeningQuery, GetJobOpeningQueryVariables> & ({ variables: GetJobOpeningQueryVariables; skip?: boolean; } | { skip: boolean; }) ) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetJobOpeningQuery, GetJobOpeningQueryVariables>(GetJobOpeningDocument, options);
      }
export function useGetJobOpeningLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetJobOpeningQuery, GetJobOpeningQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetJobOpeningQuery, GetJobOpeningQueryVariables>(GetJobOpeningDocument, options);
        }
export function useGetJobOpeningSuspenseQuery(baseOptions?: Apollo.SkipToken | Apollo.SuspenseQueryHookOptions<GetJobOpeningQuery, GetJobOpeningQueryVariables>) {
          const options = baseOptions === Apollo.skipToken ? baseOptions : {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<GetJobOpeningQuery, GetJobOpeningQueryVariables>(GetJobOpeningDocument, options);
        }
export type GetJobOpeningQueryHookResult = ReturnType<typeof useGetJobOpeningQuery>;
export type GetJobOpeningLazyQueryHookResult = ReturnType<typeof useGetJobOpeningLazyQuery>;
export type GetJobOpeningSuspenseQueryHookResult = ReturnType<typeof useGetJobOpeningSuspenseQuery>;
export type GetJobOpeningQueryResult = Apollo.QueryResult<GetJobOpeningQuery, GetJobOpeningQueryVariables>;
export const ApplyJobDocument = gql`
    mutation ApplyJob($data: JobCandidateCreateInput!) {
  createJobCandidate(data: $data) {
    id
  }
}
    `;
export type ApplyJobMutationFn = Apollo.MutationFunction<ApplyJobMutation, ApplyJobMutationVariables>;

/**
 * __useApplyJobMutation__
 *
 * To run a mutation, you first call `useApplyJobMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useApplyJobMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [applyJobMutation, { data, loading, error }] = useApplyJobMutation({
 *   variables: {
 *      data: // value for 'data'
 *   },
 * });
 */
export function useApplyJobMutation(baseOptions?: Apollo.MutationHookOptions<ApplyJobMutation, ApplyJobMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<ApplyJobMutation, ApplyJobMutationVariables>(ApplyJobDocument, options);
      }
export type ApplyJobMutationHookResult = ReturnType<typeof useApplyJobMutation>;
export type ApplyJobMutationResult = Apollo.MutationResult<ApplyJobMutation>;
export type ApplyJobMutationOptions = Apollo.BaseMutationOptions<ApplyJobMutation, ApplyJobMutationVariables>;
export const GetReferralPartnersDocument = gql`
    query GetReferralPartners {
  referralPartners(orderBy: {createdAt: desc}) {
    id
    name
    type
    commission_pct
    contactEmail
    ownerUser {
      id
    }
  }
}
    `;

/**
 * __useGetReferralPartnersQuery__
 *
 * To run a query within a React component, call `useGetReferralPartnersQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetReferralPartnersQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetReferralPartnersQuery({
 *   variables: {
 *   },
 * });
 */
export function useGetReferralPartnersQuery(baseOptions?: Apollo.QueryHookOptions<GetReferralPartnersQuery, GetReferralPartnersQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetReferralPartnersQuery, GetReferralPartnersQueryVariables>(GetReferralPartnersDocument, options);
      }
export function useGetReferralPartnersLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetReferralPartnersQuery, GetReferralPartnersQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetReferralPartnersQuery, GetReferralPartnersQueryVariables>(GetReferralPartnersDocument, options);
        }
export function useGetReferralPartnersSuspenseQuery(baseOptions?: Apollo.SkipToken | Apollo.SuspenseQueryHookOptions<GetReferralPartnersQuery, GetReferralPartnersQueryVariables>) {
          const options = baseOptions === Apollo.skipToken ? baseOptions : {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<GetReferralPartnersQuery, GetReferralPartnersQueryVariables>(GetReferralPartnersDocument, options);
        }
export type GetReferralPartnersQueryHookResult = ReturnType<typeof useGetReferralPartnersQuery>;
export type GetReferralPartnersLazyQueryHookResult = ReturnType<typeof useGetReferralPartnersLazyQuery>;
export type GetReferralPartnersSuspenseQueryHookResult = ReturnType<typeof useGetReferralPartnersSuspenseQuery>;
export type GetReferralPartnersQueryResult = Apollo.QueryResult<GetReferralPartnersQuery, GetReferralPartnersQueryVariables>;
export const CreateReferralPartnerDocument = gql`
    mutation CreateReferralPartner($name: String!, $type: String!, $contactEmail: String!, $commissionPct: Float!) {
  createReferralPartner(
    data: {name: $name, type: $type, contactEmail: $contactEmail, commission_pct: $commissionPct}
  ) {
    id
    name
  }
}
    `;
export type CreateReferralPartnerMutationFn = Apollo.MutationFunction<CreateReferralPartnerMutation, CreateReferralPartnerMutationVariables>;

/**
 * __useCreateReferralPartnerMutation__
 *
 * To run a mutation, you first call `useCreateReferralPartnerMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCreateReferralPartnerMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [createReferralPartnerMutation, { data, loading, error }] = useCreateReferralPartnerMutation({
 *   variables: {
 *      name: // value for 'name'
 *      type: // value for 'type'
 *      contactEmail: // value for 'contactEmail'
 *      commissionPct: // value for 'commissionPct'
 *   },
 * });
 */
export function useCreateReferralPartnerMutation(baseOptions?: Apollo.MutationHookOptions<CreateReferralPartnerMutation, CreateReferralPartnerMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<CreateReferralPartnerMutation, CreateReferralPartnerMutationVariables>(CreateReferralPartnerDocument, options);
      }
export type CreateReferralPartnerMutationHookResult = ReturnType<typeof useCreateReferralPartnerMutation>;
export type CreateReferralPartnerMutationResult = Apollo.MutationResult<CreateReferralPartnerMutation>;
export type CreateReferralPartnerMutationOptions = Apollo.BaseMutationOptions<CreateReferralPartnerMutation, CreateReferralPartnerMutationVariables>;
export const CreateReferralPartnerForUserDocument = gql`
    mutation CreateReferralPartnerForUser($name: String!, $type: String!, $contactEmail: String!, $commissionPct: Float!, $ownerUserId: ID!) {
  createReferralPartner(
    data: {name: $name, type: $type, contactEmail: $contactEmail, commission_pct: $commissionPct, ownerUser: {connect: {id: $ownerUserId}}}
  ) {
    id
  }
}
    `;
export type CreateReferralPartnerForUserMutationFn = Apollo.MutationFunction<CreateReferralPartnerForUserMutation, CreateReferralPartnerForUserMutationVariables>;

/**
 * __useCreateReferralPartnerForUserMutation__
 *
 * To run a mutation, you first call `useCreateReferralPartnerForUserMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCreateReferralPartnerForUserMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [createReferralPartnerForUserMutation, { data, loading, error }] = useCreateReferralPartnerForUserMutation({
 *   variables: {
 *      name: // value for 'name'
 *      type: // value for 'type'
 *      contactEmail: // value for 'contactEmail'
 *      commissionPct: // value for 'commissionPct'
 *      ownerUserId: // value for 'ownerUserId'
 *   },
 * });
 */
export function useCreateReferralPartnerForUserMutation(baseOptions?: Apollo.MutationHookOptions<CreateReferralPartnerForUserMutation, CreateReferralPartnerForUserMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<CreateReferralPartnerForUserMutation, CreateReferralPartnerForUserMutationVariables>(CreateReferralPartnerForUserDocument, options);
      }
export type CreateReferralPartnerForUserMutationHookResult = ReturnType<typeof useCreateReferralPartnerForUserMutation>;
export type CreateReferralPartnerForUserMutationResult = Apollo.MutationResult<CreateReferralPartnerForUserMutation>;
export type CreateReferralPartnerForUserMutationOptions = Apollo.BaseMutationOptions<CreateReferralPartnerForUserMutation, CreateReferralPartnerForUserMutationVariables>;
export const SearchUsersDocument = gql`
    query SearchUsers($query: String!) {
  users(
    where: {OR: [{name: {contains: $query, mode: insensitive}}, {email: {contains: $query, mode: insensitive}}]}
    take: 10
  ) {
    id
    name
    email
  }
}
    `;

/**
 * __useSearchUsersQuery__
 *
 * To run a query within a React component, call `useSearchUsersQuery` and pass it any options that fit your needs.
 * When your component renders, `useSearchUsersQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useSearchUsersQuery({
 *   variables: {
 *      query: // value for 'query'
 *   },
 * });
 */
export function useSearchUsersQuery(baseOptions: Apollo.QueryHookOptions<SearchUsersQuery, SearchUsersQueryVariables> & ({ variables: SearchUsersQueryVariables; skip?: boolean; } | { skip: boolean; }) ) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<SearchUsersQuery, SearchUsersQueryVariables>(SearchUsersDocument, options);
      }
export function useSearchUsersLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<SearchUsersQuery, SearchUsersQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<SearchUsersQuery, SearchUsersQueryVariables>(SearchUsersDocument, options);
        }
export function useSearchUsersSuspenseQuery(baseOptions?: Apollo.SkipToken | Apollo.SuspenseQueryHookOptions<SearchUsersQuery, SearchUsersQueryVariables>) {
          const options = baseOptions === Apollo.skipToken ? baseOptions : {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<SearchUsersQuery, SearchUsersQueryVariables>(SearchUsersDocument, options);
        }
export type SearchUsersQueryHookResult = ReturnType<typeof useSearchUsersQuery>;
export type SearchUsersLazyQueryHookResult = ReturnType<typeof useSearchUsersLazyQuery>;
export type SearchUsersSuspenseQueryHookResult = ReturnType<typeof useSearchUsersSuspenseQuery>;
export type SearchUsersQueryResult = Apollo.QueryResult<SearchUsersQuery, SearchUsersQueryVariables>;
export const GetPartnerMembershipsDocument = gql`
    query GetPartnerMemberships {
  memberships(where: {role: {equals: "partner"}}) {
    id
    user {
      id
      name
      email
    }
  }
}
    `;

/**
 * __useGetPartnerMembershipsQuery__
 *
 * To run a query within a React component, call `useGetPartnerMembershipsQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetPartnerMembershipsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetPartnerMembershipsQuery({
 *   variables: {
 *   },
 * });
 */
export function useGetPartnerMembershipsQuery(baseOptions?: Apollo.QueryHookOptions<GetPartnerMembershipsQuery, GetPartnerMembershipsQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetPartnerMembershipsQuery, GetPartnerMembershipsQueryVariables>(GetPartnerMembershipsDocument, options);
      }
export function useGetPartnerMembershipsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetPartnerMembershipsQuery, GetPartnerMembershipsQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetPartnerMembershipsQuery, GetPartnerMembershipsQueryVariables>(GetPartnerMembershipsDocument, options);
        }
export function useGetPartnerMembershipsSuspenseQuery(baseOptions?: Apollo.SkipToken | Apollo.SuspenseQueryHookOptions<GetPartnerMembershipsQuery, GetPartnerMembershipsQueryVariables>) {
          const options = baseOptions === Apollo.skipToken ? baseOptions : {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<GetPartnerMembershipsQuery, GetPartnerMembershipsQueryVariables>(GetPartnerMembershipsDocument, options);
        }
export type GetPartnerMembershipsQueryHookResult = ReturnType<typeof useGetPartnerMembershipsQuery>;
export type GetPartnerMembershipsLazyQueryHookResult = ReturnType<typeof useGetPartnerMembershipsLazyQuery>;
export type GetPartnerMembershipsSuspenseQueryHookResult = ReturnType<typeof useGetPartnerMembershipsSuspenseQuery>;
export type GetPartnerMembershipsQueryResult = Apollo.QueryResult<GetPartnerMembershipsQuery, GetPartnerMembershipsQueryVariables>;
export const AddPartnerMembershipDocument = gql`
    mutation AddPartnerMembership($userId: ID!) {
  createMembership(data: {user: {connect: {id: $userId}}, role: "partner"}) {
    id
  }
}
    `;
export type AddPartnerMembershipMutationFn = Apollo.MutationFunction<AddPartnerMembershipMutation, AddPartnerMembershipMutationVariables>;

/**
 * __useAddPartnerMembershipMutation__
 *
 * To run a mutation, you first call `useAddPartnerMembershipMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useAddPartnerMembershipMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [addPartnerMembershipMutation, { data, loading, error }] = useAddPartnerMembershipMutation({
 *   variables: {
 *      userId: // value for 'userId'
 *   },
 * });
 */
export function useAddPartnerMembershipMutation(baseOptions?: Apollo.MutationHookOptions<AddPartnerMembershipMutation, AddPartnerMembershipMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<AddPartnerMembershipMutation, AddPartnerMembershipMutationVariables>(AddPartnerMembershipDocument, options);
      }
export type AddPartnerMembershipMutationHookResult = ReturnType<typeof useAddPartnerMembershipMutation>;
export type AddPartnerMembershipMutationResult = Apollo.MutationResult<AddPartnerMembershipMutation>;
export type AddPartnerMembershipMutationOptions = Apollo.BaseMutationOptions<AddPartnerMembershipMutation, AddPartnerMembershipMutationVariables>;
export const RemovePartnerMembershipDocument = gql`
    mutation RemovePartnerMembership($id: ID!) {
  deleteMembership(where: {id: $id}) {
    id
  }
}
    `;
export type RemovePartnerMembershipMutationFn = Apollo.MutationFunction<RemovePartnerMembershipMutation, RemovePartnerMembershipMutationVariables>;

/**
 * __useRemovePartnerMembershipMutation__
 *
 * To run a mutation, you first call `useRemovePartnerMembershipMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useRemovePartnerMembershipMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [removePartnerMembershipMutation, { data, loading, error }] = useRemovePartnerMembershipMutation({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useRemovePartnerMembershipMutation(baseOptions?: Apollo.MutationHookOptions<RemovePartnerMembershipMutation, RemovePartnerMembershipMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<RemovePartnerMembershipMutation, RemovePartnerMembershipMutationVariables>(RemovePartnerMembershipDocument, options);
      }
export type RemovePartnerMembershipMutationHookResult = ReturnType<typeof useRemovePartnerMembershipMutation>;
export type RemovePartnerMembershipMutationResult = Apollo.MutationResult<RemovePartnerMembershipMutation>;
export type RemovePartnerMembershipMutationOptions = Apollo.BaseMutationOptions<RemovePartnerMembershipMutation, RemovePartnerMembershipMutationVariables>;
export const GetReferralCampaignsDocument = gql`
    query GetReferralCampaigns {
  referralCampaigns(orderBy: {startDate: desc}) {
    id
    code
    discount_pct
    startDate
    endDate
    partner {
      id
      name
    }
  }
}
    `;

/**
 * __useGetReferralCampaignsQuery__
 *
 * To run a query within a React component, call `useGetReferralCampaignsQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetReferralCampaignsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetReferralCampaignsQuery({
 *   variables: {
 *   },
 * });
 */
export function useGetReferralCampaignsQuery(baseOptions?: Apollo.QueryHookOptions<GetReferralCampaignsQuery, GetReferralCampaignsQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetReferralCampaignsQuery, GetReferralCampaignsQueryVariables>(GetReferralCampaignsDocument, options);
      }
export function useGetReferralCampaignsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetReferralCampaignsQuery, GetReferralCampaignsQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetReferralCampaignsQuery, GetReferralCampaignsQueryVariables>(GetReferralCampaignsDocument, options);
        }
export function useGetReferralCampaignsSuspenseQuery(baseOptions?: Apollo.SkipToken | Apollo.SuspenseQueryHookOptions<GetReferralCampaignsQuery, GetReferralCampaignsQueryVariables>) {
          const options = baseOptions === Apollo.skipToken ? baseOptions : {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<GetReferralCampaignsQuery, GetReferralCampaignsQueryVariables>(GetReferralCampaignsDocument, options);
        }
export type GetReferralCampaignsQueryHookResult = ReturnType<typeof useGetReferralCampaignsQuery>;
export type GetReferralCampaignsLazyQueryHookResult = ReturnType<typeof useGetReferralCampaignsLazyQuery>;
export type GetReferralCampaignsSuspenseQueryHookResult = ReturnType<typeof useGetReferralCampaignsSuspenseQuery>;
export type GetReferralCampaignsQueryResult = Apollo.QueryResult<GetReferralCampaignsQuery, GetReferralCampaignsQueryVariables>;
export const CreateReferralCampaignDocument = gql`
    mutation CreateReferralCampaign($partnerId: ID!, $code: String!, $discountPct: Float!, $startDate: DateTime, $endDate: DateTime) {
  createReferralCampaign(
    data: {partner: {connect: {id: $partnerId}}, code: $code, discount_pct: $discountPct, startDate: $startDate, endDate: $endDate}
  ) {
    id
    code
  }
}
    `;
export type CreateReferralCampaignMutationFn = Apollo.MutationFunction<CreateReferralCampaignMutation, CreateReferralCampaignMutationVariables>;

/**
 * __useCreateReferralCampaignMutation__
 *
 * To run a mutation, you first call `useCreateReferralCampaignMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCreateReferralCampaignMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [createReferralCampaignMutation, { data, loading, error }] = useCreateReferralCampaignMutation({
 *   variables: {
 *      partnerId: // value for 'partnerId'
 *      code: // value for 'code'
 *      discountPct: // value for 'discountPct'
 *      startDate: // value for 'startDate'
 *      endDate: // value for 'endDate'
 *   },
 * });
 */
export function useCreateReferralCampaignMutation(baseOptions?: Apollo.MutationHookOptions<CreateReferralCampaignMutation, CreateReferralCampaignMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<CreateReferralCampaignMutation, CreateReferralCampaignMutationVariables>(CreateReferralCampaignDocument, options);
      }
export type CreateReferralCampaignMutationHookResult = ReturnType<typeof useCreateReferralCampaignMutation>;
export type CreateReferralCampaignMutationResult = Apollo.MutationResult<CreateReferralCampaignMutation>;
export type CreateReferralCampaignMutationOptions = Apollo.BaseMutationOptions<CreateReferralCampaignMutation, CreateReferralCampaignMutationVariables>;
export const FindActiveReferralCampaignDocument = gql`
    query FindActiveReferralCampaign($code: String!, $now: DateTime!) {
  referralCampaigns(
    where: {code: {equals: $code}, AND: [{OR: [{startDate: {equals: null}}, {startDate: {lte: $now}}]}, {OR: [{endDate: {equals: null}}, {endDate: {gte: $now}}]}]}
    take: 1
  ) {
    id
    discount_pct
  }
}
    `;

/**
 * __useFindActiveReferralCampaignQuery__
 *
 * To run a query within a React component, call `useFindActiveReferralCampaignQuery` and pass it any options that fit your needs.
 * When your component renders, `useFindActiveReferralCampaignQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useFindActiveReferralCampaignQuery({
 *   variables: {
 *      code: // value for 'code'
 *      now: // value for 'now'
 *   },
 * });
 */
export function useFindActiveReferralCampaignQuery(baseOptions: Apollo.QueryHookOptions<FindActiveReferralCampaignQuery, FindActiveReferralCampaignQueryVariables> & ({ variables: FindActiveReferralCampaignQueryVariables; skip?: boolean; } | { skip: boolean; }) ) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<FindActiveReferralCampaignQuery, FindActiveReferralCampaignQueryVariables>(FindActiveReferralCampaignDocument, options);
      }
export function useFindActiveReferralCampaignLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<FindActiveReferralCampaignQuery, FindActiveReferralCampaignQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<FindActiveReferralCampaignQuery, FindActiveReferralCampaignQueryVariables>(FindActiveReferralCampaignDocument, options);
        }
export function useFindActiveReferralCampaignSuspenseQuery(baseOptions?: Apollo.SkipToken | Apollo.SuspenseQueryHookOptions<FindActiveReferralCampaignQuery, FindActiveReferralCampaignQueryVariables>) {
          const options = baseOptions === Apollo.skipToken ? baseOptions : {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<FindActiveReferralCampaignQuery, FindActiveReferralCampaignQueryVariables>(FindActiveReferralCampaignDocument, options);
        }
export type FindActiveReferralCampaignQueryHookResult = ReturnType<typeof useFindActiveReferralCampaignQuery>;
export type FindActiveReferralCampaignLazyQueryHookResult = ReturnType<typeof useFindActiveReferralCampaignLazyQuery>;
export type FindActiveReferralCampaignSuspenseQueryHookResult = ReturnType<typeof useFindActiveReferralCampaignSuspenseQuery>;
export type FindActiveReferralCampaignQueryResult = Apollo.QueryResult<FindActiveReferralCampaignQuery, FindActiveReferralCampaignQueryVariables>;
export const UpdateReferralPartnerDocument = gql`
    mutation UpdateReferralPartner($id: ID!, $commissionPct: Float!) {
  updateReferralPartner(where: {id: $id}, data: {commission_pct: $commissionPct}) {
    id
    commission_pct
  }
}
    `;
export type UpdateReferralPartnerMutationFn = Apollo.MutationFunction<UpdateReferralPartnerMutation, UpdateReferralPartnerMutationVariables>;

/**
 * __useUpdateReferralPartnerMutation__
 *
 * To run a mutation, you first call `useUpdateReferralPartnerMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateReferralPartnerMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateReferralPartnerMutation, { data, loading, error }] = useUpdateReferralPartnerMutation({
 *   variables: {
 *      id: // value for 'id'
 *      commissionPct: // value for 'commissionPct'
 *   },
 * });
 */
export function useUpdateReferralPartnerMutation(baseOptions?: Apollo.MutationHookOptions<UpdateReferralPartnerMutation, UpdateReferralPartnerMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<UpdateReferralPartnerMutation, UpdateReferralPartnerMutationVariables>(UpdateReferralPartnerDocument, options);
      }
export type UpdateReferralPartnerMutationHookResult = ReturnType<typeof useUpdateReferralPartnerMutation>;
export type UpdateReferralPartnerMutationResult = Apollo.MutationResult<UpdateReferralPartnerMutation>;
export type UpdateReferralPartnerMutationOptions = Apollo.BaseMutationOptions<UpdateReferralPartnerMutation, UpdateReferralPartnerMutationVariables>;
export const CreateReferralRedemptionDocument = gql`
    mutation CreateReferralRedemption($campaignId: ID!, $userId: ID!, $signup: DateTime!, $discountValue: Float!) {
  createReferralRedemption(
    data: {campaign: {connect: {id: $campaignId}}, farmerUser: {connect: {id: $userId}}, signupDate: $signup, discountValue: $discountValue}
  ) {
    id
  }
}
    `;
export type CreateReferralRedemptionMutationFn = Apollo.MutationFunction<CreateReferralRedemptionMutation, CreateReferralRedemptionMutationVariables>;

/**
 * __useCreateReferralRedemptionMutation__
 *
 * To run a mutation, you first call `useCreateReferralRedemptionMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCreateReferralRedemptionMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [createReferralRedemptionMutation, { data, loading, error }] = useCreateReferralRedemptionMutation({
 *   variables: {
 *      campaignId: // value for 'campaignId'
 *      userId: // value for 'userId'
 *      signup: // value for 'signup'
 *      discountValue: // value for 'discountValue'
 *   },
 * });
 */
export function useCreateReferralRedemptionMutation(baseOptions?: Apollo.MutationHookOptions<CreateReferralRedemptionMutation, CreateReferralRedemptionMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<CreateReferralRedemptionMutation, CreateReferralRedemptionMutationVariables>(CreateReferralRedemptionDocument, options);
      }
export type CreateReferralRedemptionMutationHookResult = ReturnType<typeof useCreateReferralRedemptionMutation>;
export type CreateReferralRedemptionMutationResult = Apollo.MutationResult<CreateReferralRedemptionMutation>;
export type CreateReferralRedemptionMutationOptions = Apollo.BaseMutationOptions<CreateReferralRedemptionMutation, CreateReferralRedemptionMutationVariables>;
export const DeleteReferralCampaignDocument = gql`
    mutation DeleteReferralCampaign($id: ID!) {
  deleteReferralCampaign(where: {id: $id}) {
    id
  }
}
    `;
export type DeleteReferralCampaignMutationFn = Apollo.MutationFunction<DeleteReferralCampaignMutation, DeleteReferralCampaignMutationVariables>;

/**
 * __useDeleteReferralCampaignMutation__
 *
 * To run a mutation, you first call `useDeleteReferralCampaignMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useDeleteReferralCampaignMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [deleteReferralCampaignMutation, { data, loading, error }] = useDeleteReferralCampaignMutation({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useDeleteReferralCampaignMutation(baseOptions?: Apollo.MutationHookOptions<DeleteReferralCampaignMutation, DeleteReferralCampaignMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<DeleteReferralCampaignMutation, DeleteReferralCampaignMutationVariables>(DeleteReferralCampaignDocument, options);
      }
export type DeleteReferralCampaignMutationHookResult = ReturnType<typeof useDeleteReferralCampaignMutation>;
export type DeleteReferralCampaignMutationResult = Apollo.MutationResult<DeleteReferralCampaignMutation>;
export type DeleteReferralCampaignMutationOptions = Apollo.BaseMutationOptions<DeleteReferralCampaignMutation, DeleteReferralCampaignMutationVariables>;
export const CheckPartnerMembershipDocument = gql`
    query CheckPartnerMembership($userId: ID!) {
  memberships(
    where: {user: {id: {equals: $userId}}, role: {equals: "partner"}}
    take: 1
  ) {
    id
  }
}
    `;

/**
 * __useCheckPartnerMembershipQuery__
 *
 * To run a query within a React component, call `useCheckPartnerMembershipQuery` and pass it any options that fit your needs.
 * When your component renders, `useCheckPartnerMembershipQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCheckPartnerMembershipQuery({
 *   variables: {
 *      userId: // value for 'userId'
 *   },
 * });
 */
export function useCheckPartnerMembershipQuery(baseOptions: Apollo.QueryHookOptions<CheckPartnerMembershipQuery, CheckPartnerMembershipQueryVariables> & ({ variables: CheckPartnerMembershipQueryVariables; skip?: boolean; } | { skip: boolean; }) ) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<CheckPartnerMembershipQuery, CheckPartnerMembershipQueryVariables>(CheckPartnerMembershipDocument, options);
      }
export function useCheckPartnerMembershipLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<CheckPartnerMembershipQuery, CheckPartnerMembershipQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<CheckPartnerMembershipQuery, CheckPartnerMembershipQueryVariables>(CheckPartnerMembershipDocument, options);
        }
export function useCheckPartnerMembershipSuspenseQuery(baseOptions?: Apollo.SkipToken | Apollo.SuspenseQueryHookOptions<CheckPartnerMembershipQuery, CheckPartnerMembershipQueryVariables>) {
          const options = baseOptions === Apollo.skipToken ? baseOptions : {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<CheckPartnerMembershipQuery, CheckPartnerMembershipQueryVariables>(CheckPartnerMembershipDocument, options);
        }
export type CheckPartnerMembershipQueryHookResult = ReturnType<typeof useCheckPartnerMembershipQuery>;
export type CheckPartnerMembershipLazyQueryHookResult = ReturnType<typeof useCheckPartnerMembershipLazyQuery>;
export type CheckPartnerMembershipSuspenseQueryHookResult = ReturnType<typeof useCheckPartnerMembershipSuspenseQuery>;
export type CheckPartnerMembershipQueryResult = Apollo.QueryResult<CheckPartnerMembershipQuery, CheckPartnerMembershipQueryVariables>;
export const GetPartnerDashboardDocument = gql`
    query GetPartnerDashboard($userId: ID!) {
  referralPartners(where: {ownerUser: {id: {equals: $userId}}}) {
    id
    name
    commission_pct
    campaigns(orderBy: {startDate: desc}) {
      id
      code
      discount_pct
      startDate
      endDate
      redemptions {
        id
        discountValue
        signupDate
        farmerUser {
          id
          name
        }
        subscription {
          id
          status
        }
      }
    }
  }
}
    `;

/**
 * __useGetPartnerDashboardQuery__
 *
 * To run a query within a React component, call `useGetPartnerDashboardQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetPartnerDashboardQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetPartnerDashboardQuery({
 *   variables: {
 *      userId: // value for 'userId'
 *   },
 * });
 */
export function useGetPartnerDashboardQuery(baseOptions: Apollo.QueryHookOptions<GetPartnerDashboardQuery, GetPartnerDashboardQueryVariables> & ({ variables: GetPartnerDashboardQueryVariables; skip?: boolean; } | { skip: boolean; }) ) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetPartnerDashboardQuery, GetPartnerDashboardQueryVariables>(GetPartnerDashboardDocument, options);
      }
export function useGetPartnerDashboardLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetPartnerDashboardQuery, GetPartnerDashboardQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetPartnerDashboardQuery, GetPartnerDashboardQueryVariables>(GetPartnerDashboardDocument, options);
        }
export function useGetPartnerDashboardSuspenseQuery(baseOptions?: Apollo.SkipToken | Apollo.SuspenseQueryHookOptions<GetPartnerDashboardQuery, GetPartnerDashboardQueryVariables>) {
          const options = baseOptions === Apollo.skipToken ? baseOptions : {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<GetPartnerDashboardQuery, GetPartnerDashboardQueryVariables>(GetPartnerDashboardDocument, options);
        }
export type GetPartnerDashboardQueryHookResult = ReturnType<typeof useGetPartnerDashboardQuery>;
export type GetPartnerDashboardLazyQueryHookResult = ReturnType<typeof useGetPartnerDashboardLazyQuery>;
export type GetPartnerDashboardSuspenseQueryHookResult = ReturnType<typeof useGetPartnerDashboardSuspenseQuery>;
export type GetPartnerDashboardQueryResult = Apollo.QueryResult<GetPartnerDashboardQuery, GetPartnerDashboardQueryVariables>;
export const GetMessageTemplatesDocument = gql`
    query GetMessageTemplates {
  messageTemplates(orderBy: {createdAt: desc}) {
    id
    title
    bodyMarkdown
    type
    urgency
    mediaId
    ctaLabel
    channelMask
    createdAt
  }
}
    `;

/**
 * __useGetMessageTemplatesQuery__
 *
 * To run a query within a React component, call `useGetMessageTemplatesQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetMessageTemplatesQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetMessageTemplatesQuery({
 *   variables: {
 *   },
 * });
 */
export function useGetMessageTemplatesQuery(baseOptions?: Apollo.QueryHookOptions<GetMessageTemplatesQuery, GetMessageTemplatesQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetMessageTemplatesQuery, GetMessageTemplatesQueryVariables>(GetMessageTemplatesDocument, options);
      }
export function useGetMessageTemplatesLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetMessageTemplatesQuery, GetMessageTemplatesQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetMessageTemplatesQuery, GetMessageTemplatesQueryVariables>(GetMessageTemplatesDocument, options);
        }
export function useGetMessageTemplatesSuspenseQuery(baseOptions?: Apollo.SkipToken | Apollo.SuspenseQueryHookOptions<GetMessageTemplatesQuery, GetMessageTemplatesQueryVariables>) {
          const options = baseOptions === Apollo.skipToken ? baseOptions : {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<GetMessageTemplatesQuery, GetMessageTemplatesQueryVariables>(GetMessageTemplatesDocument, options);
        }
export type GetMessageTemplatesQueryHookResult = ReturnType<typeof useGetMessageTemplatesQuery>;
export type GetMessageTemplatesLazyQueryHookResult = ReturnType<typeof useGetMessageTemplatesLazyQuery>;
export type GetMessageTemplatesSuspenseQueryHookResult = ReturnType<typeof useGetMessageTemplatesSuspenseQuery>;
export type GetMessageTemplatesQueryResult = Apollo.QueryResult<GetMessageTemplatesQuery, GetMessageTemplatesQueryVariables>;
export const CreateMessageTemplateDocument = gql`
    mutation CreateMessageTemplate($title: String!, $bodyMarkdown: String, $type: String!, $urgency: String!, $mediaId: String, $ctaLabel: String, $ctaLink: String, $channelMask: JSON, $requireAcknowledgement: Boolean, $maxViews: Int, $startAt: DateTime, $endAt: DateTime) {
  createMessageTemplate(
    data: {title: $title, bodyMarkdown: $bodyMarkdown, type: $type, urgency: $urgency, mediaId: $mediaId, ctaLabel: $ctaLabel, ctaLink: $ctaLink, channelMask: $channelMask, requireAcknowledgement: $requireAcknowledgement, maxViews: $maxViews, startAt: $startAt, endAt: $endAt}
  ) {
    id
  }
}
    `;
export type CreateMessageTemplateMutationFn = Apollo.MutationFunction<CreateMessageTemplateMutation, CreateMessageTemplateMutationVariables>;

/**
 * __useCreateMessageTemplateMutation__
 *
 * To run a mutation, you first call `useCreateMessageTemplateMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCreateMessageTemplateMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [createMessageTemplateMutation, { data, loading, error }] = useCreateMessageTemplateMutation({
 *   variables: {
 *      title: // value for 'title'
 *      bodyMarkdown: // value for 'bodyMarkdown'
 *      type: // value for 'type'
 *      urgency: // value for 'urgency'
 *      mediaId: // value for 'mediaId'
 *      ctaLabel: // value for 'ctaLabel'
 *      ctaLink: // value for 'ctaLink'
 *      channelMask: // value for 'channelMask'
 *      requireAcknowledgement: // value for 'requireAcknowledgement'
 *      maxViews: // value for 'maxViews'
 *      startAt: // value for 'startAt'
 *      endAt: // value for 'endAt'
 *   },
 * });
 */
export function useCreateMessageTemplateMutation(baseOptions?: Apollo.MutationHookOptions<CreateMessageTemplateMutation, CreateMessageTemplateMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<CreateMessageTemplateMutation, CreateMessageTemplateMutationVariables>(CreateMessageTemplateDocument, options);
      }
export type CreateMessageTemplateMutationHookResult = ReturnType<typeof useCreateMessageTemplateMutation>;
export type CreateMessageTemplateMutationResult = Apollo.MutationResult<CreateMessageTemplateMutation>;
export type CreateMessageTemplateMutationOptions = Apollo.BaseMutationOptions<CreateMessageTemplateMutation, CreateMessageTemplateMutationVariables>;
export const DeleteMessageTemplateDocument = gql`
    mutation DeleteMessageTemplate($id: ID!) {
  deleteMessageTemplate(where: {id: $id}) {
    id
  }
}
    `;
export type DeleteMessageTemplateMutationFn = Apollo.MutationFunction<DeleteMessageTemplateMutation, DeleteMessageTemplateMutationVariables>;

/**
 * __useDeleteMessageTemplateMutation__
 *
 * To run a mutation, you first call `useDeleteMessageTemplateMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useDeleteMessageTemplateMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [deleteMessageTemplateMutation, { data, loading, error }] = useDeleteMessageTemplateMutation({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useDeleteMessageTemplateMutation(baseOptions?: Apollo.MutationHookOptions<DeleteMessageTemplateMutation, DeleteMessageTemplateMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<DeleteMessageTemplateMutation, DeleteMessageTemplateMutationVariables>(DeleteMessageTemplateDocument, options);
      }
export type DeleteMessageTemplateMutationHookResult = ReturnType<typeof useDeleteMessageTemplateMutation>;
export type DeleteMessageTemplateMutationResult = Apollo.MutationResult<DeleteMessageTemplateMutation>;
export type DeleteMessageTemplateMutationOptions = Apollo.BaseMutationOptions<DeleteMessageTemplateMutation, DeleteMessageTemplateMutationVariables>;
export const GetMessageDeliveriesDocument = gql`
    query GetMessageDeliveries($where: MessageDeliveryWhereInput, $take: Int!, $skip: Int!) {
  messageDeliveries(
    where: $where
    orderBy: {createdAt: desc}
    take: $take
    skip: $skip
  ) {
    id
    status
    urgency
    views
    lastShownAt
    createdAt
    user {
      email
    }
    template {
      title
      type
    }
    clicks {
      id
    }
  }
}
    `;

/**
 * __useGetMessageDeliveriesQuery__
 *
 * To run a query within a React component, call `useGetMessageDeliveriesQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetMessageDeliveriesQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetMessageDeliveriesQuery({
 *   variables: {
 *      where: // value for 'where'
 *      take: // value for 'take'
 *      skip: // value for 'skip'
 *   },
 * });
 */
export function useGetMessageDeliveriesQuery(baseOptions: Apollo.QueryHookOptions<GetMessageDeliveriesQuery, GetMessageDeliveriesQueryVariables> & ({ variables: GetMessageDeliveriesQueryVariables; skip?: boolean; } | { skip: boolean; }) ) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetMessageDeliveriesQuery, GetMessageDeliveriesQueryVariables>(GetMessageDeliveriesDocument, options);
      }
export function useGetMessageDeliveriesLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetMessageDeliveriesQuery, GetMessageDeliveriesQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetMessageDeliveriesQuery, GetMessageDeliveriesQueryVariables>(GetMessageDeliveriesDocument, options);
        }
export function useGetMessageDeliveriesSuspenseQuery(baseOptions?: Apollo.SkipToken | Apollo.SuspenseQueryHookOptions<GetMessageDeliveriesQuery, GetMessageDeliveriesQueryVariables>) {
          const options = baseOptions === Apollo.skipToken ? baseOptions : {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<GetMessageDeliveriesQuery, GetMessageDeliveriesQueryVariables>(GetMessageDeliveriesDocument, options);
        }
export type GetMessageDeliveriesQueryHookResult = ReturnType<typeof useGetMessageDeliveriesQuery>;
export type GetMessageDeliveriesLazyQueryHookResult = ReturnType<typeof useGetMessageDeliveriesLazyQuery>;
export type GetMessageDeliveriesSuspenseQueryHookResult = ReturnType<typeof useGetMessageDeliveriesSuspenseQuery>;
export type GetMessageDeliveriesQueryResult = Apollo.QueryResult<GetMessageDeliveriesQuery, GetMessageDeliveriesQueryVariables>;
export const GetMessageStatsDocument = gql`
    query GetMessageStats {
  sent: messageDeliveriesCount
  read: messageDeliveriesCount(where: {status: {equals: "read"}})
  dismissed: messageDeliveriesCount(where: {status: {equals: "dismissed"}})
}
    `;

/**
 * __useGetMessageStatsQuery__
 *
 * To run a query within a React component, call `useGetMessageStatsQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetMessageStatsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetMessageStatsQuery({
 *   variables: {
 *   },
 * });
 */
export function useGetMessageStatsQuery(baseOptions?: Apollo.QueryHookOptions<GetMessageStatsQuery, GetMessageStatsQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetMessageStatsQuery, GetMessageStatsQueryVariables>(GetMessageStatsDocument, options);
      }
export function useGetMessageStatsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetMessageStatsQuery, GetMessageStatsQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetMessageStatsQuery, GetMessageStatsQueryVariables>(GetMessageStatsDocument, options);
        }
export function useGetMessageStatsSuspenseQuery(baseOptions?: Apollo.SkipToken | Apollo.SuspenseQueryHookOptions<GetMessageStatsQuery, GetMessageStatsQueryVariables>) {
          const options = baseOptions === Apollo.skipToken ? baseOptions : {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<GetMessageStatsQuery, GetMessageStatsQueryVariables>(GetMessageStatsDocument, options);
        }
export type GetMessageStatsQueryHookResult = ReturnType<typeof useGetMessageStatsQuery>;
export type GetMessageStatsLazyQueryHookResult = ReturnType<typeof useGetMessageStatsLazyQuery>;
export type GetMessageStatsSuspenseQueryHookResult = ReturnType<typeof useGetMessageStatsSuspenseQuery>;
export type GetMessageStatsQueryResult = Apollo.QueryResult<GetMessageStatsQuery, GetMessageStatsQueryVariables>;
export const GetMessageDetailDocument = gql`
    query GetMessageDetail($id: ID!) {
  messageDelivery(where: {id: $id}) {
    id
    status
    createdAt
    template {
      title
      bodyMarkdown
      mediaId
      ctaLabel
      ctaLink
    }
  }
}
    `;

/**
 * __useGetMessageDetailQuery__
 *
 * To run a query within a React component, call `useGetMessageDetailQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetMessageDetailQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetMessageDetailQuery({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useGetMessageDetailQuery(baseOptions: Apollo.QueryHookOptions<GetMessageDetailQuery, GetMessageDetailQueryVariables> & ({ variables: GetMessageDetailQueryVariables; skip?: boolean; } | { skip: boolean; }) ) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetMessageDetailQuery, GetMessageDetailQueryVariables>(GetMessageDetailDocument, options);
      }
export function useGetMessageDetailLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetMessageDetailQuery, GetMessageDetailQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetMessageDetailQuery, GetMessageDetailQueryVariables>(GetMessageDetailDocument, options);
        }
export function useGetMessageDetailSuspenseQuery(baseOptions?: Apollo.SkipToken | Apollo.SuspenseQueryHookOptions<GetMessageDetailQuery, GetMessageDetailQueryVariables>) {
          const options = baseOptions === Apollo.skipToken ? baseOptions : {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<GetMessageDetailQuery, GetMessageDetailQueryVariables>(GetMessageDetailDocument, options);
        }
export type GetMessageDetailQueryHookResult = ReturnType<typeof useGetMessageDetailQuery>;
export type GetMessageDetailLazyQueryHookResult = ReturnType<typeof useGetMessageDetailLazyQuery>;
export type GetMessageDetailSuspenseQueryHookResult = ReturnType<typeof useGetMessageDetailSuspenseQuery>;
export type GetMessageDetailQueryResult = Apollo.QueryResult<GetMessageDetailQuery, GetMessageDetailQueryVariables>;
export const GetUnreadCountDocument = gql`
    query GetUnreadCount {
  deliveriesUnread: messageDeliveriesCount(where: {status: {equals: "unread"}})
  alertsUnread: alertsCount(where: {status: {equals: "open"}})
}
    `;

/**
 * __useGetUnreadCountQuery__
 *
 * To run a query within a React component, call `useGetUnreadCountQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetUnreadCountQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetUnreadCountQuery({
 *   variables: {
 *   },
 * });
 */
export function useGetUnreadCountQuery(baseOptions?: Apollo.QueryHookOptions<GetUnreadCountQuery, GetUnreadCountQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetUnreadCountQuery, GetUnreadCountQueryVariables>(GetUnreadCountDocument, options);
      }
export function useGetUnreadCountLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetUnreadCountQuery, GetUnreadCountQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetUnreadCountQuery, GetUnreadCountQueryVariables>(GetUnreadCountDocument, options);
        }
export function useGetUnreadCountSuspenseQuery(baseOptions?: Apollo.SkipToken | Apollo.SuspenseQueryHookOptions<GetUnreadCountQuery, GetUnreadCountQueryVariables>) {
          const options = baseOptions === Apollo.skipToken ? baseOptions : {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<GetUnreadCountQuery, GetUnreadCountQueryVariables>(GetUnreadCountDocument, options);
        }
export type GetUnreadCountQueryHookResult = ReturnType<typeof useGetUnreadCountQuery>;
export type GetUnreadCountLazyQueryHookResult = ReturnType<typeof useGetUnreadCountLazyQuery>;
export type GetUnreadCountSuspenseQueryHookResult = ReturnType<typeof useGetUnreadCountSuspenseQuery>;
export type GetUnreadCountQueryResult = Apollo.QueryResult<GetUnreadCountQuery, GetUnreadCountQueryVariables>;
export const GetInboxDocument = gql`
    query GetInbox {
  alerts(where: {status: {equals: "open"}}, orderBy: {createdAt: desc}, take: 10) {
    id
    message
    createdAt
  }
  messageDeliveries(
    where: {status: {equals: "unread"}}
    orderBy: {createdAt: desc}
    take: 10
  ) {
    id
    createdAt
    template {
      title
    }
  }
}
    `;

/**
 * __useGetInboxQuery__
 *
 * To run a query within a React component, call `useGetInboxQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetInboxQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetInboxQuery({
 *   variables: {
 *   },
 * });
 */
export function useGetInboxQuery(baseOptions?: Apollo.QueryHookOptions<GetInboxQuery, GetInboxQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetInboxQuery, GetInboxQueryVariables>(GetInboxDocument, options);
      }
export function useGetInboxLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetInboxQuery, GetInboxQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetInboxQuery, GetInboxQueryVariables>(GetInboxDocument, options);
        }
export function useGetInboxSuspenseQuery(baseOptions?: Apollo.SkipToken | Apollo.SuspenseQueryHookOptions<GetInboxQuery, GetInboxQueryVariables>) {
          const options = baseOptions === Apollo.skipToken ? baseOptions : {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<GetInboxQuery, GetInboxQueryVariables>(GetInboxDocument, options);
        }
export type GetInboxQueryHookResult = ReturnType<typeof useGetInboxQuery>;
export type GetInboxLazyQueryHookResult = ReturnType<typeof useGetInboxLazyQuery>;
export type GetInboxSuspenseQueryHookResult = ReturnType<typeof useGetInboxSuspenseQuery>;
export type GetInboxQueryResult = Apollo.QueryResult<GetInboxQuery, GetInboxQueryVariables>;
export const MarkDeliveryReadModalDocument = gql`
    mutation MarkDeliveryReadModal($id: ID!) {
  updateMessageDelivery(where: {id: $id}, data: {status: "read"}) {
    id
  }
}
    `;
export type MarkDeliveryReadModalMutationFn = Apollo.MutationFunction<MarkDeliveryReadModalMutation, MarkDeliveryReadModalMutationVariables>;

/**
 * __useMarkDeliveryReadModalMutation__
 *
 * To run a mutation, you first call `useMarkDeliveryReadModalMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useMarkDeliveryReadModalMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [markDeliveryReadModalMutation, { data, loading, error }] = useMarkDeliveryReadModalMutation({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useMarkDeliveryReadModalMutation(baseOptions?: Apollo.MutationHookOptions<MarkDeliveryReadModalMutation, MarkDeliveryReadModalMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<MarkDeliveryReadModalMutation, MarkDeliveryReadModalMutationVariables>(MarkDeliveryReadModalDocument, options);
      }
export type MarkDeliveryReadModalMutationHookResult = ReturnType<typeof useMarkDeliveryReadModalMutation>;
export type MarkDeliveryReadModalMutationResult = Apollo.MutationResult<MarkDeliveryReadModalMutation>;
export type MarkDeliveryReadModalMutationOptions = Apollo.BaseMutationOptions<MarkDeliveryReadModalMutation, MarkDeliveryReadModalMutationVariables>;
export const MarkDeliveryRemindDocument = gql`
    mutation MarkDeliveryRemind($id: ID!, $ts: DateTime!) {
  updateMessageDelivery(where: {id: $id}, data: {lastShownAt: $ts}) {
    id
  }
}
    `;
export type MarkDeliveryRemindMutationFn = Apollo.MutationFunction<MarkDeliveryRemindMutation, MarkDeliveryRemindMutationVariables>;

/**
 * __useMarkDeliveryRemindMutation__
 *
 * To run a mutation, you first call `useMarkDeliveryRemindMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useMarkDeliveryRemindMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [markDeliveryRemindMutation, { data, loading, error }] = useMarkDeliveryRemindMutation({
 *   variables: {
 *      id: // value for 'id'
 *      ts: // value for 'ts'
 *   },
 * });
 */
export function useMarkDeliveryRemindMutation(baseOptions?: Apollo.MutationHookOptions<MarkDeliveryRemindMutation, MarkDeliveryRemindMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<MarkDeliveryRemindMutation, MarkDeliveryRemindMutationVariables>(MarkDeliveryRemindDocument, options);
      }
export type MarkDeliveryRemindMutationHookResult = ReturnType<typeof useMarkDeliveryRemindMutation>;
export type MarkDeliveryRemindMutationResult = Apollo.MutationResult<MarkDeliveryRemindMutation>;
export type MarkDeliveryRemindMutationOptions = Apollo.BaseMutationOptions<MarkDeliveryRemindMutation, MarkDeliveryRemindMutationVariables>;
export const MarkAlertReadDocument = gql`
    mutation MarkAlertRead($id: ID!) {
  updateAlert(where: {id: $id}, data: {status: "dismissed"}) {
    id
  }
}
    `;
export type MarkAlertReadMutationFn = Apollo.MutationFunction<MarkAlertReadMutation, MarkAlertReadMutationVariables>;

/**
 * __useMarkAlertReadMutation__
 *
 * To run a mutation, you first call `useMarkAlertReadMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useMarkAlertReadMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [markAlertReadMutation, { data, loading, error }] = useMarkAlertReadMutation({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useMarkAlertReadMutation(baseOptions?: Apollo.MutationHookOptions<MarkAlertReadMutation, MarkAlertReadMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<MarkAlertReadMutation, MarkAlertReadMutationVariables>(MarkAlertReadDocument, options);
      }
export type MarkAlertReadMutationHookResult = ReturnType<typeof useMarkAlertReadMutation>;
export type MarkAlertReadMutationResult = Apollo.MutationResult<MarkAlertReadMutation>;
export type MarkAlertReadMutationOptions = Apollo.BaseMutationOptions<MarkAlertReadMutation, MarkAlertReadMutationVariables>;
export const UpdateMessageDeliveryDocument = gql`
    mutation UpdateMessageDelivery($id: ID!, $data: MessageDeliveryUpdateInput!) {
  updateMessageDelivery(where: {id: $id}, data: $data) {
    id
  }
}
    `;
export type UpdateMessageDeliveryMutationFn = Apollo.MutationFunction<UpdateMessageDeliveryMutation, UpdateMessageDeliveryMutationVariables>;

/**
 * __useUpdateMessageDeliveryMutation__
 *
 * To run a mutation, you first call `useUpdateMessageDeliveryMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateMessageDeliveryMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateMessageDeliveryMutation, { data, loading, error }] = useUpdateMessageDeliveryMutation({
 *   variables: {
 *      id: // value for 'id'
 *      data: // value for 'data'
 *   },
 * });
 */
export function useUpdateMessageDeliveryMutation(baseOptions?: Apollo.MutationHookOptions<UpdateMessageDeliveryMutation, UpdateMessageDeliveryMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<UpdateMessageDeliveryMutation, UpdateMessageDeliveryMutationVariables>(UpdateMessageDeliveryDocument, options);
      }
export type UpdateMessageDeliveryMutationHookResult = ReturnType<typeof useUpdateMessageDeliveryMutation>;
export type UpdateMessageDeliveryMutationResult = Apollo.MutationResult<UpdateMessageDeliveryMutation>;
export type UpdateMessageDeliveryMutationOptions = Apollo.BaseMutationOptions<UpdateMessageDeliveryMutation, UpdateMessageDeliveryMutationVariables>;
export const CreateMessageDeliveryDocument = gql`
    mutation CreateMessageDelivery($templateId: ID!, $userId: ID!) {
  createMessageDelivery(
    data: {template: {connect: {id: $templateId}}, user: {connect: {id: $userId}}}
  ) {
    id
  }
}
    `;
export type CreateMessageDeliveryMutationFn = Apollo.MutationFunction<CreateMessageDeliveryMutation, CreateMessageDeliveryMutationVariables>;

/**
 * __useCreateMessageDeliveryMutation__
 *
 * To run a mutation, you first call `useCreateMessageDeliveryMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCreateMessageDeliveryMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [createMessageDeliveryMutation, { data, loading, error }] = useCreateMessageDeliveryMutation({
 *   variables: {
 *      templateId: // value for 'templateId'
 *      userId: // value for 'userId'
 *   },
 * });
 */
export function useCreateMessageDeliveryMutation(baseOptions?: Apollo.MutationHookOptions<CreateMessageDeliveryMutation, CreateMessageDeliveryMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<CreateMessageDeliveryMutation, CreateMessageDeliveryMutationVariables>(CreateMessageDeliveryDocument, options);
      }
export type CreateMessageDeliveryMutationHookResult = ReturnType<typeof useCreateMessageDeliveryMutation>;
export type CreateMessageDeliveryMutationResult = Apollo.MutationResult<CreateMessageDeliveryMutation>;
export type CreateMessageDeliveryMutationOptions = Apollo.BaseMutationOptions<CreateMessageDeliveryMutation, CreateMessageDeliveryMutationVariables>;
export const GetReceivedMessagesDocument = gql`
    query GetReceivedMessages($where: MessageDeliveryWhereInput!, $take: Int!, $skip: Int!, $search: String) {
  messageDeliveries(
    where: {AND: [$where, {template: {title: {contains: $search, mode: insensitive}}}]}
    orderBy: {createdAt: desc}
    take: $take
    skip: $skip
  ) {
    id
    status
    views
    lastShownAt
    createdAt
    template {
      id
      title
      mediaId
    }
  }
  messageDeliveriesCount(
    where: {AND: [$where, {template: {title: {contains: $search, mode: insensitive}}}]}
  )
}
    `;

/**
 * __useGetReceivedMessagesQuery__
 *
 * To run a query within a React component, call `useGetReceivedMessagesQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetReceivedMessagesQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetReceivedMessagesQuery({
 *   variables: {
 *      where: // value for 'where'
 *      take: // value for 'take'
 *      skip: // value for 'skip'
 *      search: // value for 'search'
 *   },
 * });
 */
export function useGetReceivedMessagesQuery(baseOptions: Apollo.QueryHookOptions<GetReceivedMessagesQuery, GetReceivedMessagesQueryVariables> & ({ variables: GetReceivedMessagesQueryVariables; skip?: boolean; } | { skip: boolean; }) ) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetReceivedMessagesQuery, GetReceivedMessagesQueryVariables>(GetReceivedMessagesDocument, options);
      }
export function useGetReceivedMessagesLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetReceivedMessagesQuery, GetReceivedMessagesQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetReceivedMessagesQuery, GetReceivedMessagesQueryVariables>(GetReceivedMessagesDocument, options);
        }
export function useGetReceivedMessagesSuspenseQuery(baseOptions?: Apollo.SkipToken | Apollo.SuspenseQueryHookOptions<GetReceivedMessagesQuery, GetReceivedMessagesQueryVariables>) {
          const options = baseOptions === Apollo.skipToken ? baseOptions : {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<GetReceivedMessagesQuery, GetReceivedMessagesQueryVariables>(GetReceivedMessagesDocument, options);
        }
export type GetReceivedMessagesQueryHookResult = ReturnType<typeof useGetReceivedMessagesQuery>;
export type GetReceivedMessagesLazyQueryHookResult = ReturnType<typeof useGetReceivedMessagesLazyQuery>;
export type GetReceivedMessagesSuspenseQueryHookResult = ReturnType<typeof useGetReceivedMessagesSuspenseQuery>;
export type GetReceivedMessagesQueryResult = Apollo.QueryResult<GetReceivedMessagesQuery, GetReceivedMessagesQueryVariables>;
export const GetSentMessagesDocument = gql`
    query GetSentMessages($where: MessageTemplateWhereInput!, $take: Int!, $skip: Int!, $search: String) {
  messageTemplates(
    where: {AND: [$where, {title: {contains: $search, mode: insensitive}}]}
    orderBy: {createdAt: desc}
    take: $take
    skip: $skip
  ) {
    id
    title
    type
    urgency
    createdAt
  }
  messageTemplatesCount(
    where: {AND: [$where, {title: {contains: $search, mode: insensitive}}]}
  )
}
    `;

/**
 * __useGetSentMessagesQuery__
 *
 * To run a query within a React component, call `useGetSentMessagesQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetSentMessagesQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetSentMessagesQuery({
 *   variables: {
 *      where: // value for 'where'
 *      take: // value for 'take'
 *      skip: // value for 'skip'
 *      search: // value for 'search'
 *   },
 * });
 */
export function useGetSentMessagesQuery(baseOptions: Apollo.QueryHookOptions<GetSentMessagesQuery, GetSentMessagesQueryVariables> & ({ variables: GetSentMessagesQueryVariables; skip?: boolean; } | { skip: boolean; }) ) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetSentMessagesQuery, GetSentMessagesQueryVariables>(GetSentMessagesDocument, options);
      }
export function useGetSentMessagesLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetSentMessagesQuery, GetSentMessagesQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetSentMessagesQuery, GetSentMessagesQueryVariables>(GetSentMessagesDocument, options);
        }
export function useGetSentMessagesSuspenseQuery(baseOptions?: Apollo.SkipToken | Apollo.SuspenseQueryHookOptions<GetSentMessagesQuery, GetSentMessagesQueryVariables>) {
          const options = baseOptions === Apollo.skipToken ? baseOptions : {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<GetSentMessagesQuery, GetSentMessagesQueryVariables>(GetSentMessagesDocument, options);
        }
export type GetSentMessagesQueryHookResult = ReturnType<typeof useGetSentMessagesQuery>;
export type GetSentMessagesLazyQueryHookResult = ReturnType<typeof useGetSentMessagesLazyQuery>;
export type GetSentMessagesSuspenseQueryHookResult = ReturnType<typeof useGetSentMessagesSuspenseQuery>;
export type GetSentMessagesQueryResult = Apollo.QueryResult<GetSentMessagesQuery, GetSentMessagesQueryVariables>;
export const GetAlertsDocument = gql`
    query GetAlerts($where: AlertWhereInput!, $take: Int!, $skip: Int!, $search: String) {
  alerts(
    where: {AND: [$where, {message: {contains: $search, mode: insensitive}}]}
    orderBy: {createdAt: desc}
    take: $take
    skip: $skip
  ) {
    id
    message
    urgency
    status
    createdAt
  }
  alertsCount(
    where: {AND: [$where, {message: {contains: $search, mode: insensitive}}]}
  )
}
    `;

/**
 * __useGetAlertsQuery__
 *
 * To run a query within a React component, call `useGetAlertsQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetAlertsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetAlertsQuery({
 *   variables: {
 *      where: // value for 'where'
 *      take: // value for 'take'
 *      skip: // value for 'skip'
 *      search: // value for 'search'
 *   },
 * });
 */
export function useGetAlertsQuery(baseOptions: Apollo.QueryHookOptions<GetAlertsQuery, GetAlertsQueryVariables> & ({ variables: GetAlertsQueryVariables; skip?: boolean; } | { skip: boolean; }) ) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetAlertsQuery, GetAlertsQueryVariables>(GetAlertsDocument, options);
      }
export function useGetAlertsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetAlertsQuery, GetAlertsQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetAlertsQuery, GetAlertsQueryVariables>(GetAlertsDocument, options);
        }
export function useGetAlertsSuspenseQuery(baseOptions?: Apollo.SkipToken | Apollo.SuspenseQueryHookOptions<GetAlertsQuery, GetAlertsQueryVariables>) {
          const options = baseOptions === Apollo.skipToken ? baseOptions : {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<GetAlertsQuery, GetAlertsQueryVariables>(GetAlertsDocument, options);
        }
export type GetAlertsQueryHookResult = ReturnType<typeof useGetAlertsQuery>;
export type GetAlertsLazyQueryHookResult = ReturnType<typeof useGetAlertsLazyQuery>;
export type GetAlertsSuspenseQueryHookResult = ReturnType<typeof useGetAlertsSuspenseQuery>;
export type GetAlertsQueryResult = Apollo.QueryResult<GetAlertsQuery, GetAlertsQueryVariables>;
export const GetAlertDetailDocument = gql`
    query GetAlertDetail($id: ID!) {
  alert(where: {id: $id}) {
    id
    message
    urgency
    status
    due_date
    createdAt
  }
}
    `;

/**
 * __useGetAlertDetailQuery__
 *
 * To run a query within a React component, call `useGetAlertDetailQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetAlertDetailQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetAlertDetailQuery({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useGetAlertDetailQuery(baseOptions: Apollo.QueryHookOptions<GetAlertDetailQuery, GetAlertDetailQueryVariables> & ({ variables: GetAlertDetailQueryVariables; skip?: boolean; } | { skip: boolean; }) ) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetAlertDetailQuery, GetAlertDetailQueryVariables>(GetAlertDetailDocument, options);
      }
export function useGetAlertDetailLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetAlertDetailQuery, GetAlertDetailQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetAlertDetailQuery, GetAlertDetailQueryVariables>(GetAlertDetailDocument, options);
        }
export function useGetAlertDetailSuspenseQuery(baseOptions?: Apollo.SkipToken | Apollo.SuspenseQueryHookOptions<GetAlertDetailQuery, GetAlertDetailQueryVariables>) {
          const options = baseOptions === Apollo.skipToken ? baseOptions : {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<GetAlertDetailQuery, GetAlertDetailQueryVariables>(GetAlertDetailDocument, options);
        }
export type GetAlertDetailQueryHookResult = ReturnType<typeof useGetAlertDetailQuery>;
export type GetAlertDetailLazyQueryHookResult = ReturnType<typeof useGetAlertDetailLazyQuery>;
export type GetAlertDetailSuspenseQueryHookResult = ReturnType<typeof useGetAlertDetailSuspenseQuery>;
export type GetAlertDetailQueryResult = Apollo.QueryResult<GetAlertDetailQuery, GetAlertDetailQueryVariables>;
export const GetUsersByRoleDocument = gql`
    query GetUsersByRole($role: String!) {
  memberships(where: {role: {equals: $role}}) {
    user {
      id
      email
      name
    }
  }
}
    `;

/**
 * __useGetUsersByRoleQuery__
 *
 * To run a query within a React component, call `useGetUsersByRoleQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetUsersByRoleQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetUsersByRoleQuery({
 *   variables: {
 *      role: // value for 'role'
 *   },
 * });
 */
export function useGetUsersByRoleQuery(baseOptions: Apollo.QueryHookOptions<GetUsersByRoleQuery, GetUsersByRoleQueryVariables> & ({ variables: GetUsersByRoleQueryVariables; skip?: boolean; } | { skip: boolean; }) ) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetUsersByRoleQuery, GetUsersByRoleQueryVariables>(GetUsersByRoleDocument, options);
      }
export function useGetUsersByRoleLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetUsersByRoleQuery, GetUsersByRoleQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetUsersByRoleQuery, GetUsersByRoleQueryVariables>(GetUsersByRoleDocument, options);
        }
export function useGetUsersByRoleSuspenseQuery(baseOptions?: Apollo.SkipToken | Apollo.SuspenseQueryHookOptions<GetUsersByRoleQuery, GetUsersByRoleQueryVariables>) {
          const options = baseOptions === Apollo.skipToken ? baseOptions : {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<GetUsersByRoleQuery, GetUsersByRoleQueryVariables>(GetUsersByRoleDocument, options);
        }
export type GetUsersByRoleQueryHookResult = ReturnType<typeof useGetUsersByRoleQuery>;
export type GetUsersByRoleLazyQueryHookResult = ReturnType<typeof useGetUsersByRoleLazyQuery>;
export type GetUsersByRoleSuspenseQueryHookResult = ReturnType<typeof useGetUsersByRoleSuspenseQuery>;
export type GetUsersByRoleQueryResult = Apollo.QueryResult<GetUsersByRoleQuery, GetUsersByRoleQueryVariables>;
export const OrgByUserDocument = gql`
    query OrgByUser($userId: ID!) {
  user(where: {id: $userId}) {
    memberships {
      organisation {
        id
        name
        stripeCustomerId
      }
    }
  }
}
    `;

/**
 * __useOrgByUserQuery__
 *
 * To run a query within a React component, call `useOrgByUserQuery` and pass it any options that fit your needs.
 * When your component renders, `useOrgByUserQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useOrgByUserQuery({
 *   variables: {
 *      userId: // value for 'userId'
 *   },
 * });
 */
export function useOrgByUserQuery(baseOptions: Apollo.QueryHookOptions<OrgByUserQuery, OrgByUserQueryVariables> & ({ variables: OrgByUserQueryVariables; skip?: boolean; } | { skip: boolean; }) ) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<OrgByUserQuery, OrgByUserQueryVariables>(OrgByUserDocument, options);
      }
export function useOrgByUserLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<OrgByUserQuery, OrgByUserQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<OrgByUserQuery, OrgByUserQueryVariables>(OrgByUserDocument, options);
        }
export function useOrgByUserSuspenseQuery(baseOptions?: Apollo.SkipToken | Apollo.SuspenseQueryHookOptions<OrgByUserQuery, OrgByUserQueryVariables>) {
          const options = baseOptions === Apollo.skipToken ? baseOptions : {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<OrgByUserQuery, OrgByUserQueryVariables>(OrgByUserDocument, options);
        }
export type OrgByUserQueryHookResult = ReturnType<typeof useOrgByUserQuery>;
export type OrgByUserLazyQueryHookResult = ReturnType<typeof useOrgByUserLazyQuery>;
export type OrgByUserSuspenseQueryHookResult = ReturnType<typeof useOrgByUserSuspenseQuery>;
export type OrgByUserQueryResult = Apollo.QueryResult<OrgByUserQuery, OrgByUserQueryVariables>;
export const SetOrgCustDocument = gql`
    mutation SetOrgCust($orgId: ID!, $custId: String!) {
  updateOrganisation(where: {id: $orgId}, data: {stripeCustomerId: $custId}) {
    id
  }
}
    `;
export type SetOrgCustMutationFn = Apollo.MutationFunction<SetOrgCustMutation, SetOrgCustMutationVariables>;

/**
 * __useSetOrgCustMutation__
 *
 * To run a mutation, you first call `useSetOrgCustMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useSetOrgCustMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [setOrgCustMutation, { data, loading, error }] = useSetOrgCustMutation({
 *   variables: {
 *      orgId: // value for 'orgId'
 *      custId: // value for 'custId'
 *   },
 * });
 */
export function useSetOrgCustMutation(baseOptions?: Apollo.MutationHookOptions<SetOrgCustMutation, SetOrgCustMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<SetOrgCustMutation, SetOrgCustMutationVariables>(SetOrgCustDocument, options);
      }
export type SetOrgCustMutationHookResult = ReturnType<typeof useSetOrgCustMutation>;
export type SetOrgCustMutationResult = Apollo.MutationResult<SetOrgCustMutation>;
export type SetOrgCustMutationOptions = Apollo.BaseMutationOptions<SetOrgCustMutation, SetOrgCustMutationVariables>;
export const CreateSubscriptionDocument = gql`
    mutation CreateSubscription($data: SubscriptionCreateInput!) {
  createSubscription(data: $data) {
    id
  }
}
    `;
export type CreateSubscriptionMutationFn = Apollo.MutationFunction<CreateSubscriptionMutation, CreateSubscriptionMutationVariables>;

/**
 * __useCreateSubscriptionMutation__
 *
 * To run a mutation, you first call `useCreateSubscriptionMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCreateSubscriptionMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [createSubscriptionMutation, { data, loading, error }] = useCreateSubscriptionMutation({
 *   variables: {
 *      data: // value for 'data'
 *   },
 * });
 */
export function useCreateSubscriptionMutation(baseOptions?: Apollo.MutationHookOptions<CreateSubscriptionMutation, CreateSubscriptionMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<CreateSubscriptionMutation, CreateSubscriptionMutationVariables>(CreateSubscriptionDocument, options);
      }
export type CreateSubscriptionMutationHookResult = ReturnType<typeof useCreateSubscriptionMutation>;
export type CreateSubscriptionMutationResult = Apollo.MutationResult<CreateSubscriptionMutation>;
export type CreateSubscriptionMutationOptions = Apollo.BaseMutationOptions<CreateSubscriptionMutation, CreateSubscriptionMutationVariables>;
export const UpdateSubDocument = gql`
    mutation UpdateSub($orgId: ID!, $stripeSubId: String!, $stripePriceId: String!, $status: String!, $start: DateTime!, $end: DateTime!) {
  updateSubscription(
    where: {stripeSubscriptionId: $stripeSubId}
    data: {organisation: {connect: {id: $orgId}}, stripeSubscriptionId: $stripeSubId, status: $status, startDate: $start, currentPeriodEnd: $end}
  ) {
    id
    status
  }
}
    `;
export type UpdateSubMutationFn = Apollo.MutationFunction<UpdateSubMutation, UpdateSubMutationVariables>;

/**
 * __useUpdateSubMutation__
 *
 * To run a mutation, you first call `useUpdateSubMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateSubMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateSubMutation, { data, loading, error }] = useUpdateSubMutation({
 *   variables: {
 *      orgId: // value for 'orgId'
 *      stripeSubId: // value for 'stripeSubId'
 *      stripePriceId: // value for 'stripePriceId'
 *      status: // value for 'status'
 *      start: // value for 'start'
 *      end: // value for 'end'
 *   },
 * });
 */
export function useUpdateSubMutation(baseOptions?: Apollo.MutationHookOptions<UpdateSubMutation, UpdateSubMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<UpdateSubMutation, UpdateSubMutationVariables>(UpdateSubDocument, options);
      }
export type UpdateSubMutationHookResult = ReturnType<typeof useUpdateSubMutation>;
export type UpdateSubMutationResult = Apollo.MutationResult<UpdateSubMutation>;
export type UpdateSubMutationOptions = Apollo.BaseMutationOptions<UpdateSubMutation, UpdateSubMutationVariables>;
export const GetPlansDocument = gql`
    query GetPlans {
  plans {
    id
    key
    label
    features
    activePrice {
      id
      amount
      currency
    }
  }
}
    `;

/**
 * __useGetPlansQuery__
 *
 * To run a query within a React component, call `useGetPlansQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetPlansQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetPlansQuery({
 *   variables: {
 *   },
 * });
 */
export function useGetPlansQuery(baseOptions?: Apollo.QueryHookOptions<GetPlansQuery, GetPlansQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetPlansQuery, GetPlansQueryVariables>(GetPlansDocument, options);
      }
export function useGetPlansLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetPlansQuery, GetPlansQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetPlansQuery, GetPlansQueryVariables>(GetPlansDocument, options);
        }
export function useGetPlansSuspenseQuery(baseOptions?: Apollo.SkipToken | Apollo.SuspenseQueryHookOptions<GetPlansQuery, GetPlansQueryVariables>) {
          const options = baseOptions === Apollo.skipToken ? baseOptions : {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<GetPlansQuery, GetPlansQueryVariables>(GetPlansDocument, options);
        }
export type GetPlansQueryHookResult = ReturnType<typeof useGetPlansQuery>;
export type GetPlansLazyQueryHookResult = ReturnType<typeof useGetPlansLazyQuery>;
export type GetPlansSuspenseQueryHookResult = ReturnType<typeof useGetPlansSuspenseQuery>;
export type GetPlansQueryResult = Apollo.QueryResult<GetPlansQuery, GetPlansQueryVariables>;
export const FindActivePriceDocument = gql`
    query FindActivePrice($key: String!) {
  plan(where: {key: $key}) {
    id
    activePrice {
      id
      stripePriceId
    }
  }
}
    `;

/**
 * __useFindActivePriceQuery__
 *
 * To run a query within a React component, call `useFindActivePriceQuery` and pass it any options that fit your needs.
 * When your component renders, `useFindActivePriceQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useFindActivePriceQuery({
 *   variables: {
 *      key: // value for 'key'
 *   },
 * });
 */
export function useFindActivePriceQuery(baseOptions: Apollo.QueryHookOptions<FindActivePriceQuery, FindActivePriceQueryVariables> & ({ variables: FindActivePriceQueryVariables; skip?: boolean; } | { skip: boolean; }) ) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<FindActivePriceQuery, FindActivePriceQueryVariables>(FindActivePriceDocument, options);
      }
export function useFindActivePriceLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<FindActivePriceQuery, FindActivePriceQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<FindActivePriceQuery, FindActivePriceQueryVariables>(FindActivePriceDocument, options);
        }
export function useFindActivePriceSuspenseQuery(baseOptions?: Apollo.SkipToken | Apollo.SuspenseQueryHookOptions<FindActivePriceQuery, FindActivePriceQueryVariables>) {
          const options = baseOptions === Apollo.skipToken ? baseOptions : {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<FindActivePriceQuery, FindActivePriceQueryVariables>(FindActivePriceDocument, options);
        }
export type FindActivePriceQueryHookResult = ReturnType<typeof useFindActivePriceQuery>;
export type FindActivePriceLazyQueryHookResult = ReturnType<typeof useFindActivePriceLazyQuery>;
export type FindActivePriceSuspenseQueryHookResult = ReturnType<typeof useFindActivePriceSuspenseQuery>;
export type FindActivePriceQueryResult = Apollo.QueryResult<FindActivePriceQuery, FindActivePriceQueryVariables>;