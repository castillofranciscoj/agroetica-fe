/* eslint-disable */
import * as types from './graphql';
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel or swc plugin for production.
 * Learn more about it here: https://the-guild.dev/graphql/codegen/plugins/presets/preset-client#reducing-bundle-size
 */
type Documents = {
    "\n  query GetProducts(\n    $where:   ProductWhereInput\n    $orderBy: [ProductOrderByInput!]\n    $take:    Int\n    $skip:    Int\n  ) {\n    products(where: $where, orderBy: $orderBy, take: $take, skip: $skip) {\n      id\n      name\n      registration_no\n      product_type\n      hazard_class\n      country\n      stato_amministrativo\n    }\n    productsCount(where: $where)\n  }\n": typeof types.GetProductsDocument,
    "\n  query GetCategoryKPI($id: ID!) {\n    categoryKPI(where: { id: $id }) {\n      id\n      name\n      kpis(where: { visible: { equals: true } }) {\n        id\n        title\n        currentValue\n        target\n        description\n      }\n    }\n  }\n": typeof types.GetCategoryKpiDocument,
    "\n  query GetVisibleKPIs {\n    kPIS(where: { visible: { equals: true } }, orderBy: { createdAt: desc }) {\n      id\n      title\n      currentValue\n      target\n      category {\n        id\n        name\n      }\n    }\n  }\n": typeof types.GetVisibleKpIsDocument,
    "\n  mutation UpsertUser($email: String!, $name: String!) {\n    # This uses Keystone's built-in createUser, but we'll ignore unique errors\n    createUser(data: { email: $email, name: $name }) {\n      id\n    }\n  }\n": typeof types.UpsertUserDocument,
    "\n  mutation Authenticate($email: String!, $password: String!) {\n    authenticateUserWithPassword(email: $email, password: $password) {\n      ... on UserAuthenticationWithPasswordSuccess {\n        sessionToken\n        item { id name email isAdmin }\n      }\n      ... on UserAuthenticationWithPasswordFailure {\n        message\n      }\n    }\n  }\n": typeof types.AuthenticateDocument,
    "\n  query FindUser($email: String!) {\n    users(where: { email: { equals: $email } }) {\n      id name email isAdmin\n    }\n  }\n": typeof types.FindUserDocument,
    "\n  mutation CreateUser($email: String!, $name: String!) {\n    createUser(data: { email: $email, name: $name }) {\n      id name email isAdmin\n    }\n  }\n": typeof types.CreateUserDocument,
    "\n  mutation CreateFarm(\n    $name: String!\n    $createdById: ID!\n    $location: JSON!\n  ) {\n    createFarm(\n      data: {\n        name: $name\n        createdBy: { connect: { id: $createdById } }\n        location: $location\n      }\n    ) {\n      id\n      name\n      location\n    }\n  }\n": typeof types.CreateFarmDocument,
    "\n  query GetFarms {\n    farms {\n      id\n      name\n      location\n      isDefault\n      fields {\n        id\n        name\n        areaHectares\n      }\n    }\n  }\n": typeof types.GetFarmsDocument,
    "\n  query GetFarm($id: ID!) {\n    farm(where: { id: $id }) {\n      id\n      name\n      location\n      isDefault\n      fields {\n        id\n        name\n        areaHectares\n      }\n    }\n  }\n": typeof types.GetFarmDocument,
    "\n  mutation UpdateFarm($id: ID!, $name: String!, $location: JSON!) {\n    updateFarm(\n      where: { id: $id }\n      data: { name: $name, location: $location, }\n    ) {\n      id\n      name\n      location\n    }\n  }\n": typeof types.UpdateFarmDocument,
    "\n  mutation DeleteFarm($id: ID!) {\n    deleteFarm(where: { id: $id }) {\n      id\n    }\n  }\n": typeof types.DeleteFarmDocument,
    "\n  query GetFields($farmId: ID!) {\n    fields(where: { farm: { id: { equals: $farmId } } }) {\n      id\n      name\n      areaHectares\n      location\n      boundary\n    }\n  }\n": typeof types.GetFieldsDocument,
    "\n  query GetUserFields($userId: ID!) {\n    fields(\n      where: { farm: { createdBy: { id: { equals: $userId } } } }\n      orderBy: { name: asc }\n    ) {\n      id\n      name\n      areaHectares\n      location\n      boundary\n      farm { id name }\n    }\n  }\n": typeof types.GetUserFieldsDocument,
    "\n  query GetUserFieldsFiltered($userId: ID!, $farmId: ID) {\n    fields(\n      where: {\n        farm: {\n          createdBy: { id: { equals: $userId } }\n          id: { equals: $farmId }\n        }\n      }\n      orderBy: { name: asc }\n    ) {\n      id\n      name\n      areaHectares\n      boundary\n      farm { id name }\n    }\n  }\n": typeof types.GetUserFieldsFilteredDocument,
    "\n  query GetAllFields {\n    fields {\n      id\n      name\n    }\n  }\n": typeof types.GetAllFieldsDocument,
    "\n  query GetField($id: ID!) {\n    field(where: { id: $id }) {\n      id\n      name\n      areaHectares\n      location\n      boundary\n      farm { id name }\n    }\n  }\n": typeof types.GetFieldDocument,
    "\n  query GetFieldArea($id: ID!) {\n    field(where: { id: $id }) {\n      id\n      areaHectares\n    }\n  }\n": typeof types.GetFieldAreaDocument,
    "\n  mutation CreateField(\n    $farmId: ID!\n    $name: String!\n    $areaHectares: Float!\n    $location: JSON!\n    $boundary: JSON\n  ) {\n    createField(\n      data: {\n        farm: { connect: { id: $farmId } }\n        name: $name\n        areaHectares: $areaHectares\n        location: $location\n        boundary: $boundary\n      }\n    ) {\n      id\n      name\n      areaHectares\n      location\n      boundary\n    }\n  }\n": typeof types.CreateFieldDocument,
    "\n  mutation UpdateField(\n    $id: ID!\n    $farmId: ID!\n    $name: String!\n    $areaHectares: Float!\n    $location: JSON!\n    $boundary: JSON\n  ) {\n    updateField(\n      where: { id: $id }\n      data: {\n        farm: { connect: { id: $farmId } }\n        name: $name\n        areaHectares: $areaHectares\n        location: $location\n        boundary: $boundary\n      }\n    ) {\n      id\n      name\n      areaHectares\n      location\n      boundary\n      farm { id name }\n    }\n  }\n": typeof types.UpdateFieldDocument,
    "\n  mutation DeleteField($id: ID!) {\n    deleteField(where: { id: $id }) {\n      id\n    }\n  }\n": typeof types.DeleteFieldDocument,
    "\n  query GetCropTypes {\n    cropTypes {\n      id\n      name\n    }\n  }\n": typeof types.GetCropTypesDocument,
    "\n  query GetCrops($fieldId: ID!) {\n    crops(where: { field: { id: { equals: $fieldId } } }) {\n      id\n      cropAreaHectares\n      boundary\n      cropType {\n        id\n        name\n      }\n    }\n  }\n": typeof types.GetCropsDocument,
    "\n  query GetCrop($id: ID!) {\n    crop(where: { id: $id }) {\n      id\n      cropAreaHectares\n      boundary\n      cropType {\n        id\n        name\n      }\n    }\n  }\n": typeof types.GetCropDocument,
    "\n  mutation CreateCrop(\n    $landId: ID!\n    $cropTypeId: ID!\n    $cropAreaHectares: Float!\n    $boundary: JSON\n  ) {\n    createCrop(\n      data: {\n        field: { connect: { id: $landId } }\n        cropType: { connect: { id: $cropTypeId } }\n        cropAreaHectares: $cropAreaHectares\n        boundary: $boundary\n      }\n    ) {\n      id\n      cropAreaHectares\n      cropType { id name }\n      boundary\n    }\n  }\n": typeof types.CreateCropDocument,
    "\n  mutation UpdateCrop(\n    $id: ID!\n    $cropTypeId: ID!\n    $cropAreaHectares: Float!\n    $boundary: JSON\n  ) {\n    updateCrop(\n      where: { id: $id }\n      data: {\n        cropType: { connect: { id: $cropTypeId } }\n        cropAreaHectares: $cropAreaHectares\n        boundary: $boundary\n      }\n    ) {\n      id\n      cropAreaHectares\n      cropType { id name }\n      boundary\n    }\n  }\n": typeof types.UpdateCropDocument,
    "\n  mutation DeleteCrop($id: ID!) {\n    deleteCrop(where: { id: $id }) {\n      id\n    }\n  }\n": typeof types.DeleteCropDocument,
    "\n  query GetDashboard($where: FarmWhereInput) {\n    farms(where: $where) {\n      id\n      name\n      fields {\n        areaHectares\n        crops {\n          cropAreaHectares\n          cropType {\n            name\n          }\n        }\n      }\n    }\n  }\n": typeof types.GetDashboardDocument,
    "\n  query WeatherRecords($fieldId: ID!, $start: DateTime!, $end: DateTime!) {\n    weatherRecords(\n      where: {\n        field: { id: { equals: $fieldId } }\n        date:  { gte: $start, lte: $end }\n      }\n      take: 1000               # Keystone returns max 10k â€“ more than enough\n    ) {\n      id\n      date\n      temperature\n      humidity\n      precipitationMm\n    }\n  }\n": typeof types.WeatherRecordsDocument,
    "\n  mutation CreateWeatherRecords($data: [WeatherRecordCreateInput!]!) {\n    createWeatherRecords(data: $data) {\n      id\n    }\n  }\n": typeof types.CreateWeatherRecordsDocument,
    "\n  query GetSoilMeasurements(\n    $fieldIds: [ID!]!\n    $dateFrom: DateTime\n    $dateTo: DateTime\n    $skip: Int = 0\n    $take: Int = 50\n  ) {\n    soilMeasurements(\n      where: {\n        field: { id: { in: $fieldIds } }\n        measurementDate: { gte: $dateFrom, lte: $dateTo }\n      }\n      orderBy: [{ measurementDate: desc }]\n      skip: $skip\n      take: $take\n    ) {\n      id\n      measurementDate\n      sensorId\n      ph\n      organicMatter\n      nitrogen\n      moisture\n      temperature\n      field { id name }\n    }\n  }\n": typeof types.GetSoilMeasurementsDocument,
    "\n  query GetNPPBaselines(\n    $fieldId: ID!\n    $yearGte: Int\n    $yearLte: Int\n    $skip: Int!\n    $take: Int!\n  ) {\n    netPrimaryProductivities(\n      where: {\n        field: { id: { equals: $fieldId } }\n        year: { gte: $yearGte, lte: $yearLte }\n      }\n      orderBy: { year: desc }\n      skip: $skip\n      take: $take\n    ) {\n      id\n      year\n      meanNPP\n      totalNPP\n      co2e\n      recordedAt\n    }\n  }\n": typeof types.GetNppBaselinesDocument,
    "\n  query GetLandCoverStats(\n    $fieldId: ID!\n    $yearGte: Int\n    $yearLte: Int\n    $skip: Int!\n    $take: Int!\n  ) {\n    landCoverStatistics(\n      where: {\n        field: { id: { equals: $fieldId } }\n        year: { gte: $yearGte, lte: $yearLte }\n      }\n      orderBy: { year: desc }\n      skip: $skip\n      take: $take\n    ) {\n      id\n      year\n      breakdown\n      imageUrl\n      recordedAt\n    }\n  }\n": typeof types.GetLandCoverStatsDocument,
    "\n  query GetSoilCarbonStocks(\n    $fieldId: ID!\n    $yearGte: Int\n    $yearLte: Int\n    $skip: Int!\n    $take: Int!\n  ) {\n    soilOrganicCarbonStocks(\n      where: {\n        field: { id: { equals: $fieldId } }\n        year: { gte: $yearGte, lte: $yearLte }\n      }\n      orderBy: { year: desc }\n      skip: $skip\n      take: $take\n    ) {\n      id\n      year\n      meanSOC\n      totalSOC\n      imageUrl\n      recordedAt\n    }\n  }\n": typeof types.GetSoilCarbonStocksDocument,
    "\n  query GetSoilMoisture(\n    $fieldId: ID!\n    $dateFrom: DateTime\n    $dateTo: DateTime\n    $skip: Int!\n    $take: Int!\n  ) {\n    soilMoistureObservations(\n      where: {\n        field: { id: { equals: $fieldId } }\n        date: { gte: $dateFrom, lte: $dateTo }\n      }\n      orderBy: { date: asc }\n      skip: $skip\n      take: $take\n    ) {\n      id\n      date\n      meanMoisture\n      imageUrl\n      recordedAt\n    }\n  }\n": typeof types.GetSoilMoistureDocument,
    "\nquery GetLandPractices($fieldId: ID!) {\n  sustainablePractices(\n    where: {\n      events: { some: { field: { id: { equals: $fieldId } } } }\n    }\n    orderBy: { name: asc }\n  ) {\n    id\n    name\n    category { name }\n    description\n  }\n}\n": typeof types.GetLandPracticesDocument,
    "\n  query GetPracticeEvents($fieldId: ID!) {\n    sustainablePracticeEvents(\n      where: { field: { id: { equals: $fieldId } } }\n      orderBy: { appliedDate: asc }\n    ) {\n      practice {\n        id\n        name\n      }\n      appliedDate\n      parameters\n    }\n  }\n": typeof types.GetPracticeEventsDocument,
    "\n  query GetSustainablePractices {\n    sustainablePractices(orderBy: { name: asc }) {\n      id\n      name\n      description\n    }\n  }\n": typeof types.GetSustainablePracticesDocument,
    "\n  mutation CreateSustainablePracticeEvent(\n    $practiceId: ID!\n    $fieldId: ID!\n    $parameters: JSON\n    $targetImpact: Float\n    $appliedDate: DateTime!\n  ) {\n    createSustainablePracticeEvent(\n      data: {\n        practice:    { connect: { id: $practiceId } }\n        field:        { connect: { id: $fieldId } }\n        parameters:  $parameters\n        targetImpact: $targetImpact\n        appliedDate: $appliedDate\n      }\n    ) {\n      id\n      field {\n        id\n        name\n      }\n      practice {\n        id\n        name\n      }\n      parameters\n      appliedDate\n    }\n  }\n": typeof types.CreateSustainablePracticeEventDocument,
    "\n  query GetPracticeEventsForPractice(\n    $fieldId: ID!\n    $practiceId: ID!\n    $dateFrom: DateTime\n    $dateTo: DateTime\n  ) {\n    sustainablePracticeEvents(\n      where: {\n        field: { id: { equals: $fieldId } }\n        practice: { id: { equals: $practiceId } }\n        appliedDate: { gte: $dateFrom, lte: $dateTo }\n      }\n      orderBy: { appliedDate: desc }\n    ) {\n      id\n      parameters\n      targetImpact\n      appliedDate\n      createdAt\n    }\n  }\n": typeof types.GetPracticeEventsForPracticeDocument,
    "\n  query GetOffsetsForPractices($practiceIds: [ID!]!) {\n    carbonOffsetFactors(\n      where: { sustainablePractice: { id: { in: $practiceIds } } }\n    ) {\n      id\n      min\n      max\n      cropType { id name }\n      sustainablePractice { id }\n    }\n  }\n": typeof types.GetOffsetsForPracticesDocument,
    "\n  query GetPosts {\n    posts(where: { status: { equals: \"published\" } }, orderBy: { publishedAt: desc }) {\n      id\n      title\n      slug\n      excerpt\n      coverImage {\n        url\n      }\n      publishedAt\n      author {\n        name\n        avatar {\n          url\n        }\n      }\n    }\n  }\n": typeof types.GetPostsDocument,
    "\n  query GetPostBySlug($slug: String!) {\n    posts(where: { slug: { equals: $slug } }) {\n      id\n      title\n      content\n      coverImage { url }\n      publishedAt\n      author { name, avatar { url } }\n      tags { name, slug }\n      category { name }\n    }\n  }\n": typeof types.GetPostBySlugDocument,
    "\n  mutation CreateSubscriber($email: String!) {\n    createNewsletterSubscriber(data: { email: $email }) {\n      id\n      email\n      subscribedAt\n    }\n  }\n": typeof types.CreateSubscriberDocument,
    "\n  query SubscriberByEmail($email: String!) {\n    newsletterSubscribers(where: { email: { equals: $email } }) {\n      id\n      email\n      isActive\n    }\n  }\n": typeof types.SubscriberByEmailDocument,
    "\n  mutation UpdateSubscriber($id: ID!, $isActive: Boolean!) {\n    updateNewsletterSubscriber(\n      where: { id: $id }\n      data:  { isActive: $isActive }\n    ) {\n      id\n      isActive\n    }\n  }\n": typeof types.UpdateSubscriberDocument,
    "\n  query GetJobOpenings {\n    jobOpenings {\n      id\n      title\n      department\n      location\n      employmentType\n      seniority\n    }\n  }\n": typeof types.GetJobOpeningsDocument,
    "\n  query GetJobOpening($where: JobOpeningWhereUniqueInput!) {\n    jobOpening(where: $where) {\n      id\n      title\n      department\n      location\n      employmentType\n      seniority\n      description\n    }\n  }\n": typeof types.GetJobOpeningDocument,
    "\n  mutation ApplyJob($data: JobCandidateCreateInput!) {\n    createJobCandidate(data: $data) {\n      id\n    }\n  }\n": typeof types.ApplyJobDocument,
    "\n  query GetReferralPartners {\n    referralPartners(orderBy: { createdAt: desc }) {\n      id\n      name\n      type\n      commission_pct\n      contactEmail\n      ownerUser { id } \n    }\n  }\n": typeof types.GetReferralPartnersDocument,
    "\n  mutation CreateReferralPartner(\n    $name: String!\n    $type: String!\n    $contactEmail: String!\n    $commissionPct: Float!\n  ) {\n    createReferralPartner(\n      data: {\n        name: $name\n        type: $type\n        contactEmail: $contactEmail\n        commission_pct: $commissionPct\n      }\n    ) {\n      id\n      name\n    }\n  }\n": typeof types.CreateReferralPartnerDocument,
    "\n  mutation CreateReferralPartnerForUser(\n    $name: String!\n    $type: String!\n    $contactEmail: String!\n    $commissionPct: Float!\n    $ownerUserId: ID!\n  ) {\n    createReferralPartner(\n      data: {\n        name          : $name\n        type          : $type\n        contactEmail  : $contactEmail\n        commission_pct: $commissionPct\n        ownerUser     : { connect: { id: $ownerUserId } }\n      }\n    ) {\n      id\n    }\n  }\n": typeof types.CreateReferralPartnerForUserDocument,
    "\n  query SearchUsers($query: String!) {\n    users(\n      where: {\n        OR: [\n          { name:  { contains: $query, mode: insensitive } }\n          { email: { contains: $query, mode: insensitive } }\n        ]\n      }\n      take: 10\n    ) {\n      id\n      name\n      email\n    }\n  }\n": typeof types.SearchUsersDocument,
    "\n  query GetPartnerMemberships {\n    memberships(where:{ role: { equals: \"partner\" } }) {\n      id\n      user { id name email }\n    }\n  }\n": typeof types.GetPartnerMembershipsDocument,
    "\n  mutation AddPartnerMembership($userId: ID!) {\n    createMembership(\n      data: {\n        user: { connect: { id: $userId } }\n        role: \"partner\"\n      }\n    ) { id }\n  }\n": typeof types.AddPartnerMembershipDocument,
    "\n  mutation RemovePartnerMembership($id: ID!) {\n    deleteMembership(where:{ id:$id }) { id }\n  }\n": typeof types.RemovePartnerMembershipDocument,
    "\n  query GetReferralCampaigns {\n    referralCampaigns(orderBy: { startDate: desc }) {\n      id\n      code\n      discount_pct\n      startDate\n      endDate\n      partner { id name }\n    }\n  }\n": typeof types.GetReferralCampaignsDocument,
    "\n  mutation CreateReferralCampaign(\n    $partnerId: ID!\n    $code: String!\n    $discountPct: Float!\n    $startDate: DateTime\n    $endDate: DateTime\n  ) {\n    createReferralCampaign(\n      data: {\n        partner: { connect: { id: $partnerId } }\n        code: $code\n        discount_pct: $discountPct\n        startDate: $startDate\n        endDate: $endDate\n      }\n    ) {\n      id\n      code\n    }\n  }\n": typeof types.CreateReferralCampaignDocument,
    "\n  query FindActiveReferralCampaign($code: String!, $now: DateTime!) {\n    referralCampaigns(\n      where: {\n        code: { equals: $code }\n        AND: [\n          { OR: [\n              { startDate: { equals: null } }\n              { startDate: { lte: $now } }\n            ]\n          }\n          { OR: [\n              { endDate: { equals: null } }\n              { endDate: { gte: $now } }\n            ]\n          }\n        ]\n      }\n      take: 1\n    ) {\n      id\n      discount_pct\n    }\n  }\n": typeof types.FindActiveReferralCampaignDocument,
    "\n  mutation UpdateReferralPartner($id: ID!, $commissionPct: Float!) {\n    updateReferralPartner(\n      where:{ id:$id }\n      data :{ commission_pct:$commissionPct }\n    ){ id commission_pct }\n  }\n": typeof types.UpdateReferralPartnerDocument,
    "\n  mutation CreateReferralRedemption(\n    $campaignId: ID!\n    $userId:      ID!\n    $signup:      DateTime!\n    $discountValue: Float!\n  ) {\n    createReferralRedemption(\n      data: {\n        campaign      : { connect: { id: $campaignId } }\n        farmerUser    : { connect: { id: $userId } }\n        signupDate    : $signup\n        discountValue : $discountValue\n      }\n    ) {\n      id\n    }\n  }\n": typeof types.CreateReferralRedemptionDocument,
    "\n  mutation DeleteReferralCampaign($id: ID!) {\n    deleteReferralCampaign(where: { id: $id }) { id }\n  }\n": typeof types.DeleteReferralCampaignDocument,
    "\n  query CheckPartnerMembership($userId: ID!) {\n    memberships(\n      where: {\n        user: { id: { equals: $userId } }\n        role: { equals: \"partner\" }\n      }\n      take: 1\n    ) {\n      id\n    }\n  }\n": typeof types.CheckPartnerMembershipDocument,
    "\n  query GetPartnerDashboard($userId: ID!) {\n    referralPartners(where: { ownerUser: { id: { equals: $userId } } }) {\n      id\n      name\n      commission_pct\n      campaigns(orderBy: { startDate: desc }) {\n        id\n        code\n        discount_pct\n        startDate\n        endDate\n        redemptions {\n          id\n          discountValue\n          signupDate\n          farmerUser  { id name }\n          subscription { id status }\n        }\n      }\n    }\n  }\n": typeof types.GetPartnerDashboardDocument,
    "\n    query GetMessageTemplates {\n      messageTemplates(orderBy: { createdAt: desc }) {\n        id\n        title\n        bodyMarkdown\n        type\n        urgency\n        mediaId\n        ctaLabel\n        channelMask\n        createdAt\n      }\n    }\n  ": typeof types.GetMessageTemplatesDocument,
    "\n    mutation CreateMessageTemplate(\n      $title: String!\n      $bodyMarkdown: String\n      $type: String!\n      $urgency: String!\n      $mediaId: String\n      $ctaLabel: String\n      $ctaLink: String\n      $channelMask: JSON\n      $requireAcknowledgement: Boolean\n      $maxViews: Int\n      $startAt: DateTime\n      $endAt: DateTime\n    ) {\n      createMessageTemplate(\n        data: {\n          title:                 $title\n          bodyMarkdown:          $bodyMarkdown\n          type:                  $type\n          urgency:               $urgency\n          mediaId:               $mediaId\n          ctaLabel:              $ctaLabel\n          ctaLink:               $ctaLink\n          channelMask:           $channelMask\n          requireAcknowledgement:$requireAcknowledgement\n          maxViews:              $maxViews\n          startAt:               $startAt\n          endAt:                 $endAt\n        }\n      ) {\n        id\n      }\n    }\n  ": typeof types.CreateMessageTemplateDocument,
    "\n    mutation DeleteMessageTemplate($id: ID!) {\n      deleteMessageTemplate(where: { id: $id }) {\n        id\n      }\n    }\n  ": typeof types.DeleteMessageTemplateDocument,
    "\n  query GetMessageDeliveries(\n    $where: MessageDeliveryWhereInput\n    $take:  Int!\n    $skip:  Int!\n  ) {\n    messageDeliveries(\n      where:   $where\n      orderBy: { createdAt: desc }\n      take:    $take\n      skip:    $skip\n    ) {\n      id\n      status\n      urgency\n      views\n      lastShownAt\n      createdAt\n\n      user     { email }\n      template { title type }\n      clicks   { id }\n    }\n  }\n": typeof types.GetMessageDeliveriesDocument,
    "\n  query GetMessageStats {\n    sent:       messageDeliveriesCount\n    read:       messageDeliveriesCount(where: { status: { equals: \"read\" } })\n    dismissed:  messageDeliveriesCount(where: { status: { equals: \"dismissed\" } })\n  }\n": typeof types.GetMessageStatsDocument,
    "\n  query GetMessageDetail($id: ID!) {\n    messageDelivery(where: { id: $id }) {\n      id\n      status\n      createdAt\n      template {\n        title\n        bodyMarkdown\n        mediaId\n        ctaLabel\n        ctaLink\n      }\n    }\n  }\n": typeof types.GetMessageDetailDocument,
    "\n  query GetUnreadCount {\n    deliveriesUnread: messageDeliveriesCount(\n      where: { status: { equals: \"unread\" } }\n    )\n    alertsUnread: alertsCount(\n      where: { status: { equals: \"open\" } }\n    )\n  }\n": typeof types.GetUnreadCountDocument,
    "\n  query GetInbox {\n    alerts(\n      where:{ status:{ equals:\"open\" } }\n      orderBy:{ createdAt:desc }\n      take:10\n    ){ id message createdAt }\n\n    messageDeliveries(\n      where:{ status:{ equals:\"unread\" } }\n      orderBy:{ createdAt:desc }\n      take:10\n    ){\n      id createdAt\n      template{ title }\n    }\n  }\n": typeof types.GetInboxDocument,
    "\n  mutation MarkDeliveryReadModal($id: ID!) {\n    updateMessageDelivery(where: { id: $id }, data: { status: \"read\" }) {\n      id\n    }\n  }\n": typeof types.MarkDeliveryReadModalDocument,
    "\n  mutation MarkDeliveryRemind($id: ID!, $ts: DateTime!) {\n    updateMessageDelivery(\n      where: { id: $id }\n      data : { lastShownAt: $ts }\n    ) { id }\n  }\n": typeof types.MarkDeliveryRemindDocument,
    "\n  mutation MarkAlertRead($id:ID!){\n    updateAlert(\n      where:{ id:$id }\n      data :{ status:\"dismissed\" }\n    ){ id }\n  }\n": typeof types.MarkAlertReadDocument,
    "\n  mutation UpdateMessageDelivery($id: ID!, $data: MessageDeliveryUpdateInput!) {\n    updateMessageDelivery(where: { id: $id }, data: $data) {\n      id\n    }\n  }\n": typeof types.UpdateMessageDeliveryDocument,
    "\n  mutation CreateMessageDelivery($templateId: ID!, $userId: ID!) {\n    createMessageDelivery(\n      data:{\n        template:{ connect:{ id:$templateId } }\n        user:    { connect:{ id:$userId } }\n      }\n    ){ id }\n  }\n": typeof types.CreateMessageDeliveryDocument,
    "\n  query GetReceivedMessages(\n    $where: MessageDeliveryWhereInput!\n    $take:  Int!\n    $skip:  Int!\n    $search: String\n  ) {\n    messageDeliveries(\n      where: {\n        AND: [\n          $where\n          { template: { title: { contains: $search, mode: insensitive } } }\n        ]\n      }\n      orderBy: { createdAt: desc }\n      take:    $take\n      skip:    $skip\n    ) {\n      id\n      status\n      views\n      lastShownAt\n      createdAt\n      template { id title mediaId }\n    }\n\n    messageDeliveriesCount(\n      where: {\n        AND: [\n          $where\n          { template: { title: { contains: $search, mode: insensitive } } }\n        ]\n      }\n    )\n  }\n": typeof types.GetReceivedMessagesDocument,
    "\n  query GetSentMessages(\n    $where: MessageTemplateWhereInput!\n    $take:  Int!\n    $skip:  Int!\n    $search: String\n  ) {\n    messageTemplates(\n      where: {\n        AND: [$where, { title: { contains: $search, mode: insensitive } }]\n      }\n      orderBy: { createdAt: desc }\n      take:    $take\n      skip:    $skip\n    ) {\n      id\n      title\n      type\n      urgency\n      createdAt\n    }\n\n    messageTemplatesCount(\n      where: {\n        AND: [$where, { title: { contains: $search, mode: insensitive } }]\n      }\n    )\n  }\n": typeof types.GetSentMessagesDocument,
    "\n  query GetAlerts(\n    $where: AlertWhereInput!\n    $take : Int!\n    $skip : Int!\n    $search: String\n  ) {\n    alerts(\n      where: {\n        AND: [\n          $where\n          { message: { contains: $search, mode: insensitive } }\n        ]\n      }\n      orderBy: { createdAt: desc }\n      take:    $take\n      skip:    $skip\n    ) {\n      id\n      message\n      urgency\n      status\n      createdAt\n    }\n\n    alertsCount(\n      where: {\n        AND: [\n          $where\n          { message: { contains: $search, mode: insensitive } }\n        ]\n      }\n    )\n  }\n": typeof types.GetAlertsDocument,
    "\n  query GetAlertDetail($id: ID!) {\n    alert(where: { id: $id }) {\n      id\n      message\n      urgency\n      status\n      due_date\n      createdAt\n    }\n  }\n": typeof types.GetAlertDetailDocument,
    "\n  query GetUsersByRole($role: String!) {\n    memberships(where: { role: { equals: $role } }) {\n      user { id email name }\n    }\n  }\n": typeof types.GetUsersByRoleDocument,
    "\n  query OrgByUser($userId: ID!) {\n    user(where: { id: $userId }) {\n      memberships {\n        organisation {\n          id\n          name\n          stripeCustomerId\n        }\n      }\n    }\n  }\n": typeof types.OrgByUserDocument,
    "\n  mutation SetOrgCust($orgId: ID!, $custId: String!) {\n    updateOrganisation(\n      where: { id: $orgId }\n      data:  { stripeCustomerId: $custId }\n    ) { id }\n  }\n": typeof types.SetOrgCustDocument,
    "\n  mutation CreateSubscription($data: SubscriptionCreateInput!) {\n    createSubscription(data: $data) { id }\n  }\n": typeof types.CreateSubscriptionDocument,
    "\nmutation UpdateSub(\n  $orgId: ID!\n  $stripeSubId: String!\n  $stripePriceId: String!\n  $status: String!\n  $start: DateTime!\n  $end: DateTime!\n) {\n  updateSubscription(\n    where: { stripeSubscriptionId: $stripeSubId }\n    data: {\n      organisation:         { connect: { id: $orgId } }\n      stripeSubscriptionId: $stripeSubId\n      status:               $status\n      startDate:            $start        # only if you really want to overwrite it\n      currentPeriodEnd:     $end\n    }\n  ) {\n    id\n    status\n  }\n}\n\n": typeof types.UpdateSubDocument,
    "\n  query GetPlans {\n    plans {\n      id\n      key\n      label\n      features\n      activePrice {\n        id\n        amount\n        currency\n      }\n    }\n  }\n": typeof types.GetPlansDocument,
    "\n  query FindActivePrice($key: String!) {\n    plan(where: { key: $key }) {\n      id\n      activePrice {\n        id\n        stripePriceId\n      }\n    }\n  }\n": typeof types.FindActivePriceDocument,
};
const documents: Documents = {
    "\n  query GetProducts(\n    $where:   ProductWhereInput\n    $orderBy: [ProductOrderByInput!]\n    $take:    Int\n    $skip:    Int\n  ) {\n    products(where: $where, orderBy: $orderBy, take: $take, skip: $skip) {\n      id\n      name\n      registration_no\n      product_type\n      hazard_class\n      country\n      stato_amministrativo\n    }\n    productsCount(where: $where)\n  }\n": types.GetProductsDocument,
    "\n  query GetCategoryKPI($id: ID!) {\n    categoryKPI(where: { id: $id }) {\n      id\n      name\n      kpis(where: { visible: { equals: true } }) {\n        id\n        title\n        currentValue\n        target\n        description\n      }\n    }\n  }\n": types.GetCategoryKpiDocument,
    "\n  query GetVisibleKPIs {\n    kPIS(where: { visible: { equals: true } }, orderBy: { createdAt: desc }) {\n      id\n      title\n      currentValue\n      target\n      category {\n        id\n        name\n      }\n    }\n  }\n": types.GetVisibleKpIsDocument,
    "\n  mutation UpsertUser($email: String!, $name: String!) {\n    # This uses Keystone's built-in createUser, but we'll ignore unique errors\n    createUser(data: { email: $email, name: $name }) {\n      id\n    }\n  }\n": types.UpsertUserDocument,
    "\n  mutation Authenticate($email: String!, $password: String!) {\n    authenticateUserWithPassword(email: $email, password: $password) {\n      ... on UserAuthenticationWithPasswordSuccess {\n        sessionToken\n        item { id name email isAdmin }\n      }\n      ... on UserAuthenticationWithPasswordFailure {\n        message\n      }\n    }\n  }\n": types.AuthenticateDocument,
    "\n  query FindUser($email: String!) {\n    users(where: { email: { equals: $email } }) {\n      id name email isAdmin\n    }\n  }\n": types.FindUserDocument,
    "\n  mutation CreateUser($email: String!, $name: String!) {\n    createUser(data: { email: $email, name: $name }) {\n      id name email isAdmin\n    }\n  }\n": types.CreateUserDocument,
    "\n  mutation CreateFarm(\n    $name: String!\n    $createdById: ID!\n    $location: JSON!\n  ) {\n    createFarm(\n      data: {\n        name: $name\n        createdBy: { connect: { id: $createdById } }\n        location: $location\n      }\n    ) {\n      id\n      name\n      location\n    }\n  }\n": types.CreateFarmDocument,
    "\n  query GetFarms {\n    farms {\n      id\n      name\n      location\n      isDefault\n      fields {\n        id\n        name\n        areaHectares\n      }\n    }\n  }\n": types.GetFarmsDocument,
    "\n  query GetFarm($id: ID!) {\n    farm(where: { id: $id }) {\n      id\n      name\n      location\n      isDefault\n      fields {\n        id\n        name\n        areaHectares\n      }\n    }\n  }\n": types.GetFarmDocument,
    "\n  mutation UpdateFarm($id: ID!, $name: String!, $location: JSON!) {\n    updateFarm(\n      where: { id: $id }\n      data: { name: $name, location: $location, }\n    ) {\n      id\n      name\n      location\n    }\n  }\n": types.UpdateFarmDocument,
    "\n  mutation DeleteFarm($id: ID!) {\n    deleteFarm(where: { id: $id }) {\n      id\n    }\n  }\n": types.DeleteFarmDocument,
    "\n  query GetFields($farmId: ID!) {\n    fields(where: { farm: { id: { equals: $farmId } } }) {\n      id\n      name\n      areaHectares\n      location\n      boundary\n    }\n  }\n": types.GetFieldsDocument,
    "\n  query GetUserFields($userId: ID!) {\n    fields(\n      where: { farm: { createdBy: { id: { equals: $userId } } } }\n      orderBy: { name: asc }\n    ) {\n      id\n      name\n      areaHectares\n      location\n      boundary\n      farm { id name }\n    }\n  }\n": types.GetUserFieldsDocument,
    "\n  query GetUserFieldsFiltered($userId: ID!, $farmId: ID) {\n    fields(\n      where: {\n        farm: {\n          createdBy: { id: { equals: $userId } }\n          id: { equals: $farmId }\n        }\n      }\n      orderBy: { name: asc }\n    ) {\n      id\n      name\n      areaHectares\n      boundary\n      farm { id name }\n    }\n  }\n": types.GetUserFieldsFilteredDocument,
    "\n  query GetAllFields {\n    fields {\n      id\n      name\n    }\n  }\n": types.GetAllFieldsDocument,
    "\n  query GetField($id: ID!) {\n    field(where: { id: $id }) {\n      id\n      name\n      areaHectares\n      location\n      boundary\n      farm { id name }\n    }\n  }\n": types.GetFieldDocument,
    "\n  query GetFieldArea($id: ID!) {\n    field(where: { id: $id }) {\n      id\n      areaHectares\n    }\n  }\n": types.GetFieldAreaDocument,
    "\n  mutation CreateField(\n    $farmId: ID!\n    $name: String!\n    $areaHectares: Float!\n    $location: JSON!\n    $boundary: JSON\n  ) {\n    createField(\n      data: {\n        farm: { connect: { id: $farmId } }\n        name: $name\n        areaHectares: $areaHectares\n        location: $location\n        boundary: $boundary\n      }\n    ) {\n      id\n      name\n      areaHectares\n      location\n      boundary\n    }\n  }\n": types.CreateFieldDocument,
    "\n  mutation UpdateField(\n    $id: ID!\n    $farmId: ID!\n    $name: String!\n    $areaHectares: Float!\n    $location: JSON!\n    $boundary: JSON\n  ) {\n    updateField(\n      where: { id: $id }\n      data: {\n        farm: { connect: { id: $farmId } }\n        name: $name\n        areaHectares: $areaHectares\n        location: $location\n        boundary: $boundary\n      }\n    ) {\n      id\n      name\n      areaHectares\n      location\n      boundary\n      farm { id name }\n    }\n  }\n": types.UpdateFieldDocument,
    "\n  mutation DeleteField($id: ID!) {\n    deleteField(where: { id: $id }) {\n      id\n    }\n  }\n": types.DeleteFieldDocument,
    "\n  query GetCropTypes {\n    cropTypes {\n      id\n      name\n    }\n  }\n": types.GetCropTypesDocument,
    "\n  query GetCrops($fieldId: ID!) {\n    crops(where: { field: { id: { equals: $fieldId } } }) {\n      id\n      cropAreaHectares\n      boundary\n      cropType {\n        id\n        name\n      }\n    }\n  }\n": types.GetCropsDocument,
    "\n  query GetCrop($id: ID!) {\n    crop(where: { id: $id }) {\n      id\n      cropAreaHectares\n      boundary\n      cropType {\n        id\n        name\n      }\n    }\n  }\n": types.GetCropDocument,
    "\n  mutation CreateCrop(\n    $landId: ID!\n    $cropTypeId: ID!\n    $cropAreaHectares: Float!\n    $boundary: JSON\n  ) {\n    createCrop(\n      data: {\n        field: { connect: { id: $landId } }\n        cropType: { connect: { id: $cropTypeId } }\n        cropAreaHectares: $cropAreaHectares\n        boundary: $boundary\n      }\n    ) {\n      id\n      cropAreaHectares\n      cropType { id name }\n      boundary\n    }\n  }\n": types.CreateCropDocument,
    "\n  mutation UpdateCrop(\n    $id: ID!\n    $cropTypeId: ID!\n    $cropAreaHectares: Float!\n    $boundary: JSON\n  ) {\n    updateCrop(\n      where: { id: $id }\n      data: {\n        cropType: { connect: { id: $cropTypeId } }\n        cropAreaHectares: $cropAreaHectares\n        boundary: $boundary\n      }\n    ) {\n      id\n      cropAreaHectares\n      cropType { id name }\n      boundary\n    }\n  }\n": types.UpdateCropDocument,
    "\n  mutation DeleteCrop($id: ID!) {\n    deleteCrop(where: { id: $id }) {\n      id\n    }\n  }\n": types.DeleteCropDocument,
    "\n  query GetDashboard($where: FarmWhereInput) {\n    farms(where: $where) {\n      id\n      name\n      fields {\n        areaHectares\n        crops {\n          cropAreaHectares\n          cropType {\n            name\n          }\n        }\n      }\n    }\n  }\n": types.GetDashboardDocument,
    "\n  query WeatherRecords($fieldId: ID!, $start: DateTime!, $end: DateTime!) {\n    weatherRecords(\n      where: {\n        field: { id: { equals: $fieldId } }\n        date:  { gte: $start, lte: $end }\n      }\n      take: 1000               # Keystone returns max 10k â€“ more than enough\n    ) {\n      id\n      date\n      temperature\n      humidity\n      precipitationMm\n    }\n  }\n": types.WeatherRecordsDocument,
    "\n  mutation CreateWeatherRecords($data: [WeatherRecordCreateInput!]!) {\n    createWeatherRecords(data: $data) {\n      id\n    }\n  }\n": types.CreateWeatherRecordsDocument,
    "\n  query GetSoilMeasurements(\n    $fieldIds: [ID!]!\n    $dateFrom: DateTime\n    $dateTo: DateTime\n    $skip: Int = 0\n    $take: Int = 50\n  ) {\n    soilMeasurements(\n      where: {\n        field: { id: { in: $fieldIds } }\n        measurementDate: { gte: $dateFrom, lte: $dateTo }\n      }\n      orderBy: [{ measurementDate: desc }]\n      skip: $skip\n      take: $take\n    ) {\n      id\n      measurementDate\n      sensorId\n      ph\n      organicMatter\n      nitrogen\n      moisture\n      temperature\n      field { id name }\n    }\n  }\n": types.GetSoilMeasurementsDocument,
    "\n  query GetNPPBaselines(\n    $fieldId: ID!\n    $yearGte: Int\n    $yearLte: Int\n    $skip: Int!\n    $take: Int!\n  ) {\n    netPrimaryProductivities(\n      where: {\n        field: { id: { equals: $fieldId } }\n        year: { gte: $yearGte, lte: $yearLte }\n      }\n      orderBy: { year: desc }\n      skip: $skip\n      take: $take\n    ) {\n      id\n      year\n      meanNPP\n      totalNPP\n      co2e\n      recordedAt\n    }\n  }\n": types.GetNppBaselinesDocument,
    "\n  query GetLandCoverStats(\n    $fieldId: ID!\n    $yearGte: Int\n    $yearLte: Int\n    $skip: Int!\n    $take: Int!\n  ) {\n    landCoverStatistics(\n      where: {\n        field: { id: { equals: $fieldId } }\n        year: { gte: $yearGte, lte: $yearLte }\n      }\n      orderBy: { year: desc }\n      skip: $skip\n      take: $take\n    ) {\n      id\n      year\n      breakdown\n      imageUrl\n      recordedAt\n    }\n  }\n": types.GetLandCoverStatsDocument,
    "\n  query GetSoilCarbonStocks(\n    $fieldId: ID!\n    $yearGte: Int\n    $yearLte: Int\n    $skip: Int!\n    $take: Int!\n  ) {\n    soilOrganicCarbonStocks(\n      where: {\n        field: { id: { equals: $fieldId } }\n        year: { gte: $yearGte, lte: $yearLte }\n      }\n      orderBy: { year: desc }\n      skip: $skip\n      take: $take\n    ) {\n      id\n      year\n      meanSOC\n      totalSOC\n      imageUrl\n      recordedAt\n    }\n  }\n": types.GetSoilCarbonStocksDocument,
    "\n  query GetSoilMoisture(\n    $fieldId: ID!\n    $dateFrom: DateTime\n    $dateTo: DateTime\n    $skip: Int!\n    $take: Int!\n  ) {\n    soilMoistureObservations(\n      where: {\n        field: { id: { equals: $fieldId } }\n        date: { gte: $dateFrom, lte: $dateTo }\n      }\n      orderBy: { date: asc }\n      skip: $skip\n      take: $take\n    ) {\n      id\n      date\n      meanMoisture\n      imageUrl\n      recordedAt\n    }\n  }\n": types.GetSoilMoistureDocument,
    "\nquery GetLandPractices($fieldId: ID!) {\n  sustainablePractices(\n    where: {\n      events: { some: { field: { id: { equals: $fieldId } } } }\n    }\n    orderBy: { name: asc }\n  ) {\n    id\n    name\n    category { name }\n    description\n  }\n}\n": types.GetLandPracticesDocument,
    "\n  query GetPracticeEvents($fieldId: ID!) {\n    sustainablePracticeEvents(\n      where: { field: { id: { equals: $fieldId } } }\n      orderBy: { appliedDate: asc }\n    ) {\n      practice {\n        id\n        name\n      }\n      appliedDate\n      parameters\n    }\n  }\n": types.GetPracticeEventsDocument,
    "\n  query GetSustainablePractices {\n    sustainablePractices(orderBy: { name: asc }) {\n      id\n      name\n      description\n    }\n  }\n": types.GetSustainablePracticesDocument,
    "\n  mutation CreateSustainablePracticeEvent(\n    $practiceId: ID!\n    $fieldId: ID!\n    $parameters: JSON\n    $targetImpact: Float\n    $appliedDate: DateTime!\n  ) {\n    createSustainablePracticeEvent(\n      data: {\n        practice:    { connect: { id: $practiceId } }\n        field:        { connect: { id: $fieldId } }\n        parameters:  $parameters\n        targetImpact: $targetImpact\n        appliedDate: $appliedDate\n      }\n    ) {\n      id\n      field {\n        id\n        name\n      }\n      practice {\n        id\n        name\n      }\n      parameters\n      appliedDate\n    }\n  }\n": types.CreateSustainablePracticeEventDocument,
    "\n  query GetPracticeEventsForPractice(\n    $fieldId: ID!\n    $practiceId: ID!\n    $dateFrom: DateTime\n    $dateTo: DateTime\n  ) {\n    sustainablePracticeEvents(\n      where: {\n        field: { id: { equals: $fieldId } }\n        practice: { id: { equals: $practiceId } }\n        appliedDate: { gte: $dateFrom, lte: $dateTo }\n      }\n      orderBy: { appliedDate: desc }\n    ) {\n      id\n      parameters\n      targetImpact\n      appliedDate\n      createdAt\n    }\n  }\n": types.GetPracticeEventsForPracticeDocument,
    "\n  query GetOffsetsForPractices($practiceIds: [ID!]!) {\n    carbonOffsetFactors(\n      where: { sustainablePractice: { id: { in: $practiceIds } } }\n    ) {\n      id\n      min\n      max\n      cropType { id name }\n      sustainablePractice { id }\n    }\n  }\n": types.GetOffsetsForPracticesDocument,
    "\n  query GetPosts {\n    posts(where: { status: { equals: \"published\" } }, orderBy: { publishedAt: desc }) {\n      id\n      title\n      slug\n      excerpt\n      coverImage {\n        url\n      }\n      publishedAt\n      author {\n        name\n        avatar {\n          url\n        }\n      }\n    }\n  }\n": types.GetPostsDocument,
    "\n  query GetPostBySlug($slug: String!) {\n    posts(where: { slug: { equals: $slug } }) {\n      id\n      title\n      content\n      coverImage { url }\n      publishedAt\n      author { name, avatar { url } }\n      tags { name, slug }\n      category { name }\n    }\n  }\n": types.GetPostBySlugDocument,
    "\n  mutation CreateSubscriber($email: String!) {\n    createNewsletterSubscriber(data: { email: $email }) {\n      id\n      email\n      subscribedAt\n    }\n  }\n": types.CreateSubscriberDocument,
    "\n  query SubscriberByEmail($email: String!) {\n    newsletterSubscribers(where: { email: { equals: $email } }) {\n      id\n      email\n      isActive\n    }\n  }\n": types.SubscriberByEmailDocument,
    "\n  mutation UpdateSubscriber($id: ID!, $isActive: Boolean!) {\n    updateNewsletterSubscriber(\n      where: { id: $id }\n      data:  { isActive: $isActive }\n    ) {\n      id\n      isActive\n    }\n  }\n": types.UpdateSubscriberDocument,
    "\n  query GetJobOpenings {\n    jobOpenings {\n      id\n      title\n      department\n      location\n      employmentType\n      seniority\n    }\n  }\n": types.GetJobOpeningsDocument,
    "\n  query GetJobOpening($where: JobOpeningWhereUniqueInput!) {\n    jobOpening(where: $where) {\n      id\n      title\n      department\n      location\n      employmentType\n      seniority\n      description\n    }\n  }\n": types.GetJobOpeningDocument,
    "\n  mutation ApplyJob($data: JobCandidateCreateInput!) {\n    createJobCandidate(data: $data) {\n      id\n    }\n  }\n": types.ApplyJobDocument,
    "\n  query GetReferralPartners {\n    referralPartners(orderBy: { createdAt: desc }) {\n      id\n      name\n      type\n      commission_pct\n      contactEmail\n      ownerUser { id } \n    }\n  }\n": types.GetReferralPartnersDocument,
    "\n  mutation CreateReferralPartner(\n    $name: String!\n    $type: String!\n    $contactEmail: String!\n    $commissionPct: Float!\n  ) {\n    createReferralPartner(\n      data: {\n        name: $name\n        type: $type\n        contactEmail: $contactEmail\n        commission_pct: $commissionPct\n      }\n    ) {\n      id\n      name\n    }\n  }\n": types.CreateReferralPartnerDocument,
    "\n  mutation CreateReferralPartnerForUser(\n    $name: String!\n    $type: String!\n    $contactEmail: String!\n    $commissionPct: Float!\n    $ownerUserId: ID!\n  ) {\n    createReferralPartner(\n      data: {\n        name          : $name\n        type          : $type\n        contactEmail  : $contactEmail\n        commission_pct: $commissionPct\n        ownerUser     : { connect: { id: $ownerUserId } }\n      }\n    ) {\n      id\n    }\n  }\n": types.CreateReferralPartnerForUserDocument,
    "\n  query SearchUsers($query: String!) {\n    users(\n      where: {\n        OR: [\n          { name:  { contains: $query, mode: insensitive } }\n          { email: { contains: $query, mode: insensitive } }\n        ]\n      }\n      take: 10\n    ) {\n      id\n      name\n      email\n    }\n  }\n": types.SearchUsersDocument,
    "\n  query GetPartnerMemberships {\n    memberships(where:{ role: { equals: \"partner\" } }) {\n      id\n      user { id name email }\n    }\n  }\n": types.GetPartnerMembershipsDocument,
    "\n  mutation AddPartnerMembership($userId: ID!) {\n    createMembership(\n      data: {\n        user: { connect: { id: $userId } }\n        role: \"partner\"\n      }\n    ) { id }\n  }\n": types.AddPartnerMembershipDocument,
    "\n  mutation RemovePartnerMembership($id: ID!) {\n    deleteMembership(where:{ id:$id }) { id }\n  }\n": types.RemovePartnerMembershipDocument,
    "\n  query GetReferralCampaigns {\n    referralCampaigns(orderBy: { startDate: desc }) {\n      id\n      code\n      discount_pct\n      startDate\n      endDate\n      partner { id name }\n    }\n  }\n": types.GetReferralCampaignsDocument,
    "\n  mutation CreateReferralCampaign(\n    $partnerId: ID!\n    $code: String!\n    $discountPct: Float!\n    $startDate: DateTime\n    $endDate: DateTime\n  ) {\n    createReferralCampaign(\n      data: {\n        partner: { connect: { id: $partnerId } }\n        code: $code\n        discount_pct: $discountPct\n        startDate: $startDate\n        endDate: $endDate\n      }\n    ) {\n      id\n      code\n    }\n  }\n": types.CreateReferralCampaignDocument,
    "\n  query FindActiveReferralCampaign($code: String!, $now: DateTime!) {\n    referralCampaigns(\n      where: {\n        code: { equals: $code }\n        AND: [\n          { OR: [\n              { startDate: { equals: null } }\n              { startDate: { lte: $now } }\n            ]\n          }\n          { OR: [\n              { endDate: { equals: null } }\n              { endDate: { gte: $now } }\n            ]\n          }\n        ]\n      }\n      take: 1\n    ) {\n      id\n      discount_pct\n    }\n  }\n": types.FindActiveReferralCampaignDocument,
    "\n  mutation UpdateReferralPartner($id: ID!, $commissionPct: Float!) {\n    updateReferralPartner(\n      where:{ id:$id }\n      data :{ commission_pct:$commissionPct }\n    ){ id commission_pct }\n  }\n": types.UpdateReferralPartnerDocument,
    "\n  mutation CreateReferralRedemption(\n    $campaignId: ID!\n    $userId:      ID!\n    $signup:      DateTime!\n    $discountValue: Float!\n  ) {\n    createReferralRedemption(\n      data: {\n        campaign      : { connect: { id: $campaignId } }\n        farmerUser    : { connect: { id: $userId } }\n        signupDate    : $signup\n        discountValue : $discountValue\n      }\n    ) {\n      id\n    }\n  }\n": types.CreateReferralRedemptionDocument,
    "\n  mutation DeleteReferralCampaign($id: ID!) {\n    deleteReferralCampaign(where: { id: $id }) { id }\n  }\n": types.DeleteReferralCampaignDocument,
    "\n  query CheckPartnerMembership($userId: ID!) {\n    memberships(\n      where: {\n        user: { id: { equals: $userId } }\n        role: { equals: \"partner\" }\n      }\n      take: 1\n    ) {\n      id\n    }\n  }\n": types.CheckPartnerMembershipDocument,
    "\n  query GetPartnerDashboard($userId: ID!) {\n    referralPartners(where: { ownerUser: { id: { equals: $userId } } }) {\n      id\n      name\n      commission_pct\n      campaigns(orderBy: { startDate: desc }) {\n        id\n        code\n        discount_pct\n        startDate\n        endDate\n        redemptions {\n          id\n          discountValue\n          signupDate\n          farmerUser  { id name }\n          subscription { id status }\n        }\n      }\n    }\n  }\n": types.GetPartnerDashboardDocument,
    "\n    query GetMessageTemplates {\n      messageTemplates(orderBy: { createdAt: desc }) {\n        id\n        title\n        bodyMarkdown\n        type\n        urgency\n        mediaId\n        ctaLabel\n        channelMask\n        createdAt\n      }\n    }\n  ": types.GetMessageTemplatesDocument,
    "\n    mutation CreateMessageTemplate(\n      $title: String!\n      $bodyMarkdown: String\n      $type: String!\n      $urgency: String!\n      $mediaId: String\n      $ctaLabel: String\n      $ctaLink: String\n      $channelMask: JSON\n      $requireAcknowledgement: Boolean\n      $maxViews: Int\n      $startAt: DateTime\n      $endAt: DateTime\n    ) {\n      createMessageTemplate(\n        data: {\n          title:                 $title\n          bodyMarkdown:          $bodyMarkdown\n          type:                  $type\n          urgency:               $urgency\n          mediaId:               $mediaId\n          ctaLabel:              $ctaLabel\n          ctaLink:               $ctaLink\n          channelMask:           $channelMask\n          requireAcknowledgement:$requireAcknowledgement\n          maxViews:              $maxViews\n          startAt:               $startAt\n          endAt:                 $endAt\n        }\n      ) {\n        id\n      }\n    }\n  ": types.CreateMessageTemplateDocument,
    "\n    mutation DeleteMessageTemplate($id: ID!) {\n      deleteMessageTemplate(where: { id: $id }) {\n        id\n      }\n    }\n  ": types.DeleteMessageTemplateDocument,
    "\n  query GetMessageDeliveries(\n    $where: MessageDeliveryWhereInput\n    $take:  Int!\n    $skip:  Int!\n  ) {\n    messageDeliveries(\n      where:   $where\n      orderBy: { createdAt: desc }\n      take:    $take\n      skip:    $skip\n    ) {\n      id\n      status\n      urgency\n      views\n      lastShownAt\n      createdAt\n\n      user     { email }\n      template { title type }\n      clicks   { id }\n    }\n  }\n": types.GetMessageDeliveriesDocument,
    "\n  query GetMessageStats {\n    sent:       messageDeliveriesCount\n    read:       messageDeliveriesCount(where: { status: { equals: \"read\" } })\n    dismissed:  messageDeliveriesCount(where: { status: { equals: \"dismissed\" } })\n  }\n": types.GetMessageStatsDocument,
    "\n  query GetMessageDetail($id: ID!) {\n    messageDelivery(where: { id: $id }) {\n      id\n      status\n      createdAt\n      template {\n        title\n        bodyMarkdown\n        mediaId\n        ctaLabel\n        ctaLink\n      }\n    }\n  }\n": types.GetMessageDetailDocument,
    "\n  query GetUnreadCount {\n    deliveriesUnread: messageDeliveriesCount(\n      where: { status: { equals: \"unread\" } }\n    )\n    alertsUnread: alertsCount(\n      where: { status: { equals: \"open\" } }\n    )\n  }\n": types.GetUnreadCountDocument,
    "\n  query GetInbox {\n    alerts(\n      where:{ status:{ equals:\"open\" } }\n      orderBy:{ createdAt:desc }\n      take:10\n    ){ id message createdAt }\n\n    messageDeliveries(\n      where:{ status:{ equals:\"unread\" } }\n      orderBy:{ createdAt:desc }\n      take:10\n    ){\n      id createdAt\n      template{ title }\n    }\n  }\n": types.GetInboxDocument,
    "\n  mutation MarkDeliveryReadModal($id: ID!) {\n    updateMessageDelivery(where: { id: $id }, data: { status: \"read\" }) {\n      id\n    }\n  }\n": types.MarkDeliveryReadModalDocument,
    "\n  mutation MarkDeliveryRemind($id: ID!, $ts: DateTime!) {\n    updateMessageDelivery(\n      where: { id: $id }\n      data : { lastShownAt: $ts }\n    ) { id }\n  }\n": types.MarkDeliveryRemindDocument,
    "\n  mutation MarkAlertRead($id:ID!){\n    updateAlert(\n      where:{ id:$id }\n      data :{ status:\"dismissed\" }\n    ){ id }\n  }\n": types.MarkAlertReadDocument,
    "\n  mutation UpdateMessageDelivery($id: ID!, $data: MessageDeliveryUpdateInput!) {\n    updateMessageDelivery(where: { id: $id }, data: $data) {\n      id\n    }\n  }\n": types.UpdateMessageDeliveryDocument,
    "\n  mutation CreateMessageDelivery($templateId: ID!, $userId: ID!) {\n    createMessageDelivery(\n      data:{\n        template:{ connect:{ id:$templateId } }\n        user:    { connect:{ id:$userId } }\n      }\n    ){ id }\n  }\n": types.CreateMessageDeliveryDocument,
    "\n  query GetReceivedMessages(\n    $where: MessageDeliveryWhereInput!\n    $take:  Int!\n    $skip:  Int!\n    $search: String\n  ) {\n    messageDeliveries(\n      where: {\n        AND: [\n          $where\n          { template: { title: { contains: $search, mode: insensitive } } }\n        ]\n      }\n      orderBy: { createdAt: desc }\n      take:    $take\n      skip:    $skip\n    ) {\n      id\n      status\n      views\n      lastShownAt\n      createdAt\n      template { id title mediaId }\n    }\n\n    messageDeliveriesCount(\n      where: {\n        AND: [\n          $where\n          { template: { title: { contains: $search, mode: insensitive } } }\n        ]\n      }\n    )\n  }\n": types.GetReceivedMessagesDocument,
    "\n  query GetSentMessages(\n    $where: MessageTemplateWhereInput!\n    $take:  Int!\n    $skip:  Int!\n    $search: String\n  ) {\n    messageTemplates(\n      where: {\n        AND: [$where, { title: { contains: $search, mode: insensitive } }]\n      }\n      orderBy: { createdAt: desc }\n      take:    $take\n      skip:    $skip\n    ) {\n      id\n      title\n      type\n      urgency\n      createdAt\n    }\n\n    messageTemplatesCount(\n      where: {\n        AND: [$where, { title: { contains: $search, mode: insensitive } }]\n      }\n    )\n  }\n": types.GetSentMessagesDocument,
    "\n  query GetAlerts(\n    $where: AlertWhereInput!\n    $take : Int!\n    $skip : Int!\n    $search: String\n  ) {\n    alerts(\n      where: {\n        AND: [\n          $where\n          { message: { contains: $search, mode: insensitive } }\n        ]\n      }\n      orderBy: { createdAt: desc }\n      take:    $take\n      skip:    $skip\n    ) {\n      id\n      message\n      urgency\n      status\n      createdAt\n    }\n\n    alertsCount(\n      where: {\n        AND: [\n          $where\n          { message: { contains: $search, mode: insensitive } }\n        ]\n      }\n    )\n  }\n": types.GetAlertsDocument,
    "\n  query GetAlertDetail($id: ID!) {\n    alert(where: { id: $id }) {\n      id\n      message\n      urgency\n      status\n      due_date\n      createdAt\n    }\n  }\n": types.GetAlertDetailDocument,
    "\n  query GetUsersByRole($role: String!) {\n    memberships(where: { role: { equals: $role } }) {\n      user { id email name }\n    }\n  }\n": types.GetUsersByRoleDocument,
    "\n  query OrgByUser($userId: ID!) {\n    user(where: { id: $userId }) {\n      memberships {\n        organisation {\n          id\n          name\n          stripeCustomerId\n        }\n      }\n    }\n  }\n": types.OrgByUserDocument,
    "\n  mutation SetOrgCust($orgId: ID!, $custId: String!) {\n    updateOrganisation(\n      where: { id: $orgId }\n      data:  { stripeCustomerId: $custId }\n    ) { id }\n  }\n": types.SetOrgCustDocument,
    "\n  mutation CreateSubscription($data: SubscriptionCreateInput!) {\n    createSubscription(data: $data) { id }\n  }\n": types.CreateSubscriptionDocument,
    "\nmutation UpdateSub(\n  $orgId: ID!\n  $stripeSubId: String!\n  $stripePriceId: String!\n  $status: String!\n  $start: DateTime!\n  $end: DateTime!\n) {\n  updateSubscription(\n    where: { stripeSubscriptionId: $stripeSubId }\n    data: {\n      organisation:         { connect: { id: $orgId } }\n      stripeSubscriptionId: $stripeSubId\n      status:               $status\n      startDate:            $start        # only if you really want to overwrite it\n      currentPeriodEnd:     $end\n    }\n  ) {\n    id\n    status\n  }\n}\n\n": types.UpdateSubDocument,
    "\n  query GetPlans {\n    plans {\n      id\n      key\n      label\n      features\n      activePrice {\n        id\n        amount\n        currency\n      }\n    }\n  }\n": types.GetPlansDocument,
    "\n  query FindActivePrice($key: String!) {\n    plan(where: { key: $key }) {\n      id\n      activePrice {\n        id\n        stripePriceId\n      }\n    }\n  }\n": types.FindActivePriceDocument,
};

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = graphql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
 */
export function graphql(source: string): unknown;

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetProducts(\n    $where:   ProductWhereInput\n    $orderBy: [ProductOrderByInput!]\n    $take:    Int\n    $skip:    Int\n  ) {\n    products(where: $where, orderBy: $orderBy, take: $take, skip: $skip) {\n      id\n      name\n      registration_no\n      product_type\n      hazard_class\n      country\n      stato_amministrativo\n    }\n    productsCount(where: $where)\n  }\n"): (typeof documents)["\n  query GetProducts(\n    $where:   ProductWhereInput\n    $orderBy: [ProductOrderByInput!]\n    $take:    Int\n    $skip:    Int\n  ) {\n    products(where: $where, orderBy: $orderBy, take: $take, skip: $skip) {\n      id\n      name\n      registration_no\n      product_type\n      hazard_class\n      country\n      stato_amministrativo\n    }\n    productsCount(where: $where)\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetCategoryKPI($id: ID!) {\n    categoryKPI(where: { id: $id }) {\n      id\n      name\n      kpis(where: { visible: { equals: true } }) {\n        id\n        title\n        currentValue\n        target\n        description\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetCategoryKPI($id: ID!) {\n    categoryKPI(where: { id: $id }) {\n      id\n      name\n      kpis(where: { visible: { equals: true } }) {\n        id\n        title\n        currentValue\n        target\n        description\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetVisibleKPIs {\n    kPIS(where: { visible: { equals: true } }, orderBy: { createdAt: desc }) {\n      id\n      title\n      currentValue\n      target\n      category {\n        id\n        name\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetVisibleKPIs {\n    kPIS(where: { visible: { equals: true } }, orderBy: { createdAt: desc }) {\n      id\n      title\n      currentValue\n      target\n      category {\n        id\n        name\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation UpsertUser($email: String!, $name: String!) {\n    # This uses Keystone's built-in createUser, but we'll ignore unique errors\n    createUser(data: { email: $email, name: $name }) {\n      id\n    }\n  }\n"): (typeof documents)["\n  mutation UpsertUser($email: String!, $name: String!) {\n    # This uses Keystone's built-in createUser, but we'll ignore unique errors\n    createUser(data: { email: $email, name: $name }) {\n      id\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation Authenticate($email: String!, $password: String!) {\n    authenticateUserWithPassword(email: $email, password: $password) {\n      ... on UserAuthenticationWithPasswordSuccess {\n        sessionToken\n        item { id name email isAdmin }\n      }\n      ... on UserAuthenticationWithPasswordFailure {\n        message\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation Authenticate($email: String!, $password: String!) {\n    authenticateUserWithPassword(email: $email, password: $password) {\n      ... on UserAuthenticationWithPasswordSuccess {\n        sessionToken\n        item { id name email isAdmin }\n      }\n      ... on UserAuthenticationWithPasswordFailure {\n        message\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query FindUser($email: String!) {\n    users(where: { email: { equals: $email } }) {\n      id name email isAdmin\n    }\n  }\n"): (typeof documents)["\n  query FindUser($email: String!) {\n    users(where: { email: { equals: $email } }) {\n      id name email isAdmin\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation CreateUser($email: String!, $name: String!) {\n    createUser(data: { email: $email, name: $name }) {\n      id name email isAdmin\n    }\n  }\n"): (typeof documents)["\n  mutation CreateUser($email: String!, $name: String!) {\n    createUser(data: { email: $email, name: $name }) {\n      id name email isAdmin\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation CreateFarm(\n    $name: String!\n    $createdById: ID!\n    $location: JSON!\n  ) {\n    createFarm(\n      data: {\n        name: $name\n        createdBy: { connect: { id: $createdById } }\n        location: $location\n      }\n    ) {\n      id\n      name\n      location\n    }\n  }\n"): (typeof documents)["\n  mutation CreateFarm(\n    $name: String!\n    $createdById: ID!\n    $location: JSON!\n  ) {\n    createFarm(\n      data: {\n        name: $name\n        createdBy: { connect: { id: $createdById } }\n        location: $location\n      }\n    ) {\n      id\n      name\n      location\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetFarms {\n    farms {\n      id\n      name\n      location\n      isDefault\n      fields {\n        id\n        name\n        areaHectares\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetFarms {\n    farms {\n      id\n      name\n      location\n      isDefault\n      fields {\n        id\n        name\n        areaHectares\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetFarm($id: ID!) {\n    farm(where: { id: $id }) {\n      id\n      name\n      location\n      isDefault\n      fields {\n        id\n        name\n        areaHectares\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetFarm($id: ID!) {\n    farm(where: { id: $id }) {\n      id\n      name\n      location\n      isDefault\n      fields {\n        id\n        name\n        areaHectares\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation UpdateFarm($id: ID!, $name: String!, $location: JSON!) {\n    updateFarm(\n      where: { id: $id }\n      data: { name: $name, location: $location, }\n    ) {\n      id\n      name\n      location\n    }\n  }\n"): (typeof documents)["\n  mutation UpdateFarm($id: ID!, $name: String!, $location: JSON!) {\n    updateFarm(\n      where: { id: $id }\n      data: { name: $name, location: $location, }\n    ) {\n      id\n      name\n      location\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation DeleteFarm($id: ID!) {\n    deleteFarm(where: { id: $id }) {\n      id\n    }\n  }\n"): (typeof documents)["\n  mutation DeleteFarm($id: ID!) {\n    deleteFarm(where: { id: $id }) {\n      id\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetFields($farmId: ID!) {\n    fields(where: { farm: { id: { equals: $farmId } } }) {\n      id\n      name\n      areaHectares\n      location\n      boundary\n    }\n  }\n"): (typeof documents)["\n  query GetFields($farmId: ID!) {\n    fields(where: { farm: { id: { equals: $farmId } } }) {\n      id\n      name\n      areaHectares\n      location\n      boundary\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetUserFields($userId: ID!) {\n    fields(\n      where: { farm: { createdBy: { id: { equals: $userId } } } }\n      orderBy: { name: asc }\n    ) {\n      id\n      name\n      areaHectares\n      location\n      boundary\n      farm { id name }\n    }\n  }\n"): (typeof documents)["\n  query GetUserFields($userId: ID!) {\n    fields(\n      where: { farm: { createdBy: { id: { equals: $userId } } } }\n      orderBy: { name: asc }\n    ) {\n      id\n      name\n      areaHectares\n      location\n      boundary\n      farm { id name }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetUserFieldsFiltered($userId: ID!, $farmId: ID) {\n    fields(\n      where: {\n        farm: {\n          createdBy: { id: { equals: $userId } }\n          id: { equals: $farmId }\n        }\n      }\n      orderBy: { name: asc }\n    ) {\n      id\n      name\n      areaHectares\n      boundary\n      farm { id name }\n    }\n  }\n"): (typeof documents)["\n  query GetUserFieldsFiltered($userId: ID!, $farmId: ID) {\n    fields(\n      where: {\n        farm: {\n          createdBy: { id: { equals: $userId } }\n          id: { equals: $farmId }\n        }\n      }\n      orderBy: { name: asc }\n    ) {\n      id\n      name\n      areaHectares\n      boundary\n      farm { id name }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetAllFields {\n    fields {\n      id\n      name\n    }\n  }\n"): (typeof documents)["\n  query GetAllFields {\n    fields {\n      id\n      name\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetField($id: ID!) {\n    field(where: { id: $id }) {\n      id\n      name\n      areaHectares\n      location\n      boundary\n      farm { id name }\n    }\n  }\n"): (typeof documents)["\n  query GetField($id: ID!) {\n    field(where: { id: $id }) {\n      id\n      name\n      areaHectares\n      location\n      boundary\n      farm { id name }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetFieldArea($id: ID!) {\n    field(where: { id: $id }) {\n      id\n      areaHectares\n    }\n  }\n"): (typeof documents)["\n  query GetFieldArea($id: ID!) {\n    field(where: { id: $id }) {\n      id\n      areaHectares\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation CreateField(\n    $farmId: ID!\n    $name: String!\n    $areaHectares: Float!\n    $location: JSON!\n    $boundary: JSON\n  ) {\n    createField(\n      data: {\n        farm: { connect: { id: $farmId } }\n        name: $name\n        areaHectares: $areaHectares\n        location: $location\n        boundary: $boundary\n      }\n    ) {\n      id\n      name\n      areaHectares\n      location\n      boundary\n    }\n  }\n"): (typeof documents)["\n  mutation CreateField(\n    $farmId: ID!\n    $name: String!\n    $areaHectares: Float!\n    $location: JSON!\n    $boundary: JSON\n  ) {\n    createField(\n      data: {\n        farm: { connect: { id: $farmId } }\n        name: $name\n        areaHectares: $areaHectares\n        location: $location\n        boundary: $boundary\n      }\n    ) {\n      id\n      name\n      areaHectares\n      location\n      boundary\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation UpdateField(\n    $id: ID!\n    $farmId: ID!\n    $name: String!\n    $areaHectares: Float!\n    $location: JSON!\n    $boundary: JSON\n  ) {\n    updateField(\n      where: { id: $id }\n      data: {\n        farm: { connect: { id: $farmId } }\n        name: $name\n        areaHectares: $areaHectares\n        location: $location\n        boundary: $boundary\n      }\n    ) {\n      id\n      name\n      areaHectares\n      location\n      boundary\n      farm { id name }\n    }\n  }\n"): (typeof documents)["\n  mutation UpdateField(\n    $id: ID!\n    $farmId: ID!\n    $name: String!\n    $areaHectares: Float!\n    $location: JSON!\n    $boundary: JSON\n  ) {\n    updateField(\n      where: { id: $id }\n      data: {\n        farm: { connect: { id: $farmId } }\n        name: $name\n        areaHectares: $areaHectares\n        location: $location\n        boundary: $boundary\n      }\n    ) {\n      id\n      name\n      areaHectares\n      location\n      boundary\n      farm { id name }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation DeleteField($id: ID!) {\n    deleteField(where: { id: $id }) {\n      id\n    }\n  }\n"): (typeof documents)["\n  mutation DeleteField($id: ID!) {\n    deleteField(where: { id: $id }) {\n      id\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetCropTypes {\n    cropTypes {\n      id\n      name\n    }\n  }\n"): (typeof documents)["\n  query GetCropTypes {\n    cropTypes {\n      id\n      name\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetCrops($fieldId: ID!) {\n    crops(where: { field: { id: { equals: $fieldId } } }) {\n      id\n      cropAreaHectares\n      boundary\n      cropType {\n        id\n        name\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetCrops($fieldId: ID!) {\n    crops(where: { field: { id: { equals: $fieldId } } }) {\n      id\n      cropAreaHectares\n      boundary\n      cropType {\n        id\n        name\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetCrop($id: ID!) {\n    crop(where: { id: $id }) {\n      id\n      cropAreaHectares\n      boundary\n      cropType {\n        id\n        name\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetCrop($id: ID!) {\n    crop(where: { id: $id }) {\n      id\n      cropAreaHectares\n      boundary\n      cropType {\n        id\n        name\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation CreateCrop(\n    $landId: ID!\n    $cropTypeId: ID!\n    $cropAreaHectares: Float!\n    $boundary: JSON\n  ) {\n    createCrop(\n      data: {\n        field: { connect: { id: $landId } }\n        cropType: { connect: { id: $cropTypeId } }\n        cropAreaHectares: $cropAreaHectares\n        boundary: $boundary\n      }\n    ) {\n      id\n      cropAreaHectares\n      cropType { id name }\n      boundary\n    }\n  }\n"): (typeof documents)["\n  mutation CreateCrop(\n    $landId: ID!\n    $cropTypeId: ID!\n    $cropAreaHectares: Float!\n    $boundary: JSON\n  ) {\n    createCrop(\n      data: {\n        field: { connect: { id: $landId } }\n        cropType: { connect: { id: $cropTypeId } }\n        cropAreaHectares: $cropAreaHectares\n        boundary: $boundary\n      }\n    ) {\n      id\n      cropAreaHectares\n      cropType { id name }\n      boundary\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation UpdateCrop(\n    $id: ID!\n    $cropTypeId: ID!\n    $cropAreaHectares: Float!\n    $boundary: JSON\n  ) {\n    updateCrop(\n      where: { id: $id }\n      data: {\n        cropType: { connect: { id: $cropTypeId } }\n        cropAreaHectares: $cropAreaHectares\n        boundary: $boundary\n      }\n    ) {\n      id\n      cropAreaHectares\n      cropType { id name }\n      boundary\n    }\n  }\n"): (typeof documents)["\n  mutation UpdateCrop(\n    $id: ID!\n    $cropTypeId: ID!\n    $cropAreaHectares: Float!\n    $boundary: JSON\n  ) {\n    updateCrop(\n      where: { id: $id }\n      data: {\n        cropType: { connect: { id: $cropTypeId } }\n        cropAreaHectares: $cropAreaHectares\n        boundary: $boundary\n      }\n    ) {\n      id\n      cropAreaHectares\n      cropType { id name }\n      boundary\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation DeleteCrop($id: ID!) {\n    deleteCrop(where: { id: $id }) {\n      id\n    }\n  }\n"): (typeof documents)["\n  mutation DeleteCrop($id: ID!) {\n    deleteCrop(where: { id: $id }) {\n      id\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetDashboard($where: FarmWhereInput) {\n    farms(where: $where) {\n      id\n      name\n      fields {\n        areaHectares\n        crops {\n          cropAreaHectares\n          cropType {\n            name\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetDashboard($where: FarmWhereInput) {\n    farms(where: $where) {\n      id\n      name\n      fields {\n        areaHectares\n        crops {\n          cropAreaHectares\n          cropType {\n            name\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query WeatherRecords($fieldId: ID!, $start: DateTime!, $end: DateTime!) {\n    weatherRecords(\n      where: {\n        field: { id: { equals: $fieldId } }\n        date:  { gte: $start, lte: $end }\n      }\n      take: 1000               # Keystone returns max 10k â€“ more than enough\n    ) {\n      id\n      date\n      temperature\n      humidity\n      precipitationMm\n    }\n  }\n"): (typeof documents)["\n  query WeatherRecords($fieldId: ID!, $start: DateTime!, $end: DateTime!) {\n    weatherRecords(\n      where: {\n        field: { id: { equals: $fieldId } }\n        date:  { gte: $start, lte: $end }\n      }\n      take: 1000               # Keystone returns max 10k â€“ more than enough\n    ) {\n      id\n      date\n      temperature\n      humidity\n      precipitationMm\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation CreateWeatherRecords($data: [WeatherRecordCreateInput!]!) {\n    createWeatherRecords(data: $data) {\n      id\n    }\n  }\n"): (typeof documents)["\n  mutation CreateWeatherRecords($data: [WeatherRecordCreateInput!]!) {\n    createWeatherRecords(data: $data) {\n      id\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetSoilMeasurements(\n    $fieldIds: [ID!]!\n    $dateFrom: DateTime\n    $dateTo: DateTime\n    $skip: Int = 0\n    $take: Int = 50\n  ) {\n    soilMeasurements(\n      where: {\n        field: { id: { in: $fieldIds } }\n        measurementDate: { gte: $dateFrom, lte: $dateTo }\n      }\n      orderBy: [{ measurementDate: desc }]\n      skip: $skip\n      take: $take\n    ) {\n      id\n      measurementDate\n      sensorId\n      ph\n      organicMatter\n      nitrogen\n      moisture\n      temperature\n      field { id name }\n    }\n  }\n"): (typeof documents)["\n  query GetSoilMeasurements(\n    $fieldIds: [ID!]!\n    $dateFrom: DateTime\n    $dateTo: DateTime\n    $skip: Int = 0\n    $take: Int = 50\n  ) {\n    soilMeasurements(\n      where: {\n        field: { id: { in: $fieldIds } }\n        measurementDate: { gte: $dateFrom, lte: $dateTo }\n      }\n      orderBy: [{ measurementDate: desc }]\n      skip: $skip\n      take: $take\n    ) {\n      id\n      measurementDate\n      sensorId\n      ph\n      organicMatter\n      nitrogen\n      moisture\n      temperature\n      field { id name }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetNPPBaselines(\n    $fieldId: ID!\n    $yearGte: Int\n    $yearLte: Int\n    $skip: Int!\n    $take: Int!\n  ) {\n    netPrimaryProductivities(\n      where: {\n        field: { id: { equals: $fieldId } }\n        year: { gte: $yearGte, lte: $yearLte }\n      }\n      orderBy: { year: desc }\n      skip: $skip\n      take: $take\n    ) {\n      id\n      year\n      meanNPP\n      totalNPP\n      co2e\n      recordedAt\n    }\n  }\n"): (typeof documents)["\n  query GetNPPBaselines(\n    $fieldId: ID!\n    $yearGte: Int\n    $yearLte: Int\n    $skip: Int!\n    $take: Int!\n  ) {\n    netPrimaryProductivities(\n      where: {\n        field: { id: { equals: $fieldId } }\n        year: { gte: $yearGte, lte: $yearLte }\n      }\n      orderBy: { year: desc }\n      skip: $skip\n      take: $take\n    ) {\n      id\n      year\n      meanNPP\n      totalNPP\n      co2e\n      recordedAt\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetLandCoverStats(\n    $fieldId: ID!\n    $yearGte: Int\n    $yearLte: Int\n    $skip: Int!\n    $take: Int!\n  ) {\n    landCoverStatistics(\n      where: {\n        field: { id: { equals: $fieldId } }\n        year: { gte: $yearGte, lte: $yearLte }\n      }\n      orderBy: { year: desc }\n      skip: $skip\n      take: $take\n    ) {\n      id\n      year\n      breakdown\n      imageUrl\n      recordedAt\n    }\n  }\n"): (typeof documents)["\n  query GetLandCoverStats(\n    $fieldId: ID!\n    $yearGte: Int\n    $yearLte: Int\n    $skip: Int!\n    $take: Int!\n  ) {\n    landCoverStatistics(\n      where: {\n        field: { id: { equals: $fieldId } }\n        year: { gte: $yearGte, lte: $yearLte }\n      }\n      orderBy: { year: desc }\n      skip: $skip\n      take: $take\n    ) {\n      id\n      year\n      breakdown\n      imageUrl\n      recordedAt\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetSoilCarbonStocks(\n    $fieldId: ID!\n    $yearGte: Int\n    $yearLte: Int\n    $skip: Int!\n    $take: Int!\n  ) {\n    soilOrganicCarbonStocks(\n      where: {\n        field: { id: { equals: $fieldId } }\n        year: { gte: $yearGte, lte: $yearLte }\n      }\n      orderBy: { year: desc }\n      skip: $skip\n      take: $take\n    ) {\n      id\n      year\n      meanSOC\n      totalSOC\n      imageUrl\n      recordedAt\n    }\n  }\n"): (typeof documents)["\n  query GetSoilCarbonStocks(\n    $fieldId: ID!\n    $yearGte: Int\n    $yearLte: Int\n    $skip: Int!\n    $take: Int!\n  ) {\n    soilOrganicCarbonStocks(\n      where: {\n        field: { id: { equals: $fieldId } }\n        year: { gte: $yearGte, lte: $yearLte }\n      }\n      orderBy: { year: desc }\n      skip: $skip\n      take: $take\n    ) {\n      id\n      year\n      meanSOC\n      totalSOC\n      imageUrl\n      recordedAt\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetSoilMoisture(\n    $fieldId: ID!\n    $dateFrom: DateTime\n    $dateTo: DateTime\n    $skip: Int!\n    $take: Int!\n  ) {\n    soilMoistureObservations(\n      where: {\n        field: { id: { equals: $fieldId } }\n        date: { gte: $dateFrom, lte: $dateTo }\n      }\n      orderBy: { date: asc }\n      skip: $skip\n      take: $take\n    ) {\n      id\n      date\n      meanMoisture\n      imageUrl\n      recordedAt\n    }\n  }\n"): (typeof documents)["\n  query GetSoilMoisture(\n    $fieldId: ID!\n    $dateFrom: DateTime\n    $dateTo: DateTime\n    $skip: Int!\n    $take: Int!\n  ) {\n    soilMoistureObservations(\n      where: {\n        field: { id: { equals: $fieldId } }\n        date: { gte: $dateFrom, lte: $dateTo }\n      }\n      orderBy: { date: asc }\n      skip: $skip\n      take: $take\n    ) {\n      id\n      date\n      meanMoisture\n      imageUrl\n      recordedAt\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\nquery GetLandPractices($fieldId: ID!) {\n  sustainablePractices(\n    where: {\n      events: { some: { field: { id: { equals: $fieldId } } } }\n    }\n    orderBy: { name: asc }\n  ) {\n    id\n    name\n    category { name }\n    description\n  }\n}\n"): (typeof documents)["\nquery GetLandPractices($fieldId: ID!) {\n  sustainablePractices(\n    where: {\n      events: { some: { field: { id: { equals: $fieldId } } } }\n    }\n    orderBy: { name: asc }\n  ) {\n    id\n    name\n    category { name }\n    description\n  }\n}\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetPracticeEvents($fieldId: ID!) {\n    sustainablePracticeEvents(\n      where: { field: { id: { equals: $fieldId } } }\n      orderBy: { appliedDate: asc }\n    ) {\n      practice {\n        id\n        name\n      }\n      appliedDate\n      parameters\n    }\n  }\n"): (typeof documents)["\n  query GetPracticeEvents($fieldId: ID!) {\n    sustainablePracticeEvents(\n      where: { field: { id: { equals: $fieldId } } }\n      orderBy: { appliedDate: asc }\n    ) {\n      practice {\n        id\n        name\n      }\n      appliedDate\n      parameters\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetSustainablePractices {\n    sustainablePractices(orderBy: { name: asc }) {\n      id\n      name\n      description\n    }\n  }\n"): (typeof documents)["\n  query GetSustainablePractices {\n    sustainablePractices(orderBy: { name: asc }) {\n      id\n      name\n      description\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation CreateSustainablePracticeEvent(\n    $practiceId: ID!\n    $fieldId: ID!\n    $parameters: JSON\n    $targetImpact: Float\n    $appliedDate: DateTime!\n  ) {\n    createSustainablePracticeEvent(\n      data: {\n        practice:    { connect: { id: $practiceId } }\n        field:        { connect: { id: $fieldId } }\n        parameters:  $parameters\n        targetImpact: $targetImpact\n        appliedDate: $appliedDate\n      }\n    ) {\n      id\n      field {\n        id\n        name\n      }\n      practice {\n        id\n        name\n      }\n      parameters\n      appliedDate\n    }\n  }\n"): (typeof documents)["\n  mutation CreateSustainablePracticeEvent(\n    $practiceId: ID!\n    $fieldId: ID!\n    $parameters: JSON\n    $targetImpact: Float\n    $appliedDate: DateTime!\n  ) {\n    createSustainablePracticeEvent(\n      data: {\n        practice:    { connect: { id: $practiceId } }\n        field:        { connect: { id: $fieldId } }\n        parameters:  $parameters\n        targetImpact: $targetImpact\n        appliedDate: $appliedDate\n      }\n    ) {\n      id\n      field {\n        id\n        name\n      }\n      practice {\n        id\n        name\n      }\n      parameters\n      appliedDate\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetPracticeEventsForPractice(\n    $fieldId: ID!\n    $practiceId: ID!\n    $dateFrom: DateTime\n    $dateTo: DateTime\n  ) {\n    sustainablePracticeEvents(\n      where: {\n        field: { id: { equals: $fieldId } }\n        practice: { id: { equals: $practiceId } }\n        appliedDate: { gte: $dateFrom, lte: $dateTo }\n      }\n      orderBy: { appliedDate: desc }\n    ) {\n      id\n      parameters\n      targetImpact\n      appliedDate\n      createdAt\n    }\n  }\n"): (typeof documents)["\n  query GetPracticeEventsForPractice(\n    $fieldId: ID!\n    $practiceId: ID!\n    $dateFrom: DateTime\n    $dateTo: DateTime\n  ) {\n    sustainablePracticeEvents(\n      where: {\n        field: { id: { equals: $fieldId } }\n        practice: { id: { equals: $practiceId } }\n        appliedDate: { gte: $dateFrom, lte: $dateTo }\n      }\n      orderBy: { appliedDate: desc }\n    ) {\n      id\n      parameters\n      targetImpact\n      appliedDate\n      createdAt\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetOffsetsForPractices($practiceIds: [ID!]!) {\n    carbonOffsetFactors(\n      where: { sustainablePractice: { id: { in: $practiceIds } } }\n    ) {\n      id\n      min\n      max\n      cropType { id name }\n      sustainablePractice { id }\n    }\n  }\n"): (typeof documents)["\n  query GetOffsetsForPractices($practiceIds: [ID!]!) {\n    carbonOffsetFactors(\n      where: { sustainablePractice: { id: { in: $practiceIds } } }\n    ) {\n      id\n      min\n      max\n      cropType { id name }\n      sustainablePractice { id }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetPosts {\n    posts(where: { status: { equals: \"published\" } }, orderBy: { publishedAt: desc }) {\n      id\n      title\n      slug\n      excerpt\n      coverImage {\n        url\n      }\n      publishedAt\n      author {\n        name\n        avatar {\n          url\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetPosts {\n    posts(where: { status: { equals: \"published\" } }, orderBy: { publishedAt: desc }) {\n      id\n      title\n      slug\n      excerpt\n      coverImage {\n        url\n      }\n      publishedAt\n      author {\n        name\n        avatar {\n          url\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetPostBySlug($slug: String!) {\n    posts(where: { slug: { equals: $slug } }) {\n      id\n      title\n      content\n      coverImage { url }\n      publishedAt\n      author { name, avatar { url } }\n      tags { name, slug }\n      category { name }\n    }\n  }\n"): (typeof documents)["\n  query GetPostBySlug($slug: String!) {\n    posts(where: { slug: { equals: $slug } }) {\n      id\n      title\n      content\n      coverImage { url }\n      publishedAt\n      author { name, avatar { url } }\n      tags { name, slug }\n      category { name }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation CreateSubscriber($email: String!) {\n    createNewsletterSubscriber(data: { email: $email }) {\n      id\n      email\n      subscribedAt\n    }\n  }\n"): (typeof documents)["\n  mutation CreateSubscriber($email: String!) {\n    createNewsletterSubscriber(data: { email: $email }) {\n      id\n      email\n      subscribedAt\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query SubscriberByEmail($email: String!) {\n    newsletterSubscribers(where: { email: { equals: $email } }) {\n      id\n      email\n      isActive\n    }\n  }\n"): (typeof documents)["\n  query SubscriberByEmail($email: String!) {\n    newsletterSubscribers(where: { email: { equals: $email } }) {\n      id\n      email\n      isActive\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation UpdateSubscriber($id: ID!, $isActive: Boolean!) {\n    updateNewsletterSubscriber(\n      where: { id: $id }\n      data:  { isActive: $isActive }\n    ) {\n      id\n      isActive\n    }\n  }\n"): (typeof documents)["\n  mutation UpdateSubscriber($id: ID!, $isActive: Boolean!) {\n    updateNewsletterSubscriber(\n      where: { id: $id }\n      data:  { isActive: $isActive }\n    ) {\n      id\n      isActive\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetJobOpenings {\n    jobOpenings {\n      id\n      title\n      department\n      location\n      employmentType\n      seniority\n    }\n  }\n"): (typeof documents)["\n  query GetJobOpenings {\n    jobOpenings {\n      id\n      title\n      department\n      location\n      employmentType\n      seniority\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetJobOpening($where: JobOpeningWhereUniqueInput!) {\n    jobOpening(where: $where) {\n      id\n      title\n      department\n      location\n      employmentType\n      seniority\n      description\n    }\n  }\n"): (typeof documents)["\n  query GetJobOpening($where: JobOpeningWhereUniqueInput!) {\n    jobOpening(where: $where) {\n      id\n      title\n      department\n      location\n      employmentType\n      seniority\n      description\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation ApplyJob($data: JobCandidateCreateInput!) {\n    createJobCandidate(data: $data) {\n      id\n    }\n  }\n"): (typeof documents)["\n  mutation ApplyJob($data: JobCandidateCreateInput!) {\n    createJobCandidate(data: $data) {\n      id\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetReferralPartners {\n    referralPartners(orderBy: { createdAt: desc }) {\n      id\n      name\n      type\n      commission_pct\n      contactEmail\n      ownerUser { id } \n    }\n  }\n"): (typeof documents)["\n  query GetReferralPartners {\n    referralPartners(orderBy: { createdAt: desc }) {\n      id\n      name\n      type\n      commission_pct\n      contactEmail\n      ownerUser { id } \n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation CreateReferralPartner(\n    $name: String!\n    $type: String!\n    $contactEmail: String!\n    $commissionPct: Float!\n  ) {\n    createReferralPartner(\n      data: {\n        name: $name\n        type: $type\n        contactEmail: $contactEmail\n        commission_pct: $commissionPct\n      }\n    ) {\n      id\n      name\n    }\n  }\n"): (typeof documents)["\n  mutation CreateReferralPartner(\n    $name: String!\n    $type: String!\n    $contactEmail: String!\n    $commissionPct: Float!\n  ) {\n    createReferralPartner(\n      data: {\n        name: $name\n        type: $type\n        contactEmail: $contactEmail\n        commission_pct: $commissionPct\n      }\n    ) {\n      id\n      name\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation CreateReferralPartnerForUser(\n    $name: String!\n    $type: String!\n    $contactEmail: String!\n    $commissionPct: Float!\n    $ownerUserId: ID!\n  ) {\n    createReferralPartner(\n      data: {\n        name          : $name\n        type          : $type\n        contactEmail  : $contactEmail\n        commission_pct: $commissionPct\n        ownerUser     : { connect: { id: $ownerUserId } }\n      }\n    ) {\n      id\n    }\n  }\n"): (typeof documents)["\n  mutation CreateReferralPartnerForUser(\n    $name: String!\n    $type: String!\n    $contactEmail: String!\n    $commissionPct: Float!\n    $ownerUserId: ID!\n  ) {\n    createReferralPartner(\n      data: {\n        name          : $name\n        type          : $type\n        contactEmail  : $contactEmail\n        commission_pct: $commissionPct\n        ownerUser     : { connect: { id: $ownerUserId } }\n      }\n    ) {\n      id\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query SearchUsers($query: String!) {\n    users(\n      where: {\n        OR: [\n          { name:  { contains: $query, mode: insensitive } }\n          { email: { contains: $query, mode: insensitive } }\n        ]\n      }\n      take: 10\n    ) {\n      id\n      name\n      email\n    }\n  }\n"): (typeof documents)["\n  query SearchUsers($query: String!) {\n    users(\n      where: {\n        OR: [\n          { name:  { contains: $query, mode: insensitive } }\n          { email: { contains: $query, mode: insensitive } }\n        ]\n      }\n      take: 10\n    ) {\n      id\n      name\n      email\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetPartnerMemberships {\n    memberships(where:{ role: { equals: \"partner\" } }) {\n      id\n      user { id name email }\n    }\n  }\n"): (typeof documents)["\n  query GetPartnerMemberships {\n    memberships(where:{ role: { equals: \"partner\" } }) {\n      id\n      user { id name email }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation AddPartnerMembership($userId: ID!) {\n    createMembership(\n      data: {\n        user: { connect: { id: $userId } }\n        role: \"partner\"\n      }\n    ) { id }\n  }\n"): (typeof documents)["\n  mutation AddPartnerMembership($userId: ID!) {\n    createMembership(\n      data: {\n        user: { connect: { id: $userId } }\n        role: \"partner\"\n      }\n    ) { id }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation RemovePartnerMembership($id: ID!) {\n    deleteMembership(where:{ id:$id }) { id }\n  }\n"): (typeof documents)["\n  mutation RemovePartnerMembership($id: ID!) {\n    deleteMembership(where:{ id:$id }) { id }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetReferralCampaigns {\n    referralCampaigns(orderBy: { startDate: desc }) {\n      id\n      code\n      discount_pct\n      startDate\n      endDate\n      partner { id name }\n    }\n  }\n"): (typeof documents)["\n  query GetReferralCampaigns {\n    referralCampaigns(orderBy: { startDate: desc }) {\n      id\n      code\n      discount_pct\n      startDate\n      endDate\n      partner { id name }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation CreateReferralCampaign(\n    $partnerId: ID!\n    $code: String!\n    $discountPct: Float!\n    $startDate: DateTime\n    $endDate: DateTime\n  ) {\n    createReferralCampaign(\n      data: {\n        partner: { connect: { id: $partnerId } }\n        code: $code\n        discount_pct: $discountPct\n        startDate: $startDate\n        endDate: $endDate\n      }\n    ) {\n      id\n      code\n    }\n  }\n"): (typeof documents)["\n  mutation CreateReferralCampaign(\n    $partnerId: ID!\n    $code: String!\n    $discountPct: Float!\n    $startDate: DateTime\n    $endDate: DateTime\n  ) {\n    createReferralCampaign(\n      data: {\n        partner: { connect: { id: $partnerId } }\n        code: $code\n        discount_pct: $discountPct\n        startDate: $startDate\n        endDate: $endDate\n      }\n    ) {\n      id\n      code\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query FindActiveReferralCampaign($code: String!, $now: DateTime!) {\n    referralCampaigns(\n      where: {\n        code: { equals: $code }\n        AND: [\n          { OR: [\n              { startDate: { equals: null } }\n              { startDate: { lte: $now } }\n            ]\n          }\n          { OR: [\n              { endDate: { equals: null } }\n              { endDate: { gte: $now } }\n            ]\n          }\n        ]\n      }\n      take: 1\n    ) {\n      id\n      discount_pct\n    }\n  }\n"): (typeof documents)["\n  query FindActiveReferralCampaign($code: String!, $now: DateTime!) {\n    referralCampaigns(\n      where: {\n        code: { equals: $code }\n        AND: [\n          { OR: [\n              { startDate: { equals: null } }\n              { startDate: { lte: $now } }\n            ]\n          }\n          { OR: [\n              { endDate: { equals: null } }\n              { endDate: { gte: $now } }\n            ]\n          }\n        ]\n      }\n      take: 1\n    ) {\n      id\n      discount_pct\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation UpdateReferralPartner($id: ID!, $commissionPct: Float!) {\n    updateReferralPartner(\n      where:{ id:$id }\n      data :{ commission_pct:$commissionPct }\n    ){ id commission_pct }\n  }\n"): (typeof documents)["\n  mutation UpdateReferralPartner($id: ID!, $commissionPct: Float!) {\n    updateReferralPartner(\n      where:{ id:$id }\n      data :{ commission_pct:$commissionPct }\n    ){ id commission_pct }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation CreateReferralRedemption(\n    $campaignId: ID!\n    $userId:      ID!\n    $signup:      DateTime!\n    $discountValue: Float!\n  ) {\n    createReferralRedemption(\n      data: {\n        campaign      : { connect: { id: $campaignId } }\n        farmerUser    : { connect: { id: $userId } }\n        signupDate    : $signup\n        discountValue : $discountValue\n      }\n    ) {\n      id\n    }\n  }\n"): (typeof documents)["\n  mutation CreateReferralRedemption(\n    $campaignId: ID!\n    $userId:      ID!\n    $signup:      DateTime!\n    $discountValue: Float!\n  ) {\n    createReferralRedemption(\n      data: {\n        campaign      : { connect: { id: $campaignId } }\n        farmerUser    : { connect: { id: $userId } }\n        signupDate    : $signup\n        discountValue : $discountValue\n      }\n    ) {\n      id\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation DeleteReferralCampaign($id: ID!) {\n    deleteReferralCampaign(where: { id: $id }) { id }\n  }\n"): (typeof documents)["\n  mutation DeleteReferralCampaign($id: ID!) {\n    deleteReferralCampaign(where: { id: $id }) { id }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query CheckPartnerMembership($userId: ID!) {\n    memberships(\n      where: {\n        user: { id: { equals: $userId } }\n        role: { equals: \"partner\" }\n      }\n      take: 1\n    ) {\n      id\n    }\n  }\n"): (typeof documents)["\n  query CheckPartnerMembership($userId: ID!) {\n    memberships(\n      where: {\n        user: { id: { equals: $userId } }\n        role: { equals: \"partner\" }\n      }\n      take: 1\n    ) {\n      id\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetPartnerDashboard($userId: ID!) {\n    referralPartners(where: { ownerUser: { id: { equals: $userId } } }) {\n      id\n      name\n      commission_pct\n      campaigns(orderBy: { startDate: desc }) {\n        id\n        code\n        discount_pct\n        startDate\n        endDate\n        redemptions {\n          id\n          discountValue\n          signupDate\n          farmerUser  { id name }\n          subscription { id status }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetPartnerDashboard($userId: ID!) {\n    referralPartners(where: { ownerUser: { id: { equals: $userId } } }) {\n      id\n      name\n      commission_pct\n      campaigns(orderBy: { startDate: desc }) {\n        id\n        code\n        discount_pct\n        startDate\n        endDate\n        redemptions {\n          id\n          discountValue\n          signupDate\n          farmerUser  { id name }\n          subscription { id status }\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query GetMessageTemplates {\n      messageTemplates(orderBy: { createdAt: desc }) {\n        id\n        title\n        bodyMarkdown\n        type\n        urgency\n        mediaId\n        ctaLabel\n        channelMask\n        createdAt\n      }\n    }\n  "): (typeof documents)["\n    query GetMessageTemplates {\n      messageTemplates(orderBy: { createdAt: desc }) {\n        id\n        title\n        bodyMarkdown\n        type\n        urgency\n        mediaId\n        ctaLabel\n        channelMask\n        createdAt\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation CreateMessageTemplate(\n      $title: String!\n      $bodyMarkdown: String\n      $type: String!\n      $urgency: String!\n      $mediaId: String\n      $ctaLabel: String\n      $ctaLink: String\n      $channelMask: JSON\n      $requireAcknowledgement: Boolean\n      $maxViews: Int\n      $startAt: DateTime\n      $endAt: DateTime\n    ) {\n      createMessageTemplate(\n        data: {\n          title:                 $title\n          bodyMarkdown:          $bodyMarkdown\n          type:                  $type\n          urgency:               $urgency\n          mediaId:               $mediaId\n          ctaLabel:              $ctaLabel\n          ctaLink:               $ctaLink\n          channelMask:           $channelMask\n          requireAcknowledgement:$requireAcknowledgement\n          maxViews:              $maxViews\n          startAt:               $startAt\n          endAt:                 $endAt\n        }\n      ) {\n        id\n      }\n    }\n  "): (typeof documents)["\n    mutation CreateMessageTemplate(\n      $title: String!\n      $bodyMarkdown: String\n      $type: String!\n      $urgency: String!\n      $mediaId: String\n      $ctaLabel: String\n      $ctaLink: String\n      $channelMask: JSON\n      $requireAcknowledgement: Boolean\n      $maxViews: Int\n      $startAt: DateTime\n      $endAt: DateTime\n    ) {\n      createMessageTemplate(\n        data: {\n          title:                 $title\n          bodyMarkdown:          $bodyMarkdown\n          type:                  $type\n          urgency:               $urgency\n          mediaId:               $mediaId\n          ctaLabel:              $ctaLabel\n          ctaLink:               $ctaLink\n          channelMask:           $channelMask\n          requireAcknowledgement:$requireAcknowledgement\n          maxViews:              $maxViews\n          startAt:               $startAt\n          endAt:                 $endAt\n        }\n      ) {\n        id\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation DeleteMessageTemplate($id: ID!) {\n      deleteMessageTemplate(where: { id: $id }) {\n        id\n      }\n    }\n  "): (typeof documents)["\n    mutation DeleteMessageTemplate($id: ID!) {\n      deleteMessageTemplate(where: { id: $id }) {\n        id\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetMessageDeliveries(\n    $where: MessageDeliveryWhereInput\n    $take:  Int!\n    $skip:  Int!\n  ) {\n    messageDeliveries(\n      where:   $where\n      orderBy: { createdAt: desc }\n      take:    $take\n      skip:    $skip\n    ) {\n      id\n      status\n      urgency\n      views\n      lastShownAt\n      createdAt\n\n      user     { email }\n      template { title type }\n      clicks   { id }\n    }\n  }\n"): (typeof documents)["\n  query GetMessageDeliveries(\n    $where: MessageDeliveryWhereInput\n    $take:  Int!\n    $skip:  Int!\n  ) {\n    messageDeliveries(\n      where:   $where\n      orderBy: { createdAt: desc }\n      take:    $take\n      skip:    $skip\n    ) {\n      id\n      status\n      urgency\n      views\n      lastShownAt\n      createdAt\n\n      user     { email }\n      template { title type }\n      clicks   { id }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetMessageStats {\n    sent:       messageDeliveriesCount\n    read:       messageDeliveriesCount(where: { status: { equals: \"read\" } })\n    dismissed:  messageDeliveriesCount(where: { status: { equals: \"dismissed\" } })\n  }\n"): (typeof documents)["\n  query GetMessageStats {\n    sent:       messageDeliveriesCount\n    read:       messageDeliveriesCount(where: { status: { equals: \"read\" } })\n    dismissed:  messageDeliveriesCount(where: { status: { equals: \"dismissed\" } })\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetMessageDetail($id: ID!) {\n    messageDelivery(where: { id: $id }) {\n      id\n      status\n      createdAt\n      template {\n        title\n        bodyMarkdown\n        mediaId\n        ctaLabel\n        ctaLink\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetMessageDetail($id: ID!) {\n    messageDelivery(where: { id: $id }) {\n      id\n      status\n      createdAt\n      template {\n        title\n        bodyMarkdown\n        mediaId\n        ctaLabel\n        ctaLink\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetUnreadCount {\n    deliveriesUnread: messageDeliveriesCount(\n      where: { status: { equals: \"unread\" } }\n    )\n    alertsUnread: alertsCount(\n      where: { status: { equals: \"open\" } }\n    )\n  }\n"): (typeof documents)["\n  query GetUnreadCount {\n    deliveriesUnread: messageDeliveriesCount(\n      where: { status: { equals: \"unread\" } }\n    )\n    alertsUnread: alertsCount(\n      where: { status: { equals: \"open\" } }\n    )\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetInbox {\n    alerts(\n      where:{ status:{ equals:\"open\" } }\n      orderBy:{ createdAt:desc }\n      take:10\n    ){ id message createdAt }\n\n    messageDeliveries(\n      where:{ status:{ equals:\"unread\" } }\n      orderBy:{ createdAt:desc }\n      take:10\n    ){\n      id createdAt\n      template{ title }\n    }\n  }\n"): (typeof documents)["\n  query GetInbox {\n    alerts(\n      where:{ status:{ equals:\"open\" } }\n      orderBy:{ createdAt:desc }\n      take:10\n    ){ id message createdAt }\n\n    messageDeliveries(\n      where:{ status:{ equals:\"unread\" } }\n      orderBy:{ createdAt:desc }\n      take:10\n    ){\n      id createdAt\n      template{ title }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation MarkDeliveryReadModal($id: ID!) {\n    updateMessageDelivery(where: { id: $id }, data: { status: \"read\" }) {\n      id\n    }\n  }\n"): (typeof documents)["\n  mutation MarkDeliveryReadModal($id: ID!) {\n    updateMessageDelivery(where: { id: $id }, data: { status: \"read\" }) {\n      id\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation MarkDeliveryRemind($id: ID!, $ts: DateTime!) {\n    updateMessageDelivery(\n      where: { id: $id }\n      data : { lastShownAt: $ts }\n    ) { id }\n  }\n"): (typeof documents)["\n  mutation MarkDeliveryRemind($id: ID!, $ts: DateTime!) {\n    updateMessageDelivery(\n      where: { id: $id }\n      data : { lastShownAt: $ts }\n    ) { id }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation MarkAlertRead($id:ID!){\n    updateAlert(\n      where:{ id:$id }\n      data :{ status:\"dismissed\" }\n    ){ id }\n  }\n"): (typeof documents)["\n  mutation MarkAlertRead($id:ID!){\n    updateAlert(\n      where:{ id:$id }\n      data :{ status:\"dismissed\" }\n    ){ id }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation UpdateMessageDelivery($id: ID!, $data: MessageDeliveryUpdateInput!) {\n    updateMessageDelivery(where: { id: $id }, data: $data) {\n      id\n    }\n  }\n"): (typeof documents)["\n  mutation UpdateMessageDelivery($id: ID!, $data: MessageDeliveryUpdateInput!) {\n    updateMessageDelivery(where: { id: $id }, data: $data) {\n      id\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation CreateMessageDelivery($templateId: ID!, $userId: ID!) {\n    createMessageDelivery(\n      data:{\n        template:{ connect:{ id:$templateId } }\n        user:    { connect:{ id:$userId } }\n      }\n    ){ id }\n  }\n"): (typeof documents)["\n  mutation CreateMessageDelivery($templateId: ID!, $userId: ID!) {\n    createMessageDelivery(\n      data:{\n        template:{ connect:{ id:$templateId } }\n        user:    { connect:{ id:$userId } }\n      }\n    ){ id }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetReceivedMessages(\n    $where: MessageDeliveryWhereInput!\n    $take:  Int!\n    $skip:  Int!\n    $search: String\n  ) {\n    messageDeliveries(\n      where: {\n        AND: [\n          $where\n          { template: { title: { contains: $search, mode: insensitive } } }\n        ]\n      }\n      orderBy: { createdAt: desc }\n      take:    $take\n      skip:    $skip\n    ) {\n      id\n      status\n      views\n      lastShownAt\n      createdAt\n      template { id title mediaId }\n    }\n\n    messageDeliveriesCount(\n      where: {\n        AND: [\n          $where\n          { template: { title: { contains: $search, mode: insensitive } } }\n        ]\n      }\n    )\n  }\n"): (typeof documents)["\n  query GetReceivedMessages(\n    $where: MessageDeliveryWhereInput!\n    $take:  Int!\n    $skip:  Int!\n    $search: String\n  ) {\n    messageDeliveries(\n      where: {\n        AND: [\n          $where\n          { template: { title: { contains: $search, mode: insensitive } } }\n        ]\n      }\n      orderBy: { createdAt: desc }\n      take:    $take\n      skip:    $skip\n    ) {\n      id\n      status\n      views\n      lastShownAt\n      createdAt\n      template { id title mediaId }\n    }\n\n    messageDeliveriesCount(\n      where: {\n        AND: [\n          $where\n          { template: { title: { contains: $search, mode: insensitive } } }\n        ]\n      }\n    )\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetSentMessages(\n    $where: MessageTemplateWhereInput!\n    $take:  Int!\n    $skip:  Int!\n    $search: String\n  ) {\n    messageTemplates(\n      where: {\n        AND: [$where, { title: { contains: $search, mode: insensitive } }]\n      }\n      orderBy: { createdAt: desc }\n      take:    $take\n      skip:    $skip\n    ) {\n      id\n      title\n      type\n      urgency\n      createdAt\n    }\n\n    messageTemplatesCount(\n      where: {\n        AND: [$where, { title: { contains: $search, mode: insensitive } }]\n      }\n    )\n  }\n"): (typeof documents)["\n  query GetSentMessages(\n    $where: MessageTemplateWhereInput!\n    $take:  Int!\n    $skip:  Int!\n    $search: String\n  ) {\n    messageTemplates(\n      where: {\n        AND: [$where, { title: { contains: $search, mode: insensitive } }]\n      }\n      orderBy: { createdAt: desc }\n      take:    $take\n      skip:    $skip\n    ) {\n      id\n      title\n      type\n      urgency\n      createdAt\n    }\n\n    messageTemplatesCount(\n      where: {\n        AND: [$where, { title: { contains: $search, mode: insensitive } }]\n      }\n    )\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetAlerts(\n    $where: AlertWhereInput!\n    $take : Int!\n    $skip : Int!\n    $search: String\n  ) {\n    alerts(\n      where: {\n        AND: [\n          $where\n          { message: { contains: $search, mode: insensitive } }\n        ]\n      }\n      orderBy: { createdAt: desc }\n      take:    $take\n      skip:    $skip\n    ) {\n      id\n      message\n      urgency\n      status\n      createdAt\n    }\n\n    alertsCount(\n      where: {\n        AND: [\n          $where\n          { message: { contains: $search, mode: insensitive } }\n        ]\n      }\n    )\n  }\n"): (typeof documents)["\n  query GetAlerts(\n    $where: AlertWhereInput!\n    $take : Int!\n    $skip : Int!\n    $search: String\n  ) {\n    alerts(\n      where: {\n        AND: [\n          $where\n          { message: { contains: $search, mode: insensitive } }\n        ]\n      }\n      orderBy: { createdAt: desc }\n      take:    $take\n      skip:    $skip\n    ) {\n      id\n      message\n      urgency\n      status\n      createdAt\n    }\n\n    alertsCount(\n      where: {\n        AND: [\n          $where\n          { message: { contains: $search, mode: insensitive } }\n        ]\n      }\n    )\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetAlertDetail($id: ID!) {\n    alert(where: { id: $id }) {\n      id\n      message\n      urgency\n      status\n      due_date\n      createdAt\n    }\n  }\n"): (typeof documents)["\n  query GetAlertDetail($id: ID!) {\n    alert(where: { id: $id }) {\n      id\n      message\n      urgency\n      status\n      due_date\n      createdAt\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetUsersByRole($role: String!) {\n    memberships(where: { role: { equals: $role } }) {\n      user { id email name }\n    }\n  }\n"): (typeof documents)["\n  query GetUsersByRole($role: String!) {\n    memberships(where: { role: { equals: $role } }) {\n      user { id email name }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query OrgByUser($userId: ID!) {\n    user(where: { id: $userId }) {\n      memberships {\n        organisation {\n          id\n          name\n          stripeCustomerId\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query OrgByUser($userId: ID!) {\n    user(where: { id: $userId }) {\n      memberships {\n        organisation {\n          id\n          name\n          stripeCustomerId\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation SetOrgCust($orgId: ID!, $custId: String!) {\n    updateOrganisation(\n      where: { id: $orgId }\n      data:  { stripeCustomerId: $custId }\n    ) { id }\n  }\n"): (typeof documents)["\n  mutation SetOrgCust($orgId: ID!, $custId: String!) {\n    updateOrganisation(\n      where: { id: $orgId }\n      data:  { stripeCustomerId: $custId }\n    ) { id }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation CreateSubscription($data: SubscriptionCreateInput!) {\n    createSubscription(data: $data) { id }\n  }\n"): (typeof documents)["\n  mutation CreateSubscription($data: SubscriptionCreateInput!) {\n    createSubscription(data: $data) { id }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\nmutation UpdateSub(\n  $orgId: ID!\n  $stripeSubId: String!\n  $stripePriceId: String!\n  $status: String!\n  $start: DateTime!\n  $end: DateTime!\n) {\n  updateSubscription(\n    where: { stripeSubscriptionId: $stripeSubId }\n    data: {\n      organisation:         { connect: { id: $orgId } }\n      stripeSubscriptionId: $stripeSubId\n      status:               $status\n      startDate:            $start        # only if you really want to overwrite it\n      currentPeriodEnd:     $end\n    }\n  ) {\n    id\n    status\n  }\n}\n\n"): (typeof documents)["\nmutation UpdateSub(\n  $orgId: ID!\n  $stripeSubId: String!\n  $stripePriceId: String!\n  $status: String!\n  $start: DateTime!\n  $end: DateTime!\n) {\n  updateSubscription(\n    where: { stripeSubscriptionId: $stripeSubId }\n    data: {\n      organisation:         { connect: { id: $orgId } }\n      stripeSubscriptionId: $stripeSubId\n      status:               $status\n      startDate:            $start        # only if you really want to overwrite it\n      currentPeriodEnd:     $end\n    }\n  ) {\n    id\n    status\n  }\n}\n\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetPlans {\n    plans {\n      id\n      key\n      label\n      features\n      activePrice {\n        id\n        amount\n        currency\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetPlans {\n    plans {\n      id\n      key\n      label\n      features\n      activePrice {\n        id\n        amount\n        currency\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query FindActivePrice($key: String!) {\n    plan(where: { key: $key }) {\n      id\n      activePrice {\n        id\n        stripePriceId\n      }\n    }\n  }\n"): (typeof documents)["\n  query FindActivePrice($key: String!) {\n    plan(where: { key: $key }) {\n      id\n      activePrice {\n        id\n        stripePriceId\n      }\n    }\n  }\n"];

export function graphql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<  infer TType,  any>  ? TType  : never;